
simple_monitor.elf:     file format elf32-littlearm

SYMBOL TABLE:
08000000 l    d  .isr_vector	00000000 .isr_vector
080001c0 l    d  .text	00000000 .text
0800c710 l    d  .rodata	00000000 .rodata
0801c1a4 l    d  .ARM	00000000 .ARM
0801c1ac l    d  .init_array	00000000 .init_array
0801c1b4 l    d  .fini_array	00000000 .fini_array
20000000 l    d  .data	00000000 .data
10000000 l    d  .ccmram	00000000 .ccmram
20000c24 l    d  .bss	00000000 .bss
20001dd8 l    d  ._user_heap_stack	00000000 ._user_heap_stack
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
0801cddc l    d  .parsetable	00000000 .parsetable
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .stab	00000000 .stab
00000000 l    d  .stabstr	00000000 .stabstr
00000000 l    df *ABS*	00000000 startup_stm32f303xc.o
f1e0f85f l       *ABS*	00000000 BootRAM
0800c69c l       .text	00000000 LoopCopyDataInit
0800c694 l       .text	00000000 CopyDataInit
0800c6b0 l       .text	00000000 LoopFillZerobss
0800c6aa l       .text	00000000 FillZerobss
0800c6c2 l       .text	00000000 LoopForever
0800c6dc l       .text	00000000 Infinite_Loop
00000000 l    df *ABS*	00000000 crtstuff.c
0800c6f4 l     O .text	00000000 __EH_FRAME_BEGIN__
080001c0 l     F .text	00000000 deregister_tm_clones
080001dc l     F .text	00000000 register_tm_clones
08000200 l     F .text	00000000 __do_global_dtors_aux
20000c24 l       .bss	00000001 completed.1
0801c1b4 l     O .fini_array	00000000 __do_global_dtors_aux_fini_array_entry
08000228 l     F .text	00000000 frame_dummy
20000c28 l       .bss	00000018 object.0
0801c1b0 l     O .init_array	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 mycode.o
00000000 l    df *ABS*	00000000 pt_asm.o
08000288 l       .text	00000000 loop
0800029e l       .text	00000000 exit
080002a4 l       .text	00000000 busy_delay
080002a8 l       .text	00000000 delay_1oop
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 setvbuf.c
00000000 l    df *ABS*	00000000 strcasecmp.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 strtok.c
00000000 l    df *ABS*	00000000 strtok_r.c
00000000 l    df *ABS*	00000000 strtoul.c
08000898 l     F .text	0000013c _strtoul_l.constprop.0
00000000 l    df *ABS*	00000000 vfprintf.c
08001f38 l     F .text	0000006a __sbprintf
0800ccac l     O .rodata	00000010 blanks.1
0800ccbc l     O .rodata	00000010 zeroes.0
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 dtoa.c
080020e0 l     F .text	00000126 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
080032f0 l     F .text	00000004 __fp_lock
08003300 l     F .text	00000004 __fp_unlock
08003304 l     F .text	000000d8 __sinit.part.0
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 lib_a-memcpy.o
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 mprec.c
0800ccd0 l     O .rodata	0000000c p05.0
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 vfprintf.c
08005494 l     F .text	00000076 __sprint_r.part.0
0800616c l     F .text	0000006a __sbprintf
0800cdf8 l     O .rodata	00000010 blanks.1
0800ce08 l     O .rodata	00000010 zeroes.0
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 assert.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
0800634c l     F .text	00000062 _fclose_r.part.0
00000000 l    df *ABS*	00000000 fiprintf.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 locale.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 lib_a-strcmp.o
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_unorddf2.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 getpid.c
00000000 l    df *ABS*	00000000 kill.c
00000000 l    df *ABS*	00000000 _exit.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 mytest.c
00000000 l    df *ABS*	00000000 pt_hook.c
00000000 l    df *ABS*	00000000 monitor.c
00000000 l    df *ABS*	00000000 parser.c
20000c78 l     O .bss	00000004 count.3
20000d1c l     O .bss	00000004 saved.1
200009b8 l     O .data	00000004 buf.2
200009bc l     O .data	00000004 printPrompt.4
0800d257 l     O .rodata	00000006 __FUNCTION__.0
00000000 l    df *ABS*	00000000 dump.c
20000d20 l     O .bss	00000004 address.1
200009c0 l     O .data	00000004 count.0
00000000 l    df *ABS*	00000000 syscall.c
20000d24 l     O .bss	00000004 heap_end.0
00000000 l    df *ABS*	00000000 terminal.c
08007f90 l     F .text	0000007c USBD_CDC_DataIn
20000d28 l     O .bss	00000124 TerminalState
00000000 l    df *ABS*	00000000 decoder.c
080082e4 l     F .text	0000007c Uncompress
20001074 l     O .bss	00000014 buf.0
00000000 l    df *ABS*	00000000 system_stm32f3xx.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal_rcc.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal.c
20001088 l     O .bss	00000004 uwTick
00000000 l    df *ABS*	00000000 stm32f3xx_hal_cortex.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal_gpio.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal_pcd.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal_pcd_ex.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal_i2c.c
0800a250 l     F .text	0000002a I2C_TransferConfig
0800a27a l     F .text	00000098 I2C_IsAcknowledgeFailed
0800a312 l     F .text	00000054 I2C_WaitOnTXISFlagUntilTimeout
0800a366 l     F .text	00000064 I2C_WaitOnFlagUntilTimeout
0800a3ca l     F .text	00000066 I2C_RequestMemoryWrite
0800a430 l     F .text	00000064 I2C_RequestMemoryRead
0800a494 l     F .text	00000050 I2C_WaitOnSTOPFlagUntilTimeout
00000000 l    df *ABS*	00000000 stm32f3xx_hal_spi.c
0800a7be l     F .text	00000094 SPI_WaitFifoStateUntilTimeout
0800a852 l     F .text	00000082 SPI_WaitFlagStateUntilTimeout
0800a8d4 l     F .text	0000004c SPI_EndRxTxTransaction
00000000 l    df *ABS*	00000000 usbd_core.c
00000000 l    df *ABS*	00000000 usbd_ctlreq.c
0800ae70 l     F .text	00000016 USBD_CtlError.constprop.0
2000108c l     O .bss	00000001 cfgidx.0
00000000 l    df *ABS*	00000000 usbd_ioreq.c
00000000 l    df *ABS*	00000000 usbd_cdc.c
0800b23a l     F .text	00000012 USBD_CDC_DataIn
0800b24c l     F .text	00000028 USBD_CDC_EP0_RxReady
0800b274 l     F .text	0000000c USBD_CDC_GetFSCfgDesc
0800b280 l     F .text	0000000c USBD_CDC_GetHSCfgDesc
0800b28c l     F .text	0000000c USBD_CDC_GetOtherSpeedCfgDesc
0800b2a4 l     F .text	0000002e USBD_CDC_DataOut
0800b2d2 l     F .text	00000056 USBD_CDC_Setup
0800b328 l     F .text	0000003a USBD_CDC_DeInit
0800b362 l     F .text	0000008c USBD_CDC_Init
20000a88 l     O .data	0000000a USBD_CDC_DeviceQualifierDesc
00000000 l    df *ABS*	00000000 usbd_conf.c
20001208 l     O .bss	00000230 mem.0
00000000 l    df *ABS*	00000000 usbd_desc.c
0800b6a8 l     F .text	0000002a IntToUnicode
00000000 l    df *ABS*	00000000 usbd_cdc_interface.c
0800b780 l     F .text	00000004 CDC_Itf_DeInit
0800b784 l     F .text	00000048 CDC_Itf_Control
0800b7cc l     F .text	0000001c CDC_Itf_Receive
0800b7e8 l     F .text	00000018 CDC_Itf_Init
00000000 l    df *ABS*	00000000 stm32f3_discovery.c
0800b800 l     F .text	00000088 SPIx_Init
0800b888 l     F .text	00000040 SPIx_WriteRead
0800b8c8 l     F .text	00000074 I2Cx_Init
20001d38 l     O .bss	00000038 I2cHandle
20001d70 l     O .bss	00000060 SpiHandle
00000000 l    df *ABS*	00000000 stm32f3_discovery_accelerometer.c
20001dd0 l     O .bss	00000004 AccelerometerDrv
00000000 l    df *ABS*	00000000 stm32f3_discovery_gyroscope.c
20001dd4 l     O .bss	00000004 GyroscopeDrv
00000000 l    df *ABS*	00000000 lsm303dlhc.c
00000000 l    df *ABS*	00000000 l3gd20.c
00000000 l    df *ABS*	00000000 i3g4250d.c
00000000 l    df *ABS*	00000000 lsm303agr.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0800c6e0 l     F .text	00000014 register_fini
00000000 l    df *ABS*	00000000 crti.o
00000000 l    df *ABS*	00000000 crtn.o
00000000 l    df *ABS*	00000000 STM32F30x_decoder.c
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 impure.c
20000010 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
0801c1b8 l       .fini_array	00000000 __fini_array_end
0801c1b4 l       .fini_array	00000000 __fini_array_start
0801c1b4 l       .init_array	00000000 __init_array_end
0801c1ac l       .init_array	00000000 __preinit_array_end
0801c1ac l       .init_array	00000000 __init_array_start
0801c1ac l       .init_array	00000000 __preinit_array_start
0800c6dc  w    F .text	00000002 RTC_Alarm_IRQHandler
0801889c g     O .rodata	00000008 RTC_BKP19R_fields
0801bfdc g     O .rodata	00000010 APBAHBPrescTable
0801a744 g     O .rodata	00000050 TIM2_SR_fields
08010bec g     O .rodata	00000100 CAN_F10R1_fields
080198b4 g     O .rodata	00000008 TIM16_DMAR_fields
0800043c g     F .text	00000010 putchar
0800c6dc  w    F .text	00000002 TIM8_TRG_COM_IRQHandler
08004e74 g     F .text	00000040 _mprec_log10
080174cc g     O .rodata	00000008 I2C1_RXDR_fields
08007568 g     F .text	0000002c .hidden __aeabi_dcmpun
0800bdcc g     F .text	00000020 LSM303DLHC_AccFilterCmd
0800c6dc  w    F .text	00000002 TIM8_CC_IRQHandler
0801a8ec g     O .rodata	00000030 TIM6_CR1_fields
080173b4 g     O .rodata	00000048 I2C1_ICR_fields
08004f10 g     F .text	00000064 __any_on
08007f88 g     F .text	00000004 _isatty_r
0800cda8 g     O .rodata	00000028 __mprec_tinytens
20000ccc g     O .bss	00000050 input_b
0800752c g     F .text	00000012 .hidden __aeabi_dcmple
0801a6f4 g     O .rodata	00000008 TIM2_PSC_fields
08019abc g     O .rodata	00000028 TIM17_CCMR1_Output_fields
08000684 g     F .text	000000ba strcpy
080150c4 g     O .rodata	00000050 COMP_COMP5_CSR_fields
080078e8 g     F .text	00000010 _getpid
08017524 g     O .rodata	00000008 I2C1_TXDR_fields
0800044c g     F .text	00000068 _puts_r
0800b748 g     F .text	0000001c USBD_VCP_ConfigStrDescriptor
08011dec g     O .rodata	00000100 CAN_F19R1_fields
08007468 g     F .text	0000007a .hidden __cmpdf2
080083b4 g     F .text	00000054 DecodeWriteRegister
0800a124 g     F .text	000000bc HAL_PCD_EP_ClrStall
080197e4 g     O .rodata	00000008 TIM16_CCR1_fields
0800c6dc  w    F .text	00000002 DebugMon_Handler
08007f8c g     F .text	00000004 _lseek_r
0801642c g     O .rodata	00000020 FPU_MVFR1_fields
0800b542 g     F .text	0000001a HAL_PCD_ResetCallback
0800a216 g     F .text	0000001c PCD_WritePMA
080125ec g     O .rodata	00000100 CAN_F22R1_fields
080141ec g     O .rodata	000000e0 CAN_FA1R_fields
20000e50 g     O .bss	00000224 hUSBDDevice
0801a6fc g     O .rodata	00000048 TIM2_SMCR_fields
08017814 g     O .rodata	00000020 NVIC_IPR1_fields
0801ce0c g     O .parsetable	0000000c CmdTestE
08007468 g     F .text	0000007a .hidden __eqdf2
080113ec g     O .rodata	00000100 CAN_F14R1_fields
0801ae3c g     O .rodata	00000008 TIM8_PSC_fields
0800c242 g     F .text	0000001c I3G4250D_ReadID
08019574 g     O .rodata	00000030 TIM15_EGR_fields
0800800c g     F .text	0000004c CmdStats
0800c0a6 g     F .text	0000002e L3GD20_FilterConfig
0800a1e0 g     F .text	00000036 HAL_PCDEx_PMAConfig
0801a794 g     O .rodata	00000140 TIM2_registers
08019514 g     O .rodata	00000058 TIM15_DIER_fields
08015874 g     O .rodata	00000008 DMA1_CMAR3_fields
08016734 g     O .rodata	00000100 GPIOA_BSRR_fields
08015804 g     O .rodata	00000060 DMA1_CCR7_fields
08009854 g     F .text	000001b8 HAL_PCD_EP_Close
0801b354 g     O .rodata	00000008 TSC_IOG6CR_fields
08010724 g     O .rodata	00000028 ADC1_SQR1_fields
08000890 g     F .text	00000006 strtok_r
08006fd8 g     F .text	0000005a .hidden __floatdidf
0801449c g     O .rodata	000000e0 CAN_FS1R_fields
08006c8c g     F .text	0000002c _kill_r
08019eb4 g     O .rodata	00000030 TIM1_CCMR2_Input_fields
08018adc g     O .rodata	00000010 RTC_SHIFTR_fields
0800040c g     F .text	00000028 printf
0800c02a g     F .text	00000040 L3GD20_EnableIT
080148e4 g     O .rodata	00000028 CAN_TI1R_fields
0800acaa g     F .text	00000016 USBD_SetClassConfig
08017754 g     O .rodata	00000020 NVIC_IPR14_fields
0800693c g     F .text	0000003c _wcrtomb_r
0800c6dc  w    F .text	00000002 TIM1_CC_IRQHandler
08009258 g     F .text	00000068 HAL_NVIC_SetPriority
08006a34 g     F .text	0000004c _signal_r
080107dc g     O .rodata	000001b0 ADC1_registers
0800b52a g     F .text	00000010 HAL_PCD_DataInStageCallback
0801a634 g     O .rodata	00000018 TIM2_CR2_fields
080165ac g     O .rodata	00000008 Flash_WRPR_fields
0800546c g     F .text	00000020 __sseek
080034c8 g     F .text	00000008 __sinit
08015624 g     O .rodata	00000060 DMA1_CCR2_fields
080061d8 g     F .text	000000b0 __swbuf_r
0800c6dc  w    F .text	00000002 HardFault_Handler
0801b3ec g     O .rodata	00000100 TSC_IOHCR_fields
0801522c g     O .rodata	00000020 CRC_CR_fields
0800657c g     F .text	00000040 _setlocale_r
080033dc g     F .text	0000002e __sfmoreglue
08017954 g     O .rodata	00000008 NVIC_ISER0_fields
080044d0 g     F .text	00000002 __malloc_unlock
08019364 g     O .rodata	00000008 TIM15_ARR_fields
080188cc g     O .rodata	00000008 RTC_BKP24R_fields
00000400 g       *ABS*	00000000 _Min_Stack_Size
08019fa4 g     O .rodata	00000008 TIM1_CCR3_fields
0801a134 g     O .rodata	00000008 TIM1_DMAR_fields
0801946c g     O .rodata	00000008 TIM15_CCR1_fields
0800c6dc  w    F .text	00000002 USB_HP_IRQHandler
0801ba3c g     O .rodata	00000010 USART1_RTOR_fields
0801821c g     O .rodata	00000070 RCC_AHBENR_fields
0801a5d4 g     O .rodata	00000018 TIM2_CNT_fields
0801752c g     O .rodata	000000b0 I2C1_registers
08007ab0 g     F .text	0000000e SysTick_Handler
08018c24 g     O .rodata	00000008 RTC_WPR_fields
08018aec g     O .rodata	00000008 RTC_SSR_fields
08009494 g     F .text	0000000a HAL_GPIO_WritePin
0801b334 g     O .rodata	00000008 TSC_IOG2CR_fields
0800b446 g     F .text	0000002e USBD_CDC_ReceivePacket
0800c6dc  w    F .text	00000002 PVD_IRQHandler
08015904 g     O .rodata	00000008 DMA1_CPAR7_fields
0800bd90 g     F .text	0000001c LSM303DLHC_AccRebootCmd
0801a8dc g     O .rodata	00000010 TIM6_CNT_fields
0801a0bc g     O .rodata	00000078 TIM1_DIER_fields
0800b53a g     F .text	00000008 HAL_PCD_SOFCallback
08017694 g     O .rodata	00000008 NVIC_ICPR0_fields
080043d4 g     F .text	000000f8 memmove
0800c6dc  w    F .text	00000002 TAMP_STAMP_IRQHandler
0800ba80 g     F .text	00000060 GYRO_IO_Init
08017854 g     O .rodata	00000020 NVIC_IPR2_fields
0801c1b8 g       *ABS*	00000000 _sidata
080034b4 g     F .text	00000014 _cleanup
08009174 g     F .text	00000038 HAL_RCC_GetHCLKFreq
0800c6dc  w    F .text	00000002 PendSV_Handler
0801ce00 g     O .parsetable	0000000c CmdButtonE
0801769c g     O .rodata	00000008 NVIC_ICPR1_fields
0800c6dc  w    F .text	00000002 NMI_Handler
080092c0 g     F .text	00000018 HAL_NVIC_EnableIRQ
080044d4 g     F .text	0000004c _Balloc
0801c1ac g       .ARM	00000000 __exidx_end
0800082c g     F .text	00000064 __strtok_r
0800c6dc  w    F .text	00000002 EXTI3_IRQHandler
08009108 g     F .text	0000006c HAL_RCC_GetSysClockFreq
0800b9c4 g     F .text	0000001c BSP_LED_Off
080158bc g     O .rodata	00000008 DMA1_CNDTR5_fields
0801aa34 g     O .rodata	00000098 TIM8_CCER_fields
08013eec g     O .rodata	00000100 CAN_F8R2_fields
08007458 g     F .text	0000008a .hidden __gtdf2
0801ce78 g       .parsetable	00000000 _parsetable_end
0801828c g     O .rodata	00000048 RCC_AHBRSTR_fields
080002c8 g     F .text	0000000c __errno
0801892c g     O .rodata	00000008 RTC_BKP6R_fields
0801490c g     O .rodata	00000028 CAN_TI2R_fields
0800ae88 g     F .text	000001f4 USBD_StdDevReq
0800c364 g     F .text	0000002e I3G4250D_FilterConfig
0800a4e6 g     F .text	00000090 HAL_I2C_Init
08003b2c g     F .text	00000004 __localeconv_l
08017964 g     O .rodata	00000008 NVIC_ISER2_fields
0801ce60 g     O .parsetable	0000000c CmdWE
0800a576  w    F .text	00000002 HAL_I2C_MspDeInit
08014684 g     O .rodata	00000020 CAN_RDH0R_fields
080163cc g     O .rodata	00000020 FPU_FPDSCR_fields
0800c392 g     F .text	0000002e I3G4250D_FilterCmd
0800b690 g     F .text	0000000c USBD_VCP_DeviceDescriptor
080091ac  w    F .text	00000002 HAL_MspInit
08010aec g     O .rodata	00000100 CAN_F0R2_fields
0801b364 g     O .rodata	00000008 TSC_IOG8CR_fields
0800b628 g     F .text	00000026 USBD_LL_IsStallEP
080109ec g     O .rodata	00000100 CAN_F0R1_fields
080195b4 g     O .rodata	00000020 TIM15_SMCR_fields
0800b5dc g     F .text	0000000e USBD_LL_Start
0800bbd0 g     F .text	00000048 COMPASSACCELERO_IO_ITConfig
0800bc94 g     F .text	00000040 BSP_ACCELERO_Init
0800aca0 g     F .text	0000000a USBD_Start
08007f7e g     F .text	0000000a _fstat_r
0800949e g     F .text	00000008 HAL_GPIO_TogglePin
0801ac94 g     O .rodata	00000048 TIM8_CR1_fields
20000c74 g     O .bss	00000004 errno
080164c4 g     O .rodata	00000008 Flash_AR_fields
080131ec g     O .rodata	00000100 CAN_F2R1_fields
0801506c g     O .rodata	00000058 COMP_COMP4_CSR_fields
08016c6c g     O .rodata	00000040 GPIOB_AFRH_fields
08005428 g     F .text	00000004 __seofread
0800c70c g       .text	00000000 _etext
0801609c g     O .rodata	00000010 EXTI_PR2_fields
0801bb4c g     O .rodata	00000028 USB_FS_FNR_fields
20000c24 g       .bss	00000000 _sbss
080151bc g     O .rodata	00000070 COMP_registers
080136ec g     O .rodata	00000100 CAN_F4R2_fields
0800b68c g     F .text	00000002 USBD_static_free
08015864 g     O .rodata	00000008 DMA1_CMAR1_fields
0801a65c g     O .rodata	00000060 TIM2_DIER_fields
080074f4 g     F .text	00000010 .hidden __aeabi_cdcmple
0801b32c g     O .rodata	00000008 TSC_IOG1CR_fields
08019a84 g     O .rodata	00000020 TIM17_CCER_fields
0801ae44 g     O .rodata	00000008 TIM8_RCR_fields
080197ec g     O .rodata	00000010 TIM16_CNT_fields
08016d6c g     O .rodata	00000100 GPIOB_BSRR_fields
080118ec g     O .rodata	00000100 CAN_F16R2_fields
08010634 g     O .rodata	00000018 ADC1_OFR1_fields
08012aec g     O .rodata	00000100 CAN_F24R2_fields
080188c4 g     O .rodata	00000008 RTC_BKP23R_fields
08019474 g     O .rodata	00000008 TIM15_CCR2_fields
0801042c g     O .rodata	00000098 ADC1_CFGR_fields
0801886c g     O .rodata	00000008 RTC_BKP13R_fields
0800ac92 g     F .text	0000000e USBD_RegisterClass
080121ec g     O .rodata	00000100 CAN_F20R1_fields
0801b8fc g     O .rodata	00000060 USART1_ICR_fields
08012cec g     O .rodata	00000100 CAN_F25R2_fields
0801b344 g     O .rodata	00000008 TSC_IOG4CR_fields
080130ec g     O .rodata	00000100 CAN_F27R2_fields
0801ae94 g     O .rodata	00000078 TIM8_SR_fields
0801bb74 g     O .rodata	00000050 USB_FS_ISTR_fields
0801586c g     O .rodata	00000008 DMA1_CMAR2_fields
080188dc g     O .rodata	00000008 RTC_BKP26R_fields
0801074c g     O .rodata	00000028 ADC1_SQR2_fields
08019aec g     O .rodata	00000010 TIM17_CNT_fields
0801bfa4 g     O .rodata	00000008 WWDG_SR_fields
08009300 g     F .text	00000188 HAL_GPIO_Init
0801626c g     O .rodata	000000c0 EXTI_registers
0800ae52 g     F .text	00000006 USBD_LL_SetSpeed
20000b28 g     O .data	00000004 BUTTON_PORT
0800bcd4 g     F .text	00000010 BSP_ACCELERO_GetXYZ
080176ac g     O .rodata	00000008 NVIC_ICTR_fields
0801a8d4 g     O .rodata	00000008 TIM6_ARR_fields
08014934 g     O .rodata	000000b0 CAN_TSR_fields
08000280 g     F .text	0000003c add_test
08007e44 g     F .text	000000b0 DumpBuffer
08000434 g     F .text	00000006 _putchar_r
08016834 g     O .rodata	00000080 GPIOA_IDR_fields
0801bd1c g     O .rodata	00000050 USB_FS_USB_EP3R_fields
0800b55e g     F .text	00000002 HAL_PCD_ResumeCallback
080042a0 g     F .text	00000134 memcpy
080074e4 g     F .text	00000020 .hidden __aeabi_cdrcmple
08013cec g     O .rodata	00000100 CAN_F7R2_fields
08019fdc g     O .rodata	00000010 TIM1_CNT_fields
0800bae0 g     F .text	00000044 GYRO_IO_Write
080004c4 g     F .text	00000174 setvbuf
0800790c g     F .text	0000005c CmdLED
20000c24 g     O .data	00000000 .hidden __TMC_END__
0801a1ec g     O .rodata	00000078 TIM1_SR_fields
08017734 g     O .rodata	00000020 NVIC_IPR13_fields
080195a4 g     O .rodata	00000008 TIM15_PSC_fields
0800b0ac g     F .text	000000ae USBD_StdEPReq
080032f4 g     F .text	0000000c _cleanup_r
08016634 g     O .rodata	00000040 GPIOA_AFRH_fields
08006f60 g     F .text	00000022 .hidden __floatsidf
0800c4b2 g     F .text	00000020 LSM303AGR_AccInit
0801536c g     O .rodata	00000010 DAC_DHR12RD_fields
08014fc4 g     O .rodata	00000058 COMP_COMP2_CSR_fields
0801ad64 g     O .rodata	00000078 TIM8_DIER_fields
08010514 g     O .rodata	00000010 ADC1_DIFSEL_fields
08007460 g     F .text	00000082 .hidden __ltdf2
0800b9f8 g     F .text	00000074 BSP_PB_Init
0800c6dc  w    F .text	00000002 USB_HP_CAN_TX_IRQHandler
0800c6dc  w    F .text	00000002 EXTI0_IRQHandler
0801ae2c g     O .rodata	00000010 TIM8_OR_fields
0800c6dc  w    F .text	00000002 I2C2_EV_IRQHandler
080147b4 g     O .rodata	00000020 CAN_TDH0R_fields
0801bd6c g     O .rodata	00000050 USB_FS_USB_EP4R_fields
080075e4 g     F .text	00000000 .hidden __aeabi_uldivmod
0801bfac g     O .rodata	00000030 WWDG_registers
08019bec g     O .rodata	00000008 TIM17_RCR_fields
080004b4 g     F .text	00000010 puts
0800b20e g     F .text	00000016 USBD_CtlSendStatus
0800c6dc  w    F .text	00000002 FPU_IRQHandler
08009218  w    F .text	0000001a HAL_Delay
0800b07c g     F .text	00000030 USBD_StdItfReq
0801ac54 g     O .rodata	00000008 TIM8_CCR4_fields
200009c4 g     O .data	00000004 SystemCoreClock
08019614 g     O .rodata	00000120 TIM15_registers
08009ae4 g     F .text	00000116 HAL_PCD_EP_Transmit
08000260 g     F .text	00000012 my_Tick
08004e18 g     F .text	0000005c __ratio
080133ec g     O .rodata	00000100 CAN_F3R1_fields
0800b15a g     F .text	00000028 USBD_ParseSetupRequest
0801a594 g     O .rodata	00000010 TIM2_CCR1_fields
080153bc g     O .rodata	00000010 DAC_SWTRIGR_fields
0800c6dc  w    F .text	00000002 TIM1_UP_TIM16_IRQHandler
080111ec g     O .rodata	00000100 CAN_F13R1_fields
08003c80 g     F .text	00000010 malloc
080175ec g     O .rodata	00000008 IWDG_RLR_fields
080003ec g     F .text	0000001e _printf_r
0800a232 g     F .text	0000001c PCD_ReadPMA
08006a80 g     F .text	00000056 _raise_r
08007990 g     F .text	0000004c CmdGyro
080062a0 g     F .text	00000040 __assert_func
0801448c g     O .rodata	00000010 CAN_FMR_fields
0800cce0 g     O .rodata	000000c8 __mprec_tens
08017dec g     O .rodata	00000040 OPAMP_registers
080158b4 g     O .rodata	00000008 DMA1_CNDTR4_fields
0801766c g     O .rodata	00000008 NVIC_IABR1_fields
080103dc g     O .rodata	00000030 ADC1_2_registers
20000af4 g     O .data	0000001c VCP_Desc
08015fcc g     O .rodata	000000d0 EXTI_PR1_fields
0800c520 g     F .text	00000020 LSM303AGR_AccFilterCmd
0800c6dc  w    F .text	00000002 UsageFault_Handler
0801ac5c g     O .rodata	00000020 TIM8_CCR5_fields
0800c6dc  w    F .text	00000002 ADC1_2_IRQHandler
20000c40 g     O .bss	00000004 __malloc_top_pad
20000c7c g     O .bss	00000050 input
08006cb8 g     F .text	00000004 _getpid_r
080135ec g     O .rodata	00000100 CAN_F4R1_fields
080107cc g     O .rodata	00000010 ADC1_TR3_fields
080158dc g     O .rodata	00000008 DMA1_CPAR2_fields
0800bf36 g     F .text	00000002 L3GD20_DeInit
20000c24 g       .bss	00000000 __bss_start__
0801986c g     O .rodata	00000048 TIM16_DIER_fields
08009488 g     F .text	0000000c HAL_GPIO_ReadPin
0801768c g     O .rodata	00000008 NVIC_ICER2_fields
080009f0 g     F .text	00000018 strtoul
08006f40 g     F .text	0000001e .hidden __aeabi_ui2d
08003b30 g     F .text	00000008 _localeconv_r
0800c1f6 g     F .text	00000034 I3G4250D_Init
0801ac3c g     O .rodata	00000008 TIM8_CCR1_fields
080140ec g     O .rodata	00000100 CAN_F9R2_fields
08015344 g     O .rodata	00000008 DAC_DHR12L2_fields
08004730 g     F .text	0000005c __i2b
080037b4 g     F .text	000002f0 __sfvwrite_r
0800ae58 g     F .text	00000018 USBD_LL_SOF
08006ad8 g     F .text	00000064 __sigtramp_r
20000000 g       .data	00000000 _sdata
0800c6dc  w    F .text	00000002 SPI1_IRQHandler
080148bc g     O .rodata	00000028 CAN_TI0R_fields
0800c6dc  w    F .text	00000002 CAN_SCE_IRQHandler
08007614 g     F .text	000002d0 .hidden __udivmoddi4
08006cbc g     F .text	00000000 .hidden __aeabi_drsub
080106dc g     O .rodata	00000048 ADC1_SMPR2_fields
08017894 g     O .rodata	00000020 NVIC_IPR4_fields
08007f48 g     F .text	00000030 _sbrk_r
0800c4b0 g     F .text	00000002 LSM303AGR_AccDeInit
080177d4 g     O .rodata	00000020 NVIC_IPR18_fields
0800c22a g     F .text	00000018 I3G4250D_LowPower
0800b474 g     F .text	00000098 HAL_PCD_MspInit
0801a924 g     O .rodata	00000010 TIM6_DIER_fields
08019e54 g     O .rodata	00000060 TIM1_CCMR1_Output_fields
0801b95c g     O .rodata	000000b0 USART1_ISR_fields
0800c6dc  w    F .text	00000002 TIM6_DAC_IRQHandler
0801734c g     O .rodata	00000068 I2C1_CR2_fields
0801ac44 g     O .rodata	00000008 TIM8_CCR2_fields
0800a084 g     F .text	000000a0 HAL_PCD_EP_SetStall
08008120 g     F .text	0000000a _read_r
0801a1a4 g     O .rodata	00000048 TIM1_SMCR_fields
080109bc g     O .rodata	00000030 CAN_ESR_fields
0800ac68 g     F .text	0000002a USBD_Init
08016cec g     O .rodata	00000080 GPIOB_BRR_fields
20001090 g     O .bss	00000178 hpcd
08007518 g     F .text	00000012 .hidden __aeabi_dcmplt
080063b0 g     F .text	00000034 _fclose_r
0801064c g     O .rodata	00000018 ADC1_OFR2_fields
0801a404 g     O .rodata	00000010 TIM2_ARR_fields
080032a0 g     F .text	00000050 fflush
0800bb6c g     F .text	00000064 COMPASSACCELERO_IO_Init
20000c6c g     O .bss	00000004 __malloc_max_sbrked_mem
0800c1f4 g     F .text	00000002 I3G4250D_DeInit
08013fec g     O .rodata	00000100 CAN_F9R1_fields
08018a0c g     O .rodata	00000038 RTC_DR_fields
08019f94 g     O .rodata	00000008 TIM1_CCR1_fields
080092d8 g     F .text	00000028 HAL_SYSTICK_Config
08006f84 g     F .text	00000042 .hidden __extendsfdf2
08016584 g     O .rodata	00000008 Flash_OPTKEYR_fields
0801067c g     O .rodata	00000018 ADC1_OFR4_fields
20000e4c g     O .bss	00000004 USBDDataIn
08007288 g     F .text	000001d0 .hidden __aeabi_ddiv
0800c6dc  w    F .text	00000002 TIM8_UP_IRQHandler
20000ad7 g     O .data	0000001a USBD_StringSerial
08012bec g     O .rodata	00000100 CAN_F25R1_fields
08019074 g     O .rodata	00000018 SPI1_I2SPR_fields
080105dc g     O .rodata	00000008 ADC1_JDR1_fields
080175dc g     O .rodata	00000008 IWDG_KR_fields
0801bc2c g     O .rodata	00000050 USB_FS_USB_EP0R_fields
08006cc8 g     F .text	00000276 .hidden __adddf3
0800bc18 g     F .text	0000003c COMPASSACCELERO_IO_Write
080128ec g     O .rodata	00000100 CAN_F23R2_fields
0801526c g     O .rodata	00000050 CRC_registers
0801b71c g     O .rodata	000000a0 USART1_CR1_fields
08018c34 g     O .rodata	00000320 RTC_registers
080138ec g     O .rodata	00000100 CAN_F5R2_fields
08019b34 g     O .rodata	00000028 TIM17_CR2_fields
08004c88 g     F .text	000000c0 __b2d
0801c1a4 g       .ARM	00000000 __exidx_start
080197a4 g     O .rodata	00000018 TIM16_CCMR1_Input_fields
08016524 g     O .rodata	00000008 Flash_KEYR_fields
08007034 g     F .text	00000254 .hidden __aeabi_dmul
0800bf1a g     F .text	0000001c LSM303DLHC_AccZClickITConfig
0801ab8c g     O .rodata	00000060 TIM8_CCMR2_Output_fields
08017e64 g     O .rodata	00000028 PWR_CSR_fields
080187bc g     O .rodata	00000010 RTC_ALRMASSR_fields
20000a94 g     O .data	00000043 USBD_CDC_OtherSpeedCfgDesc
08019294 g     O .rodata	00000020 SYSCFG_EXTICR4_fields
08017664 g     O .rodata	00000008 NVIC_IABR0_fields
0800cca8 g     O .rodata	00000004 _global_impure_ptr
080163ec g     O .rodata	00000040 FPU_MVFR0_fields
080198ec g     O .rodata	00000008 TIM16_RCR_fields
0800502c g     F .text	000003d8 _realloc_r
08000300 g     F .text	00000048 __libc_init_array
0800b1fe g     F .text	00000010 USBD_CtlContinueRx
08018864 g     O .rodata	00000008 RTC_BKP12R_fields
0801b8ec g     O .rodata	00000010 USART1_GTPR_fields
08009570 g     F .text	000002e4 HAL_PCD_EP_Open
0800c6dc  w    F .text	00000002 DMA2_Channel2_IRQHandler
0800c6dc  w    F .text	00000002 DMA1_Channel4_IRQHandler
0801a184 g     O .rodata	00000010 TIM1_OR_fields
08017174 g     O .rodata	00000080 GPIOB_PUPDR_fields
08009bfc g     F .text	00000486 HAL_PCD_IRQHandler
08007ba8 g     F .text	00000020 CmdR
0800650c g     F .text	00000026 _fputwc_r
0800cdd0 g     O .rodata	00000028 __mprec_bigtens
08019fac g     O .rodata	00000008 TIM1_CCR4_fields
080045dc g     F .text	000000b4 __s2b
080069f4 g     F .text	0000000e abort
08006f40 g     F .text	0000001e .hidden __floatunsidf
08014834 g     O .rodata	00000020 CAN_TDL1R_fields
08004a98 g     F .text	00000042 __mcmp
080178f4 g     O .rodata	00000020 NVIC_IPR7_fields
0800c0d4 g     F .text	0000002e L3GD20_FilterCmd
08019bb4 g     O .rodata	00000008 TIM17_DMAR_fields
0800a578 g     F .text	0000002e HAL_I2C_DeInit
0801947c g     O .rodata	00000010 TIM15_CNT_fields
080034e0 g     F .text	00000014 __fp_lock_all
0800a922 g     F .text	000000a4 HAL_SPI_Init
08018854 g     O .rodata	00000008 RTC_BKP10R_fields
0801463c g     O .rodata	00000048 CAN_MSR_fields
0801867c g     O .rodata	000000d0 RCC_registers
0800c6f4 g     F .text	00000000 _init
08014814 g     O .rodata	00000020 CAN_TDL0R_fields
08015384 g     O .rodata	00000008 DAC_DHR8R2_fields
0801834c g     O .rodata	00000090 RCC_APB1RSTR_fields
0800bd4c g     F .text	00000010 BSP_GYRO_GetXYZ
0801884c g     O .rodata	00000008 RTC_BKP0R_fields
080149e4 g     O .rodata	00000590 CAN_registers
0801cddc g       .parsetable	00000000 _parsetable_start
08015744 g     O .rodata	00000060 DMA1_CCR5_fields
0801893c g     O .rodata	00000008 RTC_BKP8R_fields
0800c28a g     F .text	0000005e I3G4250D_INT1InterruptConfig
0801b5fc g     O .rodata	00000110 TSC_registers
0801a504 g     O .rodata	00000030 TIM2_CCMR2_Input_fields
0800b60c g     F .text	0000000e USBD_LL_StallEP
08017684 g     O .rodata	00000008 NVIC_ICER1_fields
080198bc g     O .rodata	00000028 TIM16_EGR_fields
0801ce48 g     O .parsetable	0000000c CmdRE
0800a920  w    F .text	00000002 HAL_SPI_MspInit
08013dec g     O .rodata	00000100 CAN_F8R1_fields
0800c6dc  w    F .text	00000002 USART3_IRQHandler
080123ec g     O .rodata	00000100 CAN_F21R1_fields
0801862c g     O .rodata	00000050 RCC_CSR_fields
0800b6d4 g     F .text	0000003c USBD_VCP_SerialStrDescriptor
08016abc g     O .rodata	00000080 GPIOA_OTYPER_fields
0801534c g     O .rodata	00000010 DAC_DHR12LD_fields
080198f4 g     O .rodata	00000030 TIM16_SR_fields
0801a264 g     O .rodata	000001a0 TIM1_registers
080002d4 g     F .text	0000002c __libc_fini_array
080105fc g     O .rodata	00000038 ADC1_JSQR_fields
0800c3c0 g     F .text	000000f0 I3G4250D_ReadXYZAngRate
20001dd8 g       .bss	00000000 _ebss
08007ac0 g     F .text	00000030 CmdTest
0800bc54 g     F .text	00000040 COMPASSACCELERO_IO_Read
20000b88 g     O .data	00000034 L3gd20Drv
0801632c g     O .rodata	00000050 FPU_CPACR_fields
0800c6dc  w    F .text	00000002 DMA1_Channel7_IRQHandler
08014854 g     O .rodata	00000020 CAN_TDL2R_fields
0800a6aa g     F .text	0000010e HAL_I2C_Mem_Read
08016674 g     O .rodata	00000040 GPIOA_AFRL_fields
0800c68c  w    F .text	00000038 Reset_Handler
20000a00 g     O .data	00000043 USBD_CDC_CfgFSDesc
080188f4 g     O .rodata	00000008 RTC_BKP29R_fields
0800bce4 g     F .text	00000068 BSP_GYRO_Init
080176b4 g     O .rodata	00000020 NVIC_IPR0_fields
080169bc g     O .rodata	00000080 GPIOA_ODR_fields
08004690 g     F .text	00000040 __hi0bits
08017774 g     O .rodata	00000020 NVIC_IPR15_fields
08019f9c g     O .rodata	00000008 TIM1_CCR2_fields
080160ac g     O .rodata	000000d0 EXTI_RTSR1_fields
080153a4 g     O .rodata	00000008 DAC_DOR2_fields
0801524c g     O .rodata	00000008 CRC_DR_fields
08007594 g     F .text	0000004e .hidden __fixdfsi
08017074 g     O .rodata	00000080 GPIOB_OSPEEDR_fields
0801ce3c g     O .parsetable	0000000c CmdLEDE
0800c6dc  w    F .text	00000002 UART5_IRQHandler
080084b8 g     F .text	00000054 DecodePeripheral
08019234 g     O .rodata	00000020 SYSCFG_EXTICR1_fields
08010eec g     O .rodata	00000100 CAN_F11R2_fields
0800c6dc  w    F .text	00000002 ADC3_IRQHandler
08018bec g     O .rodata	00000038 RTC_TSTR_fields
0801a5ec g     O .rodata	00000048 TIM2_CR1_fields
080091d8 g     F .text	00000024 HAL_Init
080120ec g     O .rodata	00000100 CAN_F1R2_fields
08004f74 g     F .text	00000056 _putc_r
0800b1e4 g     F .text	0000001a USBD_CtlPrepareRx
0801888c g     O .rodata	00000008 RTC_BKP17R_fields
080146e4 g     O .rodata	00000020 CAN_RDL1R_fields
080127ec g     O .rodata	00000100 CAN_F23R1_fields
0800a9c8 g     F .text	0000002a HAL_SPI_DeInit
0800c6dc  w    F .text	00000002 TIM4_IRQHandler
08011bec g     O .rodata	00000100 CAN_F18R1_fields
0801beac g     O .rodata	000000d0 USB_FS_registers
08006cc8 g     F .text	00000276 .hidden __aeabi_dadd
0801ac4c g     O .rodata	00000008 TIM8_CCR3_fields
08007460 g     F .text	00000082 .hidden __ledf2
080112ec g     O .rodata	00000100 CAN_F13R2_fields
0800cfea g     O .rodata	00000008 LEDs
0801a474 g     O .rodata	00000030 TIM2_CCMR1_Input_fields
0801535c g     O .rodata	00000008 DAC_DHR12R1_fields
08017484 g     O .rodata	00000028 I2C1_OAR1_fields
0800b684 g     F .text	00000008 USBD_static_malloc
08014734 g     O .rodata	00000020 CAN_RF0R_fields
0800c6dc  w    F .text	00000002 CAN_RX1_IRQHandler
0800c6dc  w    F .text	00000002 DMA2_Channel1_IRQHandler
08018934 g     O .rodata	00000008 RTC_BKP7R_fields
080048e8 g     F .text	000000c0 __pow5mult
080107ac g     O .rodata	00000010 ADC1_TR1_fields
080158cc g     O .rodata	00000008 DMA1_CNDTR7_fields
08006fc8 g     F .text	0000006a .hidden __aeabi_ul2d
0800b418 g     F .text	0000002e USBD_CDC_TransmitPacket
20000b2c g     O .data	00000004 I2cxTimeout
0801b34c g     O .rodata	00000008 TSC_IOG5CR_fields
08015364 g     O .rodata	00000008 DAC_DHR12R2_fields
08018894 g     O .rodata	00000008 RTC_BKP18R_fields
08000248 g     F .text	00000018 mytest
0801588c g     O .rodata	00000008 DMA1_CMAR6_fields
080193ec g     O .rodata	00000030 TIM15_CCMR1_Input_fields
080079dc g     F .text	0000002c CmdButton
0800b224 g     F .text	00000016 USBD_CtlReceiveStatus
0801a5c4 g     O .rodata	00000010 TIM2_CCR4_fields
20001dd8 g       ._user_heap_stack	00000000 end
20000b10 g     O .data	00000008 LineCoding
08018f54 g     O .rodata	00000070 SPI1_CR1_fields
0800c6dc  w    F .text	00000002 I2C1_EV_IRQHandler
080190f4 g     O .rodata	00000090 SPI1_registers
0800b5ea g     F .text	00000014 USBD_LL_OpenEP
0801ad54 g     O .rodata	00000010 TIM8_DCR_fields
08008560 g     F .text	00000064 DecodePrintRegisters
0801bbc4 g     O .rodata	00000068 USB_FS_USB_CNTR_fields
0801ba54 g     O .rodata	000000b0 USART1_registers
0800c06a g     F .text	0000003c L3GD20_DisableIT
0801ba4c g     O .rodata	00000008 USART1_TDR_fields
080182d4 g     O .rodata	00000078 RCC_APB1ENR_fields
0800a9c6  w    F .text	00000002 HAL_SPI_MspDeInit
080158a4 g     O .rodata	00000008 DMA1_CNDTR2_fields
0801457c g     O .rodata	00000070 CAN_IER_fields
080155c4 g     O .rodata	00000060 DMA1_CCR1_fields
0801767c g     O .rodata	00000008 NVIC_ICER0_fields
0801795c g     O .rodata	00000008 NVIC_ISER1_fields
0800ad88 g     F .text	0000008c USBD_LL_DataInStage
0801890c g     O .rodata	00000008 RTC_BKP31R_fields
0801a13c g     O .rodata	00000048 TIM1_EGR_fields
0801a4a4 g     O .rodata	00000060 TIM2_CCMR1_Output_fields
080153ac g     O .rodata	00000010 DAC_SR_fields
0801a5a4 g     O .rodata	00000010 TIM2_CCR2_fields
0800b560 g     F .text	0000007c USBD_LL_Init
08018914 g     O .rodata	00000008 RTC_BKP3R_fields
0800c62a g     F .text	00000044 LSM303AGR_AccClickITEnable
0800b9a8 g     F .text	0000001c BSP_LED_On
0800bf38 g     F .text	00000034 L3GD20_Init
08007554 g     F .text	00000012 .hidden __aeabi_dcmpgt
0800c6dc  w    F .text	00000002 DMA1_Channel6_IRQHandler
200009c8 g     O .data	00000038 USBD_CDC
0800acc0 g     F .text	0000000e USBD_ClrClassConfig
08018924 g     O .rodata	00000008 RTC_BKP5R_fields
0800c6dc  w    F .text	00000002 UART4_IRQHandler
0800bf6c g     F .text	00000018 L3GD20_LowPower
0800c6dc  w    F .text	00000002 DMA2_Channel4_IRQHandler
0800b3ee g     F .text	0000000e USBD_CDC_RegisterInterface
080034d0 g     F .text	00000002 __sfp_lock_acquire
08004200 g     F .text	00000000 memchr
20001dd8 g       .bss	00000000 __bss_end__
080035a8 g     F .text	0000020c _free_r
0800c6dc  w    F .text	00000002 TIM3_IRQHandler
0800c6dc  w    F .text	00000002 RCC_IRQHandler
0801894c g     O .rodata	00000020 RTC_CALR_fields
080065bc g     F .text	0000000c __locale_mb_cur_max
08007540 g     F .text	00000012 .hidden __aeabi_dcmpge
0801533c g     O .rodata	00000008 DAC_DHR12L1_fields
08019bf4 g     O .rodata	00000030 TIM17_SR_fields
20000bbc g     O .data	00000034 I3g4250Drv
00001000 g       *ABS*	00000000 _Min_Heap_Size
080170f4 g     O .rodata	00000080 GPIOB_OTYPER_fields
0800c6dc  w    F .text	00000002 DMA1_Channel1_IRQHandler
08018944 g     O .rodata	00000008 RTC_BKP9R_fields
080114ec g     O .rodata	00000100 CAN_F14R2_fields
08006cc4 g     F .text	0000027a .hidden __aeabi_dsub
0800b518 g     F .text	00000012 HAL_PCD_DataOutStageCallback
0800c6dc g       .text	00000002 Default_Handler
20000840 g     O .data	00000004 __malloc_sbrk_base
0800b72c g     F .text	0000001c USBD_VCP_ManufacturerStrDescriptor
0800c500 g     F .text	00000020 LSM303AGR_AccFilterConfig
080168b4 g     O .rodata	00000088 GPIOA_LCKR_fields
08018af4 g     O .rodata	00000090 RTC_TAFCR_fields
20000b18 g     O .data	00000010 USBD_CDC_fops
08016bbc g     O .rodata	000000b0 GPIOA_registers
0801797c g     O .rodata	00000008 NVIC_ISPR2_fields
0800c6dc  w    F .text	00000002 USBWakeUp_RMP_IRQHandler
0801a534 g     O .rodata	00000060 TIM2_CCMR2_Output_fields
08016eec g     O .rodata	00000088 GPIOB_LCKR_fields
0801acdc g     O .rodata	00000078 TIM8_CR2_fields
08009ad4 g     F .text	00000010 HAL_PCD_EP_GetRxCount
0801098c g     O .rodata	00000030 CAN_BTR_fields
08006fc8 g     F .text	0000006a .hidden __floatundidf
080156e4 g     O .rodata	00000060 DMA1_CCR4_fields
080176d4 g     O .rodata	00000020 NVIC_IPR10_fields
08019a34 g     O .rodata	00000008 TIM17_ARR_fields
080110ec g     O .rodata	00000100 CAN_F12R2_fields
080049a8 g     F .text	000000f0 __lshift
0801ba14 g     O .rodata	00000028 USART1_RQR_fields
08019b6c g     O .rodata	00000048 TIM17_DIER_fields
08006b98 g     F .text	00000054 signal
080188bc g     O .rodata	00000008 RTC_BKP22R_fields
080147f4 g     O .rodata	00000020 CAN_TDH2R_fields
0801a19c g     O .rodata	00000008 TIM1_RCR_fields
0800b61a g     F .text	0000000e USBD_LL_ClearStallEP
080178b4 g     O .rodata	00000020 NVIC_IPR5_fields
0801652c g     O .rodata	00000058 Flash_OBR_fields
0800c6dc  w    F .text	00000002 EXTI15_10_IRQHandler
0801488c g     O .rodata	00000018 CAN_TDT1R_fields
0800c104 g     F .text	000000f0 L3GD20_ReadXYZAngRate
08018b84 g     O .rodata	00000038 RTC_TR_fields
080177b4 g     O .rodata	00000020 NVIC_IPR17_fields
08002078 g     F .text	00000068 __register_exitproc
080164cc g     O .rodata	00000058 Flash_CR_fields
08019094 g     O .rodata	00000058 SPI1_SR_fields
0801bb0c g     O .rodata	00000040 USB_FS_DADDR_fields
0801625c g     O .rodata	00000010 EXTI_SWIER2_fields
08009544 g     F .text	0000002c HAL_PCD_SetAddress
080177f4 g     O .rodata	00000020 NVIC_IPR19_fields
0801a944 g     O .rodata	00000008 TIM6_SR_fields
08011fec g     O .rodata	00000100 CAN_F1R1_fields
08019be4 g     O .rodata	00000008 TIM17_PSC_fields
08019254 g     O .rodata	00000020 SYSCFG_EXTICR2_fields
0800478c g     F .text	0000015c __multiply
08019024 g     O .rodata	00000008 SPI1_CRCPR_fields
0800bdac g     F .text	00000020 LSM303DLHC_AccFilterConfig
08007b3c g     F .text	00000050 _pt_A2
08008e58 g     F .text	000002b0 HAL_RCC_ClockConfig
08009234 g     F .text	00000024 HAL_NVIC_SetPriorityGrouping
200009b4 g     O .data	00000004 Commands
080107bc g     O .rodata	00000010 ADC1_TR2_fields
20000c44 g     O .bss	00000028 __malloc_current_mallinfo
0800be9a g     F .text	00000020 LSM303DLHC_AccFilterClickCmd
08018be4 g     O .rodata	00000008 RTC_TSSSR_fields
08007cc0 g     F .text	0000013c TaskInput
0801a91c g     O .rodata	00000008 TIM6_CR2_fields
080185dc g     O .rodata	00000050 RCC_CR_fields
080143ac g     O .rodata	000000e0 CAN_FM1R_fields
08019fd4 g     O .rodata	00000008 TIM1_CCR6_fields
08004d48 g     F .text	000000d0 __d2b
0801b7bc g     O .rodata	00000098 USART1_CR2_fields
08019d2c g     O .rodata	00000060 TIM1_BDTR_fields
08000638 g     F .text	0000004c strcasecmp
0801760c g     O .rodata	00000008 IWDG_WINR_fields
08010694 g     O .rodata	00000048 ADC1_SMPR1_fields
0800bb24 g     F .text	00000048 GYRO_IO_Read
08000278 g     F .text	00000004 my_Init
080174ac g     O .rodata	00000018 I2C1_OAR2_fields
08007af0 g     F .text	0000004c AddTest
08012dec g     O .rodata	00000100 CAN_F26R1_fields
080009d4 g     F .text	00000002 _strtoul_r
08015264 g     O .rodata	00000008 CRC_POL_fields
0801587c g     O .rodata	00000008 DMA1_CMAR4_fields
0800c6dc  w    F .text	00000002 TIM7_IRQHandler
0800bfcc g     F .text	0000005e L3GD20_INT1InterruptConfig
0800b55c g     F .text	00000002 HAL_PCD_SuspendCallback
080158e4 g     O .rodata	00000008 DMA1_CPAR3_fields
08018874 g     O .rodata	00000008 RTC_BKP14R_fields
0800b298 g     F .text	0000000c USBD_CDC_GetDeviceQualifierDescriptor
08007f78 g     F .text	00000006 _close_r
0801902c g     O .rodata	00000008 SPI1_DR_fields
08018494 g     O .rodata	00000018 RCC_CFGR2_fields
08006f60 g     F .text	00000022 .hidden __aeabi_i2d
08019504 g     O .rodata	00000010 TIM15_DCR_fields
080164ac g     O .rodata	00000018 Flash_ACR_fields
08015254 g     O .rodata	00000008 CRC_IDR_fields
20000b54 g     O .data	00000034 Lsm303dlhcDrv
080158f4 g     O .rodata	00000008 DMA1_CPAR5_fields
08011cec g     O .rodata	00000100 CAN_F18R2_fields
08017614 g     O .rodata	00000050 IWDG_registers
0800081c g     F .text	00000010 strtok
0801ce30 g     O .parsetable	0000000c CmdGyroE
080175e4 g     O .rodata	00000008 IWDG_PR_fields
080176f4 g     O .rodata	00000020 NVIC_IPR11_fields
0801516c g     O .rodata	00000050 COMP_COMP7_CSR_fields
08014754 g     O .rodata	00000020 CAN_RF1R_fields
08008058 g     F .text	0000007c TerminalInit
08001fa4 g     F .text	000000d4 __swsetup_r
0801a9cc g     O .rodata	00000008 TIM8_ARR_fields
080002b4 g     F .text	00000000 pt_led_demo_a2
080078e4  w    F .text	00000002 .hidden __aeabi_ldiv0
0800c6dc  w    F .text	00000002 EXTI9_5_IRQHandler
0800ac62 g     F .text	00000006 HAL_SPI_GetState
08007288 g     F .text	000001d0 .hidden __divdf3
08010524 g     O .rodata	00000008 ADC1_DR_fields
0800340c g     F .text	000000a8 __sfp
08004eb4 g     F .text	0000005a __copybits
0800c6dc  w    F .text	00000002 RTC_WKUP_IRQHandler
0801b70c g     O .rodata	00000010 USART1_BRR_fields
0801941c g     O .rodata	00000050 TIM15_CCMR1_Output_fields
0801cdf4 g     O .parsetable	0000000c AddTestE
20000438 g     O .data	00000408 __malloc_av_
08019184 g     O .rodata	00000088 SYSCFG_CFGR1_fields
080034dc g     F .text	00000002 __sinit_lock_release
0800812a g     F .text	00000010 TerminalReadNonBlock
08007034 g     F .text	00000254 .hidden __muldf3
08014874 g     O .rodata	00000018 CAN_TDT0R_fields
08007ef4 g     F .text	00000054 CmdDump
08005404 g     F .text	00000022 __sread
080197bc g     O .rodata	00000028 TIM16_CCMR1_Output_fields
0801bf7c g     O .rodata	00000018 WWDG_CFR_fields
08017eac g     O .rodata	00000370 Peripherals
08016ff4 g     O .rodata	00000080 GPIOB_ODR_fields
0800920c  w    F .text	0000000c HAL_GetTick
0801bdbc g     O .rodata	00000050 USB_FS_USB_EP5R_fields
08010dec g     O .rodata	00000100 CAN_F11R1_fields
080044cc g     F .text	00000002 __malloc_lock
0801796c g     O .rodata	00000008 NVIC_ISPR0_fields
08010584 g     O .rodata	00000058 ADC1_ISR_fields
08016384 g     O .rodata	00000048 FPU_FPCCR_fields
0801b10c g     O .rodata	00000010 TSC_ICR_fields
0800bdec g     F .text	000000ae LSM303DLHC_AccReadXYZ
08017674 g     O .rodata	00000008 NVIC_IABR2_fields
08003274 g     F .text	0000002c _fflush_r
0800813a g     F .text	00000012 TerminalReadAnyNonBlock
0800b710 g     F .text	0000001c USBD_VCP_ProductStrDescriptor
080062ec g     F .text	0000005e _calloc_r
08016b3c g     O .rodata	00000080 GPIOA_PUPDR_fields
0800c6dc  w    F .text	00000002 SPI2_IRQHandler
080188b4 g     O .rodata	00000008 RTC_BKP21R_fields
0801c05d g     O .rodata	00000012 hUSBDDeviceDesc
08018bbc g     O .rodata	00000028 RTC_TSDR_fields
080082d8 g     F .text	0000000c USB_LP_CAN_RX0_IRQHandler
080184ac g     O .rodata	00000048 RCC_CFGR3_fields
08000348 g     F .text	000000a4 memset
0800c6dc  w    F .text	00000002 MemManage_Handler
08007a14 g     F .text	0000009c main
0801b4ec g     O .rodata	00000100 TSC_IOSCR_fields
08015acc g     O .rodata	000001e0 DMA1_registers
0800ba6c g     F .text	00000014 BSP_PB_GetState
08019274 g     O .rodata	00000020 SYSCFG_EXTICR3_fields
20000c70 g     O .bss	00000004 __malloc_max_total_mem
080105ec g     O .rodata	00000008 ADC1_JDR3_fields
080190ec g     O .rodata	00000008 SPI1_TXCRCR_fields
08006288 g     F .text	00000018 __swbuf
0800a9f2 g     F .text	00000270 HAL_SPI_TransmitReceive
20000b50 g     O .data	00000004 SpixTimeout
0801cddc g       *ABS*	00000000 _siccmram
0801501c g     O .rodata	00000050 COMP_COMP3_CSR_fields
08017934 g     O .rodata	00000020 NVIC_IPR9_fields
08015584 g     O .rodata	00000040 DBGMCU_registers
08017794 g     O .rodata	00000020 NVIC_IPR16_fields
080132ec g     O .rodata	00000100 CAN_F2R2_fields
0800c6dc  w    F .text	00000002 SVC_Handler
0800548c g     F .text	00000008 __sclose
0800c6dc  w    F .text	00000002 DMA2_Channel5_IRQHandler
0801590c g     O .rodata	000000e0 DMA1_IFCR_fields
080063e4 g     F .text	0000003c fclose
0801b36c g     O .rodata	00000080 TSC_IOGCSR_fields
08008274 g     F .text	00000064 TerminalInputBufferWrite
080158d4 g     O .rodata	00000008 DMA1_CPAR1_fields
08002208 g     F .text	00000f3c _dtoa_r
08003ca0 g     F .text	00000554 _malloc_r
08016cac g     O .rodata	00000040 GPIOB_AFRL_fields
080069d8 g     F .text	0000001a __ascii_wctomb
0801052c g     O .rodata	00000058 ADC1_IER_fields
08006fd8 g     F .text	0000005a .hidden __aeabi_l2d
0801537c g     O .rodata	00000008 DAC_DHR8R1_fields
08019e24 g     O .rodata	00000030 TIM1_CCMR1_Input_fields
08006420 g     F .text	0000001c _fiprintf_r
08006bec g     F .text	00000038 _init_signal
0801b12c g     O .rodata	00000100 TSC_IOASCR_fields
08017834 g     O .rodata	00000020 NVIC_IPR20_fields
08003aa4 g     F .text	00000040 _fwalk
0800ae14 g     F .text	0000003e USBD_LL_Reset
0801471c g     O .rodata	00000018 CAN_RDT1R_fields
080166b4 g     O .rodata	00000080 GPIOA_BRR_fields
080122ec g     O .rodata	00000100 CAN_F20R2_fields
0801b5ec g     O .rodata	00000010 TSC_ISR_fields
0800b678 g     F .text	0000000c USBD_LL_GetRxDataSize
0800c6dc  w    F .text	00000002 DMA1_Channel5_IRQHandler
0800bd5e g     F .text	00000020 LSM303DLHC_AccInit
0800c6dc  w    F .text	00000002 USB_LP_IRQHandler
20001538 g     O .bss	00000800 UserRxBuffer
08006608 g     F .text	00000014 _mbtowc_r
08019034 g     O .rodata	00000040 SPI1_I2SCFGR_fields
0801c059 g     O .rodata	00000004 USBD_LangIDDesc
080116ec g     O .rodata	00000100 CAN_F15R2_fields
0800c6dc  w    F .text	00000002 EXTI4_IRQHandler
0801bccc g     O .rodata	00000050 USB_FS_USB_EP2R_fields
08004fcc g     F .text	00000060 putc
20000b30 g     O .data	00000020 LED_PORT
0801ac7c g     O .rodata	00000008 TIM8_CCR6_fields
0800c5ee g     F .text	00000020 LSM303AGR_AccFilterClickCmd
0800bed6 g     F .text	00000044 LSM303DLHC_AccClickITEnable
0800ad28 g     F .text	00000060 USBD_LL_DataOutStage
0801891c g     O .rodata	00000008 RTC_BKP4R_fields
08003508 g     F .text	000000a0 _malloc_trim_r
0801b35c g     O .rodata	00000008 TSC_IOG7CR_fields
08018884 g     O .rodata	00000008 RTC_BKP16R_fields
0801554c g     O .rodata	00000028 DBGMCU_CR_fields
08014704 g     O .rodata	00000018 CAN_RDT0R_fields
0801040c g     O .rodata	00000008 ADC1_AWD2CR_fields
08015884 g     O .rodata	00000008 DMA1_CMAR5_fields
080146c4 g     O .rodata	00000020 CAN_RDL0R_fields
080158ec g     O .rodata	00000008 DMA1_CPAR4_fields
08006668 g     F .text	000002dc strcmp
0801a94c g     O .rodata	00000080 TIM6_registers
08007968 g     F .text	00000028 CmdAccel
08006150 g     F .text	0000001c vfiprintf
0801885c g     O .rodata	00000008 RTC_BKP11R_fields
0800a7b8 g     F .text	00000006 HAL_I2C_GetState
08008834 g     F .text	00000068 SystemInit
080009d8 g     F .text	00000018 strtoul_l
0801973c g     O .rodata	00000048 TIM16_BDTR_fields
08007468 g     F .text	0000007a .hidden __nedf2
080187cc g     O .rodata	00000070 RTC_ALRMBR_fields
0801a64c g     O .rodata	00000010 TIM2_DCR_fields
080104c4 g     O .rodata	00000050 ADC1_CR_fields
0800c700 g     F .text	00000000 _fini
08007b8c g     F .text	0000001c CmdW
08009538 g     F .text	0000000c HAL_PCD_Start
0800c6dc  w    F .text	00000002 TIM1_TRG_COM_TIM17_IRQHandler
08015dac g     O .rodata	00000020 EXTI_EMR2_fields
0800bd7e g     F .text	00000012 LSM303DLHC_AccReadID
08018c2c g     O .rodata	00000008 RTC_WUTR_fields
080158fc g     O .rodata	00000008 DMA1_CPAR6_fields
0801525c g     O .rodata	00000008 CRC_INIT_fields
08018a44 g     O .rodata	00000088 RTC_ISR_fields
0801a0ac g     O .rodata	00000010 TIM1_DCR_fields
08017e2c g     O .rodata	00000038 PWR_CR_fields
0801a6c4 g     O .rodata	00000030 TIM2_EGR_fields
080002bc g     F .text	0000000c atexit
08017bec g     O .rodata	00000080 OPAMP_OPAMP1_CR_fields
0801644c g     O .rodata	00000060 FPU_registers
08015eac g     O .rodata	00000100 EXTI_IMR1_fields
08008234 g     F .text	00000040 _write_r
0801079c g     O .rodata	00000010 ADC1_SQR4_fields
10000000 g       .ccmram	00000000 _eccmram
08010774 g     O .rodata	00000028 ADC1_SQR3_fields
0800c6dc  w    F .text	00000002 DMA1_Channel3_IRQHandler
080154ac g     O .rodata	00000080 DBGMCU_APB1FZ_fields
080065c8 g     F .text	00000040 setlocale
08018fc4 g     O .rodata	00000060 SPI1_CR2_fields
0801041c g     O .rodata	00000010 ADC1_CALFACT_fields
080188ec g     O .rodata	00000008 RTC_BKP28R_fields
080091ae  w    F .text	00000028 HAL_InitTick
0800c60e g     F .text	0000001c LSM303AGR_AccIT1Enable
08019fb4 g     O .rodata	00000020 TIM1_CCR5_fields
0800b64e g     F .text	0000000e USBD_LL_SetUSBAddress
08017714 g     O .rodata	00000020 NVIC_IPR12_fields
0801c070 g     O .rodata	00000010 LED_PIN
20000008 g     O .data	00000004 _impure_ptr
080148a4 g     O .rodata	00000018 CAN_TDT2R_fields
080105f4 g     O .rodata	00000008 ADC1_JDR4_fields
080194c4 g     O .rodata	00000040 TIM15_CR2_fields
08003144 g     F .text	00000130 __sflush_r
080184f4 g     O .rodata	00000060 RCC_CFGR_fields
080091fc  w    F .text	00000010 HAL_IncTick
08019bbc g     O .rodata	00000028 TIM17_EGR_fields
0800b5fe g     F .text	0000000e USBD_LL_CloseEP
0800c6dc  w    F .text	00000002 ADC4_IRQHandler
0801896c g     O .rodata	000000a0 RTC_CR_fields
0800b1d4 g     F .text	00000010 USBD_CtlContinueSendData
080159ec g     O .rodata	000000e0 DMA1_ISR_fields
080139ec g     O .rodata	00000100 CAN_F6R1_fields
0800bf84 g     F .text	0000001c L3GD20_ReadID
0800c6dc  w    F .text	00000002 WWDG_IRQHandler
0800a4e4  w    F .text	00000002 HAL_I2C_MspInit
08015cac g     O .rodata	00000100 EXTI_EMR1_fields
080178d4 g     O .rodata	00000020 NVIC_IPR6_fields
0801a5b4 g     O .rodata	00000010 TIM2_CCR3_fields
080157a4 g     O .rodata	00000060 DMA1_CCR6_fields
0800661c g     F .text	0000002a __ascii_mbtowc
0801693c g     O .rodata	00000080 GPIOA_MODER_fields
08017c6c g     O .rodata	00000080 OPAMP_OPAMP2_CR_fields
08004c28 g     F .text	00000060 __ulp
080034f4 g     F .text	00000014 __fp_unlock_all
0800c328 g     F .text	0000003c I3G4250D_DisableIT
0801a034 g     O .rodata	00000078 TIM1_CR2_fields
08018acc g     O .rodata	00000010 RTC_PRER_fields
0800b65c g     F .text	0000000e USBD_LL_Transmit
0800c6dc  w    F .text	00000002 TIM2_IRQHandler
08000274 g     F .text	00000004 my_Loop
08019784 g     O .rodata	00000020 TIM16_CCER_fields
080094a6 g     F .text	00000092 HAL_PCD_Init
20000a44 g     O .data	00000043 USBD_CDC_CfgHSDesc
0801ce24 g     O .parsetable	0000000c CmdDecodeE
08012eec g     O .rodata	00000100 CAN_F26R2_fields
08013aec g     O .rodata	00000100 CAN_F6R2_fields
20000000 g       .data	00000000 myTickCount
080117ec g     O .rodata	00000100 CAN_F16R1_fields
080188e4 g     O .rodata	00000008 RTC_BKP27R_fields
0801617c g     O .rodata	00000010 EXTI_RTSR2_fields
08019834 g     O .rodata	00000028 TIM16_CR2_fields
0801874c g     O .rodata	00000070 RTC_ALRMAR_fields
08019d24 g     O .rodata	00000008 TIM1_ARR_fields
0800b182 g     F .text	00000038 USBD_GetString
0800b9e0 g     F .text	00000018 BSP_LED_Toggle
080126ec g     O .rodata	00000100 CAN_F22R2_fields
080129ec g     O .rodata	00000100 CAN_F24R1_fields
08003b38 g     F .text	00000008 localeconv
0800b50c g     F .text	0000000c HAL_PCD_SetupStageCallback
080137ec g     O .rodata	00000100 CAN_F5R1_fields
0800c6dc  w    F .text	00000002 COMP7_IRQHandler
08003c20 g     F .text	0000005e __swhatbuf_r
20008000 g       *ABS*	00000000 _estack
08007bc8 g     F .text	000000f8 parse
080188fc g     O .rodata	00000008 RTC_BKP2R_fields
0800c6dc  w    F .text	00000002 COMP1_2_3_IRQHandler
080119ec g     O .rodata	00000100 CAN_F17R1_fields
0800c6dc  w    F .text	00000002 EXTI1_IRQHandler
0801a9d4 g     O .rodata	00000060 TIM8_BDTR_fields
08007504 g     F .text	00000012 .hidden __aeabi_dcmpeq
0800c4d2 g     F .text	00000012 LSM303AGR_AccReadID
0801bc7c g     O .rodata	00000050 USB_FS_USB_EP1R_fields
0801032c g     O .rodata	000000b0 ADC1_2_CSR_fields
0801637c g     O .rodata	00000008 FPU_FPCAR_fields
20000c24 g       .data	00000000 _edata
0801af0c g     O .rodata	000001a0 TIM8_registers
08018904 g     O .rodata	00000008 RTC_BKP30R_fields
08019aa4 g     O .rodata	00000018 TIM17_CCMR1_Input_fields
10000000 g       .ccmram	00000000 _sccmram
080197fc g     O .rodata	00000038 TIM16_CR1_fields
08011aec g     O .rodata	00000100 CAN_F17R2_fields
0801948c g     O .rodata	00000038 TIM15_CR1_fields
08006464 g     F .text	000000a6 __fputwc
080085c4 g     F .text	00000270 CmdDecode
080195ac g     O .rodata	00000008 TIM15_RCR_fields
08016e6c g     O .rodata	00000080 GPIOB_IDR_fields
08019f44 g     O .rodata	00000050 TIM1_CCMR3_Output_fields
0801addc g     O .rodata	00000008 TIM8_DMAR_fields
080165b4 g     O .rodata	00000080 Flash_registers
0801985c g     O .rodata	00000010 TIM16_DCR_fields
0800c2e8 g     F .text	00000040 I3G4250D_EnableIT
0801841c g     O .rodata	00000040 RCC_APB2RSTR_fields
08007dfc g     F .text	00000028 fetch_uint32_arg
0801883c g     O .rodata	00000010 RTC_ALRMBSSR_fields
080192b4 g     O .rodata	00000040 SYSCFG_RCR_fields
0800c6dc  w    F .text	00000002 USART2_IRQHandler
08019afc g     O .rodata	00000038 TIM17_CR1_fields
0801798c g     O .rodata	00000260 NVIC_registers
0800c6dc  w    F .text	00000002 COMP4_5_6_IRQHandler
0800542c g     F .text	0000003e __swrite
0800889c g     F .text	000005bc HAL_RCC_OscConfig
20000844 g     O .data	00000004 __malloc_trim_threshold
08019ae4 g     O .rodata	00000008 TIM17_CCR1_fields
080174fc g     O .rodata	00000028 I2C1_TIMINGR_fields
0801bb04 g     O .rodata	00000008 USB_FS_BTABLE_fields
080147d4 g     O .rodata	00000020 CAN_TDH1R_fields
0800643c g     F .text	00000028 fiprintf
080172a4 g     O .rodata	000000a8 I2C1_CR1_fields
08005524 g     F .text	00000c2c _vfiprintf_r
08000000 g     O .isr_vector	00000000 g_pfnVectors
0800b1ba g     F .text	0000001a USBD_CtlSendData
080115ec g     O .rodata	00000100 CAN_F15R1_fields
0801031c g     O .rodata	00000010 ADC1_2_CDR_fields
08003ae4 g     F .text	00000048 _fwalk_reent
08004adc g     F .text	0000014c __mdiff
0801a93c g     O .rodata	00000008 TIM6_PSC_fields
08007594 g     F .text	0000004e .hidden __aeabi_d2iz
0801887c g     O .rodata	00000008 RTC_BKP15R_fields
08017e8c g     O .rodata	00000020 PWR_registers
0801658c g     O .rodata	00000020 Flash_SR_fields
080105e4 g     O .rodata	00000008 ADC1_JDR2_fields
080078f8 g     F .text	00000010 _kill
080188ac g     O .rodata	00000008 RTC_BKP20R_fields
080158c4 g     O .rodata	00000008 DMA1_CNDTR6_fields
08011eec g     O .rodata	00000100 CAN_F19R2_fields
0800c6dc  w    F .text	00000002 I2C2_ER_IRQHandler
080102dc g     O .rodata	00000040 ADC1_2_CCR_fields
0800c6dc  w    F .text	00000002 DMA1_Channel2_IRQHandler
080153cc g     O .rodata	000000e0 DAC_registers
08016a3c g     O .rodata	00000080 GPIOA_OSPEEDR_fields
0801ab5c g     O .rodata	00000030 TIM8_CCMR2_Input_fields
080034d4 g     F .text	00000002 __sfp_lock_release
08019a3c g     O .rodata	00000048 TIM17_BDTR_fields
080146a4 g     O .rodata	00000020 CAN_RDH1R_fields
0800c25e g     F .text	0000002c I3G4250D_RebootCmd
0801a414 g     O .rodata	00000060 TIM2_CCER_fields
0801538c g     O .rodata	00000010 DAC_DHR8RD_fields
08007e24 g     F .text	00000020 fetch_string_arg
0800b93c g     F .text	0000006c BSP_LED_Init
08016f74 g     O .rodata	00000080 GPIOB_MODER_fields
0801ce18 g     O .parsetable	0000000c CmdDumpE
0801bfec g     O .rodata	00000010 PLLMULFactorTable
0801b854 g     O .rodata	00000098 USART1_CR3_fields
08008408 g     F .text	00000050 DecodeField
08014774 g     O .rodata	00000020 CAN_RI0R_fields
0800c6dc  w    F .text	00000002 TIM8_BRK_IRQHandler
0801552c g     O .rodata	00000020 DBGMCU_APB2FZ_fields
0801a194 g     O .rodata	00000008 TIM1_PSC_fields
0800850c g     F .text	00000054 DecodePrintPeripherals
080193b4 g     O .rodata	00000038 TIM15_CCER_fields
08015894 g     O .rodata	00000008 DMA1_CMAR7_fields
0800cba4 g     O .rodata	00000101 _ctype_
080078e4  w    F .text	00000002 .hidden __aeabi_idiv0
08007568 g     F .text	0000002c .hidden __unorddf2
0800c540 g     F .text	000000ae LSM303AGR_AccReadXYZ
0800bd5c g     F .text	00000002 LSM303DLHC_AccDeInit
08014794 g     O .rodata	00000020 CAN_RI1R_fields
0801920c g     O .rodata	00000028 SYSCFG_CFGR2_fields
08018554 g     O .rodata	00000088 RCC_CIR_fields
0801ce54 g     O .parsetable	0000000c CmdStatsE
0800c6dc  w    F .text	00000002 FLASH_IRQHandler
0801956c g     O .rodata	00000008 TIM15_DMAR_fields
08015e9c g     O .rodata	00000010 EXTI_FTSR2_fields
08010cec g     O .rodata	00000100 CAN_F10R2_fields
08007908 g     F .text	00000002 _exit
08017874 g     O .rodata	00000020 NVIC_IPR3_fields
0801589c g     O .rodata	00000008 DMA1_CNDTR1_fields
080174d4 g     O .rodata	00000028 I2C1_TIMEOUTR_fields
0801936c g     O .rodata	00000048 TIM15_BDTR_fields
0800b69c g     F .text	0000000c USBD_VCP_LangIDStrDescriptor
20001438 g     O .bss	00000100 USBD_StrDesc
0800814c g     F .text	000000e8 TerminalOutputBufferWrite
0800c6dc  w    F .text	00000002 BusFault_Handler
0800c6dc  w    F .text	00000002 USART1_IRQHandler
08014f74 g     O .rodata	00000050 COMP_COMP1_CSR_fields
0801ade4 g     O .rodata	00000048 TIM8_EGR_fields
08003b40 g     F .text	000000e0 __smakebuf_r
080195d4 g     O .rodata	00000040 TIM15_SR_fields
08000740 g     F .text	000000dc strlen
080183dc g     O .rodata	00000040 RCC_APB2ENR_fields
0800c6dc  w    F .text	00000002 SPI3_IRQHandler
0800c4e4 g     F .text	0000001c LSM303AGR_AccRebootCmd
08006a04 g     F .text	00000030 _init_signal_r
080074f4 g     F .text	00000010 .hidden __aeabi_cdcmpeq
08007458 g     F .text	0000008a .hidden __gedf2
08015684 g     O .rodata	00000060 DMA1_CCR3_fields
08019fec g     O .rodata	00000048 TIM1_CR1_fields
080175f4 g     O .rodata	00000018 IWDG_SR_fields
0801be0c g     O .rodata	00000050 USB_FS_USB_EP6R_fields
08019924 g     O .rodata	00000110 TIM16_registers
0800a24e  w    F .text	00000002 HAL_PCDEx_SetConnectionState
08019c24 g     O .rodata	00000100 TIM17_registers
0800a5a6 g     F .text	00000104 HAL_I2C_Mem_Write
080062e0 g     F .text	0000000a __assert
08019d8c g     O .rodata	00000098 TIM1_CCER_fields
080134ec g     O .rodata	00000100 CAN_F3R2_fields
080152bc g     O .rodata	00000080 DAC_CR_fields
0800c6dc  w    F .text	00000002 I2C1_ER_IRQHandler
0800550c g     F .text	00000016 __sprint_r
0801be5c g     O .rodata	00000050 USB_FS_USB_EP7R_fields
080173fc g     O .rodata	00000088 I2C1_ISR_fields
08019ee4 g     O .rodata	00000060 TIM1_CCMR2_Output_fields
08017914 g     O .rodata	00000020 NVIC_IPR8_fields
0801bffc g     O .rodata	00000010 PredivFactorTable
0801b33c g     O .rodata	00000008 TSC_IOG3CR_fields
08006f84 g     F .text	00000042 .hidden __aeabi_f2d
0800b66a g     F .text	0000000e USBD_LL_PrepareReceive
080158ac g     O .rodata	00000008 DMA1_CNDTR3_fields
0800bfa0 g     F .text	0000002c L3GD20_RebootCmd
08012fec g     O .rodata	00000100 CAN_F27R1_fields
0801b11c g     O .rodata	00000010 TSC_IER_fields
0800c66e g     F .text	0000001c LSM303AGR_AccZClickITConfig
080142cc g     O .rodata	000000e0 CAN_FFA1R_fields
0801ac84 g     O .rodata	00000010 TIM8_CNT_fields
080069c4 g     F .text	00000014 _wctomb_r
0801cddc g     O .parsetable	0000000c _pt_A2E
08010414 g     O .rodata	00000008 ADC1_AWD3CR_fields
080188d4 g     O .rodata	00000008 RTC_BKP25R_fields
0801b22c g     O .rodata	00000100 TSC_IOCCR_fields
08017cec g     O .rodata	00000080 OPAMP_OPAMP3_CR_fields
0800b40c g     F .text	0000000c USBD_CDC_SetRxBuffer
0801618c g     O .rodata	000000d0 EXTI_SWIER1_fields
08006cc4 g     F .text	0000027a .hidden __subdf3
08019734 g     O .rodata	00000008 TIM16_ARR_fields
08015574 g     O .rodata	00000010 DBGMCU_IDCODE_fields
08000a08 g     F .text	00001514 _vfprintf_r
20000bf0 g     O .data	00000034 Lsm303agrDrv
080046d0 g     F .text	0000005e __lo0bits
08015fac g     O .rodata	00000020 EXTI_IMR2_fields
0801a934 g     O .rodata	00000008 TIM6_EGR_fields
0801908c g     O .rodata	00000008 SPI1_RXCRCR_fields
080174c4 g     O .rodata	00000008 I2C1_PECR_fields
08009a0c g     F .text	000000c8 HAL_PCD_EP_Receive
08010664 g     O .rodata	00000018 ADC1_OFR3_fields
08015114 g     O .rodata	00000058 COMP_COMP6_CSR_fields
080188a4 g     O .rodata	00000008 RTC_BKP1R_fields
0801aafc g     O .rodata	00000060 TIM8_CCMR1_Output_fields
080171f4 g     O .rodata	000000b0 GPIOB_registers
08008458 g     F .text	00000060 DecodeRegister
08006c24 g     F .text	00000068 __sigtramp
0801ae4c g     O .rodata	00000048 TIM8_SMCR_fields
08008360 g     F .text	00000054 DecodeReadRegister
080145ec g     O .rodata	00000050 CAN_MCR_fields
08006978 g     F .text	0000004c wcrtomb
0801539c g     O .rodata	00000008 DAC_DOR1_fields
080080d4 g     F .text	0000004c TerminalRead
0801b0ac g     O .rodata	00000060 TSC_CR_fields
0801a6bc g     O .rodata	00000008 TIM2_DMAR_fields
20000848 g     O .data	0000016c __global_locale
0801aacc g     O .rodata	00000030 TIM8_CCMR1_Input_fields
0800beba g     F .text	0000001c LSM303DLHC_AccIT1Enable
08010fec g     O .rodata	00000100 CAN_F12R1_fields
0800c6dc  w    F .text	00000002 USBWakeUp_IRQHandler
080198e4 g     O .rodata	00000008 TIM16_PSC_fields
0801ba0c g     O .rodata	00000008 USART1_RDR_fields
0801845c g     O .rodata	00000038 RCC_BDCR_fields
08001f1c g     F .text	0000001c vfprintf
08019b5c g     O .rodata	00000010 TIM17_DCR_fields
08017974 g     O .rodata	00000008 NVIC_ISPR1_fields
080176a4 g     O .rodata	00000008 NVIC_ICPR2_fields
0801cde8 g     O .parsetable	0000000c CmdAccelE
080124ec g     O .rodata	00000100 CAN_F21R2_fields
0800b3fc g     F .text	00000010 USBD_CDC_SetTxBuffer
08006534 g     F .text	00000048 fputwc
080192f4 g     O .rodata	00000070 SYSCFG_registers
08006b3c g     F .text	0000005c raise
08017d6c g     O .rodata	00000080 OPAMP_OPAMP4_CR_fields
08003c90 g     F .text	00000010 free
080034d8 g     F .text	00000002 __sinit_lock_acquire
0800c6dc  w    F .text	00000002 DMA2_Channel3_IRQHandler
08015dcc g     O .rodata	000000d0 EXTI_FTSR1_fields
0800b764 g     F .text	0000001c USBD_VCP_InterfaceStrDescriptor
08013bec g     O .rodata	00000100 CAN_F7R1_fields
08004534 g     F .text	000000a8 __multadd
0800acce g     F .text	0000005a USBD_LL_SetupStage
08004520 g     F .text	00000012 _Bfree
08007a08 g     F .text	0000000a Error_Handler
0801bf94 g     O .rodata	00000010 WWDG_CR_fields
0800c6dc  w    F .text	00000002 EXTI2_TSC_IRQHandler
08017984 g     O .rodata	00000008 NVIC_STIR_fields
0800c6dc  w    F .text	00000002 TIM1_BRK_TIM15_IRQHandler
0801abec g     O .rodata	00000050 TIM8_CCMR3_Output_fields



Disassembly of section .text:

080001c0 <deregister_tm_clones>:
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <deregister_tm_clones+0x10>)
 80001c2:	4b04      	ldr	r3, [pc, #16]	; (80001d4 <deregister_tm_clones+0x14>)
 80001c4:	4283      	cmp	r3, r0
 80001c6:	d002      	beq.n	80001ce <deregister_tm_clones+0xe>
 80001c8:	4b03      	ldr	r3, [pc, #12]	; (80001d8 <deregister_tm_clones+0x18>)
 80001ca:	b103      	cbz	r3, 80001ce <deregister_tm_clones+0xe>
 80001cc:	4718      	bx	r3
 80001ce:	4770      	bx	lr
 80001d0:	20000c24 	.word	0x20000c24
 80001d4:	20000c24 	.word	0x20000c24
 80001d8:	00000000 	.word	0x00000000

080001dc <register_tm_clones>:
 80001dc:	4805      	ldr	r0, [pc, #20]	; (80001f4 <register_tm_clones+0x18>)
 80001de:	4906      	ldr	r1, [pc, #24]	; (80001f8 <register_tm_clones+0x1c>)
 80001e0:	1a0b      	subs	r3, r1, r0
 80001e2:	0fd9      	lsrs	r1, r3, #31
 80001e4:	eb01 01a3 	add.w	r1, r1, r3, asr #2
 80001e8:	1049      	asrs	r1, r1, #1
 80001ea:	d002      	beq.n	80001f2 <register_tm_clones+0x16>
 80001ec:	4b03      	ldr	r3, [pc, #12]	; (80001fc <register_tm_clones+0x20>)
 80001ee:	b103      	cbz	r3, 80001f2 <register_tm_clones+0x16>
 80001f0:	4718      	bx	r3
 80001f2:	4770      	bx	lr
 80001f4:	20000c24 	.word	0x20000c24
 80001f8:	20000c24 	.word	0x20000c24
 80001fc:	00000000 	.word	0x00000000

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c06      	ldr	r4, [pc, #24]	; (800021c <__do_global_dtors_aux+0x1c>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b943      	cbnz	r3, 800021a <__do_global_dtors_aux+0x1a>
 8000208:	f7ff ffda 	bl	80001c0 <deregister_tm_clones>
 800020c:	4b04      	ldr	r3, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	b113      	cbz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000210:	4804      	ldr	r0, [pc, #16]	; (8000224 <__do_global_dtors_aux+0x24>)
 8000212:	f3af 8000 	nop.w
 8000216:	2301      	movs	r3, #1
 8000218:	7023      	strb	r3, [r4, #0]
 800021a:	bd10      	pop	{r4, pc}
 800021c:	20000c24 	.word	0x20000c24
 8000220:	00000000 	.word	0x00000000
 8000224:	0800c6f4 	.word	0x0800c6f4

08000228 <frame_dummy>:
 8000228:	b508      	push	{r3, lr}
 800022a:	4b04      	ldr	r3, [pc, #16]	; (800023c <frame_dummy+0x14>)
 800022c:	b11b      	cbz	r3, 8000236 <frame_dummy+0xe>
 800022e:	4904      	ldr	r1, [pc, #16]	; (8000240 <frame_dummy+0x18>)
 8000230:	4804      	ldr	r0, [pc, #16]	; (8000244 <frame_dummy+0x1c>)
 8000232:	f3af 8000 	nop.w
 8000236:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800023a:	e7cf      	b.n	80001dc <register_tm_clones>
 800023c:	00000000 	.word	0x00000000
 8000240:	20000c28 	.word	0x20000c28
 8000244:	0800c6f4 	.word	0x0800c6f4

08000248 <mytest>:
@@ Function Header Block
    .align  2               @ Code alignment - 2^n alignment (n=2)
                            @ This causes the assembler to use 4 byte alignment

    .syntax unified         @ Sets the instruction set to the new unified ARM + THUMB
                            @ instructions. The default is divided (separate instruction sets)
 8000248:	b500      	push	{lr}

 800024a:	b402      	push	{r1}
    .global mytest          @ Make the symbol name for the function visible to the linker
 800024c:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}

 800024e:	f04f 0000 	mov.w	r0, #0
    .code   16              @ 16bit THUMB code (BOTH .code and .thumb_func are required)
 8000252:	f00b fbc5 	bl	800b9e0 <BSP_LED_Toggle>
    .thumb_func             @ Specifies that the following symbol is the name of a THUMB
 8000256:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
                            @ encoded function. Necessary for interlinking between ARM and THUMB code.
 8000258:	4908      	ldr	r1, [pc, #32]	; (800027c <my_Init+0x4>)

 800025a:	6808      	ldr	r0, [r1, #0]
    .type   mytest, %function   @ Declares that mytest symbol is a function (not strictly required)
 800025c:	bc02      	pop	{r1}

 800025e:	bd00      	pop	{pc}

08000260 <my_Tick>:
mytest:

    push {lr}                @ Put aside registers we want to restore later

    mov  r0, #1                     @ r0 holds our argument for the LED toggle function
                                    @ So pass it a value
 8000260:	b500      	push	{lr}

 8000262:	b403      	push	{r0, r1}
    bl   BSP_LED_Toggle             @ call BSP C function using Branch with Link (bl)
    
 8000264:	4905      	ldr	r1, [pc, #20]	; (800027c <my_Init+0x4>)
    ldr  r1, =myTickCount
 8000266:	6808      	ldr	r0, [r1, #0]
    ldr  r0, [r1]
 8000268:	f100 0001 	add.w	r0, r0, #1

 800026c:	6008      	str	r0, [r1, #0]
    pop  {lr}                @ Bring all the register values back
 800026e:	bc03      	pop	{r0, r1}

 8000270:	bd00      	pop	{pc}
 8000272:	bf00      	nop

08000274 <my_Loop>:
    .global my_Tick             @@ Expose my_Tick to the linker
    .code   16                  @@ - 16bit THUMB code (BOTH are required!)
    .thumb_func                 @@ /

    .type   my_Tick, %function  @@ - symbol type (not req)

 8000274:	b500      	push	{lr}
@@ Declaration : void my_Tick( void )
 8000276:	bd00      	pop	{pc}

08000278 <my_Init>:
    ldr  r0, [r1]           @@ Load r0 with the address pointed at by r1 (myTickCount address)
    add  r0, r0, #1         @@ Increment r0
    str  r0, [r1]           @@ Store the current r0 value back to the address pointed at by r1

    pop {lr}

 8000278:	b500      	push	{lr}
    bx lr                  @@ Return to the address stored in lr
 800027a:	bd00      	pop	{pc}
                            @ encoded function. Necessary for interlinking between ARM and THUMB code.
 800027c:	20000000 	.word	0x20000000

08000280 <add_test>:
@ Input: r0, r1 (i.e. r0 holds x, r1 holds y)
@ Returns: r0
@
@ Here is the actual add_test function
    add_test:
    push {r4,r5, lr}    @ push the r4, r5 and lr register on the stack
 8000280:	b530      	push	{r4, r5, lr}
   
    mov r5, r0
 8000282:	4605      	mov	r5, r0
    mov r4, #0
 8000284:	f04f 0400 	mov.w	r4, #0

08000288 <loop>:

    loop:
    cmp r4, #8
 8000288:	2c08      	cmp	r4, #8
    beq exit
 800028a:	d008      	beq.n	800029e <exit>
    mov r0, r4
 800028c:	4620      	mov	r0, r4
    bl   BSP_LED_Toggle             @ call BSP C function using Branch with Link (bl)
 800028e:	f00b fba7 	bl	800b9e0 <BSP_LED_Toggle>
    
    mov r0, r5
 8000292:	4628      	mov	r0, r5
    bl busy_delay
 8000294:	f000 f806 	bl	80002a4 <busy_delay>

    add r4, r4, #1
 8000298:	f104 0401 	add.w	r4, r4, #1
    b loop
 800029c:	e7f4      	b.n	8000288 <loop>

0800029e <exit>:



    exit:
    pop {r4,r5, lr}      @ pop the r4,r5 and lr register out of the stack
 800029e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    bx lr                @ Return (Branch eXchange) to the address in the link register (lr)
 80002a2:	4770      	bx	lr

080002a4 <busy_delay>:
@ Input: r0 (i.e. r0 holds number of cycles to delay)
@ Returns: r0
@
@ Here is the actual function. DO NOT MODIFY THIS FUNCTION.
    busy_delay:
    push {r5}
 80002a4:	b420      	push	{r5}
    mov r5, r0
 80002a6:	4605      	mov	r5, r0

080002a8 <delay_1oop>:

    delay_1oop:
    subs r5, r5, #1
 80002a8:	3d01      	subs	r5, #1
    bge delay_1oop
 80002aa:	dafd      	bge.n	80002a8 <delay_1oop>
    mov r0, #0 @ Return zero (success)
 80002ac:	f04f 0000 	mov.w	r0, #0
    pop {r5}
 80002b0:	bc20      	pop	{r5}
    bx lr @ Return (Branch eXchange) to the address in the link register (lr)
 80002b2:	4770      	bx	lr

080002b4 <pt_led_demo_a2>:
@ Input: r0, r1 (i.e. r0 holds x, r1 holds y)
@ Returns: r0
@
@ Here is the actual add_test function
    pt_led_demo_a2:
    push {r4,r5, lr}    @ push the r4, r5 and lr register on the stack
 80002b4:	b530      	push	{r4, r5, lr}
   
    
    pop {r4,r5, lr}      @ pop the r4,r5 and lr register out of the stack
 80002b6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    bx lr                @ Return (Branch eXchange) to the address in the link register (lr)
 80002ba:	4770      	bx	lr

080002bc <atexit>:
 80002bc:	2300      	movs	r3, #0
 80002be:	4601      	mov	r1, r0
 80002c0:	461a      	mov	r2, r3
 80002c2:	4618      	mov	r0, r3
 80002c4:	f001 bed8 	b.w	8002078 <__register_exitproc>

080002c8 <__errno>:
 80002c8:	4b01      	ldr	r3, [pc, #4]	; (80002d0 <__errno+0x8>)
 80002ca:	6818      	ldr	r0, [r3, #0]
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop
 80002d0:	20000008 	.word	0x20000008

080002d4 <__libc_fini_array>:
 80002d4:	b538      	push	{r3, r4, r5, lr}
 80002d6:	4b08      	ldr	r3, [pc, #32]	; (80002f8 <__libc_fini_array+0x24>)
 80002d8:	4d08      	ldr	r5, [pc, #32]	; (80002fc <__libc_fini_array+0x28>)
 80002da:	1b5b      	subs	r3, r3, r5
 80002dc:	109c      	asrs	r4, r3, #2
 80002de:	d007      	beq.n	80002f0 <__libc_fini_array+0x1c>
 80002e0:	3b04      	subs	r3, #4
 80002e2:	441d      	add	r5, r3
 80002e4:	3c01      	subs	r4, #1
 80002e6:	f855 3904 	ldr.w	r3, [r5], #-4
 80002ea:	4798      	blx	r3
 80002ec:	2c00      	cmp	r4, #0
 80002ee:	d1f9      	bne.n	80002e4 <__libc_fini_array+0x10>
 80002f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80002f4:	f00c ba04 	b.w	800c700 <_fini>
 80002f8:	0801c1b8 	.word	0x0801c1b8
 80002fc:	0801c1b4 	.word	0x0801c1b4

08000300 <__libc_init_array>:
 8000300:	b570      	push	{r4, r5, r6, lr}
 8000302:	4e0d      	ldr	r6, [pc, #52]	; (8000338 <__libc_init_array+0x38>)
 8000304:	4d0d      	ldr	r5, [pc, #52]	; (800033c <__libc_init_array+0x3c>)
 8000306:	1b76      	subs	r6, r6, r5
 8000308:	10b6      	asrs	r6, r6, #2
 800030a:	d006      	beq.n	800031a <__libc_init_array+0x1a>
 800030c:	2400      	movs	r4, #0
 800030e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000312:	3401      	adds	r4, #1
 8000314:	4798      	blx	r3
 8000316:	42a6      	cmp	r6, r4
 8000318:	d1f9      	bne.n	800030e <__libc_init_array+0xe>
 800031a:	4e09      	ldr	r6, [pc, #36]	; (8000340 <__libc_init_array+0x40>)
 800031c:	4d09      	ldr	r5, [pc, #36]	; (8000344 <__libc_init_array+0x44>)
 800031e:	1b76      	subs	r6, r6, r5
 8000320:	f00c f9e8 	bl	800c6f4 <_init>
 8000324:	10b6      	asrs	r6, r6, #2
 8000326:	d006      	beq.n	8000336 <__libc_init_array+0x36>
 8000328:	2400      	movs	r4, #0
 800032a:	f855 3b04 	ldr.w	r3, [r5], #4
 800032e:	3401      	adds	r4, #1
 8000330:	4798      	blx	r3
 8000332:	42a6      	cmp	r6, r4
 8000334:	d1f9      	bne.n	800032a <__libc_init_array+0x2a>
 8000336:	bd70      	pop	{r4, r5, r6, pc}
 8000338:	0801c1ac 	.word	0x0801c1ac
 800033c:	0801c1ac 	.word	0x0801c1ac
 8000340:	0801c1b4 	.word	0x0801c1b4
 8000344:	0801c1ac 	.word	0x0801c1ac

08000348 <memset>:
 8000348:	0783      	lsls	r3, r0, #30
 800034a:	b530      	push	{r4, r5, lr}
 800034c:	d048      	beq.n	80003e0 <memset+0x98>
 800034e:	1e54      	subs	r4, r2, #1
 8000350:	2a00      	cmp	r2, #0
 8000352:	d03f      	beq.n	80003d4 <memset+0x8c>
 8000354:	b2ca      	uxtb	r2, r1
 8000356:	4603      	mov	r3, r0
 8000358:	e001      	b.n	800035e <memset+0x16>
 800035a:	3c01      	subs	r4, #1
 800035c:	d33a      	bcc.n	80003d4 <memset+0x8c>
 800035e:	f803 2b01 	strb.w	r2, [r3], #1
 8000362:	079d      	lsls	r5, r3, #30
 8000364:	d1f9      	bne.n	800035a <memset+0x12>
 8000366:	2c03      	cmp	r4, #3
 8000368:	d92d      	bls.n	80003c6 <memset+0x7e>
 800036a:	b2cd      	uxtb	r5, r1
 800036c:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8000370:	2c0f      	cmp	r4, #15
 8000372:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8000376:	d936      	bls.n	80003e6 <memset+0x9e>
 8000378:	f1a4 0210 	sub.w	r2, r4, #16
 800037c:	f022 0c0f 	bic.w	ip, r2, #15
 8000380:	f103 0e20 	add.w	lr, r3, #32
 8000384:	44e6      	add	lr, ip
 8000386:	ea4f 1c12 	mov.w	ip, r2, lsr #4
 800038a:	f103 0210 	add.w	r2, r3, #16
 800038e:	e942 5504 	strd	r5, r5, [r2, #-16]
 8000392:	e942 5502 	strd	r5, r5, [r2, #-8]
 8000396:	3210      	adds	r2, #16
 8000398:	4572      	cmp	r2, lr
 800039a:	d1f8      	bne.n	800038e <memset+0x46>
 800039c:	f10c 0201 	add.w	r2, ip, #1
 80003a0:	f014 0f0c 	tst.w	r4, #12
 80003a4:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80003a8:	f004 0c0f 	and.w	ip, r4, #15
 80003ac:	d013      	beq.n	80003d6 <memset+0x8e>
 80003ae:	f1ac 0304 	sub.w	r3, ip, #4
 80003b2:	f023 0303 	bic.w	r3, r3, #3
 80003b6:	3304      	adds	r3, #4
 80003b8:	4413      	add	r3, r2
 80003ba:	f842 5b04 	str.w	r5, [r2], #4
 80003be:	4293      	cmp	r3, r2
 80003c0:	d1fb      	bne.n	80003ba <memset+0x72>
 80003c2:	f00c 0403 	and.w	r4, ip, #3
 80003c6:	b12c      	cbz	r4, 80003d4 <memset+0x8c>
 80003c8:	b2ca      	uxtb	r2, r1
 80003ca:	441c      	add	r4, r3
 80003cc:	f803 2b01 	strb.w	r2, [r3], #1
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d1fb      	bne.n	80003cc <memset+0x84>
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	4664      	mov	r4, ip
 80003d8:	4613      	mov	r3, r2
 80003da:	2c00      	cmp	r4, #0
 80003dc:	d1f4      	bne.n	80003c8 <memset+0x80>
 80003de:	e7f9      	b.n	80003d4 <memset+0x8c>
 80003e0:	4603      	mov	r3, r0
 80003e2:	4614      	mov	r4, r2
 80003e4:	e7bf      	b.n	8000366 <memset+0x1e>
 80003e6:	461a      	mov	r2, r3
 80003e8:	46a4      	mov	ip, r4
 80003ea:	e7e0      	b.n	80003ae <memset+0x66>

080003ec <_printf_r>:
 80003ec:	b40e      	push	{r1, r2, r3}
 80003ee:	b500      	push	{lr}
 80003f0:	b082      	sub	sp, #8
 80003f2:	ab03      	add	r3, sp, #12
 80003f4:	6881      	ldr	r1, [r0, #8]
 80003f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80003fa:	9301      	str	r3, [sp, #4]
 80003fc:	f000 fb04 	bl	8000a08 <_vfprintf_r>
 8000400:	b002      	add	sp, #8
 8000402:	f85d eb04 	ldr.w	lr, [sp], #4
 8000406:	b003      	add	sp, #12
 8000408:	4770      	bx	lr
 800040a:	bf00      	nop

0800040c <printf>:
 800040c:	b40f      	push	{r0, r1, r2, r3}
 800040e:	b500      	push	{lr}
 8000410:	4907      	ldr	r1, [pc, #28]	; (8000430 <printf+0x24>)
 8000412:	b083      	sub	sp, #12
 8000414:	ab04      	add	r3, sp, #16
 8000416:	6808      	ldr	r0, [r1, #0]
 8000418:	f853 2b04 	ldr.w	r2, [r3], #4
 800041c:	6881      	ldr	r1, [r0, #8]
 800041e:	9301      	str	r3, [sp, #4]
 8000420:	f000 faf2 	bl	8000a08 <_vfprintf_r>
 8000424:	b003      	add	sp, #12
 8000426:	f85d eb04 	ldr.w	lr, [sp], #4
 800042a:	b004      	add	sp, #16
 800042c:	4770      	bx	lr
 800042e:	bf00      	nop
 8000430:	20000008 	.word	0x20000008

08000434 <_putchar_r>:
 8000434:	6882      	ldr	r2, [r0, #8]
 8000436:	f004 bd9d 	b.w	8004f74 <_putc_r>
 800043a:	bf00      	nop

0800043c <putchar>:
 800043c:	4b02      	ldr	r3, [pc, #8]	; (8000448 <putchar+0xc>)
 800043e:	4601      	mov	r1, r0
 8000440:	6818      	ldr	r0, [r3, #0]
 8000442:	6882      	ldr	r2, [r0, #8]
 8000444:	f004 bd96 	b.w	8004f74 <_putc_r>
 8000448:	20000008 	.word	0x20000008

0800044c <_puts_r>:
 800044c:	b570      	push	{r4, r5, r6, lr}
 800044e:	4604      	mov	r4, r0
 8000450:	b088      	sub	sp, #32
 8000452:	4608      	mov	r0, r1
 8000454:	460d      	mov	r5, r1
 8000456:	f000 f973 	bl	8000740 <strlen>
 800045a:	4e15      	ldr	r6, [pc, #84]	; (80004b0 <_puts_r+0x64>)
 800045c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800045e:	9005      	str	r0, [sp, #20]
 8000460:	2101      	movs	r1, #1
 8000462:	1843      	adds	r3, r0, r1
 8000464:	e9cd 6106 	strd	r6, r1, [sp, #24]
 8000468:	a804      	add	r0, sp, #16
 800046a:	2102      	movs	r1, #2
 800046c:	9504      	str	r5, [sp, #16]
 800046e:	9303      	str	r3, [sp, #12]
 8000470:	68a5      	ldr	r5, [r4, #8]
 8000472:	9001      	str	r0, [sp, #4]
 8000474:	9102      	str	r1, [sp, #8]
 8000476:	b1b2      	cbz	r2, 80004a6 <_puts_r+0x5a>
 8000478:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
 800047c:	049a      	lsls	r2, r3, #18
 800047e:	d406      	bmi.n	800048e <_puts_r+0x42>
 8000480:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 8000482:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000486:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800048a:	81ab      	strh	r3, [r5, #12]
 800048c:	666a      	str	r2, [r5, #100]	; 0x64
 800048e:	aa01      	add	r2, sp, #4
 8000490:	4629      	mov	r1, r5
 8000492:	4620      	mov	r0, r4
 8000494:	f003 f98e 	bl	80037b4 <__sfvwrite_r>
 8000498:	2800      	cmp	r0, #0
 800049a:	bf14      	ite	ne
 800049c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80004a0:	200a      	moveq	r0, #10
 80004a2:	b008      	add	sp, #32
 80004a4:	bd70      	pop	{r4, r5, r6, pc}
 80004a6:	4620      	mov	r0, r4
 80004a8:	f003 f80e 	bl	80034c8 <__sinit>
 80004ac:	e7e4      	b.n	8000478 <_puts_r+0x2c>
 80004ae:	bf00      	nop
 80004b0:	0801c080 	.word	0x0801c080

080004b4 <puts>:
 80004b4:	4b02      	ldr	r3, [pc, #8]	; (80004c0 <puts+0xc>)
 80004b6:	4601      	mov	r1, r0
 80004b8:	6818      	ldr	r0, [r3, #0]
 80004ba:	f7ff bfc7 	b.w	800044c <_puts_r>
 80004be:	bf00      	nop
 80004c0:	20000008 	.word	0x20000008

080004c4 <setvbuf>:
 80004c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80004c8:	4c5a      	ldr	r4, [pc, #360]	; (8000634 <setvbuf+0x170>)
 80004ca:	f8d4 8000 	ldr.w	r8, [r4]
 80004ce:	b083      	sub	sp, #12
 80004d0:	4604      	mov	r4, r0
 80004d2:	460e      	mov	r6, r1
 80004d4:	4617      	mov	r7, r2
 80004d6:	461d      	mov	r5, r3
 80004d8:	f1b8 0f00 	cmp.w	r8, #0
 80004dc:	d003      	beq.n	80004e6 <setvbuf+0x22>
 80004de:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d068      	beq.n	80005b8 <setvbuf+0xf4>
 80004e6:	2f02      	cmp	r7, #2
 80004e8:	d005      	beq.n	80004f6 <setvbuf+0x32>
 80004ea:	2f01      	cmp	r7, #1
 80004ec:	f200 808e 	bhi.w	800060c <setvbuf+0x148>
 80004f0:	2d00      	cmp	r5, #0
 80004f2:	f2c0 808b 	blt.w	800060c <setvbuf+0x148>
 80004f6:	4621      	mov	r1, r4
 80004f8:	4640      	mov	r0, r8
 80004fa:	f002 febb 	bl	8003274 <_fflush_r>
 80004fe:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8000500:	b141      	cbz	r1, 8000514 <setvbuf+0x50>
 8000502:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8000506:	4299      	cmp	r1, r3
 8000508:	d002      	beq.n	8000510 <setvbuf+0x4c>
 800050a:	4640      	mov	r0, r8
 800050c:	f003 f84c 	bl	80035a8 <_free_r>
 8000510:	2300      	movs	r3, #0
 8000512:	6323      	str	r3, [r4, #48]	; 0x30
 8000514:	f9b4 c00c 	ldrsh.w	ip, [r4, #12]
 8000518:	2300      	movs	r3, #0
 800051a:	f01c 0f80 	tst.w	ip, #128	; 0x80
 800051e:	61a3      	str	r3, [r4, #24]
 8000520:	6063      	str	r3, [r4, #4]
 8000522:	d151      	bne.n	80005c8 <setvbuf+0x104>
 8000524:	f42c 6c4a 	bic.w	ip, ip, #3232	; 0xca0
 8000528:	f02c 0c03 	bic.w	ip, ip, #3
 800052c:	2f02      	cmp	r7, #2
 800052e:	f8a4 c00c 	strh.w	ip, [r4, #12]
 8000532:	d057      	beq.n	80005e4 <setvbuf+0x120>
 8000534:	ab01      	add	r3, sp, #4
 8000536:	466a      	mov	r2, sp
 8000538:	4621      	mov	r1, r4
 800053a:	4640      	mov	r0, r8
 800053c:	f003 fb70 	bl	8003c20 <__swhatbuf_r>
 8000540:	89a3      	ldrh	r3, [r4, #12]
 8000542:	4318      	orrs	r0, r3
 8000544:	81a0      	strh	r0, [r4, #12]
 8000546:	b325      	cbz	r5, 8000592 <setvbuf+0xce>
 8000548:	b326      	cbz	r6, 8000594 <setvbuf+0xd0>
 800054a:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
 800054e:	b37b      	cbz	r3, 80005b0 <setvbuf+0xec>
 8000550:	9b00      	ldr	r3, [sp, #0]
 8000552:	f9b4 c00c 	ldrsh.w	ip, [r4, #12]
 8000556:	6026      	str	r6, [r4, #0]
 8000558:	42ab      	cmp	r3, r5
 800055a:	bf1c      	itt	ne
 800055c:	f44c 6c00 	orrne.w	ip, ip, #2048	; 0x800
 8000560:	f8a4 c00c 	strhne.w	ip, [r4, #12]
 8000564:	2f01      	cmp	r7, #1
 8000566:	bf04      	itt	eq
 8000568:	f04c 0c01 	orreq.w	ip, ip, #1
 800056c:	f8a4 c00c 	strheq.w	ip, [r4, #12]
 8000570:	f01c 0008 	ands.w	r0, ip, #8
 8000574:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8000578:	fa1f f38c 	uxth.w	r3, ip
 800057c:	d020      	beq.n	80005c0 <setvbuf+0xfc>
 800057e:	f013 0001 	ands.w	r0, r3, #1
 8000582:	d03f      	beq.n	8000604 <setvbuf+0x140>
 8000584:	2000      	movs	r0, #0
 8000586:	426d      	negs	r5, r5
 8000588:	60a0      	str	r0, [r4, #8]
 800058a:	61a5      	str	r5, [r4, #24]
 800058c:	b003      	add	sp, #12
 800058e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000592:	9d00      	ldr	r5, [sp, #0]
 8000594:	4628      	mov	r0, r5
 8000596:	f003 fb73 	bl	8003c80 <malloc>
 800059a:	4606      	mov	r6, r0
 800059c:	2800      	cmp	r0, #0
 800059e:	d038      	beq.n	8000612 <setvbuf+0x14e>
 80005a0:	89a3      	ldrh	r3, [r4, #12]
 80005a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005a6:	81a3      	strh	r3, [r4, #12]
 80005a8:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d1cf      	bne.n	8000550 <setvbuf+0x8c>
 80005b0:	4640      	mov	r0, r8
 80005b2:	f002 ff89 	bl	80034c8 <__sinit>
 80005b6:	e7cb      	b.n	8000550 <setvbuf+0x8c>
 80005b8:	4640      	mov	r0, r8
 80005ba:	f002 ff85 	bl	80034c8 <__sinit>
 80005be:	e792      	b.n	80004e6 <setvbuf+0x22>
 80005c0:	60a0      	str	r0, [r4, #8]
 80005c2:	b003      	add	sp, #12
 80005c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80005c8:	6921      	ldr	r1, [r4, #16]
 80005ca:	4640      	mov	r0, r8
 80005cc:	f002 ffec 	bl	80035a8 <_free_r>
 80005d0:	f9b4 c00c 	ldrsh.w	ip, [r4, #12]
 80005d4:	f42c 6c4a 	bic.w	ip, ip, #3232	; 0xca0
 80005d8:	f02c 0c03 	bic.w	ip, ip, #3
 80005dc:	2f02      	cmp	r7, #2
 80005de:	f8a4 c00c 	strh.w	ip, [r4, #12]
 80005e2:	d1a7      	bne.n	8000534 <setvbuf+0x70>
 80005e4:	2000      	movs	r0, #0
 80005e6:	f104 0343 	add.w	r3, r4, #67	; 0x43
 80005ea:	f04c 0c02 	orr.w	ip, ip, #2
 80005ee:	2100      	movs	r1, #0
 80005f0:	2201      	movs	r2, #1
 80005f2:	e9c4 3204 	strd	r3, r2, [r4, #16]
 80005f6:	f8a4 c00c 	strh.w	ip, [r4, #12]
 80005fa:	60a1      	str	r1, [r4, #8]
 80005fc:	6023      	str	r3, [r4, #0]
 80005fe:	b003      	add	sp, #12
 8000600:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000604:	60a5      	str	r5, [r4, #8]
 8000606:	b003      	add	sp, #12
 8000608:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800060c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000610:	e7d7      	b.n	80005c2 <setvbuf+0xfe>
 8000612:	f8dd 9000 	ldr.w	r9, [sp]
 8000616:	45a9      	cmp	r9, r5
 8000618:	d004      	beq.n	8000624 <setvbuf+0x160>
 800061a:	4648      	mov	r0, r9
 800061c:	f003 fb30 	bl	8003c80 <malloc>
 8000620:	4606      	mov	r6, r0
 8000622:	b920      	cbnz	r0, 800062e <setvbuf+0x16a>
 8000624:	f9b4 c00c 	ldrsh.w	ip, [r4, #12]
 8000628:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800062c:	e7db      	b.n	80005e6 <setvbuf+0x122>
 800062e:	464d      	mov	r5, r9
 8000630:	e7b6      	b.n	80005a0 <setvbuf+0xdc>
 8000632:	bf00      	nop
 8000634:	20000008 	.word	0x20000008

08000638 <strcasecmp>:
 8000638:	b510      	push	{r4, lr}
 800063a:	4c11      	ldr	r4, [pc, #68]	; (8000680 <strcasecmp+0x48>)
 800063c:	4686      	mov	lr, r0
 800063e:	f81e cb01 	ldrb.w	ip, [lr], #1
 8000642:	f814 300c 	ldrb.w	r3, [r4, ip]
 8000646:	f003 0303 	and.w	r3, r3, #3
 800064a:	2b01      	cmp	r3, #1
 800064c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000650:	4662      	mov	r2, ip
 8000652:	bf08      	it	eq
 8000654:	f10c 0220 	addeq.w	r2, ip, #32
 8000658:	f814 c003 	ldrb.w	ip, [r4, r3]
 800065c:	f00c 0c03 	and.w	ip, ip, #3
 8000660:	f1bc 0f01 	cmp.w	ip, #1
 8000664:	4618      	mov	r0, r3
 8000666:	d004      	beq.n	8000672 <strcasecmp+0x3a>
 8000668:	1ad2      	subs	r2, r2, r3
 800066a:	d106      	bne.n	800067a <strcasecmp+0x42>
 800066c:	2b00      	cmp	r3, #0
 800066e:	d1e6      	bne.n	800063e <strcasecmp+0x6>
 8000670:	bd10      	pop	{r4, pc}
 8000672:	3320      	adds	r3, #32
 8000674:	1ad0      	subs	r0, r2, r3
 8000676:	d0e2      	beq.n	800063e <strcasecmp+0x6>
 8000678:	bd10      	pop	{r4, pc}
 800067a:	4610      	mov	r0, r2
 800067c:	bd10      	pop	{r4, pc}
 800067e:	bf00      	nop
 8000680:	0800cba5 	.word	0x0800cba5

08000684 <strcpy>:
 8000684:	ea80 0201 	eor.w	r2, r0, r1
 8000688:	4684      	mov	ip, r0
 800068a:	f012 0f03 	tst.w	r2, #3
 800068e:	d14f      	bne.n	8000730 <strcpy+0xac>
 8000690:	f011 0f03 	tst.w	r1, #3
 8000694:	d132      	bne.n	80006fc <strcpy+0x78>
 8000696:	f84d 4d04 	str.w	r4, [sp, #-4]!
 800069a:	f011 0f04 	tst.w	r1, #4
 800069e:	f851 3b04 	ldr.w	r3, [r1], #4
 80006a2:	d00b      	beq.n	80006bc <strcpy+0x38>
 80006a4:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 80006a8:	439a      	bics	r2, r3
 80006aa:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 80006ae:	bf04      	itt	eq
 80006b0:	f84c 3b04 	streq.w	r3, [ip], #4
 80006b4:	f851 3b04 	ldreq.w	r3, [r1], #4
 80006b8:	d116      	bne.n	80006e8 <strcpy+0x64>
 80006ba:	bf00      	nop
 80006bc:	f851 4b04 	ldr.w	r4, [r1], #4
 80006c0:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 80006c4:	439a      	bics	r2, r3
 80006c6:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 80006ca:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
 80006ce:	d10b      	bne.n	80006e8 <strcpy+0x64>
 80006d0:	f84c 3b04 	str.w	r3, [ip], #4
 80006d4:	43a2      	bics	r2, r4
 80006d6:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 80006da:	bf04      	itt	eq
 80006dc:	f851 3b04 	ldreq.w	r3, [r1], #4
 80006e0:	f84c 4b04 	streq.w	r4, [ip], #4
 80006e4:	d0ea      	beq.n	80006bc <strcpy+0x38>
 80006e6:	4623      	mov	r3, r4
 80006e8:	f80c 3b01 	strb.w	r3, [ip], #1
 80006ec:	f013 0fff 	tst.w	r3, #255	; 0xff
 80006f0:	ea4f 2333 	mov.w	r3, r3, ror #8
 80006f4:	d1f8      	bne.n	80006e8 <strcpy+0x64>
 80006f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80006fa:	4770      	bx	lr
 80006fc:	f011 0f01 	tst.w	r1, #1
 8000700:	d006      	beq.n	8000710 <strcpy+0x8c>
 8000702:	f811 2b01 	ldrb.w	r2, [r1], #1
 8000706:	f80c 2b01 	strb.w	r2, [ip], #1
 800070a:	2a00      	cmp	r2, #0
 800070c:	bf08      	it	eq
 800070e:	4770      	bxeq	lr
 8000710:	f011 0f02 	tst.w	r1, #2
 8000714:	d0bf      	beq.n	8000696 <strcpy+0x12>
 8000716:	f831 2b02 	ldrh.w	r2, [r1], #2
 800071a:	f012 0fff 	tst.w	r2, #255	; 0xff
 800071e:	bf16      	itet	ne
 8000720:	f82c 2b02 	strhne.w	r2, [ip], #2
 8000724:	f88c 2000 	strbeq.w	r2, [ip]
 8000728:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
 800072c:	d1b3      	bne.n	8000696 <strcpy+0x12>
 800072e:	4770      	bx	lr
 8000730:	f811 2b01 	ldrb.w	r2, [r1], #1
 8000734:	f80c 2b01 	strb.w	r2, [ip], #1
 8000738:	2a00      	cmp	r2, #0
 800073a:	d1f9      	bne.n	8000730 <strcpy+0xac>
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop

08000740 <strlen>:
 8000740:	f890 f000 	pld	[r0]
 8000744:	e96d 4502 	strd	r4, r5, [sp, #-8]!
 8000748:	f020 0107 	bic.w	r1, r0, #7
 800074c:	f06f 0c00 	mvn.w	ip, #0
 8000750:	f010 0407 	ands.w	r4, r0, #7
 8000754:	f891 f020 	pld	[r1, #32]
 8000758:	f040 8049 	bne.w	80007ee <strlen+0xae>
 800075c:	f04f 0400 	mov.w	r4, #0
 8000760:	f06f 0007 	mvn.w	r0, #7
 8000764:	e9d1 2300 	ldrd	r2, r3, [r1]
 8000768:	f891 f040 	pld	[r1, #64]	; 0x40
 800076c:	f100 0008 	add.w	r0, r0, #8
 8000770:	fa82 f24c 	uadd8	r2, r2, ip
 8000774:	faa4 f28c 	sel	r2, r4, ip
 8000778:	fa83 f34c 	uadd8	r3, r3, ip
 800077c:	faa2 f38c 	sel	r3, r2, ip
 8000780:	bb4b      	cbnz	r3, 80007d6 <strlen+0x96>
 8000782:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8000786:	fa82 f24c 	uadd8	r2, r2, ip
 800078a:	f100 0008 	add.w	r0, r0, #8
 800078e:	faa4 f28c 	sel	r2, r4, ip
 8000792:	fa83 f34c 	uadd8	r3, r3, ip
 8000796:	faa2 f38c 	sel	r3, r2, ip
 800079a:	b9e3      	cbnz	r3, 80007d6 <strlen+0x96>
 800079c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
 80007a0:	fa82 f24c 	uadd8	r2, r2, ip
 80007a4:	f100 0008 	add.w	r0, r0, #8
 80007a8:	faa4 f28c 	sel	r2, r4, ip
 80007ac:	fa83 f34c 	uadd8	r3, r3, ip
 80007b0:	faa2 f38c 	sel	r3, r2, ip
 80007b4:	b97b      	cbnz	r3, 80007d6 <strlen+0x96>
 80007b6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 80007ba:	f101 0120 	add.w	r1, r1, #32
 80007be:	fa82 f24c 	uadd8	r2, r2, ip
 80007c2:	f100 0008 	add.w	r0, r0, #8
 80007c6:	faa4 f28c 	sel	r2, r4, ip
 80007ca:	fa83 f34c 	uadd8	r3, r3, ip
 80007ce:	faa2 f38c 	sel	r3, r2, ip
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d0c6      	beq.n	8000764 <strlen+0x24>
 80007d6:	2a00      	cmp	r2, #0
 80007d8:	bf04      	itt	eq
 80007da:	3004      	addeq	r0, #4
 80007dc:	461a      	moveq	r2, r3
 80007de:	ba12      	rev	r2, r2
 80007e0:	fab2 f282 	clz	r2, r2
 80007e4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
 80007e8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 80007ec:	4770      	bx	lr
 80007ee:	e9d1 2300 	ldrd	r2, r3, [r1]
 80007f2:	f004 0503 	and.w	r5, r4, #3
 80007f6:	f1c4 0000 	rsb	r0, r4, #0
 80007fa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 80007fe:	f014 0f04 	tst.w	r4, #4
 8000802:	f891 f040 	pld	[r1, #64]	; 0x40
 8000806:	fa0c f505 	lsl.w	r5, ip, r5
 800080a:	ea62 0205 	orn	r2, r2, r5
 800080e:	bf1c      	itt	ne
 8000810:	ea63 0305 	ornne	r3, r3, r5
 8000814:	4662      	movne	r2, ip
 8000816:	f04f 0400 	mov.w	r4, #0
 800081a:	e7a9      	b.n	8000770 <strlen+0x30>

0800081c <strtok>:
 800081c:	4a02      	ldr	r2, [pc, #8]	; (8000828 <strtok+0xc>)
 800081e:	6812      	ldr	r2, [r2, #0]
 8000820:	2301      	movs	r3, #1
 8000822:	325c      	adds	r2, #92	; 0x5c
 8000824:	f000 b802 	b.w	800082c <__strtok_r>
 8000828:	20000008 	.word	0x20000008

0800082c <__strtok_r>:
 800082c:	b4f0      	push	{r4, r5, r6, r7}
 800082e:	4607      	mov	r7, r0
 8000830:	b310      	cbz	r0, 8000878 <__strtok_r+0x4c>
 8000832:	463e      	mov	r6, r7
 8000834:	468c      	mov	ip, r1
 8000836:	f816 0b01 	ldrb.w	r0, [r6], #1
 800083a:	e001      	b.n	8000840 <__strtok_r+0x14>
 800083c:	42a0      	cmp	r0, r4
 800083e:	d016      	beq.n	800086e <__strtok_r+0x42>
 8000840:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8000844:	2c00      	cmp	r4, #0
 8000846:	d1f9      	bne.n	800083c <__strtok_r+0x10>
 8000848:	b1d8      	cbz	r0, 8000882 <__strtok_r+0x56>
 800084a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800084e:	460c      	mov	r4, r1
 8000850:	e001      	b.n	8000856 <__strtok_r+0x2a>
 8000852:	2b00      	cmp	r3, #0
 8000854:	d0f9      	beq.n	800084a <__strtok_r+0x1e>
 8000856:	f814 3b01 	ldrb.w	r3, [r4], #1
 800085a:	429d      	cmp	r5, r3
 800085c:	d1f9      	bne.n	8000852 <__strtok_r+0x26>
 800085e:	b14d      	cbz	r5, 8000874 <__strtok_r+0x48>
 8000860:	2300      	movs	r3, #0
 8000862:	f806 3c01 	strb.w	r3, [r6, #-1]
 8000866:	6016      	str	r6, [r2, #0]
 8000868:	4638      	mov	r0, r7
 800086a:	bcf0      	pop	{r4, r5, r6, r7}
 800086c:	4770      	bx	lr
 800086e:	b15b      	cbz	r3, 8000888 <__strtok_r+0x5c>
 8000870:	4637      	mov	r7, r6
 8000872:	e7de      	b.n	8000832 <__strtok_r+0x6>
 8000874:	462e      	mov	r6, r5
 8000876:	e7f6      	b.n	8000866 <__strtok_r+0x3a>
 8000878:	6817      	ldr	r7, [r2, #0]
 800087a:	2f00      	cmp	r7, #0
 800087c:	d1d9      	bne.n	8000832 <__strtok_r+0x6>
 800087e:	4638      	mov	r0, r7
 8000880:	e7f3      	b.n	800086a <__strtok_r+0x3e>
 8000882:	bcf0      	pop	{r4, r5, r6, r7}
 8000884:	6010      	str	r0, [r2, #0]
 8000886:	4770      	bx	lr
 8000888:	6016      	str	r6, [r2, #0]
 800088a:	4638      	mov	r0, r7
 800088c:	703b      	strb	r3, [r7, #0]
 800088e:	e7ec      	b.n	800086a <__strtok_r+0x3e>

08000890 <strtok_r>:
 8000890:	2301      	movs	r3, #1
 8000892:	f7ff bfcb 	b.w	800082c <__strtok_r>
 8000896:	bf00      	nop

08000898 <_strtoul_l.constprop.0>:
 8000898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800089c:	4607      	mov	r7, r0
 800089e:	484b      	ldr	r0, [pc, #300]	; (80009cc <_strtoul_l.constprop.0+0x134>)
 80008a0:	460e      	mov	r6, r1
 80008a2:	4635      	mov	r5, r6
 80008a4:	f816 cb01 	ldrb.w	ip, [r6], #1
 80008a8:	f810 400c 	ldrb.w	r4, [r0, ip]
 80008ac:	f014 0408 	ands.w	r4, r4, #8
 80008b0:	d1f7      	bne.n	80008a2 <_strtoul_l.constprop.0+0xa>
 80008b2:	f1bc 0f2d 	cmp.w	ip, #45	; 0x2d
 80008b6:	46e6      	mov	lr, ip
 80008b8:	d058      	beq.n	800096c <_strtoul_l.constprop.0+0xd4>
 80008ba:	f1bc 0f2b 	cmp.w	ip, #43	; 0x2b
 80008be:	bf04      	itt	eq
 80008c0:	f896 e000 	ldrbeq.w	lr, [r6]
 80008c4:	1cae      	addeq	r6, r5, #2
 80008c6:	b15b      	cbz	r3, 80008e0 <_strtoul_l.constprop.0+0x48>
 80008c8:	2b10      	cmp	r3, #16
 80008ca:	d054      	beq.n	8000976 <_strtoul_l.constprop.0+0xde>
 80008cc:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80008d0:	fbb8 f8f3 	udiv	r8, r8, r3
 80008d4:	fb03 fa08 	mul.w	sl, r3, r8
 80008d8:	ea6f 0a0a 	mvn.w	sl, sl
 80008dc:	4699      	mov	r9, r3
 80008de:	e008      	b.n	80008f2 <_strtoul_l.constprop.0+0x5a>
 80008e0:	f1be 0f30 	cmp.w	lr, #48	; 0x30
 80008e4:	d05a      	beq.n	800099c <_strtoul_l.constprop.0+0x104>
 80008e6:	230a      	movs	r3, #10
 80008e8:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 80009d0 <_strtoul_l.constprop.0+0x138>
 80008ec:	f04f 0a05 	mov.w	sl, #5
 80008f0:	4699      	mov	r9, r3
 80008f2:	2500      	movs	r5, #0
 80008f4:	4628      	mov	r0, r5
 80008f6:	e007      	b.n	8000908 <_strtoul_l.constprop.0+0x70>
 80008f8:	4540      	cmp	r0, r8
 80008fa:	d815      	bhi.n	8000928 <_strtoul_l.constprop.0+0x90>
 80008fc:	d029      	beq.n	8000952 <_strtoul_l.constprop.0+0xba>
 80008fe:	fb09 c000 	mla	r0, r9, r0, ip
 8000902:	2501      	movs	r5, #1
 8000904:	f816 eb01 	ldrb.w	lr, [r6], #1
 8000908:	f1ae 0c30 	sub.w	ip, lr, #48	; 0x30
 800090c:	f1bc 0f09 	cmp.w	ip, #9
 8000910:	d906      	bls.n	8000920 <_strtoul_l.constprop.0+0x88>
 8000912:	f1ae 0c41 	sub.w	ip, lr, #65	; 0x41
 8000916:	f1bc 0f19 	cmp.w	ip, #25
 800091a:	d808      	bhi.n	800092e <_strtoul_l.constprop.0+0x96>
 800091c:	f1ae 0c37 	sub.w	ip, lr, #55	; 0x37
 8000920:	4563      	cmp	r3, ip
 8000922:	dd0d      	ble.n	8000940 <_strtoul_l.constprop.0+0xa8>
 8000924:	2d00      	cmp	r5, #0
 8000926:	dae7      	bge.n	80008f8 <_strtoul_l.constprop.0+0x60>
 8000928:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800092c:	e7ea      	b.n	8000904 <_strtoul_l.constprop.0+0x6c>
 800092e:	f1ae 0c61 	sub.w	ip, lr, #97	; 0x61
 8000932:	f1bc 0f19 	cmp.w	ip, #25
 8000936:	d803      	bhi.n	8000940 <_strtoul_l.constprop.0+0xa8>
 8000938:	f1ae 0c57 	sub.w	ip, lr, #87	; 0x57
 800093c:	4563      	cmp	r3, ip
 800093e:	dcf1      	bgt.n	8000924 <_strtoul_l.constprop.0+0x8c>
 8000940:	2d00      	cmp	r5, #0
 8000942:	db0b      	blt.n	800095c <_strtoul_l.constprop.0+0xc4>
 8000944:	b104      	cbz	r4, 8000948 <_strtoul_l.constprop.0+0xb0>
 8000946:	4240      	negs	r0, r0
 8000948:	b10a      	cbz	r2, 800094e <_strtoul_l.constprop.0+0xb6>
 800094a:	b96d      	cbnz	r5, 8000968 <_strtoul_l.constprop.0+0xd0>
 800094c:	6011      	str	r1, [r2, #0]
 800094e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000952:	45d4      	cmp	ip, sl
 8000954:	ddd3      	ble.n	80008fe <_strtoul_l.constprop.0+0x66>
 8000956:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800095a:	e7d3      	b.n	8000904 <_strtoul_l.constprop.0+0x6c>
 800095c:	2322      	movs	r3, #34	; 0x22
 800095e:	603b      	str	r3, [r7, #0]
 8000960:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000964:	2a00      	cmp	r2, #0
 8000966:	d0f2      	beq.n	800094e <_strtoul_l.constprop.0+0xb6>
 8000968:	1e71      	subs	r1, r6, #1
 800096a:	e7ef      	b.n	800094c <_strtoul_l.constprop.0+0xb4>
 800096c:	f896 e000 	ldrb.w	lr, [r6]
 8000970:	2401      	movs	r4, #1
 8000972:	1cae      	adds	r6, r5, #2
 8000974:	e7a7      	b.n	80008c6 <_strtoul_l.constprop.0+0x2e>
 8000976:	f1be 0f30 	cmp.w	lr, #48	; 0x30
 800097a:	d121      	bne.n	80009c0 <_strtoul_l.constprop.0+0x128>
 800097c:	7830      	ldrb	r0, [r6, #0]
 800097e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8000982:	2858      	cmp	r0, #88	; 0x58
 8000984:	d116      	bne.n	80009b4 <_strtoul_l.constprop.0+0x11c>
 8000986:	f04f 0910 	mov.w	r9, #16
 800098a:	f896 e001 	ldrb.w	lr, [r6, #1]
 800098e:	f04f 0a0f 	mov.w	sl, #15
 8000992:	3602      	adds	r6, #2
 8000994:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
 8000998:	464b      	mov	r3, r9
 800099a:	e7aa      	b.n	80008f2 <_strtoul_l.constprop.0+0x5a>
 800099c:	7833      	ldrb	r3, [r6, #0]
 800099e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80009a2:	2b58      	cmp	r3, #88	; 0x58
 80009a4:	d0ef      	beq.n	8000986 <_strtoul_l.constprop.0+0xee>
 80009a6:	2308      	movs	r3, #8
 80009a8:	f04f 0a07 	mov.w	sl, #7
 80009ac:	f06f 4860 	mvn.w	r8, #3758096384	; 0xe0000000
 80009b0:	4699      	mov	r9, r3
 80009b2:	e79e      	b.n	80008f2 <_strtoul_l.constprop.0+0x5a>
 80009b4:	4699      	mov	r9, r3
 80009b6:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
 80009ba:	f04f 0a0f 	mov.w	sl, #15
 80009be:	e798      	b.n	80008f2 <_strtoul_l.constprop.0+0x5a>
 80009c0:	f04f 0a0f 	mov.w	sl, #15
 80009c4:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
 80009c8:	4699      	mov	r9, r3
 80009ca:	e792      	b.n	80008f2 <_strtoul_l.constprop.0+0x5a>
 80009cc:	0800cba5 	.word	0x0800cba5
 80009d0:	19999999 	.word	0x19999999

080009d4 <_strtoul_r>:
 80009d4:	e760      	b.n	8000898 <_strtoul_l.constprop.0>
 80009d6:	bf00      	nop

080009d8 <strtoul_l>:
 80009d8:	b410      	push	{r4}
 80009da:	4c04      	ldr	r4, [pc, #16]	; (80009ec <strtoul_l+0x14>)
 80009dc:	4684      	mov	ip, r0
 80009de:	4613      	mov	r3, r2
 80009e0:	6820      	ldr	r0, [r4, #0]
 80009e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80009e6:	460a      	mov	r2, r1
 80009e8:	4661      	mov	r1, ip
 80009ea:	e755      	b.n	8000898 <_strtoul_l.constprop.0>
 80009ec:	20000008 	.word	0x20000008

080009f0 <strtoul>:
 80009f0:	b410      	push	{r4}
 80009f2:	4c04      	ldr	r4, [pc, #16]	; (8000a04 <strtoul+0x14>)
 80009f4:	4684      	mov	ip, r0
 80009f6:	4613      	mov	r3, r2
 80009f8:	6820      	ldr	r0, [r4, #0]
 80009fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80009fe:	460a      	mov	r2, r1
 8000a00:	4661      	mov	r1, ip
 8000a02:	e749      	b.n	8000898 <_strtoul_l.constprop.0>
 8000a04:	20000008 	.word	0x20000008

08000a08 <_vfprintf_r>:
 8000a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a0c:	ed2d 8b06 	vpush	{d8-d10}
 8000a10:	b0bb      	sub	sp, #236	; 0xec
 8000a12:	461c      	mov	r4, r3
 8000a14:	4688      	mov	r8, r1
 8000a16:	4691      	mov	r9, r2
 8000a18:	ee09 0a10 	vmov	s18, r0
 8000a1c:	4605      	mov	r5, r0
 8000a1e:	f003 f887 	bl	8003b30 <_localeconv_r>
 8000a22:	6803      	ldr	r3, [r0, #0]
 8000a24:	9310      	str	r3, [sp, #64]	; 0x40
 8000a26:	4618      	mov	r0, r3
 8000a28:	9409      	str	r4, [sp, #36]	; 0x24
 8000a2a:	f7ff fe89 	bl	8000740 <strlen>
 8000a2e:	900e      	str	r0, [sp, #56]	; 0x38
 8000a30:	b11d      	cbz	r5, 8000a3a <_vfprintf_r+0x32>
 8000a32:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	f000 8242 	beq.w	8000ebe <_vfprintf_r+0x4b6>
 8000a3a:	f9b8 200c 	ldrsh.w	r2, [r8, #12]
 8000a3e:	0495      	lsls	r5, r2, #18
 8000a40:	b293      	uxth	r3, r2
 8000a42:	d40a      	bmi.n	8000a5a <_vfprintf_r+0x52>
 8000a44:	f442 5300 	orr.w	r3, r2, #8192	; 0x2000
 8000a48:	f8d8 2064 	ldr.w	r2, [r8, #100]	; 0x64
 8000a4c:	f8a8 300c 	strh.w	r3, [r8, #12]
 8000a50:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000a54:	b29b      	uxth	r3, r3
 8000a56:	f8c8 2064 	str.w	r2, [r8, #100]	; 0x64
 8000a5a:	0718      	lsls	r0, r3, #28
 8000a5c:	f140 80ab 	bpl.w	8000bb6 <_vfprintf_r+0x1ae>
 8000a60:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8000a64:	2a00      	cmp	r2, #0
 8000a66:	f000 80a6 	beq.w	8000bb6 <_vfprintf_r+0x1ae>
 8000a6a:	f003 031a 	and.w	r3, r3, #26
 8000a6e:	2b0a      	cmp	r3, #10
 8000a70:	f000 80b0 	beq.w	8000bd4 <_vfprintf_r+0x1cc>
 8000a74:	ed9f 7b94 	vldr	d7, [pc, #592]	; 8000cc8 <_vfprintf_r+0x2c0>
 8000a78:	2300      	movs	r3, #0
 8000a7a:	e9cd 331e 	strd	r3, r3, [sp, #120]	; 0x78
 8000a7e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8000a82:	aa2a      	add	r2, sp, #168	; 0xa8
 8000a84:	930b      	str	r3, [sp, #44]	; 0x2c
 8000a86:	921d      	str	r2, [sp, #116]	; 0x74
 8000a88:	4692      	mov	sl, r2
 8000a8a:	930f      	str	r3, [sp, #60]	; 0x3c
 8000a8c:	9311      	str	r3, [sp, #68]	; 0x44
 8000a8e:	9307      	str	r3, [sp, #28]
 8000a90:	f899 3000 	ldrb.w	r3, [r9]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	f000 81a4 	beq.w	8000de2 <_vfprintf_r+0x3da>
 8000a9a:	464c      	mov	r4, r9
 8000a9c:	e004      	b.n	8000aa8 <_vfprintf_r+0xa0>
 8000a9e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	f000 80e5 	beq.w	8000c72 <_vfprintf_r+0x26a>
 8000aa8:	2b25      	cmp	r3, #37	; 0x25
 8000aaa:	d1f8      	bne.n	8000a9e <_vfprintf_r+0x96>
 8000aac:	ebb4 0509 	subs.w	r5, r4, r9
 8000ab0:	f040 80e3 	bne.w	8000c7a <_vfprintf_r+0x272>
 8000ab4:	7823      	ldrb	r3, [r4, #0]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	f000 8193 	beq.w	8000de2 <_vfprintf_r+0x3da>
 8000abc:	2300      	movs	r3, #0
 8000abe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ac2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000ac6:	7865      	ldrb	r5, [r4, #1]
 8000ac8:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
 8000acc:	f104 0901 	add.w	r9, r4, #1
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	469b      	mov	fp, r3
 8000ad4:	f109 0901 	add.w	r9, r9, #1
 8000ad8:	f1a5 0220 	sub.w	r2, r5, #32
 8000adc:	2a58      	cmp	r2, #88	; 0x58
 8000ade:	f200 80f7 	bhi.w	8000cd0 <_vfprintf_r+0x2c8>
 8000ae2:	e8df f012 	tbh	[pc, r2, lsl #1]
 8000ae6:	027f      	.short	0x027f
 8000ae8:	00f500f5 	.word	0x00f500f5
 8000aec:	00f5027a 	.word	0x00f5027a
 8000af0:	00f500f5 	.word	0x00f500f5
 8000af4:	00f500f5 	.word	0x00f500f5
 8000af8:	022d00f5 	.word	0x022d00f5
 8000afc:	00f50275 	.word	0x00f50275
 8000b00:	023d0238 	.word	0x023d0238
 8000b04:	027000f5 	.word	0x027000f5
 8000b08:	00590059 	.word	0x00590059
 8000b0c:	00590059 	.word	0x00590059
 8000b10:	00590059 	.word	0x00590059
 8000b14:	00590059 	.word	0x00590059
 8000b18:	00f50059 	.word	0x00f50059
 8000b1c:	00f500f5 	.word	0x00f500f5
 8000b20:	00f500f5 	.word	0x00f500f5
 8000b24:	00f500f5 	.word	0x00f500f5
 8000b28:	00f500f5 	.word	0x00f500f5
 8000b2c:	025700f5 	.word	0x025700f5
 8000b30:	00f50189 	.word	0x00f50189
 8000b34:	00f50189 	.word	0x00f50189
 8000b38:	00f500f5 	.word	0x00f500f5
 8000b3c:	02b600f5 	.word	0x02b600f5
 8000b40:	00f500f5 	.word	0x00f500f5
 8000b44:	00f50098 	.word	0x00f50098
 8000b48:	00f500f5 	.word	0x00f500f5
 8000b4c:	00f500f5 	.word	0x00f500f5
 8000b50:	00f50088 	.word	0x00f50088
 8000b54:	029500f5 	.word	0x029500f5
 8000b58:	00f500f5 	.word	0x00f500f5
 8000b5c:	00f500f5 	.word	0x00f500f5
 8000b60:	00f500f5 	.word	0x00f500f5
 8000b64:	00f500f5 	.word	0x00f500f5
 8000b68:	00f500f5 	.word	0x00f500f5
 8000b6c:	01f00287 	.word	0x01f00287
 8000b70:	01890189 	.word	0x01890189
 8000b74:	02bb0189 	.word	0x02bb0189
 8000b78:	00f501f0 	.word	0x00f501f0
 8000b7c:	02ec00f5 	.word	0x02ec00f5
 8000b80:	02d600f5 	.word	0x02d600f5
 8000b84:	02c5009a 	.word	0x02c5009a
 8000b88:	00f502c0 	.word	0x00f502c0
 8000b8c:	00f5031b 	.word	0x00f5031b
 8000b90:	00f5008a 	.word	0x00f5008a
 8000b94:	02f900f5 	.word	0x02f900f5
 8000b98:	f1a5 0230 	sub.w	r2, r5, #48	; 0x30
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	f819 5b01 	ldrb.w	r5, [r9], #1
 8000ba2:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8000ba6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8000baa:	f1a5 0230 	sub.w	r2, r5, #48	; 0x30
 8000bae:	2a09      	cmp	r2, #9
 8000bb0:	d9f5      	bls.n	8000b9e <_vfprintf_r+0x196>
 8000bb2:	9106      	str	r1, [sp, #24]
 8000bb4:	e790      	b.n	8000ad8 <_vfprintf_r+0xd0>
 8000bb6:	ee19 0a10 	vmov	r0, s18
 8000bba:	4641      	mov	r1, r8
 8000bbc:	f001 f9f2 	bl	8001fa4 <__swsetup_r>
 8000bc0:	2800      	cmp	r0, #0
 8000bc2:	f041 8126 	bne.w	8001e12 <_vfprintf_r+0x140a>
 8000bc6:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8000bca:	f003 031a 	and.w	r3, r3, #26
 8000bce:	2b0a      	cmp	r3, #10
 8000bd0:	f47f af50 	bne.w	8000a74 <_vfprintf_r+0x6c>
 8000bd4:	f9b8 300e 	ldrsh.w	r3, [r8, #14]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	f6ff af4b 	blt.w	8000a74 <_vfprintf_r+0x6c>
 8000bde:	ee19 0a10 	vmov	r0, s18
 8000be2:	4623      	mov	r3, r4
 8000be4:	464a      	mov	r2, r9
 8000be6:	4641      	mov	r1, r8
 8000be8:	b03b      	add	sp, #236	; 0xec
 8000bea:	ecbd 8b06 	vpop	{d8-d10}
 8000bee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000bf2:	f001 b9a1 	b.w	8001f38 <__sbprintf>
 8000bf6:	f04b 0b10 	orr.w	fp, fp, #16
 8000bfa:	f01b 0120 	ands.w	r1, fp, #32
 8000bfe:	f000 8150 	beq.w	8000ea2 <_vfprintf_r+0x49a>
 8000c02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000c04:	3307      	adds	r3, #7
 8000c06:	f023 0307 	bic.w	r3, r3, #7
 8000c0a:	6859      	ldr	r1, [r3, #4]
 8000c0c:	f853 0b08 	ldr.w	r0, [r3], #8
 8000c10:	9309      	str	r3, [sp, #36]	; 0x24
 8000c12:	2301      	movs	r3, #1
 8000c14:	e00e      	b.n	8000c34 <_vfprintf_r+0x22c>
 8000c16:	f04b 0b10 	orr.w	fp, fp, #16
 8000c1a:	f01b 0120 	ands.w	r1, fp, #32
 8000c1e:	f000 8133 	beq.w	8000e88 <_vfprintf_r+0x480>
 8000c22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000c24:	3307      	adds	r3, #7
 8000c26:	f023 0307 	bic.w	r3, r3, #7
 8000c2a:	6859      	ldr	r1, [r3, #4]
 8000c2c:	f853 0b08 	ldr.w	r0, [r3], #8
 8000c30:	9309      	str	r3, [sp, #36]	; 0x24
 8000c32:	2300      	movs	r3, #0
 8000c34:	2400      	movs	r4, #0
 8000c36:	f88d 4057 	strb.w	r4, [sp, #87]	; 0x57
 8000c3a:	9a05      	ldr	r2, [sp, #20]
 8000c3c:	1c56      	adds	r6, r2, #1
 8000c3e:	f000 8291 	beq.w	8001164 <_vfprintf_r+0x75c>
 8000c42:	f02b 0680 	bic.w	r6, fp, #128	; 0x80
 8000c46:	9603      	str	r6, [sp, #12]
 8000c48:	ea50 0601 	orrs.w	r6, r0, r1
 8000c4c:	f040 8288 	bne.w	8001160 <_vfprintf_r+0x758>
 8000c50:	2a00      	cmp	r2, #0
 8000c52:	f040 830d 	bne.w	8001270 <_vfprintf_r+0x868>
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	f040 851e 	bne.w	8001698 <_vfprintf_r+0xc90>
 8000c5c:	f01b 0301 	ands.w	r3, fp, #1
 8000c60:	9308      	str	r3, [sp, #32]
 8000c62:	f000 8594 	beq.w	800178e <_vfprintf_r+0xd86>
 8000c66:	2330      	movs	r3, #48	; 0x30
 8000c68:	f88d 30a7 	strb.w	r3, [sp, #167]	; 0xa7
 8000c6c:	f10d 06a7 	add.w	r6, sp, #167	; 0xa7
 8000c70:	e29d      	b.n	80011ae <_vfprintf_r+0x7a6>
 8000c72:	ebb4 0509 	subs.w	r5, r4, r9
 8000c76:	f000 80b4 	beq.w	8000de2 <_vfprintf_r+0x3da>
 8000c7a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8000c7c:	442b      	add	r3, r5
 8000c7e:	931f      	str	r3, [sp, #124]	; 0x7c
 8000c80:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8000c82:	3301      	adds	r3, #1
 8000c84:	2b07      	cmp	r3, #7
 8000c86:	e9ca 9500 	strd	r9, r5, [sl]
 8000c8a:	931e      	str	r3, [sp, #120]	; 0x78
 8000c8c:	dc05      	bgt.n	8000c9a <_vfprintf_r+0x292>
 8000c8e:	f10a 0a08 	add.w	sl, sl, #8
 8000c92:	9b07      	ldr	r3, [sp, #28]
 8000c94:	442b      	add	r3, r5
 8000c96:	9307      	str	r3, [sp, #28]
 8000c98:	e70c      	b.n	8000ab4 <_vfprintf_r+0xac>
 8000c9a:	ee19 0a10 	vmov	r0, s18
 8000c9e:	aa1d      	add	r2, sp, #116	; 0x74
 8000ca0:	4641      	mov	r1, r8
 8000ca2:	f004 fc33 	bl	800550c <__sprint_r>
 8000ca6:	b918      	cbnz	r0, 8000cb0 <_vfprintf_r+0x2a8>
 8000ca8:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 8000cac:	e7f1      	b.n	8000c92 <_vfprintf_r+0x28a>
 8000cae:	46b0      	mov	r8, r6
 8000cb0:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8000cb4:	065b      	lsls	r3, r3, #25
 8000cb6:	f101 80ac 	bmi.w	8001e12 <_vfprintf_r+0x140a>
 8000cba:	9807      	ldr	r0, [sp, #28]
 8000cbc:	b03b      	add	sp, #236	; 0xec
 8000cbe:	ecbd 8b06 	vpop	{d8-d10}
 8000cc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000cc6:	bf00      	nop
	...
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	f040 87e5 	bne.w	8001ca0 <_vfprintf_r+0x1298>
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	f000 8083 	beq.w	8000de2 <_vfprintf_r+0x3da>
 8000cdc:	2300      	movs	r3, #0
 8000cde:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	f88d 5080 	strb.w	r5, [sp, #128]	; 0x80
 8000ce8:	9304      	str	r3, [sp, #16]
 8000cea:	9308      	str	r3, [sp, #32]
 8000cec:	ae20      	add	r6, sp, #128	; 0x80
 8000cee:	2300      	movs	r3, #0
 8000cf0:	f8cd b00c 	str.w	fp, [sp, #12]
 8000cf4:	9305      	str	r3, [sp, #20]
 8000cf6:	930a      	str	r3, [sp, #40]	; 0x28
 8000cf8:	9b03      	ldr	r3, [sp, #12]
 8000cfa:	f013 0302 	ands.w	r3, r3, #2
 8000cfe:	d002      	beq.n	8000d06 <_vfprintf_r+0x2fe>
 8000d00:	9a04      	ldr	r2, [sp, #16]
 8000d02:	3202      	adds	r2, #2
 8000d04:	9204      	str	r2, [sp, #16]
 8000d06:	9a03      	ldr	r2, [sp, #12]
 8000d08:	f012 0b84 	ands.w	fp, r2, #132	; 0x84
 8000d0c:	d105      	bne.n	8000d1a <_vfprintf_r+0x312>
 8000d0e:	9a06      	ldr	r2, [sp, #24]
 8000d10:	9904      	ldr	r1, [sp, #16]
 8000d12:	1a57      	subs	r7, r2, r1
 8000d14:	2f00      	cmp	r7, #0
 8000d16:	f300 83a2 	bgt.w	800145e <_vfprintf_r+0xa56>
 8000d1a:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 8000d1c:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
 8000d20:	b18a      	cbz	r2, 8000d46 <_vfprintf_r+0x33e>
 8000d22:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8000d24:	f10d 0157 	add.w	r1, sp, #87	; 0x57
 8000d28:	3201      	adds	r2, #1
 8000d2a:	3401      	adds	r4, #1
 8000d2c:	f8ca 1000 	str.w	r1, [sl]
 8000d30:	2a07      	cmp	r2, #7
 8000d32:	f04f 0101 	mov.w	r1, #1
 8000d36:	941f      	str	r4, [sp, #124]	; 0x7c
 8000d38:	921e      	str	r2, [sp, #120]	; 0x78
 8000d3a:	f8ca 1004 	str.w	r1, [sl, #4]
 8000d3e:	f300 83dd 	bgt.w	80014fc <_vfprintf_r+0xaf4>
 8000d42:	f10a 0a08 	add.w	sl, sl, #8
 8000d46:	b183      	cbz	r3, 8000d6a <_vfprintf_r+0x362>
 8000d48:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8000d4a:	aa16      	add	r2, sp, #88	; 0x58
 8000d4c:	3301      	adds	r3, #1
 8000d4e:	3402      	adds	r4, #2
 8000d50:	f8ca 2000 	str.w	r2, [sl]
 8000d54:	2b07      	cmp	r3, #7
 8000d56:	f04f 0202 	mov.w	r2, #2
 8000d5a:	941f      	str	r4, [sp, #124]	; 0x7c
 8000d5c:	931e      	str	r3, [sp, #120]	; 0x78
 8000d5e:	f8ca 2004 	str.w	r2, [sl, #4]
 8000d62:	f300 83da 	bgt.w	800151a <_vfprintf_r+0xb12>
 8000d66:	f10a 0a08 	add.w	sl, sl, #8
 8000d6a:	f1bb 0f80 	cmp.w	fp, #128	; 0x80
 8000d6e:	f000 829b 	beq.w	80012a8 <_vfprintf_r+0x8a0>
 8000d72:	9b05      	ldr	r3, [sp, #20]
 8000d74:	9a08      	ldr	r2, [sp, #32]
 8000d76:	eba3 0b02 	sub.w	fp, r3, r2
 8000d7a:	f1bb 0f00 	cmp.w	fp, #0
 8000d7e:	f300 82d6 	bgt.w	800132e <_vfprintf_r+0x926>
 8000d82:	9b03      	ldr	r3, [sp, #12]
 8000d84:	05df      	lsls	r7, r3, #23
 8000d86:	f100 821b 	bmi.w	80011c0 <_vfprintf_r+0x7b8>
 8000d8a:	9b08      	ldr	r3, [sp, #32]
 8000d8c:	f8ca 3004 	str.w	r3, [sl, #4]
 8000d90:	441c      	add	r4, r3
 8000d92:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8000d94:	f8ca 6000 	str.w	r6, [sl]
 8000d98:	3301      	adds	r3, #1
 8000d9a:	2b07      	cmp	r3, #7
 8000d9c:	941f      	str	r4, [sp, #124]	; 0x7c
 8000d9e:	931e      	str	r3, [sp, #120]	; 0x78
 8000da0:	f300 8350 	bgt.w	8001444 <_vfprintf_r+0xa3c>
 8000da4:	f10a 0a08 	add.w	sl, sl, #8
 8000da8:	9b03      	ldr	r3, [sp, #12]
 8000daa:	075a      	lsls	r2, r3, #29
 8000dac:	d505      	bpl.n	8000dba <_vfprintf_r+0x3b2>
 8000dae:	9b06      	ldr	r3, [sp, #24]
 8000db0:	9a04      	ldr	r2, [sp, #16]
 8000db2:	1a9d      	subs	r5, r3, r2
 8000db4:	2d00      	cmp	r5, #0
 8000db6:	f300 83bd 	bgt.w	8001534 <_vfprintf_r+0xb2c>
 8000dba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8000dbe:	9904      	ldr	r1, [sp, #16]
 8000dc0:	428a      	cmp	r2, r1
 8000dc2:	bfac      	ite	ge
 8000dc4:	189b      	addge	r3, r3, r2
 8000dc6:	185b      	addlt	r3, r3, r1
 8000dc8:	9307      	str	r3, [sp, #28]
 8000dca:	2c00      	cmp	r4, #0
 8000dcc:	f040 82ea 	bne.w	80013a4 <_vfprintf_r+0x99c>
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	931e      	str	r3, [sp, #120]	; 0x78
 8000dd4:	f899 3000 	ldrb.w	r3, [r9]
 8000dd8:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	f47f ae5c 	bne.w	8000a9a <_vfprintf_r+0x92>
 8000de2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	f43f af63 	beq.w	8000cb0 <_vfprintf_r+0x2a8>
 8000dea:	ee19 0a10 	vmov	r0, s18
 8000dee:	aa1d      	add	r2, sp, #116	; 0x74
 8000df0:	4641      	mov	r1, r8
 8000df2:	f004 fb8b 	bl	800550c <__sprint_r>
 8000df6:	e75b      	b.n	8000cb0 <_vfprintf_r+0x2a8>
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	f040 87f6 	bne.w	8001dea <_vfprintf_r+0x13e2>
 8000dfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000e00:	3307      	adds	r3, #7
 8000e02:	f023 0307 	bic.w	r3, r3, #7
 8000e06:	ecb3 7b02 	vldmia	r3!, {d7}
 8000e0a:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8000e0e:	e9dd 670c 	ldrd	r6, r7, [sp, #48]	; 0x30
 8000e12:	9309      	str	r3, [sp, #36]	; 0x24
 8000e14:	f027 4300 	bic.w	r3, r7, #2147483648	; 0x80000000
 8000e18:	ee08 3a90 	vmov	s17, r3
 8000e1c:	ee08 6a10 	vmov	s16, r6
 8000e20:	4bb9      	ldr	r3, [pc, #740]	; (8001108 <_vfprintf_r+0x700>)
 8000e22:	ec51 0b18 	vmov	r0, r1, d8
 8000e26:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e2a:	f006 fb9d 	bl	8007568 <__aeabi_dcmpun>
 8000e2e:	2800      	cmp	r0, #0
 8000e30:	f040 84b4 	bne.w	800179c <_vfprintf_r+0xd94>
 8000e34:	4bb4      	ldr	r3, [pc, #720]	; (8001108 <_vfprintf_r+0x700>)
 8000e36:	ec51 0b18 	vmov	r0, r1, d8
 8000e3a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e3e:	f006 fb75 	bl	800752c <__aeabi_dcmple>
 8000e42:	2800      	cmp	r0, #0
 8000e44:	f040 84aa 	bne.w	800179c <_vfprintf_r+0xd94>
 8000e48:	2200      	movs	r2, #0
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	4630      	mov	r0, r6
 8000e4e:	4639      	mov	r1, r7
 8000e50:	f006 fb62 	bl	8007518 <__aeabi_dcmplt>
 8000e54:	2800      	cmp	r0, #0
 8000e56:	f040 8702 	bne.w	8001c5e <_vfprintf_r+0x1256>
 8000e5a:	f89d 4057 	ldrb.w	r4, [sp, #87]	; 0x57
 8000e5e:	4eab      	ldr	r6, [pc, #684]	; (800110c <_vfprintf_r+0x704>)
 8000e60:	f02b 0380 	bic.w	r3, fp, #128	; 0x80
 8000e64:	9303      	str	r3, [sp, #12]
 8000e66:	4baa      	ldr	r3, [pc, #680]	; (8001110 <_vfprintf_r+0x708>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	2d47      	cmp	r5, #71	; 0x47
 8000e6c:	bfc8      	it	gt
 8000e6e:	461e      	movgt	r6, r3
 8000e70:	2303      	movs	r3, #3
 8000e72:	e9cd 3204 	strd	r3, r2, [sp, #16]
 8000e76:	9308      	str	r3, [sp, #32]
 8000e78:	920a      	str	r2, [sp, #40]	; 0x28
 8000e7a:	2c00      	cmp	r4, #0
 8000e7c:	f43f af3c 	beq.w	8000cf8 <_vfprintf_r+0x2f0>
 8000e80:	9b04      	ldr	r3, [sp, #16]
 8000e82:	3301      	adds	r3, #1
 8000e84:	9304      	str	r3, [sp, #16]
 8000e86:	e737      	b.n	8000cf8 <_vfprintf_r+0x2f0>
 8000e88:	f01b 0310 	ands.w	r3, fp, #16
 8000e8c:	d152      	bne.n	8000f34 <_vfprintf_r+0x52c>
 8000e8e:	f01b 0140 	ands.w	r1, fp, #64	; 0x40
 8000e92:	d04f      	beq.n	8000f34 <_vfprintf_r+0x52c>
 8000e94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000e96:	f852 0b04 	ldr.w	r0, [r2], #4
 8000e9a:	9209      	str	r2, [sp, #36]	; 0x24
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	b280      	uxth	r0, r0
 8000ea0:	e6c8      	b.n	8000c34 <_vfprintf_r+0x22c>
 8000ea2:	f01b 0310 	ands.w	r3, fp, #16
 8000ea6:	d13f      	bne.n	8000f28 <_vfprintf_r+0x520>
 8000ea8:	f01b 0140 	ands.w	r1, fp, #64	; 0x40
 8000eac:	d03c      	beq.n	8000f28 <_vfprintf_r+0x520>
 8000eae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000eb0:	f852 0b04 	ldr.w	r0, [r2], #4
 8000eb4:	9209      	str	r2, [sp, #36]	; 0x24
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	b280      	uxth	r0, r0
 8000eba:	2301      	movs	r3, #1
 8000ebc:	e6ba      	b.n	8000c34 <_vfprintf_r+0x22c>
 8000ebe:	4628      	mov	r0, r5
 8000ec0:	f002 fb02 	bl	80034c8 <__sinit>
 8000ec4:	e5b9      	b.n	8000a3a <_vfprintf_r+0x32>
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	f040 879f 	bne.w	8001e0a <_vfprintf_r+0x1402>
 8000ecc:	f01b 0f20 	tst.w	fp, #32
 8000ed0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000ed2:	d068      	beq.n	8000fa6 <_vfprintf_r+0x59e>
 8000ed4:	3307      	adds	r3, #7
 8000ed6:	f023 0307 	bic.w	r3, r3, #7
 8000eda:	461a      	mov	r2, r3
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	f852 0b08 	ldr.w	r0, [r2], #8
 8000ee2:	9209      	str	r2, [sp, #36]	; 0x24
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	f2c0 843d 	blt.w	8001766 <_vfprintf_r+0xd5e>
 8000eec:	9b05      	ldr	r3, [sp, #20]
 8000eee:	3301      	adds	r3, #1
 8000ef0:	f000 8505 	beq.w	80018fe <_vfprintf_r+0xef6>
 8000ef4:	f02b 0380 	bic.w	r3, fp, #128	; 0x80
 8000ef8:	9303      	str	r3, [sp, #12]
 8000efa:	ea50 0301 	orrs.w	r3, r0, r1
 8000efe:	f89d 4057 	ldrb.w	r4, [sp, #87]	; 0x57
 8000f02:	f000 83c5 	beq.w	8001690 <_vfprintf_r+0xc88>
 8000f06:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8000f0a:	280a      	cmp	r0, #10
 8000f0c:	f171 0300 	sbcs.w	r3, r1, #0
 8000f10:	f080 84fc 	bcs.w	800190c <_vfprintf_r+0xf04>
 8000f14:	3030      	adds	r0, #48	; 0x30
 8000f16:	2301      	movs	r3, #1
 8000f18:	f88d 00a7 	strb.w	r0, [sp, #167]	; 0xa7
 8000f1c:	f8cd b00c 	str.w	fp, [sp, #12]
 8000f20:	9308      	str	r3, [sp, #32]
 8000f22:	f10d 06a7 	add.w	r6, sp, #167	; 0xa7
 8000f26:	e142      	b.n	80011ae <_vfprintf_r+0x7a6>
 8000f28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000f2a:	f853 0b04 	ldr.w	r0, [r3], #4
 8000f2e:	9309      	str	r3, [sp, #36]	; 0x24
 8000f30:	2301      	movs	r3, #1
 8000f32:	e67f      	b.n	8000c34 <_vfprintf_r+0x22c>
 8000f34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000f36:	f853 0b04 	ldr.w	r0, [r3], #4
 8000f3a:	9309      	str	r3, [sp, #36]	; 0x24
 8000f3c:	460b      	mov	r3, r1
 8000f3e:	e679      	b.n	8000c34 <_vfprintf_r+0x22c>
 8000f40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000f42:	f852 1b04 	ldr.w	r1, [r2], #4
 8000f46:	9106      	str	r1, [sp, #24]
 8000f48:	2900      	cmp	r1, #0
 8000f4a:	f280 841b 	bge.w	8001784 <_vfprintf_r+0xd7c>
 8000f4e:	9906      	ldr	r1, [sp, #24]
 8000f50:	9209      	str	r2, [sp, #36]	; 0x24
 8000f52:	4249      	negs	r1, r1
 8000f54:	9106      	str	r1, [sp, #24]
 8000f56:	f899 5000 	ldrb.w	r5, [r9]
 8000f5a:	f04b 0b04 	orr.w	fp, fp, #4
 8000f5e:	e5b9      	b.n	8000ad4 <_vfprintf_r+0xcc>
 8000f60:	4649      	mov	r1, r9
 8000f62:	f811 5b01 	ldrb.w	r5, [r1], #1
 8000f66:	2d2a      	cmp	r5, #42	; 0x2a
 8000f68:	f000 87c5 	beq.w	8001ef6 <_vfprintf_r+0x14ee>
 8000f6c:	f1a5 0230 	sub.w	r2, r5, #48	; 0x30
 8000f70:	2a09      	cmp	r2, #9
 8000f72:	4689      	mov	r9, r1
 8000f74:	bf98      	it	ls
 8000f76:	2100      	movls	r1, #0
 8000f78:	f200 8733 	bhi.w	8001de2 <_vfprintf_r+0x13da>
 8000f7c:	f819 5b01 	ldrb.w	r5, [r9], #1
 8000f80:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8000f84:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8000f88:	f1a5 0230 	sub.w	r2, r5, #48	; 0x30
 8000f8c:	2a09      	cmp	r2, #9
 8000f8e:	d9f5      	bls.n	8000f7c <_vfprintf_r+0x574>
 8000f90:	9105      	str	r1, [sp, #20]
 8000f92:	e5a1      	b.n	8000ad8 <_vfprintf_r+0xd0>
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	f040 8730 	bne.w	8001dfa <_vfprintf_r+0x13f2>
 8000f9a:	f04b 0b10 	orr.w	fp, fp, #16
 8000f9e:	f01b 0f20 	tst.w	fp, #32
 8000fa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000fa4:	d196      	bne.n	8000ed4 <_vfprintf_r+0x4cc>
 8000fa6:	f853 0b04 	ldr.w	r0, [r3], #4
 8000faa:	9309      	str	r3, [sp, #36]	; 0x24
 8000fac:	f01b 0f10 	tst.w	fp, #16
 8000fb0:	f040 83d4 	bne.w	800175c <_vfprintf_r+0xd54>
 8000fb4:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8000fb8:	f000 83d0 	beq.w	800175c <_vfprintf_r+0xd54>
 8000fbc:	f340 31c0 	sbfx	r1, r0, #15, #1
 8000fc0:	460b      	mov	r3, r1
 8000fc2:	b200      	sxth	r0, r0
 8000fc4:	e78f      	b.n	8000ee6 <_vfprintf_r+0x4de>
 8000fc6:	f899 5000 	ldrb.w	r5, [r9]
 8000fca:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
 8000fce:	e581      	b.n	8000ad4 <_vfprintf_r+0xcc>
 8000fd0:	f899 5000 	ldrb.w	r5, [r9]
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	202b      	movs	r0, #43	; 0x2b
 8000fd8:	e57c      	b.n	8000ad4 <_vfprintf_r+0xcc>
 8000fda:	f899 5000 	ldrb.w	r5, [r9]
 8000fde:	f04b 0b01 	orr.w	fp, fp, #1
 8000fe2:	e577      	b.n	8000ad4 <_vfprintf_r+0xcc>
 8000fe4:	f899 5000 	ldrb.w	r5, [r9]
 8000fe8:	2800      	cmp	r0, #0
 8000fea:	f47f ad73 	bne.w	8000ad4 <_vfprintf_r+0xcc>
 8000fee:	2301      	movs	r3, #1
 8000ff0:	2020      	movs	r0, #32
 8000ff2:	e56f      	b.n	8000ad4 <_vfprintf_r+0xcc>
 8000ff4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	f88d 2057 	strb.w	r2, [sp, #87]	; 0x57
 8000ffc:	f853 2b04 	ldr.w	r2, [r3], #4
 8001000:	9309      	str	r3, [sp, #36]	; 0x24
 8001002:	2301      	movs	r3, #1
 8001004:	f88d 2080 	strb.w	r2, [sp, #128]	; 0x80
 8001008:	9304      	str	r3, [sp, #16]
 800100a:	9308      	str	r3, [sp, #32]
 800100c:	ae20      	add	r6, sp, #128	; 0x80
 800100e:	e66e      	b.n	8000cee <_vfprintf_r+0x2e6>
 8001010:	2b00      	cmp	r3, #0
 8001012:	f040 86e2 	bne.w	8001dda <_vfprintf_r+0x13d2>
 8001016:	4b3f      	ldr	r3, [pc, #252]	; (8001114 <_vfprintf_r+0x70c>)
 8001018:	930f      	str	r3, [sp, #60]	; 0x3c
 800101a:	f01b 0120 	ands.w	r1, fp, #32
 800101e:	d063      	beq.n	80010e8 <_vfprintf_r+0x6e0>
 8001020:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001022:	3307      	adds	r3, #7
 8001024:	f023 0307 	bic.w	r3, r3, #7
 8001028:	6859      	ldr	r1, [r3, #4]
 800102a:	f853 0b08 	ldr.w	r0, [r3], #8
 800102e:	9309      	str	r3, [sp, #36]	; 0x24
 8001030:	f01b 0f01 	tst.w	fp, #1
 8001034:	d00b      	beq.n	800104e <_vfprintf_r+0x646>
 8001036:	ea50 0301 	orrs.w	r3, r0, r1
 800103a:	d008      	beq.n	800104e <_vfprintf_r+0x646>
 800103c:	2330      	movs	r3, #48	; 0x30
 800103e:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
 8001042:	f88d 5059 	strb.w	r5, [sp, #89]	; 0x59
 8001046:	f04b 0b02 	orr.w	fp, fp, #2
 800104a:	2302      	movs	r3, #2
 800104c:	e5f2      	b.n	8000c34 <_vfprintf_r+0x22c>
 800104e:	2302      	movs	r3, #2
 8001050:	e5f0      	b.n	8000c34 <_vfprintf_r+0x22c>
 8001052:	f899 5000 	ldrb.w	r5, [r9]
 8001056:	f04b 0b08 	orr.w	fp, fp, #8
 800105a:	e53b      	b.n	8000ad4 <_vfprintf_r+0xcc>
 800105c:	f899 5000 	ldrb.w	r5, [r9]
 8001060:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
 8001064:	e536      	b.n	8000ad4 <_vfprintf_r+0xcc>
 8001066:	f899 5000 	ldrb.w	r5, [r9]
 800106a:	f04b 0b20 	orr.w	fp, fp, #32
 800106e:	e531      	b.n	8000ad4 <_vfprintf_r+0xcc>
 8001070:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001072:	f853 0b04 	ldr.w	r0, [r3], #4
 8001076:	9309      	str	r3, [sp, #36]	; 0x24
 8001078:	2330      	movs	r3, #48	; 0x30
 800107a:	2578      	movs	r5, #120	; 0x78
 800107c:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
 8001080:	4b25      	ldr	r3, [pc, #148]	; (8001118 <_vfprintf_r+0x710>)
 8001082:	930f      	str	r3, [sp, #60]	; 0x3c
 8001084:	f04b 0b02 	orr.w	fp, fp, #2
 8001088:	f88d 5059 	strb.w	r5, [sp, #89]	; 0x59
 800108c:	2100      	movs	r1, #0
 800108e:	2302      	movs	r3, #2
 8001090:	e5d0      	b.n	8000c34 <_vfprintf_r+0x22c>
 8001092:	2b00      	cmp	r3, #0
 8001094:	f040 86ad 	bne.w	8001df2 <_vfprintf_r+0x13ea>
 8001098:	f01b 0f20 	tst.w	fp, #32
 800109c:	f040 8425 	bne.w	80018ea <_vfprintf_r+0xee2>
 80010a0:	f01b 0f10 	tst.w	fp, #16
 80010a4:	f040 849d 	bne.w	80019e2 <_vfprintf_r+0xfda>
 80010a8:	f01b 0f40 	tst.w	fp, #64	; 0x40
 80010ac:	f000 8499 	beq.w	80019e2 <_vfprintf_r+0xfda>
 80010b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80010b2:	9907      	ldr	r1, [sp, #28]
 80010b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80010b8:	9309      	str	r3, [sp, #36]	; 0x24
 80010ba:	8011      	strh	r1, [r2, #0]
 80010bc:	e4e8      	b.n	8000a90 <_vfprintf_r+0x88>
 80010be:	f899 5000 	ldrb.w	r5, [r9]
 80010c2:	2d6c      	cmp	r5, #108	; 0x6c
 80010c4:	bf03      	ittte	eq
 80010c6:	f899 5001 	ldrbeq.w	r5, [r9, #1]
 80010ca:	f04b 0b20 	orreq.w	fp, fp, #32
 80010ce:	f109 0901 	addeq.w	r9, r9, #1
 80010d2:	f04b 0b10 	orrne.w	fp, fp, #16
 80010d6:	e4fd      	b.n	8000ad4 <_vfprintf_r+0xcc>
 80010d8:	2b00      	cmp	r3, #0
 80010da:	f040 8692 	bne.w	8001e02 <_vfprintf_r+0x13fa>
 80010de:	4b0e      	ldr	r3, [pc, #56]	; (8001118 <_vfprintf_r+0x710>)
 80010e0:	930f      	str	r3, [sp, #60]	; 0x3c
 80010e2:	f01b 0120 	ands.w	r1, fp, #32
 80010e6:	d19b      	bne.n	8001020 <_vfprintf_r+0x618>
 80010e8:	f01b 0310 	ands.w	r3, fp, #16
 80010ec:	f040 8331 	bne.w	8001752 <_vfprintf_r+0xd4a>
 80010f0:	f01b 0140 	ands.w	r1, fp, #64	; 0x40
 80010f4:	f000 832d 	beq.w	8001752 <_vfprintf_r+0xd4a>
 80010f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80010fa:	f852 0b04 	ldr.w	r0, [r2], #4
 80010fe:	9209      	str	r2, [sp, #36]	; 0x24
 8001100:	4619      	mov	r1, r3
 8001102:	b280      	uxth	r0, r0
 8001104:	e794      	b.n	8001030 <_vfprintf_r+0x628>
 8001106:	bf00      	nop
 8001108:	7fefffff 	.word	0x7fefffff
 800110c:	0801c084 	.word	0x0801c084
 8001110:	0801c088 	.word	0x0801c088
 8001114:	0801c0a8 	.word	0x0801c0a8
 8001118:	0801c094 	.word	0x0801c094
 800111c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800111e:	9b05      	ldr	r3, [sp, #20]
 8001120:	f854 6b04 	ldr.w	r6, [r4], #4
 8001124:	2700      	movs	r7, #0
 8001126:	f88d 7057 	strb.w	r7, [sp, #87]	; 0x57
 800112a:	2e00      	cmp	r6, #0
 800112c:	f000 8427 	beq.w	800197e <_vfprintf_r+0xf76>
 8001130:	1c5a      	adds	r2, r3, #1
 8001132:	f000 8523 	beq.w	8001b7c <_vfprintf_r+0x1174>
 8001136:	461a      	mov	r2, r3
 8001138:	4639      	mov	r1, r7
 800113a:	4630      	mov	r0, r6
 800113c:	f003 f860 	bl	8004200 <memchr>
 8001140:	2800      	cmp	r0, #0
 8001142:	f000 8632 	beq.w	8001daa <_vfprintf_r+0x13a2>
 8001146:	1b83      	subs	r3, r0, r6
 8001148:	9308      	str	r3, [sp, #32]
 800114a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800114e:	9409      	str	r4, [sp, #36]	; 0x24
 8001150:	9705      	str	r7, [sp, #20]
 8001152:	f89d 4057 	ldrb.w	r4, [sp, #87]	; 0x57
 8001156:	f8cd b00c 	str.w	fp, [sp, #12]
 800115a:	9304      	str	r3, [sp, #16]
 800115c:	970a      	str	r7, [sp, #40]	; 0x28
 800115e:	e68c      	b.n	8000e7a <_vfprintf_r+0x472>
 8001160:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8001164:	2b01      	cmp	r3, #1
 8001166:	f43f aed0 	beq.w	8000f0a <_vfprintf_r+0x502>
 800116a:	2b02      	cmp	r3, #2
 800116c:	f000 8088 	beq.w	8001280 <_vfprintf_r+0x878>
 8001170:	ae2a      	add	r6, sp, #168	; 0xa8
 8001172:	f000 0307 	and.w	r3, r0, #7
 8001176:	08c0      	lsrs	r0, r0, #3
 8001178:	ea40 7041 	orr.w	r0, r0, r1, lsl #29
 800117c:	08c9      	lsrs	r1, r1, #3
 800117e:	3330      	adds	r3, #48	; 0x30
 8001180:	ea50 0701 	orrs.w	r7, r0, r1
 8001184:	4632      	mov	r2, r6
 8001186:	f806 3d01 	strb.w	r3, [r6, #-1]!
 800118a:	d1f2      	bne.n	8001172 <_vfprintf_r+0x76a>
 800118c:	f01b 0f01 	tst.w	fp, #1
 8001190:	f000 8084 	beq.w	800129c <_vfprintf_r+0x894>
 8001194:	2b30      	cmp	r3, #48	; 0x30
 8001196:	f000 8081 	beq.w	800129c <_vfprintf_r+0x894>
 800119a:	2330      	movs	r3, #48	; 0x30
 800119c:	3a02      	subs	r2, #2
 800119e:	f806 3c01 	strb.w	r3, [r6, #-1]
 80011a2:	ab2a      	add	r3, sp, #168	; 0xa8
 80011a4:	1a9b      	subs	r3, r3, r2
 80011a6:	f8cd b00c 	str.w	fp, [sp, #12]
 80011aa:	9308      	str	r3, [sp, #32]
 80011ac:	4616      	mov	r6, r2
 80011ae:	9b05      	ldr	r3, [sp, #20]
 80011b0:	9a08      	ldr	r2, [sp, #32]
 80011b2:	4293      	cmp	r3, r2
 80011b4:	bfb8      	it	lt
 80011b6:	4613      	movlt	r3, r2
 80011b8:	9304      	str	r3, [sp, #16]
 80011ba:	2300      	movs	r3, #0
 80011bc:	930a      	str	r3, [sp, #40]	; 0x28
 80011be:	e65c      	b.n	8000e7a <_vfprintf_r+0x472>
 80011c0:	2d65      	cmp	r5, #101	; 0x65
 80011c2:	f340 80f9 	ble.w	80013b8 <_vfprintf_r+0x9b0>
 80011c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80011ca:	2200      	movs	r2, #0
 80011cc:	2300      	movs	r3, #0
 80011ce:	f006 f999 	bl	8007504 <__aeabi_dcmpeq>
 80011d2:	2800      	cmp	r0, #0
 80011d4:	f000 81e9 	beq.w	80015aa <_vfprintf_r+0xba2>
 80011d8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80011da:	4ac5      	ldr	r2, [pc, #788]	; (80014f0 <_vfprintf_r+0xae8>)
 80011dc:	f8ca 2000 	str.w	r2, [sl]
 80011e0:	3301      	adds	r3, #1
 80011e2:	3401      	adds	r4, #1
 80011e4:	2201      	movs	r2, #1
 80011e6:	2b07      	cmp	r3, #7
 80011e8:	941f      	str	r4, [sp, #124]	; 0x7c
 80011ea:	931e      	str	r3, [sp, #120]	; 0x78
 80011ec:	f8ca 2004 	str.w	r2, [sl, #4]
 80011f0:	f300 846b 	bgt.w	8001aca <_vfprintf_r+0x10c2>
 80011f4:	f10a 0a08 	add.w	sl, sl, #8
 80011f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80011fa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80011fc:	4293      	cmp	r3, r2
 80011fe:	f280 82bc 	bge.w	800177a <_vfprintf_r+0xd72>
 8001202:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001204:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8001206:	441c      	add	r4, r3
 8001208:	e9ca 2300 	strd	r2, r3, [sl]
 800120c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800120e:	941f      	str	r4, [sp, #124]	; 0x7c
 8001210:	3301      	adds	r3, #1
 8001212:	2b07      	cmp	r3, #7
 8001214:	931e      	str	r3, [sp, #120]	; 0x78
 8001216:	f300 83a5 	bgt.w	8001964 <_vfprintf_r+0xf5c>
 800121a:	f10a 0a08 	add.w	sl, sl, #8
 800121e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001220:	1e5d      	subs	r5, r3, #1
 8001222:	2d00      	cmp	r5, #0
 8001224:	f77f adc0 	ble.w	8000da8 <_vfprintf_r+0x3a0>
 8001228:	2d10      	cmp	r5, #16
 800122a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800122c:	4fb1      	ldr	r7, [pc, #708]	; (80014f4 <_vfprintf_r+0xaec>)
 800122e:	f340 8440 	ble.w	8001ab2 <_vfprintf_r+0x10aa>
 8001232:	ee19 ba10 	vmov	fp, s18
 8001236:	2610      	movs	r6, #16
 8001238:	e005      	b.n	8001246 <_vfprintf_r+0x83e>
 800123a:	f10a 0a08 	add.w	sl, sl, #8
 800123e:	3d10      	subs	r5, #16
 8001240:	2d10      	cmp	r5, #16
 8001242:	f340 8436 	ble.w	8001ab2 <_vfprintf_r+0x10aa>
 8001246:	3301      	adds	r3, #1
 8001248:	3410      	adds	r4, #16
 800124a:	2b07      	cmp	r3, #7
 800124c:	e9ca 7600 	strd	r7, r6, [sl]
 8001250:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
 8001254:	ddf1      	ble.n	800123a <_vfprintf_r+0x832>
 8001256:	aa1d      	add	r2, sp, #116	; 0x74
 8001258:	4641      	mov	r1, r8
 800125a:	4658      	mov	r0, fp
 800125c:	f004 f956 	bl	800550c <__sprint_r>
 8001260:	2800      	cmp	r0, #0
 8001262:	f47f ad25 	bne.w	8000cb0 <_vfprintf_r+0x2a8>
 8001266:	e9dd 341e 	ldrd	r3, r4, [sp, #120]	; 0x78
 800126a:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 800126e:	e7e6      	b.n	800123e <_vfprintf_r+0x836>
 8001270:	2b01      	cmp	r3, #1
 8001272:	f000 8548 	beq.w	8001d06 <_vfprintf_r+0x12fe>
 8001276:	2b02      	cmp	r3, #2
 8001278:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800127c:	f47f af78 	bne.w	8001170 <_vfprintf_r+0x768>
 8001280:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8001282:	ae2a      	add	r6, sp, #168	; 0xa8
 8001284:	f000 030f 	and.w	r3, r0, #15
 8001288:	0900      	lsrs	r0, r0, #4
 800128a:	5cd3      	ldrb	r3, [r2, r3]
 800128c:	f806 3d01 	strb.w	r3, [r6, #-1]!
 8001290:	ea40 7001 	orr.w	r0, r0, r1, lsl #28
 8001294:	0909      	lsrs	r1, r1, #4
 8001296:	ea50 0301 	orrs.w	r3, r0, r1
 800129a:	d1f3      	bne.n	8001284 <_vfprintf_r+0x87c>
 800129c:	ab2a      	add	r3, sp, #168	; 0xa8
 800129e:	1b9b      	subs	r3, r3, r6
 80012a0:	f8cd b00c 	str.w	fp, [sp, #12]
 80012a4:	9308      	str	r3, [sp, #32]
 80012a6:	e782      	b.n	80011ae <_vfprintf_r+0x7a6>
 80012a8:	9b06      	ldr	r3, [sp, #24]
 80012aa:	9a04      	ldr	r2, [sp, #16]
 80012ac:	eba3 0b02 	sub.w	fp, r3, r2
 80012b0:	f1bb 0f00 	cmp.w	fp, #0
 80012b4:	f77f ad5d 	ble.w	8000d72 <_vfprintf_r+0x36a>
 80012b8:	f1bb 0f10 	cmp.w	fp, #16
 80012bc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80012be:	4f8d      	ldr	r7, [pc, #564]	; (80014f4 <_vfprintf_r+0xaec>)
 80012c0:	dd27      	ble.n	8001312 <_vfprintf_r+0x90a>
 80012c2:	4621      	mov	r1, r4
 80012c4:	2310      	movs	r3, #16
 80012c6:	ee19 4a10 	vmov	r4, s18
 80012ca:	e006      	b.n	80012da <_vfprintf_r+0x8d2>
 80012cc:	f1ab 0b10 	sub.w	fp, fp, #16
 80012d0:	f1bb 0f10 	cmp.w	fp, #16
 80012d4:	f10a 0a08 	add.w	sl, sl, #8
 80012d8:	dd1a      	ble.n	8001310 <_vfprintf_r+0x908>
 80012da:	3201      	adds	r2, #1
 80012dc:	3110      	adds	r1, #16
 80012de:	2a07      	cmp	r2, #7
 80012e0:	e9ca 7300 	strd	r7, r3, [sl]
 80012e4:	e9cd 211e 	strd	r2, r1, [sp, #120]	; 0x78
 80012e8:	ddf0      	ble.n	80012cc <_vfprintf_r+0x8c4>
 80012ea:	aa1d      	add	r2, sp, #116	; 0x74
 80012ec:	4641      	mov	r1, r8
 80012ee:	4620      	mov	r0, r4
 80012f0:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 80012f4:	f004 f90a 	bl	800550c <__sprint_r>
 80012f8:	2800      	cmp	r0, #0
 80012fa:	f47f acd9 	bne.w	8000cb0 <_vfprintf_r+0x2a8>
 80012fe:	f1ab 0b10 	sub.w	fp, fp, #16
 8001302:	f1bb 0f10 	cmp.w	fp, #16
 8001306:	e9dd 211e 	ldrd	r2, r1, [sp, #120]	; 0x78
 800130a:	f04f 0310 	mov.w	r3, #16
 800130e:	dce4      	bgt.n	80012da <_vfprintf_r+0x8d2>
 8001310:	460c      	mov	r4, r1
 8001312:	3201      	adds	r2, #1
 8001314:	445c      	add	r4, fp
 8001316:	2a07      	cmp	r2, #7
 8001318:	e9cd 241e 	strd	r2, r4, [sp, #120]	; 0x78
 800131c:	f8ca 7000 	str.w	r7, [sl]
 8001320:	f8ca b004 	str.w	fp, [sl, #4]
 8001324:	f300 83df 	bgt.w	8001ae6 <_vfprintf_r+0x10de>
 8001328:	f10a 0a08 	add.w	sl, sl, #8
 800132c:	e521      	b.n	8000d72 <_vfprintf_r+0x36a>
 800132e:	f1bb 0f10 	cmp.w	fp, #16
 8001332:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8001334:	4f6f      	ldr	r7, [pc, #444]	; (80014f4 <_vfprintf_r+0xaec>)
 8001336:	dd27      	ble.n	8001388 <_vfprintf_r+0x980>
 8001338:	4621      	mov	r1, r4
 800133a:	2310      	movs	r3, #16
 800133c:	ee19 4a10 	vmov	r4, s18
 8001340:	e006      	b.n	8001350 <_vfprintf_r+0x948>
 8001342:	f1ab 0b10 	sub.w	fp, fp, #16
 8001346:	f1bb 0f10 	cmp.w	fp, #16
 800134a:	f10a 0a08 	add.w	sl, sl, #8
 800134e:	dd1a      	ble.n	8001386 <_vfprintf_r+0x97e>
 8001350:	3201      	adds	r2, #1
 8001352:	3110      	adds	r1, #16
 8001354:	2a07      	cmp	r2, #7
 8001356:	e9ca 7300 	strd	r7, r3, [sl]
 800135a:	e9cd 211e 	strd	r2, r1, [sp, #120]	; 0x78
 800135e:	ddf0      	ble.n	8001342 <_vfprintf_r+0x93a>
 8001360:	aa1d      	add	r2, sp, #116	; 0x74
 8001362:	4641      	mov	r1, r8
 8001364:	4620      	mov	r0, r4
 8001366:	f004 f8d1 	bl	800550c <__sprint_r>
 800136a:	2800      	cmp	r0, #0
 800136c:	f47f aca0 	bne.w	8000cb0 <_vfprintf_r+0x2a8>
 8001370:	f1ab 0b10 	sub.w	fp, fp, #16
 8001374:	f1bb 0f10 	cmp.w	fp, #16
 8001378:	e9dd 211e 	ldrd	r2, r1, [sp, #120]	; 0x78
 800137c:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 8001380:	f04f 0310 	mov.w	r3, #16
 8001384:	dce4      	bgt.n	8001350 <_vfprintf_r+0x948>
 8001386:	460c      	mov	r4, r1
 8001388:	3201      	adds	r2, #1
 800138a:	445c      	add	r4, fp
 800138c:	2a07      	cmp	r2, #7
 800138e:	e9cd 241e 	strd	r2, r4, [sp, #120]	; 0x78
 8001392:	f8ca 7000 	str.w	r7, [sl]
 8001396:	f8ca b004 	str.w	fp, [sl, #4]
 800139a:	f300 81cc 	bgt.w	8001736 <_vfprintf_r+0xd2e>
 800139e:	f10a 0a08 	add.w	sl, sl, #8
 80013a2:	e4ee      	b.n	8000d82 <_vfprintf_r+0x37a>
 80013a4:	ee19 0a10 	vmov	r0, s18
 80013a8:	aa1d      	add	r2, sp, #116	; 0x74
 80013aa:	4641      	mov	r1, r8
 80013ac:	f004 f8ae 	bl	800550c <__sprint_r>
 80013b0:	2800      	cmp	r0, #0
 80013b2:	f43f ad0d 	beq.w	8000dd0 <_vfprintf_r+0x3c8>
 80013b6:	e47b      	b.n	8000cb0 <_vfprintf_r+0x2a8>
 80013b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	f340 8171 	ble.w	80016a2 <_vfprintf_r+0xc9a>
 80013c0:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 80013c2:	f8ca 6000 	str.w	r6, [sl]
 80013c6:	3501      	adds	r5, #1
 80013c8:	3401      	adds	r4, #1
 80013ca:	2301      	movs	r3, #1
 80013cc:	2d07      	cmp	r5, #7
 80013ce:	941f      	str	r4, [sp, #124]	; 0x7c
 80013d0:	951e      	str	r5, [sp, #120]	; 0x78
 80013d2:	f8ca 3004 	str.w	r3, [sl, #4]
 80013d6:	f300 830c 	bgt.w	80019f2 <_vfprintf_r+0xfea>
 80013da:	f10a 0a08 	add.w	sl, sl, #8
 80013de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80013e0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80013e2:	3501      	adds	r5, #1
 80013e4:	441c      	add	r4, r3
 80013e6:	2d07      	cmp	r5, #7
 80013e8:	e9ca 2300 	strd	r2, r3, [sl]
 80013ec:	e9cd 541e 	strd	r5, r4, [sp, #120]	; 0x78
 80013f0:	f300 830d 	bgt.w	8001a0e <_vfprintf_r+0x1006>
 80013f4:	f10a 0a08 	add.w	sl, sl, #8
 80013f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80013fc:	2200      	movs	r2, #0
 80013fe:	2300      	movs	r3, #0
 8001400:	f006 f880 	bl	8007504 <__aeabi_dcmpeq>
 8001404:	2800      	cmp	r0, #0
 8001406:	f040 816b 	bne.w	80016e0 <_vfprintf_r+0xcd8>
 800140a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800140c:	3501      	adds	r5, #1
 800140e:	3b01      	subs	r3, #1
 8001410:	3601      	adds	r6, #1
 8001412:	441c      	add	r4, r3
 8001414:	2d07      	cmp	r5, #7
 8001416:	f8ca 6000 	str.w	r6, [sl]
 800141a:	951e      	str	r5, [sp, #120]	; 0x78
 800141c:	f8ca 3004 	str.w	r3, [sl, #4]
 8001420:	941f      	str	r4, [sp, #124]	; 0x7c
 8001422:	f300 814f 	bgt.w	80016c4 <_vfprintf_r+0xcbc>
 8001426:	f10a 0a08 	add.w	sl, sl, #8
 800142a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800142c:	f8ca 3004 	str.w	r3, [sl, #4]
 8001430:	3501      	adds	r5, #1
 8001432:	441c      	add	r4, r3
 8001434:	2d07      	cmp	r5, #7
 8001436:	ab19      	add	r3, sp, #100	; 0x64
 8001438:	e9cd 541e 	strd	r5, r4, [sp, #120]	; 0x78
 800143c:	f8ca 3000 	str.w	r3, [sl]
 8001440:	f77f acb0 	ble.w	8000da4 <_vfprintf_r+0x39c>
 8001444:	ee19 0a10 	vmov	r0, s18
 8001448:	aa1d      	add	r2, sp, #116	; 0x74
 800144a:	4641      	mov	r1, r8
 800144c:	f004 f85e 	bl	800550c <__sprint_r>
 8001450:	2800      	cmp	r0, #0
 8001452:	f47f ac2d 	bne.w	8000cb0 <_vfprintf_r+0x2a8>
 8001456:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 8001458:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 800145c:	e4a4      	b.n	8000da8 <_vfprintf_r+0x3a0>
 800145e:	2f10      	cmp	r7, #16
 8001460:	e9dd 211e 	ldrd	r2, r1, [sp, #120]	; 0x78
 8001464:	dd34      	ble.n	80014d0 <_vfprintf_r+0xac8>
 8001466:	9312      	str	r3, [sp, #72]	; 0x48
 8001468:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800146c:	2410      	movs	r4, #16
 800146e:	46b1      	mov	r9, r6
 8001470:	460b      	mov	r3, r1
 8001472:	4646      	mov	r6, r8
 8001474:	46b8      	mov	r8, r7
 8001476:	462f      	mov	r7, r5
 8001478:	ee19 5a10 	vmov	r5, s18
 800147c:	e006      	b.n	800148c <_vfprintf_r+0xa84>
 800147e:	f1a8 0810 	sub.w	r8, r8, #16
 8001482:	f1b8 0f10 	cmp.w	r8, #16
 8001486:	f10a 0a08 	add.w	sl, sl, #8
 800148a:	dd19      	ble.n	80014c0 <_vfprintf_r+0xab8>
 800148c:	3201      	adds	r2, #1
 800148e:	491a      	ldr	r1, [pc, #104]	; (80014f8 <_vfprintf_r+0xaf0>)
 8001490:	3310      	adds	r3, #16
 8001492:	2a07      	cmp	r2, #7
 8001494:	e9ca 1400 	strd	r1, r4, [sl]
 8001498:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
 800149c:	ddef      	ble.n	800147e <_vfprintf_r+0xa76>
 800149e:	aa1d      	add	r2, sp, #116	; 0x74
 80014a0:	4631      	mov	r1, r6
 80014a2:	4628      	mov	r0, r5
 80014a4:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 80014a8:	f004 f830 	bl	800550c <__sprint_r>
 80014ac:	2800      	cmp	r0, #0
 80014ae:	f47f abfe 	bne.w	8000cae <_vfprintf_r+0x2a6>
 80014b2:	f1a8 0810 	sub.w	r8, r8, #16
 80014b6:	f1b8 0f10 	cmp.w	r8, #16
 80014ba:	e9dd 231e 	ldrd	r2, r3, [sp, #120]	; 0x78
 80014be:	dce5      	bgt.n	800148c <_vfprintf_r+0xa84>
 80014c0:	463d      	mov	r5, r7
 80014c2:	4619      	mov	r1, r3
 80014c4:	4647      	mov	r7, r8
 80014c6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80014c8:	46b0      	mov	r8, r6
 80014ca:	464e      	mov	r6, r9
 80014cc:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
 80014d0:	f8ca 7004 	str.w	r7, [sl, #4]
 80014d4:	3201      	adds	r2, #1
 80014d6:	187c      	adds	r4, r7, r1
 80014d8:	2a07      	cmp	r2, #7
 80014da:	4907      	ldr	r1, [pc, #28]	; (80014f8 <_vfprintf_r+0xaf0>)
 80014dc:	f8ca 1000 	str.w	r1, [sl]
 80014e0:	e9cd 241e 	strd	r2, r4, [sp, #120]	; 0x78
 80014e4:	f300 82d5 	bgt.w	8001a92 <_vfprintf_r+0x108a>
 80014e8:	f10a 0a08 	add.w	sl, sl, #8
 80014ec:	e416      	b.n	8000d1c <_vfprintf_r+0x314>
 80014ee:	bf00      	nop
 80014f0:	0801c0c4 	.word	0x0801c0c4
 80014f4:	0800ccbc 	.word	0x0800ccbc
 80014f8:	0800ccac 	.word	0x0800ccac
 80014fc:	ee19 0a10 	vmov	r0, s18
 8001500:	aa1d      	add	r2, sp, #116	; 0x74
 8001502:	4641      	mov	r1, r8
 8001504:	9312      	str	r3, [sp, #72]	; 0x48
 8001506:	f004 f801 	bl	800550c <__sprint_r>
 800150a:	2800      	cmp	r0, #0
 800150c:	f47f abd0 	bne.w	8000cb0 <_vfprintf_r+0x2a8>
 8001510:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 8001512:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8001514:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 8001518:	e415      	b.n	8000d46 <_vfprintf_r+0x33e>
 800151a:	ee19 0a10 	vmov	r0, s18
 800151e:	aa1d      	add	r2, sp, #116	; 0x74
 8001520:	4641      	mov	r1, r8
 8001522:	f003 fff3 	bl	800550c <__sprint_r>
 8001526:	2800      	cmp	r0, #0
 8001528:	f47f abc2 	bne.w	8000cb0 <_vfprintf_r+0x2a8>
 800152c:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 800152e:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 8001532:	e41a      	b.n	8000d6a <_vfprintf_r+0x362>
 8001534:	2d10      	cmp	r5, #16
 8001536:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8001538:	dd20      	ble.n	800157c <_vfprintf_r+0xb74>
 800153a:	ee19 7a10 	vmov	r7, s18
 800153e:	2610      	movs	r6, #16
 8001540:	e004      	b.n	800154c <_vfprintf_r+0xb44>
 8001542:	3d10      	subs	r5, #16
 8001544:	2d10      	cmp	r5, #16
 8001546:	f10a 0a08 	add.w	sl, sl, #8
 800154a:	dd17      	ble.n	800157c <_vfprintf_r+0xb74>
 800154c:	3301      	adds	r3, #1
 800154e:	4a91      	ldr	r2, [pc, #580]	; (8001794 <_vfprintf_r+0xd8c>)
 8001550:	3410      	adds	r4, #16
 8001552:	2b07      	cmp	r3, #7
 8001554:	e9ca 2600 	strd	r2, r6, [sl]
 8001558:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
 800155c:	ddf1      	ble.n	8001542 <_vfprintf_r+0xb3a>
 800155e:	aa1d      	add	r2, sp, #116	; 0x74
 8001560:	4641      	mov	r1, r8
 8001562:	4638      	mov	r0, r7
 8001564:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 8001568:	f003 ffd0 	bl	800550c <__sprint_r>
 800156c:	2800      	cmp	r0, #0
 800156e:	f47f ab9f 	bne.w	8000cb0 <_vfprintf_r+0x2a8>
 8001572:	3d10      	subs	r5, #16
 8001574:	2d10      	cmp	r5, #16
 8001576:	e9dd 341e 	ldrd	r3, r4, [sp, #120]	; 0x78
 800157a:	dce7      	bgt.n	800154c <_vfprintf_r+0xb44>
 800157c:	3301      	adds	r3, #1
 800157e:	4a85      	ldr	r2, [pc, #532]	; (8001794 <_vfprintf_r+0xd8c>)
 8001580:	f8ca 5004 	str.w	r5, [sl, #4]
 8001584:	442c      	add	r4, r5
 8001586:	2b07      	cmp	r3, #7
 8001588:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
 800158c:	f8ca 2000 	str.w	r2, [sl]
 8001590:	f77f ac13 	ble.w	8000dba <_vfprintf_r+0x3b2>
 8001594:	ee19 0a10 	vmov	r0, s18
 8001598:	aa1d      	add	r2, sp, #116	; 0x74
 800159a:	4641      	mov	r1, r8
 800159c:	f003 ffb6 	bl	800550c <__sprint_r>
 80015a0:	2800      	cmp	r0, #0
 80015a2:	f47f ab85 	bne.w	8000cb0 <_vfprintf_r+0x2a8>
 80015a6:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 80015a8:	e407      	b.n	8000dba <_vfprintf_r+0x3b2>
 80015aa:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80015ac:	2900      	cmp	r1, #0
 80015ae:	f340 823c 	ble.w	8001a2a <_vfprintf_r+0x1022>
 80015b2:	e9dd 370a 	ldrd	r3, r7, [sp, #40]	; 0x28
 80015b6:	429f      	cmp	r7, r3
 80015b8:	bfa8      	it	ge
 80015ba:	461f      	movge	r7, r3
 80015bc:	2f00      	cmp	r7, #0
 80015be:	dd0b      	ble.n	80015d8 <_vfprintf_r+0xbd0>
 80015c0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80015c2:	3301      	adds	r3, #1
 80015c4:	443c      	add	r4, r7
 80015c6:	2b07      	cmp	r3, #7
 80015c8:	e9ca 6700 	strd	r6, r7, [sl]
 80015cc:	941f      	str	r4, [sp, #124]	; 0x7c
 80015ce:	931e      	str	r3, [sp, #120]	; 0x78
 80015d0:	f300 83cb 	bgt.w	8001d6a <_vfprintf_r+0x1362>
 80015d4:	f10a 0a08 	add.w	sl, sl, #8
 80015d8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80015da:	2f00      	cmp	r7, #0
 80015dc:	bfa8      	it	ge
 80015de:	1bed      	subge	r5, r5, r7
 80015e0:	2d00      	cmp	r5, #0
 80015e2:	f300 81d5 	bgt.w	8001990 <_vfprintf_r+0xf88>
 80015e6:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 80015e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80015ea:	429d      	cmp	r5, r3
 80015ec:	f280 81ae 	bge.w	800194c <_vfprintf_r+0xf44>
 80015f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80015f2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80015f4:	441c      	add	r4, r3
 80015f6:	e9ca 2300 	strd	r2, r3, [sl]
 80015fa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80015fc:	941f      	str	r4, [sp, #124]	; 0x7c
 80015fe:	3301      	adds	r3, #1
 8001600:	2b07      	cmp	r3, #7
 8001602:	931e      	str	r3, [sp, #120]	; 0x78
 8001604:	f300 83a3 	bgt.w	8001d4e <_vfprintf_r+0x1346>
 8001608:	f10a 0a08 	add.w	sl, sl, #8
 800160c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800160e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001610:	1b5d      	subs	r5, r3, r5
 8001612:	1a9f      	subs	r7, r3, r2
 8001614:	42af      	cmp	r7, r5
 8001616:	bfa8      	it	ge
 8001618:	462f      	movge	r7, r5
 800161a:	2f00      	cmp	r7, #0
 800161c:	dd0e      	ble.n	800163c <_vfprintf_r+0xc34>
 800161e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8001620:	f8ca 7004 	str.w	r7, [sl, #4]
 8001624:	3301      	adds	r3, #1
 8001626:	4416      	add	r6, r2
 8001628:	443c      	add	r4, r7
 800162a:	2b07      	cmp	r3, #7
 800162c:	f8ca 6000 	str.w	r6, [sl]
 8001630:	941f      	str	r4, [sp, #124]	; 0x7c
 8001632:	931e      	str	r3, [sp, #120]	; 0x78
 8001634:	f300 83a6 	bgt.w	8001d84 <_vfprintf_r+0x137c>
 8001638:	f10a 0a08 	add.w	sl, sl, #8
 800163c:	2f00      	cmp	r7, #0
 800163e:	bfa8      	it	ge
 8001640:	1bed      	subge	r5, r5, r7
 8001642:	2d00      	cmp	r5, #0
 8001644:	f77f abb0 	ble.w	8000da8 <_vfprintf_r+0x3a0>
 8001648:	2d10      	cmp	r5, #16
 800164a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800164c:	4f52      	ldr	r7, [pc, #328]	; (8001798 <_vfprintf_r+0xd90>)
 800164e:	f340 8230 	ble.w	8001ab2 <_vfprintf_r+0x10aa>
 8001652:	ee19 ba10 	vmov	fp, s18
 8001656:	2610      	movs	r6, #16
 8001658:	e005      	b.n	8001666 <_vfprintf_r+0xc5e>
 800165a:	f10a 0a08 	add.w	sl, sl, #8
 800165e:	3d10      	subs	r5, #16
 8001660:	2d10      	cmp	r5, #16
 8001662:	f340 8226 	ble.w	8001ab2 <_vfprintf_r+0x10aa>
 8001666:	3301      	adds	r3, #1
 8001668:	3410      	adds	r4, #16
 800166a:	2b07      	cmp	r3, #7
 800166c:	e9ca 7600 	strd	r7, r6, [sl]
 8001670:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
 8001674:	ddf1      	ble.n	800165a <_vfprintf_r+0xc52>
 8001676:	aa1d      	add	r2, sp, #116	; 0x74
 8001678:	4641      	mov	r1, r8
 800167a:	4658      	mov	r0, fp
 800167c:	f003 ff46 	bl	800550c <__sprint_r>
 8001680:	2800      	cmp	r0, #0
 8001682:	f47f ab15 	bne.w	8000cb0 <_vfprintf_r+0x2a8>
 8001686:	e9dd 341e 	ldrd	r3, r4, [sp, #120]	; 0x78
 800168a:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 800168e:	e7e6      	b.n	800165e <_vfprintf_r+0xc56>
 8001690:	9b05      	ldr	r3, [sp, #20]
 8001692:	2b00      	cmp	r3, #0
 8001694:	f040 8337 	bne.w	8001d06 <_vfprintf_r+0x12fe>
 8001698:	2300      	movs	r3, #0
 800169a:	9305      	str	r3, [sp, #20]
 800169c:	9308      	str	r3, [sp, #32]
 800169e:	ae2a      	add	r6, sp, #168	; 0xa8
 80016a0:	e585      	b.n	80011ae <_vfprintf_r+0x7a6>
 80016a2:	9b03      	ldr	r3, [sp, #12]
 80016a4:	07d9      	lsls	r1, r3, #31
 80016a6:	f53f ae8b 	bmi.w	80013c0 <_vfprintf_r+0x9b8>
 80016aa:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 80016ac:	f8ca 6000 	str.w	r6, [sl]
 80016b0:	3501      	adds	r5, #1
 80016b2:	3401      	adds	r4, #1
 80016b4:	2301      	movs	r3, #1
 80016b6:	2d07      	cmp	r5, #7
 80016b8:	941f      	str	r4, [sp, #124]	; 0x7c
 80016ba:	951e      	str	r5, [sp, #120]	; 0x78
 80016bc:	f8ca 3004 	str.w	r3, [sl, #4]
 80016c0:	f77f aeb1 	ble.w	8001426 <_vfprintf_r+0xa1e>
 80016c4:	ee19 0a10 	vmov	r0, s18
 80016c8:	aa1d      	add	r2, sp, #116	; 0x74
 80016ca:	4641      	mov	r1, r8
 80016cc:	f003 ff1e 	bl	800550c <__sprint_r>
 80016d0:	2800      	cmp	r0, #0
 80016d2:	f47f aaed 	bne.w	8000cb0 <_vfprintf_r+0x2a8>
 80016d6:	e9dd 541e 	ldrd	r5, r4, [sp, #120]	; 0x78
 80016da:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 80016de:	e6a4      	b.n	800142a <_vfprintf_r+0xa22>
 80016e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80016e2:	1e5e      	subs	r6, r3, #1
 80016e4:	2e00      	cmp	r6, #0
 80016e6:	f77f aea0 	ble.w	800142a <_vfprintf_r+0xa22>
 80016ea:	2e10      	cmp	r6, #16
 80016ec:	4f2a      	ldr	r7, [pc, #168]	; (8001798 <_vfprintf_r+0xd90>)
 80016ee:	f340 8257 	ble.w	8001ba0 <_vfprintf_r+0x1198>
 80016f2:	f8cd 9014 	str.w	r9, [sp, #20]
 80016f6:	f04f 0b10 	mov.w	fp, #16
 80016fa:	ee19 9a10 	vmov	r9, s18
 80016fe:	e005      	b.n	800170c <_vfprintf_r+0xd04>
 8001700:	f10a 0a08 	add.w	sl, sl, #8
 8001704:	3e10      	subs	r6, #16
 8001706:	2e10      	cmp	r6, #16
 8001708:	f340 8248 	ble.w	8001b9c <_vfprintf_r+0x1194>
 800170c:	3501      	adds	r5, #1
 800170e:	3410      	adds	r4, #16
 8001710:	2d07      	cmp	r5, #7
 8001712:	e9ca 7b00 	strd	r7, fp, [sl]
 8001716:	e9cd 541e 	strd	r5, r4, [sp, #120]	; 0x78
 800171a:	ddf1      	ble.n	8001700 <_vfprintf_r+0xcf8>
 800171c:	aa1d      	add	r2, sp, #116	; 0x74
 800171e:	4641      	mov	r1, r8
 8001720:	4648      	mov	r0, r9
 8001722:	f003 fef3 	bl	800550c <__sprint_r>
 8001726:	2800      	cmp	r0, #0
 8001728:	f47f aac2 	bne.w	8000cb0 <_vfprintf_r+0x2a8>
 800172c:	e9dd 541e 	ldrd	r5, r4, [sp, #120]	; 0x78
 8001730:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 8001734:	e7e6      	b.n	8001704 <_vfprintf_r+0xcfc>
 8001736:	ee19 0a10 	vmov	r0, s18
 800173a:	aa1d      	add	r2, sp, #116	; 0x74
 800173c:	4641      	mov	r1, r8
 800173e:	f003 fee5 	bl	800550c <__sprint_r>
 8001742:	2800      	cmp	r0, #0
 8001744:	f47f aab4 	bne.w	8000cb0 <_vfprintf_r+0x2a8>
 8001748:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 800174a:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 800174e:	f7ff bb18 	b.w	8000d82 <_vfprintf_r+0x37a>
 8001752:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001754:	f853 0b04 	ldr.w	r0, [r3], #4
 8001758:	9309      	str	r3, [sp, #36]	; 0x24
 800175a:	e469      	b.n	8001030 <_vfprintf_r+0x628>
 800175c:	17c1      	asrs	r1, r0, #31
 800175e:	460b      	mov	r3, r1
 8001760:	2b00      	cmp	r3, #0
 8001762:	f6bf abc3 	bge.w	8000eec <_vfprintf_r+0x4e4>
 8001766:	4240      	negs	r0, r0
 8001768:	f04f 042d 	mov.w	r4, #45	; 0x2d
 800176c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001770:	f88d 4057 	strb.w	r4, [sp, #87]	; 0x57
 8001774:	2301      	movs	r3, #1
 8001776:	f7ff ba60 	b.w	8000c3a <_vfprintf_r+0x232>
 800177a:	9b03      	ldr	r3, [sp, #12]
 800177c:	07dd      	lsls	r5, r3, #31
 800177e:	f57f ab13 	bpl.w	8000da8 <_vfprintf_r+0x3a0>
 8001782:	e53e      	b.n	8001202 <_vfprintf_r+0x7fa>
 8001784:	f899 5000 	ldrb.w	r5, [r9]
 8001788:	9209      	str	r2, [sp, #36]	; 0x24
 800178a:	f7ff b9a3 	b.w	8000ad4 <_vfprintf_r+0xcc>
 800178e:	ae2a      	add	r6, sp, #168	; 0xa8
 8001790:	e50d      	b.n	80011ae <_vfprintf_r+0x7a6>
 8001792:	bf00      	nop
 8001794:	0800ccac 	.word	0x0800ccac
 8001798:	0800ccbc 	.word	0x0800ccbc
 800179c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80017a0:	4602      	mov	r2, r0
 80017a2:	460b      	mov	r3, r1
 80017a4:	f005 fee0 	bl	8007568 <__aeabi_dcmpun>
 80017a8:	2800      	cmp	r0, #0
 80017aa:	f040 8365 	bne.w	8001e78 <_vfprintf_r+0x1470>
 80017ae:	9b05      	ldr	r3, [sp, #20]
 80017b0:	3301      	adds	r3, #1
 80017b2:	f025 0720 	bic.w	r7, r5, #32
 80017b6:	f000 82f5 	beq.w	8001da4 <_vfprintf_r+0x139c>
 80017ba:	2f47      	cmp	r7, #71	; 0x47
 80017bc:	f000 8281 	beq.w	8001cc2 <_vfprintf_r+0x12ba>
 80017c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80017c4:	f44b 7280 	orr.w	r2, fp, #256	; 0x100
 80017c8:	2900      	cmp	r1, #0
 80017ca:	9203      	str	r2, [sp, #12]
 80017cc:	f2c0 824c 	blt.w	8001c68 <_vfprintf_r+0x1260>
 80017d0:	ed9d 7b0c 	vldr	d7, [sp, #48]	; 0x30
 80017d4:	2300      	movs	r3, #0
 80017d6:	9312      	str	r3, [sp, #72]	; 0x48
 80017d8:	eeb0 aa47 	vmov.f32	s20, s14
 80017dc:	eef0 aa67 	vmov.f32	s21, s15
 80017e0:	2d66      	cmp	r5, #102	; 0x66
 80017e2:	f000 81e9 	beq.w	8001bb8 <_vfprintf_r+0x11b0>
 80017e6:	2d46      	cmp	r5, #70	; 0x46
 80017e8:	f000 81e6 	beq.w	8001bb8 <_vfprintf_r+0x11b0>
 80017ec:	eeb0 0a4a 	vmov.f32	s0, s20
 80017f0:	eef0 0a6a 	vmov.f32	s1, s21
 80017f4:	2f45      	cmp	r7, #69	; 0x45
 80017f6:	bf0a      	itet	eq
 80017f8:	9b05      	ldreq	r3, [sp, #20]
 80017fa:	9c05      	ldrne	r4, [sp, #20]
 80017fc:	1c5c      	addeq	r4, r3, #1
 80017fe:	ab1b      	add	r3, sp, #108	; 0x6c
 8001800:	9301      	str	r3, [sp, #4]
 8001802:	ab18      	add	r3, sp, #96	; 0x60
 8001804:	9300      	str	r3, [sp, #0]
 8001806:	ee19 0a10 	vmov	r0, s18
 800180a:	ab17      	add	r3, sp, #92	; 0x5c
 800180c:	4622      	mov	r2, r4
 800180e:	2102      	movs	r1, #2
 8001810:	f000 fcfa 	bl	8002208 <_dtoa_r>
 8001814:	2d67      	cmp	r5, #103	; 0x67
 8001816:	4606      	mov	r6, r0
 8001818:	f040 823d 	bne.w	8001c96 <_vfprintf_r+0x128e>
 800181c:	f01b 0f01 	tst.w	fp, #1
 8001820:	f040 823c 	bne.w	8001c9c <_vfprintf_r+0x1294>
 8001824:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8001826:	2f47      	cmp	r7, #71	; 0x47
 8001828:	eba3 0306 	sub.w	r3, r3, r6
 800182c:	930b      	str	r3, [sp, #44]	; 0x2c
 800182e:	f040 836e 	bne.w	8001f0e <_vfprintf_r+0x1506>
 8001832:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8001834:	930a      	str	r3, [sp, #40]	; 0x28
 8001836:	1cd9      	adds	r1, r3, #3
 8001838:	db03      	blt.n	8001842 <_vfprintf_r+0xe3a>
 800183a:	9a05      	ldr	r2, [sp, #20]
 800183c:	4293      	cmp	r3, r2
 800183e:	f340 8278 	ble.w	8001d32 <_vfprintf_r+0x132a>
 8001842:	3d02      	subs	r5, #2
 8001844:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001846:	f88d 5064 	strb.w	r5, [sp, #100]	; 0x64
 800184a:	1e53      	subs	r3, r2, #1
 800184c:	2b00      	cmp	r3, #0
 800184e:	9317      	str	r3, [sp, #92]	; 0x5c
 8001850:	bfb6      	itet	lt
 8001852:	f1c2 0301 	rsblt	r3, r2, #1
 8001856:	222b      	movge	r2, #43	; 0x2b
 8001858:	222d      	movlt	r2, #45	; 0x2d
 800185a:	2b09      	cmp	r3, #9
 800185c:	f88d 2065 	strb.w	r2, [sp, #101]	; 0x65
 8001860:	f340 82f5 	ble.w	8001e4e <_vfprintf_r+0x1446>
 8001864:	f10d 0473 	add.w	r4, sp, #115	; 0x73
 8001868:	4fc0      	ldr	r7, [pc, #768]	; (8001b6c <_vfprintf_r+0x1164>)
 800186a:	4622      	mov	r2, r4
 800186c:	4610      	mov	r0, r2
 800186e:	fb87 2103 	smull	r2, r1, r7, r3
 8001872:	17da      	asrs	r2, r3, #31
 8001874:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
 8001878:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 800187c:	eba3 0141 	sub.w	r1, r3, r1, lsl #1
 8001880:	3130      	adds	r1, #48	; 0x30
 8001882:	f800 1c01 	strb.w	r1, [r0, #-1]
 8001886:	4619      	mov	r1, r3
 8001888:	2963      	cmp	r1, #99	; 0x63
 800188a:	4613      	mov	r3, r2
 800188c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8001890:	dcec      	bgt.n	800186c <_vfprintf_r+0xe64>
 8001892:	3330      	adds	r3, #48	; 0x30
 8001894:	b2d9      	uxtb	r1, r3
 8001896:	1e83      	subs	r3, r0, #2
 8001898:	429c      	cmp	r4, r3
 800189a:	f802 1c01 	strb.w	r1, [r2, #-1]
 800189e:	f240 8327 	bls.w	8001ef0 <_vfprintf_r+0x14e8>
 80018a2:	4613      	mov	r3, r2
 80018a4:	f10d 0266 	add.w	r2, sp, #102	; 0x66
 80018a8:	e001      	b.n	80018ae <_vfprintf_r+0xea6>
 80018aa:	f813 1b01 	ldrb.w	r1, [r3], #1
 80018ae:	f802 1b01 	strb.w	r1, [r2], #1
 80018b2:	429c      	cmp	r4, r3
 80018b4:	d1f9      	bne.n	80018aa <_vfprintf_r+0xea2>
 80018b6:	f10d 0375 	add.w	r3, sp, #117	; 0x75
 80018ba:	f10d 0266 	add.w	r2, sp, #102	; 0x66
 80018be:	1a1b      	subs	r3, r3, r0
 80018c0:	4413      	add	r3, r2
 80018c2:	aa19      	add	r2, sp, #100	; 0x64
 80018c4:	1a9b      	subs	r3, r3, r2
 80018c6:	9311      	str	r3, [sp, #68]	; 0x44
 80018c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80018ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80018cc:	2a01      	cmp	r2, #1
 80018ce:	4413      	add	r3, r2
 80018d0:	9308      	str	r3, [sp, #32]
 80018d2:	f340 82c8 	ble.w	8001e66 <_vfprintf_r+0x145e>
 80018d6:	9b08      	ldr	r3, [sp, #32]
 80018d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80018da:	4413      	add	r3, r2
 80018dc:	9308      	str	r3, [sp, #32]
 80018de:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80018e2:	9304      	str	r3, [sp, #16]
 80018e4:	2300      	movs	r3, #0
 80018e6:	930a      	str	r3, [sp, #40]	; 0x28
 80018e8:	e19e      	b.n	8001c28 <_vfprintf_r+0x1220>
 80018ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80018ec:	9807      	ldr	r0, [sp, #28]
 80018ee:	f853 1b04 	ldr.w	r1, [r3], #4
 80018f2:	9309      	str	r3, [sp, #36]	; 0x24
 80018f4:	17c2      	asrs	r2, r0, #31
 80018f6:	e9c1 0200 	strd	r0, r2, [r1]
 80018fa:	f7ff b8c9 	b.w	8000a90 <_vfprintf_r+0x88>
 80018fe:	280a      	cmp	r0, #10
 8001900:	f171 0300 	sbcs.w	r3, r1, #0
 8001904:	f89d 4057 	ldrb.w	r4, [sp, #87]	; 0x57
 8001908:	f4ff ab04 	bcc.w	8000f14 <_vfprintf_r+0x50c>
 800190c:	f8cd 900c 	str.w	r9, [sp, #12]
 8001910:	ae2a      	add	r6, sp, #168	; 0xa8
 8001912:	46a1      	mov	r9, r4
 8001914:	220a      	movs	r2, #10
 8001916:	2300      	movs	r3, #0
 8001918:	4604      	mov	r4, r0
 800191a:	460f      	mov	r7, r1
 800191c:	f005 fe62 	bl	80075e4 <__aeabi_uldivmod>
 8001920:	3230      	adds	r2, #48	; 0x30
 8001922:	f806 2d01 	strb.w	r2, [r6, #-1]!
 8001926:	2300      	movs	r3, #0
 8001928:	4620      	mov	r0, r4
 800192a:	4639      	mov	r1, r7
 800192c:	220a      	movs	r2, #10
 800192e:	f005 fe59 	bl	80075e4 <__aeabi_uldivmod>
 8001932:	2c0a      	cmp	r4, #10
 8001934:	f177 0300 	sbcs.w	r3, r7, #0
 8001938:	d2ec      	bcs.n	8001914 <_vfprintf_r+0xf0c>
 800193a:	ab2a      	add	r3, sp, #168	; 0xa8
 800193c:	1b9b      	subs	r3, r3, r6
 800193e:	464c      	mov	r4, r9
 8001940:	9308      	str	r3, [sp, #32]
 8001942:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8001946:	f8cd b00c 	str.w	fp, [sp, #12]
 800194a:	e430      	b.n	80011ae <_vfprintf_r+0x7a6>
 800194c:	9b03      	ldr	r3, [sp, #12]
 800194e:	07d8      	lsls	r0, r3, #31
 8001950:	f53f ae4e 	bmi.w	80015f0 <_vfprintf_r+0xbe8>
 8001954:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8001958:	1a9f      	subs	r7, r3, r2
 800195a:	1b5d      	subs	r5, r3, r5
 800195c:	42af      	cmp	r7, r5
 800195e:	bfa8      	it	ge
 8001960:	462f      	movge	r7, r5
 8001962:	e66b      	b.n	800163c <_vfprintf_r+0xc34>
 8001964:	ee19 0a10 	vmov	r0, s18
 8001968:	aa1d      	add	r2, sp, #116	; 0x74
 800196a:	4641      	mov	r1, r8
 800196c:	f003 fdce 	bl	800550c <__sprint_r>
 8001970:	2800      	cmp	r0, #0
 8001972:	f47f a99d 	bne.w	8000cb0 <_vfprintf_r+0x2a8>
 8001976:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 8001978:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 800197c:	e44f      	b.n	800121e <_vfprintf_r+0x816>
 800197e:	2b06      	cmp	r3, #6
 8001980:	bf28      	it	cs
 8001982:	2306      	movcs	r3, #6
 8001984:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8001988:	4e79      	ldr	r6, [pc, #484]	; (8001b70 <_vfprintf_r+0x1168>)
 800198a:	9304      	str	r3, [sp, #16]
 800198c:	f7ff b9af 	b.w	8000cee <_vfprintf_r+0x2e6>
 8001990:	2d10      	cmp	r5, #16
 8001992:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8001994:	4f77      	ldr	r7, [pc, #476]	; (8001b74 <_vfprintf_r+0x116c>)
 8001996:	f340 8155 	ble.w	8001c44 <_vfprintf_r+0x123c>
 800199a:	463a      	mov	r2, r7
 800199c:	9605      	str	r6, [sp, #20]
 800199e:	4647      	mov	r7, r8
 80019a0:	ee19 6a10 	vmov	r6, s18
 80019a4:	f04f 0b10 	mov.w	fp, #16
 80019a8:	4690      	mov	r8, r2
 80019aa:	e005      	b.n	80019b8 <_vfprintf_r+0xfb0>
 80019ac:	f10a 0a08 	add.w	sl, sl, #8
 80019b0:	3d10      	subs	r5, #16
 80019b2:	2d10      	cmp	r5, #16
 80019b4:	f340 8142 	ble.w	8001c3c <_vfprintf_r+0x1234>
 80019b8:	3301      	adds	r3, #1
 80019ba:	3410      	adds	r4, #16
 80019bc:	2b07      	cmp	r3, #7
 80019be:	e9ca 8b00 	strd	r8, fp, [sl]
 80019c2:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
 80019c6:	ddf1      	ble.n	80019ac <_vfprintf_r+0xfa4>
 80019c8:	aa1d      	add	r2, sp, #116	; 0x74
 80019ca:	4639      	mov	r1, r7
 80019cc:	4630      	mov	r0, r6
 80019ce:	f003 fd9d 	bl	800550c <__sprint_r>
 80019d2:	2800      	cmp	r0, #0
 80019d4:	f040 8244 	bne.w	8001e60 <_vfprintf_r+0x1458>
 80019d8:	e9dd 341e 	ldrd	r3, r4, [sp, #120]	; 0x78
 80019dc:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 80019e0:	e7e6      	b.n	80019b0 <_vfprintf_r+0xfa8>
 80019e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80019e4:	9907      	ldr	r1, [sp, #28]
 80019e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80019ea:	6011      	str	r1, [r2, #0]
 80019ec:	9309      	str	r3, [sp, #36]	; 0x24
 80019ee:	f7ff b84f 	b.w	8000a90 <_vfprintf_r+0x88>
 80019f2:	ee19 0a10 	vmov	r0, s18
 80019f6:	aa1d      	add	r2, sp, #116	; 0x74
 80019f8:	4641      	mov	r1, r8
 80019fa:	f003 fd87 	bl	800550c <__sprint_r>
 80019fe:	2800      	cmp	r0, #0
 8001a00:	f47f a956 	bne.w	8000cb0 <_vfprintf_r+0x2a8>
 8001a04:	e9dd 541e 	ldrd	r5, r4, [sp, #120]	; 0x78
 8001a08:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 8001a0c:	e4e7      	b.n	80013de <_vfprintf_r+0x9d6>
 8001a0e:	ee19 0a10 	vmov	r0, s18
 8001a12:	aa1d      	add	r2, sp, #116	; 0x74
 8001a14:	4641      	mov	r1, r8
 8001a16:	f003 fd79 	bl	800550c <__sprint_r>
 8001a1a:	2800      	cmp	r0, #0
 8001a1c:	f47f a948 	bne.w	8000cb0 <_vfprintf_r+0x2a8>
 8001a20:	e9dd 541e 	ldrd	r5, r4, [sp, #120]	; 0x78
 8001a24:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 8001a28:	e4e6      	b.n	80013f8 <_vfprintf_r+0x9f0>
 8001a2a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8001a2c:	4a52      	ldr	r2, [pc, #328]	; (8001b78 <_vfprintf_r+0x1170>)
 8001a2e:	f8ca 2000 	str.w	r2, [sl]
 8001a32:	3301      	adds	r3, #1
 8001a34:	3401      	adds	r4, #1
 8001a36:	2201      	movs	r2, #1
 8001a38:	2b07      	cmp	r3, #7
 8001a3a:	941f      	str	r4, [sp, #124]	; 0x7c
 8001a3c:	931e      	str	r3, [sp, #120]	; 0x78
 8001a3e:	f8ca 2004 	str.w	r2, [sl, #4]
 8001a42:	f300 811a 	bgt.w	8001c7a <_vfprintf_r+0x1272>
 8001a46:	f10a 0a08 	add.w	sl, sl, #8
 8001a4a:	2900      	cmp	r1, #0
 8001a4c:	d159      	bne.n	8001b02 <_vfprintf_r+0x10fa>
 8001a4e:	9b03      	ldr	r3, [sp, #12]
 8001a50:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001a52:	f003 0301 	and.w	r3, r3, #1
 8001a56:	4313      	orrs	r3, r2
 8001a58:	f43f a9a6 	beq.w	8000da8 <_vfprintf_r+0x3a0>
 8001a5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001a5e:	9910      	ldr	r1, [sp, #64]	; 0x40
 8001a60:	191a      	adds	r2, r3, r4
 8001a62:	e9ca 1300 	strd	r1, r3, [sl]
 8001a66:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8001a68:	921f      	str	r2, [sp, #124]	; 0x7c
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	2b07      	cmp	r3, #7
 8001a6e:	931e      	str	r3, [sp, #120]	; 0x78
 8001a70:	f300 812d 	bgt.w	8001cce <_vfprintf_r+0x12c6>
 8001a74:	f10a 0a08 	add.w	sl, sl, #8
 8001a78:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8001a7a:	f8ca 6000 	str.w	r6, [sl]
 8001a7e:	3301      	adds	r3, #1
 8001a80:	188c      	adds	r4, r1, r2
 8001a82:	2b07      	cmp	r3, #7
 8001a84:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
 8001a88:	f8ca 1004 	str.w	r1, [sl, #4]
 8001a8c:	f77f a98a 	ble.w	8000da4 <_vfprintf_r+0x39c>
 8001a90:	e4d8      	b.n	8001444 <_vfprintf_r+0xa3c>
 8001a92:	ee19 0a10 	vmov	r0, s18
 8001a96:	aa1d      	add	r2, sp, #116	; 0x74
 8001a98:	4641      	mov	r1, r8
 8001a9a:	9312      	str	r3, [sp, #72]	; 0x48
 8001a9c:	f003 fd36 	bl	800550c <__sprint_r>
 8001aa0:	2800      	cmp	r0, #0
 8001aa2:	f47f a905 	bne.w	8000cb0 <_vfprintf_r+0x2a8>
 8001aa6:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 8001aa8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8001aaa:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 8001aae:	f7ff b935 	b.w	8000d1c <_vfprintf_r+0x314>
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	442c      	add	r4, r5
 8001ab6:	2b07      	cmp	r3, #7
 8001ab8:	f8ca 7000 	str.w	r7, [sl]
 8001abc:	f8ca 5004 	str.w	r5, [sl, #4]
 8001ac0:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
 8001ac4:	f77f a96e 	ble.w	8000da4 <_vfprintf_r+0x39c>
 8001ac8:	e4bc      	b.n	8001444 <_vfprintf_r+0xa3c>
 8001aca:	ee19 0a10 	vmov	r0, s18
 8001ace:	aa1d      	add	r2, sp, #116	; 0x74
 8001ad0:	4641      	mov	r1, r8
 8001ad2:	f003 fd1b 	bl	800550c <__sprint_r>
 8001ad6:	2800      	cmp	r0, #0
 8001ad8:	f47f a8ea 	bne.w	8000cb0 <_vfprintf_r+0x2a8>
 8001adc:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 8001ade:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 8001ae2:	f7ff bb89 	b.w	80011f8 <_vfprintf_r+0x7f0>
 8001ae6:	ee19 0a10 	vmov	r0, s18
 8001aea:	aa1d      	add	r2, sp, #116	; 0x74
 8001aec:	4641      	mov	r1, r8
 8001aee:	f003 fd0d 	bl	800550c <__sprint_r>
 8001af2:	2800      	cmp	r0, #0
 8001af4:	f47f a8dc 	bne.w	8000cb0 <_vfprintf_r+0x2a8>
 8001af8:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 8001afa:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 8001afe:	f7ff b938 	b.w	8000d72 <_vfprintf_r+0x36a>
 8001b02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001b04:	9810      	ldr	r0, [sp, #64]	; 0x40
 8001b06:	191a      	adds	r2, r3, r4
 8001b08:	e9ca 0300 	strd	r0, r3, [sl]
 8001b0c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8001b0e:	921f      	str	r2, [sp, #124]	; 0x7c
 8001b10:	3301      	adds	r3, #1
 8001b12:	2b07      	cmp	r3, #7
 8001b14:	931e      	str	r3, [sp, #120]	; 0x78
 8001b16:	f300 80da 	bgt.w	8001cce <_vfprintf_r+0x12c6>
 8001b1a:	f10a 0a08 	add.w	sl, sl, #8
 8001b1e:	2900      	cmp	r1, #0
 8001b20:	daaa      	bge.n	8001a78 <_vfprintf_r+0x1070>
 8001b22:	424d      	negs	r5, r1
 8001b24:	3110      	adds	r1, #16
 8001b26:	4f13      	ldr	r7, [pc, #76]	; (8001b74 <_vfprintf_r+0x116c>)
 8001b28:	f280 8178 	bge.w	8001e1c <_vfprintf_r+0x1414>
 8001b2c:	ee19 ba10 	vmov	fp, s18
 8001b30:	2410      	movs	r4, #16
 8001b32:	e005      	b.n	8001b40 <_vfprintf_r+0x1138>
 8001b34:	f10a 0a08 	add.w	sl, sl, #8
 8001b38:	3d10      	subs	r5, #16
 8001b3a:	2d10      	cmp	r5, #16
 8001b3c:	f340 816e 	ble.w	8001e1c <_vfprintf_r+0x1414>
 8001b40:	3301      	adds	r3, #1
 8001b42:	3210      	adds	r2, #16
 8001b44:	2b07      	cmp	r3, #7
 8001b46:	e9ca 7400 	strd	r7, r4, [sl]
 8001b4a:	e9cd 321e 	strd	r3, r2, [sp, #120]	; 0x78
 8001b4e:	ddf1      	ble.n	8001b34 <_vfprintf_r+0x112c>
 8001b50:	aa1d      	add	r2, sp, #116	; 0x74
 8001b52:	4641      	mov	r1, r8
 8001b54:	4658      	mov	r0, fp
 8001b56:	f003 fcd9 	bl	800550c <__sprint_r>
 8001b5a:	2800      	cmp	r0, #0
 8001b5c:	f47f a8a8 	bne.w	8000cb0 <_vfprintf_r+0x2a8>
 8001b60:	e9dd 321e 	ldrd	r3, r2, [sp, #120]	; 0x78
 8001b64:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 8001b68:	e7e6      	b.n	8001b38 <_vfprintf_r+0x1130>
 8001b6a:	bf00      	nop
 8001b6c:	66666667 	.word	0x66666667
 8001b70:	0801c0bc 	.word	0x0801c0bc
 8001b74:	0800ccbc 	.word	0x0800ccbc
 8001b78:	0801c0c4 	.word	0x0801c0c4
 8001b7c:	4630      	mov	r0, r6
 8001b7e:	9409      	str	r4, [sp, #36]	; 0x24
 8001b80:	9705      	str	r7, [sp, #20]
 8001b82:	f8cd b00c 	str.w	fp, [sp, #12]
 8001b86:	f7fe fddb 	bl	8000740 <strlen>
 8001b8a:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
 8001b8e:	f89d 4057 	ldrb.w	r4, [sp, #87]	; 0x57
 8001b92:	9008      	str	r0, [sp, #32]
 8001b94:	9304      	str	r3, [sp, #16]
 8001b96:	970a      	str	r7, [sp, #40]	; 0x28
 8001b98:	f7ff b96f 	b.w	8000e7a <_vfprintf_r+0x472>
 8001b9c:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8001ba0:	f8ca 7000 	str.w	r7, [sl]
 8001ba4:	3501      	adds	r5, #1
 8001ba6:	4434      	add	r4, r6
 8001ba8:	2d07      	cmp	r5, #7
 8001baa:	e9cd 541e 	strd	r5, r4, [sp, #120]	; 0x78
 8001bae:	f8ca 6004 	str.w	r6, [sl, #4]
 8001bb2:	f77f ac38 	ble.w	8001426 <_vfprintf_r+0xa1e>
 8001bb6:	e585      	b.n	80016c4 <_vfprintf_r+0xcbc>
 8001bb8:	9c05      	ldr	r4, [sp, #20]
 8001bba:	eeb0 0a4a 	vmov.f32	s0, s20
 8001bbe:	eef0 0a6a 	vmov.f32	s1, s21
 8001bc2:	ab1b      	add	r3, sp, #108	; 0x6c
 8001bc4:	9301      	str	r3, [sp, #4]
 8001bc6:	ab18      	add	r3, sp, #96	; 0x60
 8001bc8:	9300      	str	r3, [sp, #0]
 8001bca:	4622      	mov	r2, r4
 8001bcc:	ab17      	add	r3, sp, #92	; 0x5c
 8001bce:	ee19 0a10 	vmov	r0, s18
 8001bd2:	2103      	movs	r1, #3
 8001bd4:	f000 fb18 	bl	8002208 <_dtoa_r>
 8001bd8:	4606      	mov	r6, r0
 8001bda:	1904      	adds	r4, r0, r4
 8001bdc:	7833      	ldrb	r3, [r6, #0]
 8001bde:	2b30      	cmp	r3, #48	; 0x30
 8001be0:	d062      	beq.n	8001ca8 <_vfprintf_r+0x12a0>
 8001be2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8001be4:	441c      	add	r4, r3
 8001be6:	ec51 0b1a 	vmov	r0, r1, d10
 8001bea:	2200      	movs	r2, #0
 8001bec:	2300      	movs	r3, #0
 8001bee:	f005 fc89 	bl	8007504 <__aeabi_dcmpeq>
 8001bf2:	2800      	cmp	r0, #0
 8001bf4:	f000 808b 	beq.w	8001d0e <_vfprintf_r+0x1306>
 8001bf8:	4623      	mov	r3, r4
 8001bfa:	1b9b      	subs	r3, r3, r6
 8001bfc:	2f47      	cmp	r7, #71	; 0x47
 8001bfe:	930b      	str	r3, [sp, #44]	; 0x2c
 8001c00:	f43f ae17 	beq.w	8001832 <_vfprintf_r+0xe2a>
 8001c04:	2d66      	cmp	r5, #102	; 0x66
 8001c06:	f040 8182 	bne.w	8001f0e <_vfprintf_r+0x1506>
 8001c0a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8001c0c:	9a05      	ldr	r2, [sp, #20]
 8001c0e:	930a      	str	r3, [sp, #40]	; 0x28
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	f00b 0b01 	and.w	fp, fp, #1
 8001c16:	f340 815c 	ble.w	8001ed2 <_vfprintf_r+0x14ca>
 8001c1a:	ea5b 0102 	orrs.w	r1, fp, r2
 8001c1e:	f040 8145 	bne.w	8001eac <_vfprintf_r+0x14a4>
 8001c22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001c24:	9304      	str	r3, [sp, #16]
 8001c26:	9308      	str	r3, [sp, #32]
 8001c28:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d07b      	beq.n	8001d26 <_vfprintf_r+0x131e>
 8001c2e:	232d      	movs	r3, #45	; 0x2d
 8001c30:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
 8001c34:	2300      	movs	r3, #0
 8001c36:	9305      	str	r3, [sp, #20]
 8001c38:	f7ff b922 	b.w	8000e80 <_vfprintf_r+0x478>
 8001c3c:	4642      	mov	r2, r8
 8001c3e:	9e05      	ldr	r6, [sp, #20]
 8001c40:	46b8      	mov	r8, r7
 8001c42:	4617      	mov	r7, r2
 8001c44:	3301      	adds	r3, #1
 8001c46:	442c      	add	r4, r5
 8001c48:	2b07      	cmp	r3, #7
 8001c4a:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
 8001c4e:	f8ca 7000 	str.w	r7, [sl]
 8001c52:	f8ca 5004 	str.w	r5, [sl, #4]
 8001c56:	dc49      	bgt.n	8001cec <_vfprintf_r+0x12e4>
 8001c58:	f10a 0a08 	add.w	sl, sl, #8
 8001c5c:	e4c3      	b.n	80015e6 <_vfprintf_r+0xbde>
 8001c5e:	242d      	movs	r4, #45	; 0x2d
 8001c60:	f88d 4057 	strb.w	r4, [sp, #87]	; 0x57
 8001c64:	f7ff b8fb 	b.w	8000e5e <_vfprintf_r+0x456>
 8001c68:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8001c6c:	ee0a 3a90 	vmov	s21, r3
 8001c70:	232d      	movs	r3, #45	; 0x2d
 8001c72:	ee0a 0a10 	vmov	s20, r0
 8001c76:	9312      	str	r3, [sp, #72]	; 0x48
 8001c78:	e5b2      	b.n	80017e0 <_vfprintf_r+0xdd8>
 8001c7a:	ee19 0a10 	vmov	r0, s18
 8001c7e:	aa1d      	add	r2, sp, #116	; 0x74
 8001c80:	4641      	mov	r1, r8
 8001c82:	f003 fc43 	bl	800550c <__sprint_r>
 8001c86:	2800      	cmp	r0, #0
 8001c88:	f47f a812 	bne.w	8000cb0 <_vfprintf_r+0x2a8>
 8001c8c:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8001c8e:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 8001c90:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 8001c94:	e6d9      	b.n	8001a4a <_vfprintf_r+0x1042>
 8001c96:	2d47      	cmp	r5, #71	; 0x47
 8001c98:	f43f adc0 	beq.w	800181c <_vfprintf_r+0xe14>
 8001c9c:	4434      	add	r4, r6
 8001c9e:	e7a2      	b.n	8001be6 <_vfprintf_r+0x11de>
 8001ca0:	f88d 0057 	strb.w	r0, [sp, #87]	; 0x57
 8001ca4:	f7ff b817 	b.w	8000cd6 <_vfprintf_r+0x2ce>
 8001ca8:	ec51 0b1a 	vmov	r0, r1, d10
 8001cac:	2200      	movs	r2, #0
 8001cae:	2300      	movs	r3, #0
 8001cb0:	f005 fc28 	bl	8007504 <__aeabi_dcmpeq>
 8001cb4:	2800      	cmp	r0, #0
 8001cb6:	d194      	bne.n	8001be2 <_vfprintf_r+0x11da>
 8001cb8:	9b05      	ldr	r3, [sp, #20]
 8001cba:	f1c3 0301 	rsb	r3, r3, #1
 8001cbe:	9317      	str	r3, [sp, #92]	; 0x5c
 8001cc0:	e790      	b.n	8001be4 <_vfprintf_r+0x11dc>
 8001cc2:	9b05      	ldr	r3, [sp, #20]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	bf08      	it	eq
 8001cc8:	2301      	moveq	r3, #1
 8001cca:	9305      	str	r3, [sp, #20]
 8001ccc:	e578      	b.n	80017c0 <_vfprintf_r+0xdb8>
 8001cce:	ee19 0a10 	vmov	r0, s18
 8001cd2:	aa1d      	add	r2, sp, #116	; 0x74
 8001cd4:	4641      	mov	r1, r8
 8001cd6:	f003 fc19 	bl	800550c <__sprint_r>
 8001cda:	2800      	cmp	r0, #0
 8001cdc:	f47e afe8 	bne.w	8000cb0 <_vfprintf_r+0x2a8>
 8001ce0:	e9dd 321e 	ldrd	r3, r2, [sp, #120]	; 0x78
 8001ce4:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8001ce6:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 8001cea:	e718      	b.n	8001b1e <_vfprintf_r+0x1116>
 8001cec:	ee19 0a10 	vmov	r0, s18
 8001cf0:	aa1d      	add	r2, sp, #116	; 0x74
 8001cf2:	4641      	mov	r1, r8
 8001cf4:	f003 fc0a 	bl	800550c <__sprint_r>
 8001cf8:	2800      	cmp	r0, #0
 8001cfa:	f47e afd9 	bne.w	8000cb0 <_vfprintf_r+0x2a8>
 8001cfe:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 8001d00:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 8001d04:	e46f      	b.n	80015e6 <_vfprintf_r+0xbde>
 8001d06:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8001d0a:	f7ff b903 	b.w	8000f14 <_vfprintf_r+0x50c>
 8001d0e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8001d10:	42a3      	cmp	r3, r4
 8001d12:	f4bf af72 	bcs.w	8001bfa <_vfprintf_r+0x11f2>
 8001d16:	2130      	movs	r1, #48	; 0x30
 8001d18:	1c5a      	adds	r2, r3, #1
 8001d1a:	921b      	str	r2, [sp, #108]	; 0x6c
 8001d1c:	7019      	strb	r1, [r3, #0]
 8001d1e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8001d20:	429c      	cmp	r4, r3
 8001d22:	d8f9      	bhi.n	8001d18 <_vfprintf_r+0x1310>
 8001d24:	e769      	b.n	8001bfa <_vfprintf_r+0x11f2>
 8001d26:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8001d28:	f89d 4057 	ldrb.w	r4, [sp, #87]	; 0x57
 8001d2c:	9305      	str	r3, [sp, #20]
 8001d2e:	f7ff b8a4 	b.w	8000e7a <_vfprintf_r+0x472>
 8001d32:	e9dd 320a 	ldrd	r3, r2, [sp, #40]	; 0x28
 8001d36:	4293      	cmp	r3, r2
 8001d38:	db43      	blt.n	8001dc2 <_vfprintf_r+0x13ba>
 8001d3a:	f01b 0f01 	tst.w	fp, #1
 8001d3e:	f040 80ac 	bne.w	8001e9a <_vfprintf_r+0x1492>
 8001d42:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 8001d46:	9204      	str	r2, [sp, #16]
 8001d48:	9308      	str	r3, [sp, #32]
 8001d4a:	2567      	movs	r5, #103	; 0x67
 8001d4c:	e76c      	b.n	8001c28 <_vfprintf_r+0x1220>
 8001d4e:	ee19 0a10 	vmov	r0, s18
 8001d52:	aa1d      	add	r2, sp, #116	; 0x74
 8001d54:	4641      	mov	r1, r8
 8001d56:	f003 fbd9 	bl	800550c <__sprint_r>
 8001d5a:	2800      	cmp	r0, #0
 8001d5c:	f47e afa8 	bne.w	8000cb0 <_vfprintf_r+0x2a8>
 8001d60:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8001d62:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 8001d64:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 8001d68:	e450      	b.n	800160c <_vfprintf_r+0xc04>
 8001d6a:	ee19 0a10 	vmov	r0, s18
 8001d6e:	aa1d      	add	r2, sp, #116	; 0x74
 8001d70:	4641      	mov	r1, r8
 8001d72:	f003 fbcb 	bl	800550c <__sprint_r>
 8001d76:	2800      	cmp	r0, #0
 8001d78:	f47e af9a 	bne.w	8000cb0 <_vfprintf_r+0x2a8>
 8001d7c:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 8001d7e:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 8001d82:	e429      	b.n	80015d8 <_vfprintf_r+0xbd0>
 8001d84:	ee19 0a10 	vmov	r0, s18
 8001d88:	aa1d      	add	r2, sp, #116	; 0x74
 8001d8a:	4641      	mov	r1, r8
 8001d8c:	f003 fbbe 	bl	800550c <__sprint_r>
 8001d90:	2800      	cmp	r0, #0
 8001d92:	f47e af8d 	bne.w	8000cb0 <_vfprintf_r+0x2a8>
 8001d96:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8001d98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001d9a:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 8001d9c:	1b5d      	subs	r5, r3, r5
 8001d9e:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 8001da2:	e44b      	b.n	800163c <_vfprintf_r+0xc34>
 8001da4:	2306      	movs	r3, #6
 8001da6:	9305      	str	r3, [sp, #20]
 8001da8:	e50a      	b.n	80017c0 <_vfprintf_r+0xdb8>
 8001daa:	9b05      	ldr	r3, [sp, #20]
 8001dac:	9409      	str	r4, [sp, #36]	; 0x24
 8001dae:	f8cd b00c 	str.w	fp, [sp, #12]
 8001db2:	f89d 4057 	ldrb.w	r4, [sp, #87]	; 0x57
 8001db6:	9304      	str	r3, [sp, #16]
 8001db8:	9308      	str	r3, [sp, #32]
 8001dba:	9005      	str	r0, [sp, #20]
 8001dbc:	900a      	str	r0, [sp, #40]	; 0x28
 8001dbe:	f7ff b85c 	b.w	8000e7a <_vfprintf_r+0x472>
 8001dc2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8001dc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001dc6:	4413      	add	r3, r2
 8001dc8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001dca:	9308      	str	r3, [sp, #32]
 8001dcc:	2a00      	cmp	r2, #0
 8001dce:	dd75      	ble.n	8001ebc <_vfprintf_r+0x14b4>
 8001dd0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001dd4:	9304      	str	r3, [sp, #16]
 8001dd6:	2567      	movs	r5, #103	; 0x67
 8001dd8:	e726      	b.n	8001c28 <_vfprintf_r+0x1220>
 8001dda:	f88d 0057 	strb.w	r0, [sp, #87]	; 0x57
 8001dde:	f7ff b91a 	b.w	8001016 <_vfprintf_r+0x60e>
 8001de2:	2200      	movs	r2, #0
 8001de4:	9205      	str	r2, [sp, #20]
 8001de6:	f7fe be77 	b.w	8000ad8 <_vfprintf_r+0xd0>
 8001dea:	f88d 0057 	strb.w	r0, [sp, #87]	; 0x57
 8001dee:	f7ff b806 	b.w	8000dfe <_vfprintf_r+0x3f6>
 8001df2:	f88d 0057 	strb.w	r0, [sp, #87]	; 0x57
 8001df6:	f7ff b94f 	b.w	8001098 <_vfprintf_r+0x690>
 8001dfa:	f88d 0057 	strb.w	r0, [sp, #87]	; 0x57
 8001dfe:	f7ff b8cc 	b.w	8000f9a <_vfprintf_r+0x592>
 8001e02:	f88d 0057 	strb.w	r0, [sp, #87]	; 0x57
 8001e06:	f7ff b96a 	b.w	80010de <_vfprintf_r+0x6d6>
 8001e0a:	f88d 0057 	strb.w	r0, [sp, #87]	; 0x57
 8001e0e:	f7ff b85d 	b.w	8000ecc <_vfprintf_r+0x4c4>
 8001e12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e16:	9307      	str	r3, [sp, #28]
 8001e18:	f7fe bf4f 	b.w	8000cba <_vfprintf_r+0x2b2>
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	442a      	add	r2, r5
 8001e20:	2b07      	cmp	r3, #7
 8001e22:	e9cd 321e 	strd	r3, r2, [sp, #120]	; 0x78
 8001e26:	f8ca 7000 	str.w	r7, [sl]
 8001e2a:	f8ca 5004 	str.w	r5, [sl, #4]
 8001e2e:	f77f ae21 	ble.w	8001a74 <_vfprintf_r+0x106c>
 8001e32:	ee19 0a10 	vmov	r0, s18
 8001e36:	aa1d      	add	r2, sp, #116	; 0x74
 8001e38:	4641      	mov	r1, r8
 8001e3a:	f003 fb67 	bl	800550c <__sprint_r>
 8001e3e:	2800      	cmp	r0, #0
 8001e40:	f47e af36 	bne.w	8000cb0 <_vfprintf_r+0x2a8>
 8001e44:	e9dd 321e 	ldrd	r3, r2, [sp, #120]	; 0x78
 8001e48:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 8001e4c:	e614      	b.n	8001a78 <_vfprintf_r+0x1070>
 8001e4e:	3330      	adds	r3, #48	; 0x30
 8001e50:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8001e54:	2330      	movs	r3, #48	; 0x30
 8001e56:	f88d 3066 	strb.w	r3, [sp, #102]	; 0x66
 8001e5a:	2304      	movs	r3, #4
 8001e5c:	9311      	str	r3, [sp, #68]	; 0x44
 8001e5e:	e533      	b.n	80018c8 <_vfprintf_r+0xec0>
 8001e60:	46b8      	mov	r8, r7
 8001e62:	f7fe bf25 	b.w	8000cb0 <_vfprintf_r+0x2a8>
 8001e66:	f01b 0201 	ands.w	r2, fp, #1
 8001e6a:	920a      	str	r2, [sp, #40]	; 0x28
 8001e6c:	f47f ad33 	bne.w	80018d6 <_vfprintf_r+0xece>
 8001e70:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001e74:	9304      	str	r3, [sp, #16]
 8001e76:	e6d7      	b.n	8001c28 <_vfprintf_r+0x1220>
 8001e78:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001e7a:	4e26      	ldr	r6, [pc, #152]	; (8001f14 <_vfprintf_r+0x150c>)
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	bfb8      	it	lt
 8001e80:	242d      	movlt	r4, #45	; 0x2d
 8001e82:	f02b 0380 	bic.w	r3, fp, #128	; 0x80
 8001e86:	9303      	str	r3, [sp, #12]
 8001e88:	bfa8      	it	ge
 8001e8a:	f89d 4057 	ldrbge.w	r4, [sp, #87]	; 0x57
 8001e8e:	4b22      	ldr	r3, [pc, #136]	; (8001f18 <_vfprintf_r+0x1510>)
 8001e90:	bfb8      	it	lt
 8001e92:	f88d 4057 	strblt.w	r4, [sp, #87]	; 0x57
 8001e96:	f7fe bfe7 	b.w	8000e68 <_vfprintf_r+0x460>
 8001e9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001e9c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8001e9e:	4413      	add	r3, r2
 8001ea0:	9308      	str	r3, [sp, #32]
 8001ea2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001ea6:	9304      	str	r3, [sp, #16]
 8001ea8:	2567      	movs	r5, #103	; 0x67
 8001eaa:	e6bd      	b.n	8001c28 <_vfprintf_r+0x1220>
 8001eac:	990e      	ldr	r1, [sp, #56]	; 0x38
 8001eae:	440b      	add	r3, r1
 8001eb0:	441a      	add	r2, r3
 8001eb2:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8001eb6:	9208      	str	r2, [sp, #32]
 8001eb8:	9304      	str	r3, [sp, #16]
 8001eba:	e6b5      	b.n	8001c28 <_vfprintf_r+0x1220>
 8001ebc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001ebe:	9a08      	ldr	r2, [sp, #32]
 8001ec0:	f1c3 0301 	rsb	r3, r3, #1
 8001ec4:	441a      	add	r2, r3
 8001ec6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8001eca:	9208      	str	r2, [sp, #32]
 8001ecc:	9304      	str	r3, [sp, #16]
 8001ece:	2567      	movs	r5, #103	; 0x67
 8001ed0:	e6aa      	b.n	8001c28 <_vfprintf_r+0x1220>
 8001ed2:	ea5b 0302 	orrs.w	r3, fp, r2
 8001ed6:	d103      	bne.n	8001ee0 <_vfprintf_r+0x14d8>
 8001ed8:	2301      	movs	r3, #1
 8001eda:	9304      	str	r3, [sp, #16]
 8001edc:	9308      	str	r3, [sp, #32]
 8001ede:	e6a3      	b.n	8001c28 <_vfprintf_r+0x1220>
 8001ee0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	441a      	add	r2, r3
 8001ee6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8001eea:	9208      	str	r2, [sp, #32]
 8001eec:	9304      	str	r3, [sp, #16]
 8001eee:	e69b      	b.n	8001c28 <_vfprintf_r+0x1220>
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	9311      	str	r3, [sp, #68]	; 0x44
 8001ef4:	e4e8      	b.n	80018c8 <_vfprintf_r+0xec0>
 8001ef6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001ef8:	f899 5001 	ldrb.w	r5, [r9, #1]
 8001efc:	4689      	mov	r9, r1
 8001efe:	f852 1b04 	ldr.w	r1, [r2], #4
 8001f02:	9209      	str	r2, [sp, #36]	; 0x24
 8001f04:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
 8001f08:	9105      	str	r1, [sp, #20]
 8001f0a:	f7fe bde3 	b.w	8000ad4 <_vfprintf_r+0xcc>
 8001f0e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8001f10:	930a      	str	r3, [sp, #40]	; 0x28
 8001f12:	e497      	b.n	8001844 <_vfprintf_r+0xe3c>
 8001f14:	0801c08c 	.word	0x0801c08c
 8001f18:	0801c090 	.word	0x0801c090

08001f1c <vfprintf>:
 8001f1c:	b410      	push	{r4}
 8001f1e:	4c05      	ldr	r4, [pc, #20]	; (8001f34 <vfprintf+0x18>)
 8001f20:	4684      	mov	ip, r0
 8001f22:	4613      	mov	r3, r2
 8001f24:	6820      	ldr	r0, [r4, #0]
 8001f26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001f2a:	460a      	mov	r2, r1
 8001f2c:	4661      	mov	r1, ip
 8001f2e:	f7fe bd6b 	b.w	8000a08 <_vfprintf_r>
 8001f32:	bf00      	nop
 8001f34:	20000008 	.word	0x20000008

08001f38 <__sbprintf>:
 8001f38:	b570      	push	{r4, r5, r6, lr}
 8001f3a:	460c      	mov	r4, r1
 8001f3c:	8989      	ldrh	r1, [r1, #12]
 8001f3e:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
 8001f42:	f021 0102 	bic.w	r1, r1, #2
 8001f46:	f8ad 100c 	strh.w	r1, [sp, #12]
 8001f4a:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8001f4c:	9119      	str	r1, [sp, #100]	; 0x64
 8001f4e:	89e1      	ldrh	r1, [r4, #14]
 8001f50:	f8ad 100e 	strh.w	r1, [sp, #14]
 8001f54:	69e1      	ldr	r1, [r4, #28]
 8001f56:	9107      	str	r1, [sp, #28]
 8001f58:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001f5a:	9109      	str	r1, [sp, #36]	; 0x24
 8001f5c:	a91a      	add	r1, sp, #104	; 0x68
 8001f5e:	9100      	str	r1, [sp, #0]
 8001f60:	9104      	str	r1, [sp, #16]
 8001f62:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f66:	9102      	str	r1, [sp, #8]
 8001f68:	9105      	str	r1, [sp, #20]
 8001f6a:	2100      	movs	r1, #0
 8001f6c:	9106      	str	r1, [sp, #24]
 8001f6e:	4669      	mov	r1, sp
 8001f70:	4606      	mov	r6, r0
 8001f72:	f7fe fd49 	bl	8000a08 <_vfprintf_r>
 8001f76:	1e05      	subs	r5, r0, #0
 8001f78:	db07      	blt.n	8001f8a <__sbprintf+0x52>
 8001f7a:	4669      	mov	r1, sp
 8001f7c:	4630      	mov	r0, r6
 8001f7e:	f001 f979 	bl	8003274 <_fflush_r>
 8001f82:	2800      	cmp	r0, #0
 8001f84:	bf18      	it	ne
 8001f86:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 8001f8a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8001f8e:	065b      	lsls	r3, r3, #25
 8001f90:	d503      	bpl.n	8001f9a <__sbprintf+0x62>
 8001f92:	89a3      	ldrh	r3, [r4, #12]
 8001f94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f98:	81a3      	strh	r3, [r4, #12]
 8001f9a:	4628      	mov	r0, r5
 8001f9c:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
 8001fa0:	bd70      	pop	{r4, r5, r6, pc}
 8001fa2:	bf00      	nop

08001fa4 <__swsetup_r>:
 8001fa4:	b538      	push	{r3, r4, r5, lr}
 8001fa6:	4b33      	ldr	r3, [pc, #204]	; (8002074 <__swsetup_r+0xd0>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4605      	mov	r5, r0
 8001fac:	460c      	mov	r4, r1
 8001fae:	b10b      	cbz	r3, 8001fb4 <__swsetup_r+0x10>
 8001fb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001fb2:	b312      	cbz	r2, 8001ffa <__swsetup_r+0x56>
 8001fb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001fb8:	0718      	lsls	r0, r3, #28
 8001fba:	b29a      	uxth	r2, r3
 8001fbc:	d525      	bpl.n	800200a <__swsetup_r+0x66>
 8001fbe:	6921      	ldr	r1, [r4, #16]
 8001fc0:	2900      	cmp	r1, #0
 8001fc2:	d02d      	beq.n	8002020 <__swsetup_r+0x7c>
 8001fc4:	f012 0001 	ands.w	r0, r2, #1
 8001fc8:	d007      	beq.n	8001fda <__swsetup_r+0x36>
 8001fca:	2000      	movs	r0, #0
 8001fcc:	60a0      	str	r0, [r4, #8]
 8001fce:	6960      	ldr	r0, [r4, #20]
 8001fd0:	4240      	negs	r0, r0
 8001fd2:	61a0      	str	r0, [r4, #24]
 8001fd4:	b139      	cbz	r1, 8001fe6 <__swsetup_r+0x42>
 8001fd6:	2000      	movs	r0, #0
 8001fd8:	bd38      	pop	{r3, r4, r5, pc}
 8001fda:	0795      	lsls	r5, r2, #30
 8001fdc:	bf58      	it	pl
 8001fde:	6960      	ldrpl	r0, [r4, #20]
 8001fe0:	60a0      	str	r0, [r4, #8]
 8001fe2:	2900      	cmp	r1, #0
 8001fe4:	d1f7      	bne.n	8001fd6 <__swsetup_r+0x32>
 8001fe6:	0612      	lsls	r2, r2, #24
 8001fe8:	bf58      	it	pl
 8001fea:	4608      	movpl	r0, r1
 8001fec:	d5f4      	bpl.n	8001fd8 <__swsetup_r+0x34>
 8001fee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ff2:	81a3      	strh	r3, [r4, #12]
 8001ff4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ff8:	bd38      	pop	{r3, r4, r5, pc}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f001 fa64 	bl	80034c8 <__sinit>
 8002000:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002004:	0718      	lsls	r0, r3, #28
 8002006:	b29a      	uxth	r2, r3
 8002008:	d4d9      	bmi.n	8001fbe <__swsetup_r+0x1a>
 800200a:	06d1      	lsls	r1, r2, #27
 800200c:	d52a      	bpl.n	8002064 <__swsetup_r+0xc0>
 800200e:	0752      	lsls	r2, r2, #29
 8002010:	d414      	bmi.n	800203c <__swsetup_r+0x98>
 8002012:	6921      	ldr	r1, [r4, #16]
 8002014:	f043 0308 	orr.w	r3, r3, #8
 8002018:	81a3      	strh	r3, [r4, #12]
 800201a:	b29a      	uxth	r2, r3
 800201c:	2900      	cmp	r1, #0
 800201e:	d1d1      	bne.n	8001fc4 <__swsetup_r+0x20>
 8002020:	f402 7020 	and.w	r0, r2, #640	; 0x280
 8002024:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8002028:	d0cc      	beq.n	8001fc4 <__swsetup_r+0x20>
 800202a:	4621      	mov	r1, r4
 800202c:	4628      	mov	r0, r5
 800202e:	f001 fd87 	bl	8003b40 <__smakebuf_r>
 8002032:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002036:	6921      	ldr	r1, [r4, #16]
 8002038:	b29a      	uxth	r2, r3
 800203a:	e7c3      	b.n	8001fc4 <__swsetup_r+0x20>
 800203c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800203e:	b151      	cbz	r1, 8002056 <__swsetup_r+0xb2>
 8002040:	f104 0240 	add.w	r2, r4, #64	; 0x40
 8002044:	4291      	cmp	r1, r2
 8002046:	d004      	beq.n	8002052 <__swsetup_r+0xae>
 8002048:	4628      	mov	r0, r5
 800204a:	f001 faad 	bl	80035a8 <_free_r>
 800204e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002052:	2200      	movs	r2, #0
 8002054:	6322      	str	r2, [r4, #48]	; 0x30
 8002056:	6921      	ldr	r1, [r4, #16]
 8002058:	2200      	movs	r2, #0
 800205a:	e9c4 1200 	strd	r1, r2, [r4]
 800205e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002062:	e7d7      	b.n	8002014 <__swsetup_r+0x70>
 8002064:	2209      	movs	r2, #9
 8002066:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800206a:	602a      	str	r2, [r5, #0]
 800206c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002070:	81a3      	strh	r3, [r4, #12]
 8002072:	bd38      	pop	{r3, r4, r5, pc}
 8002074:	20000008 	.word	0x20000008

08002078 <__register_exitproc>:
 8002078:	b470      	push	{r4, r5, r6}
 800207a:	4c18      	ldr	r4, [pc, #96]	; (80020dc <__register_exitproc+0x64>)
 800207c:	6825      	ldr	r5, [r4, #0]
 800207e:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
 8002082:	b31c      	cbz	r4, 80020cc <__register_exitproc+0x54>
 8002084:	6865      	ldr	r5, [r4, #4]
 8002086:	2d1f      	cmp	r5, #31
 8002088:	dc25      	bgt.n	80020d6 <__register_exitproc+0x5e>
 800208a:	b938      	cbnz	r0, 800209c <__register_exitproc+0x24>
 800208c:	1cab      	adds	r3, r5, #2
 800208e:	3501      	adds	r5, #1
 8002090:	6065      	str	r5, [r4, #4]
 8002092:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
 8002096:	2000      	movs	r0, #0
 8002098:	bc70      	pop	{r4, r5, r6}
 800209a:	4770      	bx	lr
 800209c:	eb04 0c85 	add.w	ip, r4, r5, lsl #2
 80020a0:	2802      	cmp	r0, #2
 80020a2:	f8cc 2088 	str.w	r2, [ip, #136]	; 0x88
 80020a6:	f8d4 6188 	ldr.w	r6, [r4, #392]	; 0x188
 80020aa:	f04f 0201 	mov.w	r2, #1
 80020ae:	fa02 f205 	lsl.w	r2, r2, r5
 80020b2:	ea46 0602 	orr.w	r6, r6, r2
 80020b6:	f8c4 6188 	str.w	r6, [r4, #392]	; 0x188
 80020ba:	f8cc 3108 	str.w	r3, [ip, #264]	; 0x108
 80020be:	d1e5      	bne.n	800208c <__register_exitproc+0x14>
 80020c0:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
 80020c4:	4313      	orrs	r3, r2
 80020c6:	f8c4 318c 	str.w	r3, [r4, #396]	; 0x18c
 80020ca:	e7df      	b.n	800208c <__register_exitproc+0x14>
 80020cc:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
 80020d0:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 80020d4:	e7d6      	b.n	8002084 <__register_exitproc+0xc>
 80020d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80020da:	e7dd      	b.n	8002098 <__register_exitproc+0x20>
 80020dc:	0800cca8 	.word	0x0800cca8

080020e0 <quorem>:
 80020e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80020e4:	6903      	ldr	r3, [r0, #16]
 80020e6:	690c      	ldr	r4, [r1, #16]
 80020e8:	42a3      	cmp	r3, r4
 80020ea:	b083      	sub	sp, #12
 80020ec:	f2c0 8087 	blt.w	80021fe <quorem+0x11e>
 80020f0:	3c01      	subs	r4, #1
 80020f2:	f101 0514 	add.w	r5, r1, #20
 80020f6:	00a3      	lsls	r3, r4, #2
 80020f8:	f100 0814 	add.w	r8, r0, #20
 80020fc:	9300      	str	r3, [sp, #0]
 80020fe:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8002102:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
 8002106:	3301      	adds	r3, #1
 8002108:	4681      	mov	r9, r0
 800210a:	429a      	cmp	r2, r3
 800210c:	eb08 0084 	add.w	r0, r8, r4, lsl #2
 8002110:	eb05 0784 	add.w	r7, r5, r4, lsl #2
 8002114:	9001      	str	r0, [sp, #4]
 8002116:	fbb2 f6f3 	udiv	r6, r2, r3
 800211a:	d33b      	bcc.n	8002194 <quorem+0xb4>
 800211c:	2300      	movs	r3, #0
 800211e:	46ae      	mov	lr, r5
 8002120:	4640      	mov	r0, r8
 8002122:	469b      	mov	fp, r3
 8002124:	f85e ab04 	ldr.w	sl, [lr], #4
 8002128:	6802      	ldr	r2, [r0, #0]
 800212a:	fa1f fc8a 	uxth.w	ip, sl
 800212e:	fb06 330c 	mla	r3, r6, ip, r3
 8002132:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8002136:	ea4f 4a1a 	mov.w	sl, sl, lsr #16
 800213a:	fb06 ca0a 	mla	sl, r6, sl, ip
 800213e:	fa1f fc83 	uxth.w	ip, r3
 8002142:	ebab 0c0c 	sub.w	ip, fp, ip
 8002146:	fa1f f38a 	uxth.w	r3, sl
 800214a:	fa1c fc82 	uxtah	ip, ip, r2
 800214e:	ebc3 4212 	rsb	r2, r3, r2, lsr #16
 8002152:	eb02 422c 	add.w	r2, r2, ip, asr #16
 8002156:	fa1f fc8c 	uxth.w	ip, ip
 800215a:	ea4c 4302 	orr.w	r3, ip, r2, lsl #16
 800215e:	4577      	cmp	r7, lr
 8002160:	f840 3b04 	str.w	r3, [r0], #4
 8002164:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8002168:	ea4f 431a 	mov.w	r3, sl, lsr #16
 800216c:	d2da      	bcs.n	8002124 <quorem+0x44>
 800216e:	9b00      	ldr	r3, [sp, #0]
 8002170:	f858 3003 	ldr.w	r3, [r8, r3]
 8002174:	b973      	cbnz	r3, 8002194 <quorem+0xb4>
 8002176:	9b01      	ldr	r3, [sp, #4]
 8002178:	3b04      	subs	r3, #4
 800217a:	4598      	cmp	r8, r3
 800217c:	d304      	bcc.n	8002188 <quorem+0xa8>
 800217e:	e007      	b.n	8002190 <quorem+0xb0>
 8002180:	4598      	cmp	r8, r3
 8002182:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8002186:	d203      	bcs.n	8002190 <quorem+0xb0>
 8002188:	f853 2904 	ldr.w	r2, [r3], #-4
 800218c:	2a00      	cmp	r2, #0
 800218e:	d0f7      	beq.n	8002180 <quorem+0xa0>
 8002190:	f8c9 4010 	str.w	r4, [r9, #16]
 8002194:	4648      	mov	r0, r9
 8002196:	f002 fc7f 	bl	8004a98 <__mcmp>
 800219a:	2800      	cmp	r0, #0
 800219c:	db2b      	blt.n	80021f6 <quorem+0x116>
 800219e:	3601      	adds	r6, #1
 80021a0:	4640      	mov	r0, r8
 80021a2:	2300      	movs	r3, #0
 80021a4:	f855 1b04 	ldr.w	r1, [r5], #4
 80021a8:	f8d0 c000 	ldr.w	ip, [r0]
 80021ac:	b28a      	uxth	r2, r1
 80021ae:	1a9a      	subs	r2, r3, r2
 80021b0:	0c0b      	lsrs	r3, r1, #16
 80021b2:	fa12 f28c 	uxtah	r2, r2, ip
 80021b6:	ebc3 431c 	rsb	r3, r3, ip, lsr #16
 80021ba:	eb03 4322 	add.w	r3, r3, r2, asr #16
 80021be:	b292      	uxth	r2, r2
 80021c0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80021c4:	42af      	cmp	r7, r5
 80021c6:	f840 2b04 	str.w	r2, [r0], #4
 80021ca:	ea4f 4323 	mov.w	r3, r3, asr #16
 80021ce:	d2e9      	bcs.n	80021a4 <quorem+0xc4>
 80021d0:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
 80021d4:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 80021d8:	b96a      	cbnz	r2, 80021f6 <quorem+0x116>
 80021da:	3b04      	subs	r3, #4
 80021dc:	4598      	cmp	r8, r3
 80021de:	d304      	bcc.n	80021ea <quorem+0x10a>
 80021e0:	e007      	b.n	80021f2 <quorem+0x112>
 80021e2:	4598      	cmp	r8, r3
 80021e4:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80021e8:	d203      	bcs.n	80021f2 <quorem+0x112>
 80021ea:	f853 2904 	ldr.w	r2, [r3], #-4
 80021ee:	2a00      	cmp	r2, #0
 80021f0:	d0f7      	beq.n	80021e2 <quorem+0x102>
 80021f2:	f8c9 4010 	str.w	r4, [r9, #16]
 80021f6:	4630      	mov	r0, r6
 80021f8:	b003      	add	sp, #12
 80021fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80021fe:	2000      	movs	r0, #0
 8002200:	b003      	add	sp, #12
 8002202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002206:	bf00      	nop

08002208 <_dtoa_r>:
 8002208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800220c:	ed2d 8b06 	vpush	{d8-d10}
 8002210:	b095      	sub	sp, #84	; 0x54
 8002212:	ed8d 0b02 	vstr	d0, [sp, #8]
 8002216:	9101      	str	r1, [sp, #4]
 8002218:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800221a:	9d24      	ldr	r5, [sp, #144]	; 0x90
 800221c:	9209      	str	r2, [sp, #36]	; 0x24
 800221e:	ec59 8b10 	vmov	r8, r9, d0
 8002222:	4604      	mov	r4, r0
 8002224:	9306      	str	r3, [sp, #24]
 8002226:	b141      	cbz	r1, 800223a <_dtoa_r+0x32>
 8002228:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800222a:	604a      	str	r2, [r1, #4]
 800222c:	2301      	movs	r3, #1
 800222e:	4093      	lsls	r3, r2
 8002230:	608b      	str	r3, [r1, #8]
 8002232:	f002 f975 	bl	8004520 <_Bfree>
 8002236:	2300      	movs	r3, #0
 8002238:	6423      	str	r3, [r4, #64]	; 0x40
 800223a:	f1b9 0a00 	subs.w	sl, r9, #0
 800223e:	bfb4      	ite	lt
 8002240:	2301      	movlt	r3, #1
 8002242:	2300      	movge	r3, #0
 8002244:	602b      	str	r3, [r5, #0]
 8002246:	4b7c      	ldr	r3, [pc, #496]	; (8002438 <_dtoa_r+0x230>)
 8002248:	bfbc      	itt	lt
 800224a:	f02a 4a00 	biclt.w	sl, sl, #2147483648	; 0x80000000
 800224e:	f8cd a00c 	strlt.w	sl, [sp, #12]
 8002252:	ea33 030a 	bics.w	r3, r3, sl
 8002256:	f000 80b2 	beq.w	80023be <_dtoa_r+0x1b6>
 800225a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800225e:	2200      	movs	r2, #0
 8002260:	ec51 0b17 	vmov	r0, r1, d7
 8002264:	eeb0 9a47 	vmov.f32	s18, s14
 8002268:	eef0 9a67 	vmov.f32	s19, s15
 800226c:	2300      	movs	r3, #0
 800226e:	f005 f949 	bl	8007504 <__aeabi_dcmpeq>
 8002272:	4607      	mov	r7, r0
 8002274:	b180      	cbz	r0, 8002298 <_dtoa_r+0x90>
 8002276:	9a06      	ldr	r2, [sp, #24]
 8002278:	2301      	movs	r3, #1
 800227a:	6013      	str	r3, [r2, #0]
 800227c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800227e:	2b00      	cmp	r3, #0
 8002280:	f000 82db 	beq.w	800283a <_dtoa_r+0x632>
 8002284:	486d      	ldr	r0, [pc, #436]	; (800243c <_dtoa_r+0x234>)
 8002286:	6018      	str	r0, [r3, #0]
 8002288:	1e43      	subs	r3, r0, #1
 800228a:	9300      	str	r3, [sp, #0]
 800228c:	9800      	ldr	r0, [sp, #0]
 800228e:	b015      	add	sp, #84	; 0x54
 8002290:	ecbd 8b06 	vpop	{d8-d10}
 8002294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002298:	aa12      	add	r2, sp, #72	; 0x48
 800229a:	a913      	add	r1, sp, #76	; 0x4c
 800229c:	4620      	mov	r0, r4
 800229e:	eeb0 0a49 	vmov.f32	s0, s18
 80022a2:	eef0 0a69 	vmov.f32	s1, s19
 80022a6:	f002 fd4f 	bl	8004d48 <__d2b>
 80022aa:	eeb0 8a49 	vmov.f32	s16, s18
 80022ae:	eef0 8a69 	vmov.f32	s17, s19
 80022b2:	ea5f 561a 	movs.w	r6, sl, lsr #20
 80022b6:	4605      	mov	r5, r0
 80022b8:	f040 8099 	bne.w	80023ee <_dtoa_r+0x1e6>
 80022bc:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
 80022c0:	443e      	add	r6, r7
 80022c2:	f206 4032 	addw	r0, r6, #1074	; 0x432
 80022c6:	2820      	cmp	r0, #32
 80022c8:	f340 83ab 	ble.w	8002a22 <_dtoa_r+0x81a>
 80022cc:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80022d0:	fa0a fa00 	lsl.w	sl, sl, r0
 80022d4:	f206 4012 	addw	r0, r6, #1042	; 0x412
 80022d8:	fa28 f000 	lsr.w	r0, r8, r0
 80022dc:	ea4a 0000 	orr.w	r0, sl, r0
 80022e0:	f004 fe2e 	bl	8006f40 <__aeabi_ui2d>
 80022e4:	2301      	movs	r3, #1
 80022e6:	3e01      	subs	r6, #1
 80022e8:	930d      	str	r3, [sp, #52]	; 0x34
 80022ea:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80022ee:	4b54      	ldr	r3, [pc, #336]	; (8002440 <_dtoa_r+0x238>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	f004 fce7 	bl	8006cc4 <__aeabi_dsub>
 80022f6:	a34a      	add	r3, pc, #296	; (adr r3, 8002420 <_dtoa_r+0x218>)
 80022f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022fc:	f004 fe9a 	bl	8007034 <__aeabi_dmul>
 8002300:	a349      	add	r3, pc, #292	; (adr r3, 8002428 <_dtoa_r+0x220>)
 8002302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002306:	f004 fcdf 	bl	8006cc8 <__adddf3>
 800230a:	4680      	mov	r8, r0
 800230c:	4630      	mov	r0, r6
 800230e:	4689      	mov	r9, r1
 8002310:	f004 fe26 	bl	8006f60 <__aeabi_i2d>
 8002314:	a346      	add	r3, pc, #280	; (adr r3, 8002430 <_dtoa_r+0x228>)
 8002316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800231a:	f004 fe8b 	bl	8007034 <__aeabi_dmul>
 800231e:	4602      	mov	r2, r0
 8002320:	460b      	mov	r3, r1
 8002322:	4640      	mov	r0, r8
 8002324:	4649      	mov	r1, r9
 8002326:	f004 fccf 	bl	8006cc8 <__adddf3>
 800232a:	4680      	mov	r8, r0
 800232c:	4689      	mov	r9, r1
 800232e:	f005 f931 	bl	8007594 <__aeabi_d2iz>
 8002332:	2200      	movs	r2, #0
 8002334:	4683      	mov	fp, r0
 8002336:	2300      	movs	r3, #0
 8002338:	4640      	mov	r0, r8
 800233a:	4649      	mov	r1, r9
 800233c:	f005 f8ec 	bl	8007518 <__aeabi_dcmplt>
 8002340:	2800      	cmp	r0, #0
 8002342:	f040 826d 	bne.w	8002820 <_dtoa_r+0x618>
 8002346:	f1bb 0f16 	cmp.w	fp, #22
 800234a:	f200 825c 	bhi.w	8002806 <_dtoa_r+0x5fe>
 800234e:	4b3d      	ldr	r3, [pc, #244]	; (8002444 <_dtoa_r+0x23c>)
 8002350:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8002354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002358:	ec51 0b19 	vmov	r0, r1, d9
 800235c:	f005 f8dc 	bl	8007518 <__aeabi_dcmplt>
 8002360:	2800      	cmp	r0, #0
 8002362:	d075      	beq.n	8002450 <_dtoa_r+0x248>
 8002364:	2300      	movs	r3, #0
 8002366:	1bbe      	subs	r6, r7, r6
 8002368:	930c      	str	r3, [sp, #48]	; 0x30
 800236a:	1e73      	subs	r3, r6, #1
 800236c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8002370:	9304      	str	r3, [sp, #16]
 8002372:	f100 824f 	bmi.w	8002814 <_dtoa_r+0x60c>
 8002376:	2300      	movs	r3, #0
 8002378:	9308      	str	r3, [sp, #32]
 800237a:	f1bb 0f00 	cmp.w	fp, #0
 800237e:	da6e      	bge.n	800245e <_dtoa_r+0x256>
 8002380:	9b08      	ldr	r3, [sp, #32]
 8002382:	f8cd b014 	str.w	fp, [sp, #20]
 8002386:	eba3 030b 	sub.w	r3, r3, fp
 800238a:	9308      	str	r3, [sp, #32]
 800238c:	f1cb 0300 	rsb	r3, fp, #0
 8002390:	930b      	str	r3, [sp, #44]	; 0x2c
 8002392:	9b01      	ldr	r3, [sp, #4]
 8002394:	2b09      	cmp	r3, #9
 8002396:	f04f 0b00 	mov.w	fp, #0
 800239a:	d869      	bhi.n	8002470 <_dtoa_r+0x268>
 800239c:	2b05      	cmp	r3, #5
 800239e:	f340 833e 	ble.w	8002a1e <_dtoa_r+0x816>
 80023a2:	3b04      	subs	r3, #4
 80023a4:	9301      	str	r3, [sp, #4]
 80023a6:	2600      	movs	r6, #0
 80023a8:	9b01      	ldr	r3, [sp, #4]
 80023aa:	3b02      	subs	r3, #2
 80023ac:	2b03      	cmp	r3, #3
 80023ae:	f200 8699 	bhi.w	80030e4 <_dtoa_r+0xedc>
 80023b2:	e8df f013 	tbh	[pc, r3, lsl #1]
 80023b6:	044e      	.short	0x044e
 80023b8:	0443044b 	.word	0x0443044b
 80023bc:	0426      	.short	0x0426
 80023be:	9a06      	ldr	r2, [sp, #24]
 80023c0:	f242 730f 	movw	r3, #9999	; 0x270f
 80023c4:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80023c8:	6013      	str	r3, [r2, #0]
 80023ca:	ea5a 0308 	orrs.w	r3, sl, r8
 80023ce:	d11d      	bne.n	800240c <_dtoa_r+0x204>
 80023d0:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	f000 867d 	beq.w	80030d2 <_dtoa_r+0xeca>
 80023d8:	4b1b      	ldr	r3, [pc, #108]	; (8002448 <_dtoa_r+0x240>)
 80023da:	9300      	str	r3, [sp, #0]
 80023dc:	3308      	adds	r3, #8
 80023de:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80023e0:	9800      	ldr	r0, [sp, #0]
 80023e2:	6013      	str	r3, [r2, #0]
 80023e4:	b015      	add	sp, #84	; 0x54
 80023e6:	ecbd 8b06 	vpop	{d8-d10}
 80023ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80023ee:	ee18 3a90 	vmov	r3, s17
 80023f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80023f6:	ec51 0b19 	vmov	r0, r1, d9
 80023fa:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80023fe:	970d      	str	r7, [sp, #52]	; 0x34
 8002400:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
 8002404:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8002406:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800240a:	e770      	b.n	80022ee <_dtoa_r+0xe6>
 800240c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800240e:	2b00      	cmp	r3, #0
 8002410:	f040 83db 	bne.w	8002bca <_dtoa_r+0x9c2>
 8002414:	4b0d      	ldr	r3, [pc, #52]	; (800244c <_dtoa_r+0x244>)
 8002416:	9300      	str	r3, [sp, #0]
 8002418:	e738      	b.n	800228c <_dtoa_r+0x84>
 800241a:	bf00      	nop
 800241c:	f3af 8000 	nop.w
 8002420:	636f4361 	.word	0x636f4361
 8002424:	3fd287a7 	.word	0x3fd287a7
 8002428:	8b60c8b3 	.word	0x8b60c8b3
 800242c:	3fc68a28 	.word	0x3fc68a28
 8002430:	509f79fb 	.word	0x509f79fb
 8002434:	3fd34413 	.word	0x3fd34413
 8002438:	7ff00000 	.word	0x7ff00000
 800243c:	0801c0c5 	.word	0x0801c0c5
 8002440:	3ff80000 	.word	0x3ff80000
 8002444:	0800cce0 	.word	0x0800cce0
 8002448:	0801c0cc 	.word	0x0801c0cc
 800244c:	0801c0c8 	.word	0x0801c0c8
 8002450:	1bbe      	subs	r6, r7, r6
 8002452:	1e73      	subs	r3, r6, #1
 8002454:	9304      	str	r3, [sp, #16]
 8002456:	f100 849a 	bmi.w	8002d8e <_dtoa_r+0xb86>
 800245a:	900c      	str	r0, [sp, #48]	; 0x30
 800245c:	9008      	str	r0, [sp, #32]
 800245e:	9b04      	ldr	r3, [sp, #16]
 8002460:	445b      	add	r3, fp
 8002462:	e9cd 3b04 	strd	r3, fp, [sp, #16]
 8002466:	2300      	movs	r3, #0
 8002468:	930b      	str	r3, [sp, #44]	; 0x2c
 800246a:	9b01      	ldr	r3, [sp, #4]
 800246c:	2b09      	cmp	r3, #9
 800246e:	d995      	bls.n	800239c <_dtoa_r+0x194>
 8002470:	2300      	movs	r3, #0
 8002472:	2601      	movs	r6, #1
 8002474:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002478:	9301      	str	r3, [sp, #4]
 800247a:	960a      	str	r6, [sp, #40]	; 0x28
 800247c:	9207      	str	r2, [sp, #28]
 800247e:	9309      	str	r3, [sp, #36]	; 0x24
 8002480:	9b07      	ldr	r3, [sp, #28]
 8002482:	930f      	str	r3, [sp, #60]	; 0x3c
 8002484:	2100      	movs	r1, #0
 8002486:	6461      	str	r1, [r4, #68]	; 0x44
 8002488:	4620      	mov	r0, r4
 800248a:	f002 f823 	bl	80044d4 <_Balloc>
 800248e:	9000      	str	r0, [sp, #0]
 8002490:	2800      	cmp	r0, #0
 8002492:	f000 862f 	beq.w	80030f4 <_dtoa_r+0xeec>
 8002496:	9b00      	ldr	r3, [sp, #0]
 8002498:	6423      	str	r3, [r4, #64]	; 0x40
 800249a:	9b07      	ldr	r3, [sp, #28]
 800249c:	2b0e      	cmp	r3, #14
 800249e:	f200 80f9 	bhi.w	8002694 <_dtoa_r+0x48c>
 80024a2:	2e00      	cmp	r6, #0
 80024a4:	f000 80f6 	beq.w	8002694 <_dtoa_r+0x48c>
 80024a8:	9905      	ldr	r1, [sp, #20]
 80024aa:	2900      	cmp	r1, #0
 80024ac:	f340 8471 	ble.w	8002d92 <_dtoa_r+0xb8a>
 80024b0:	4bbd      	ldr	r3, [pc, #756]	; (80027a8 <_dtoa_r+0x5a0>)
 80024b2:	f001 020f 	and.w	r2, r1, #15
 80024b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80024ba:	ea4f 1821 	mov.w	r8, r1, asr #4
 80024be:	05c9      	lsls	r1, r1, #23
 80024c0:	e9d3 6700 	ldrd	r6, r7, [r3]
 80024c4:	f140 8403 	bpl.w	8002cce <_dtoa_r+0xac6>
 80024c8:	4bb8      	ldr	r3, [pc, #736]	; (80027ac <_dtoa_r+0x5a4>)
 80024ca:	ec51 0b19 	vmov	r0, r1, d9
 80024ce:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80024d2:	f004 fed9 	bl	8007288 <__aeabi_ddiv>
 80024d6:	ec41 0b18 	vmov	d8, r0, r1
 80024da:	f008 080f 	and.w	r8, r8, #15
 80024de:	f04f 0a03 	mov.w	sl, #3
 80024e2:	f1b8 0f00 	cmp.w	r8, #0
 80024e6:	d013      	beq.n	8002510 <_dtoa_r+0x308>
 80024e8:	f8df 92c0 	ldr.w	r9, [pc, #704]	; 80027ac <_dtoa_r+0x5a4>
 80024ec:	f018 0f01 	tst.w	r8, #1
 80024f0:	d009      	beq.n	8002506 <_dtoa_r+0x2fe>
 80024f2:	4630      	mov	r0, r6
 80024f4:	4639      	mov	r1, r7
 80024f6:	e9d9 2300 	ldrd	r2, r3, [r9]
 80024fa:	f004 fd9b 	bl	8007034 <__aeabi_dmul>
 80024fe:	f10a 0a01 	add.w	sl, sl, #1
 8002502:	4606      	mov	r6, r0
 8002504:	460f      	mov	r7, r1
 8002506:	ea5f 0868 	movs.w	r8, r8, asr #1
 800250a:	f109 0908 	add.w	r9, r9, #8
 800250e:	d1ed      	bne.n	80024ec <_dtoa_r+0x2e4>
 8002510:	ec51 0b18 	vmov	r0, r1, d8
 8002514:	4632      	mov	r2, r6
 8002516:	463b      	mov	r3, r7
 8002518:	f004 feb6 	bl	8007288 <__aeabi_ddiv>
 800251c:	ec41 0b1a 	vmov	d10, r0, r1
 8002520:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002522:	b15b      	cbz	r3, 800253c <_dtoa_r+0x334>
 8002524:	ec57 6b1a 	vmov	r6, r7, d10
 8002528:	4ba1      	ldr	r3, [pc, #644]	; (80027b0 <_dtoa_r+0x5a8>)
 800252a:	ee1a 0a10 	vmov	r0, s20
 800252e:	2200      	movs	r2, #0
 8002530:	4639      	mov	r1, r7
 8002532:	f004 fff1 	bl	8007518 <__aeabi_dcmplt>
 8002536:	2800      	cmp	r0, #0
 8002538:	f040 8552 	bne.w	8002fe0 <_dtoa_r+0xdd8>
 800253c:	4650      	mov	r0, sl
 800253e:	f004 fd0f 	bl	8006f60 <__aeabi_i2d>
 8002542:	ec53 2b1a 	vmov	r2, r3, d10
 8002546:	f004 fd75 	bl	8007034 <__aeabi_dmul>
 800254a:	4b9a      	ldr	r3, [pc, #616]	; (80027b4 <_dtoa_r+0x5ac>)
 800254c:	2200      	movs	r2, #0
 800254e:	f004 fbbb 	bl	8006cc8 <__adddf3>
 8002552:	9b07      	ldr	r3, [sp, #28]
 8002554:	4680      	mov	r8, r0
 8002556:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 800255a:	2b00      	cmp	r3, #0
 800255c:	f000 83f3 	beq.w	8002d46 <_dtoa_r+0xb3e>
 8002560:	9b05      	ldr	r3, [sp, #20]
 8002562:	9310      	str	r3, [sp, #64]	; 0x40
 8002564:	9b07      	ldr	r3, [sp, #28]
 8002566:	930e      	str	r3, [sp, #56]	; 0x38
 8002568:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800256a:	2b00      	cmp	r3, #0
 800256c:	f000 84c0 	beq.w	8002ef0 <_dtoa_r+0xce8>
 8002570:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002572:	4b8d      	ldr	r3, [pc, #564]	; (80027a8 <_dtoa_r+0x5a0>)
 8002574:	4990      	ldr	r1, [pc, #576]	; (80027b8 <_dtoa_r+0x5b0>)
 8002576:	f8dd a000 	ldr.w	sl, [sp]
 800257a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800257e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8002582:	2000      	movs	r0, #0
 8002584:	f004 fe80 	bl	8007288 <__aeabi_ddiv>
 8002588:	4642      	mov	r2, r8
 800258a:	464b      	mov	r3, r9
 800258c:	f004 fb9a 	bl	8006cc4 <__aeabi_dsub>
 8002590:	ec59 8b1a 	vmov	r8, r9, d10
 8002594:	ec41 0b18 	vmov	d8, r0, r1
 8002598:	4649      	mov	r1, r9
 800259a:	ee1a 0a10 	vmov	r0, s20
 800259e:	f004 fff9 	bl	8007594 <__aeabi_d2iz>
 80025a2:	4607      	mov	r7, r0
 80025a4:	f004 fcdc 	bl	8006f60 <__aeabi_i2d>
 80025a8:	4602      	mov	r2, r0
 80025aa:	460b      	mov	r3, r1
 80025ac:	ee1a 0a10 	vmov	r0, s20
 80025b0:	4649      	mov	r1, r9
 80025b2:	f004 fb87 	bl	8006cc4 <__aeabi_dsub>
 80025b6:	3730      	adds	r7, #48	; 0x30
 80025b8:	f80a 7b01 	strb.w	r7, [sl], #1
 80025bc:	ec53 2b18 	vmov	r2, r3, d8
 80025c0:	4606      	mov	r6, r0
 80025c2:	460f      	mov	r7, r1
 80025c4:	f004 ffa8 	bl	8007518 <__aeabi_dcmplt>
 80025c8:	2800      	cmp	r0, #0
 80025ca:	f040 8555 	bne.w	8003078 <_dtoa_r+0xe70>
 80025ce:	f04f 0800 	mov.w	r8, #0
 80025d2:	ee0a 5a10 	vmov	s20, r5
 80025d6:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 80025da:	4655      	mov	r5, sl
 80025dc:	ec5b ab18 	vmov	sl, fp, d8
 80025e0:	ee08 4a10 	vmov	s16, r4
 80025e4:	4644      	mov	r4, r8
 80025e6:	e02a      	b.n	800263e <_dtoa_r+0x436>
 80025e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80025ea:	3401      	adds	r4, #1
 80025ec:	429c      	cmp	r4, r3
 80025ee:	da4b      	bge.n	8002688 <_dtoa_r+0x480>
 80025f0:	4b72      	ldr	r3, [pc, #456]	; (80027bc <_dtoa_r+0x5b4>)
 80025f2:	4650      	mov	r0, sl
 80025f4:	4659      	mov	r1, fp
 80025f6:	2200      	movs	r2, #0
 80025f8:	f004 fd1c 	bl	8007034 <__aeabi_dmul>
 80025fc:	4b6f      	ldr	r3, [pc, #444]	; (80027bc <_dtoa_r+0x5b4>)
 80025fe:	2200      	movs	r2, #0
 8002600:	4682      	mov	sl, r0
 8002602:	468b      	mov	fp, r1
 8002604:	4630      	mov	r0, r6
 8002606:	4639      	mov	r1, r7
 8002608:	f004 fd14 	bl	8007034 <__aeabi_dmul>
 800260c:	4689      	mov	r9, r1
 800260e:	4680      	mov	r8, r0
 8002610:	f004 ffc0 	bl	8007594 <__aeabi_d2iz>
 8002614:	4607      	mov	r7, r0
 8002616:	f004 fca3 	bl	8006f60 <__aeabi_i2d>
 800261a:	4602      	mov	r2, r0
 800261c:	460b      	mov	r3, r1
 800261e:	4640      	mov	r0, r8
 8002620:	4649      	mov	r1, r9
 8002622:	f004 fb4f 	bl	8006cc4 <__aeabi_dsub>
 8002626:	3730      	adds	r7, #48	; 0x30
 8002628:	f805 7b01 	strb.w	r7, [r5], #1
 800262c:	4652      	mov	r2, sl
 800262e:	465b      	mov	r3, fp
 8002630:	4606      	mov	r6, r0
 8002632:	460f      	mov	r7, r1
 8002634:	f004 ff70 	bl	8007518 <__aeabi_dcmplt>
 8002638:	2800      	cmp	r0, #0
 800263a:	f040 8518 	bne.w	800306e <_dtoa_r+0xe66>
 800263e:	4632      	mov	r2, r6
 8002640:	463b      	mov	r3, r7
 8002642:	495b      	ldr	r1, [pc, #364]	; (80027b0 <_dtoa_r+0x5a8>)
 8002644:	2000      	movs	r0, #0
 8002646:	f004 fb3d 	bl	8006cc4 <__aeabi_dsub>
 800264a:	4652      	mov	r2, sl
 800264c:	465b      	mov	r3, fp
 800264e:	f004 ff63 	bl	8007518 <__aeabi_dcmplt>
 8002652:	2800      	cmp	r0, #0
 8002654:	d0c8      	beq.n	80025e8 <_dtoa_r+0x3e0>
 8002656:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002658:	9a00      	ldr	r2, [sp, #0]
 800265a:	9305      	str	r3, [sp, #20]
 800265c:	46aa      	mov	sl, r5
 800265e:	ee18 4a10 	vmov	r4, s16
 8002662:	ee1a 5a10 	vmov	r5, s20
 8002666:	e002      	b.n	800266e <_dtoa_r+0x466>
 8002668:	4592      	cmp	sl, r2
 800266a:	f000 84ea 	beq.w	8003042 <_dtoa_r+0xe3a>
 800266e:	46d1      	mov	r9, sl
 8002670:	f81a 3d01 	ldrb.w	r3, [sl, #-1]!
 8002674:	2b39      	cmp	r3, #57	; 0x39
 8002676:	d0f7      	beq.n	8002668 <_dtoa_r+0x460>
 8002678:	3301      	adds	r3, #1
 800267a:	b2db      	uxtb	r3, r3
 800267c:	f88a 3000 	strb.w	r3, [sl]
 8002680:	9b05      	ldr	r3, [sp, #20]
 8002682:	3301      	adds	r3, #1
 8002684:	9305      	str	r3, [sp, #20]
 8002686:	e1ab      	b.n	80029e0 <_dtoa_r+0x7d8>
 8002688:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 800268c:	ee1a 5a10 	vmov	r5, s20
 8002690:	ee18 4a10 	vmov	r4, s16
 8002694:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8002696:	2b00      	cmp	r3, #0
 8002698:	f2c0 8094 	blt.w	80027c4 <_dtoa_r+0x5bc>
 800269c:	9a05      	ldr	r2, [sp, #20]
 800269e:	2a0e      	cmp	r2, #14
 80026a0:	f300 8090 	bgt.w	80027c4 <_dtoa_r+0x5bc>
 80026a4:	4b40      	ldr	r3, [pc, #256]	; (80027a8 <_dtoa_r+0x5a0>)
 80026a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80026aa:	e9d3 8900 	ldrd	r8, r9, [r3]
 80026ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	da1b      	bge.n	80026ec <_dtoa_r+0x4e4>
 80026b4:	9b07      	ldr	r3, [sp, #28]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	dc18      	bgt.n	80026ec <_dtoa_r+0x4e4>
 80026ba:	f040 835d 	bne.w	8002d78 <_dtoa_r+0xb70>
 80026be:	4b40      	ldr	r3, [pc, #256]	; (80027c0 <_dtoa_r+0x5b8>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	4640      	mov	r0, r8
 80026c4:	4649      	mov	r1, r9
 80026c6:	f004 fcb5 	bl	8007034 <__aeabi_dmul>
 80026ca:	4602      	mov	r2, r0
 80026cc:	460b      	mov	r3, r1
 80026ce:	ec51 0b19 	vmov	r0, r1, d9
 80026d2:	f004 ff2b 	bl	800752c <__aeabi_dcmple>
 80026d6:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80026da:	4656      	mov	r6, sl
 80026dc:	2800      	cmp	r0, #0
 80026de:	f000 82d0 	beq.w	8002c82 <_dtoa_r+0xa7a>
 80026e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80026e4:	f8dd 8000 	ldr.w	r8, [sp]
 80026e8:	43df      	mvns	r7, r3
 80026ea:	e2d2      	b.n	8002c92 <_dtoa_r+0xa8a>
 80026ec:	4642      	mov	r2, r8
 80026ee:	464b      	mov	r3, r9
 80026f0:	ec51 0b19 	vmov	r0, r1, d9
 80026f4:	f004 fdc8 	bl	8007288 <__aeabi_ddiv>
 80026f8:	f004 ff4c 	bl	8007594 <__aeabi_d2iz>
 80026fc:	4606      	mov	r6, r0
 80026fe:	4683      	mov	fp, r0
 8002700:	f004 fc2e 	bl	8006f60 <__aeabi_i2d>
 8002704:	4642      	mov	r2, r8
 8002706:	464b      	mov	r3, r9
 8002708:	f004 fc94 	bl	8007034 <__aeabi_dmul>
 800270c:	460b      	mov	r3, r1
 800270e:	4602      	mov	r2, r0
 8002710:	ec51 0b19 	vmov	r0, r1, d9
 8002714:	f004 fad6 	bl	8006cc4 <__aeabi_dsub>
 8002718:	f8dd a000 	ldr.w	sl, [sp]
 800271c:	4633      	mov	r3, r6
 800271e:	3330      	adds	r3, #48	; 0x30
 8002720:	f80a 3b01 	strb.w	r3, [sl], #1
 8002724:	9b07      	ldr	r3, [sp, #28]
 8002726:	2b01      	cmp	r3, #1
 8002728:	f000 838e 	beq.w	8002e48 <_dtoa_r+0xc40>
 800272c:	f04f 0b01 	mov.w	fp, #1
 8002730:	ee08 5a10 	vmov	s16, r5
 8002734:	ee08 4a90 	vmov	s17, r4
 8002738:	461d      	mov	r5, r3
 800273a:	4654      	mov	r4, sl
 800273c:	46da      	mov	sl, fp
 800273e:	e01d      	b.n	800277c <_dtoa_r+0x574>
 8002740:	4642      	mov	r2, r8
 8002742:	464b      	mov	r3, r9
 8002744:	4630      	mov	r0, r6
 8002746:	4639      	mov	r1, r7
 8002748:	f004 fd9e 	bl	8007288 <__aeabi_ddiv>
 800274c:	f004 ff22 	bl	8007594 <__aeabi_d2iz>
 8002750:	4683      	mov	fp, r0
 8002752:	f004 fc05 	bl	8006f60 <__aeabi_i2d>
 8002756:	4642      	mov	r2, r8
 8002758:	464b      	mov	r3, r9
 800275a:	f004 fc6b 	bl	8007034 <__aeabi_dmul>
 800275e:	f10a 0a01 	add.w	sl, sl, #1
 8002762:	460b      	mov	r3, r1
 8002764:	4602      	mov	r2, r0
 8002766:	4639      	mov	r1, r7
 8002768:	4630      	mov	r0, r6
 800276a:	f004 faab 	bl	8006cc4 <__aeabi_dsub>
 800276e:	f10b 0330 	add.w	r3, fp, #48	; 0x30
 8002772:	45aa      	cmp	sl, r5
 8002774:	f804 3b01 	strb.w	r3, [r4], #1
 8002778:	f000 8361 	beq.w	8002e3e <_dtoa_r+0xc36>
 800277c:	4b0f      	ldr	r3, [pc, #60]	; (80027bc <_dtoa_r+0x5b4>)
 800277e:	2200      	movs	r2, #0
 8002780:	f004 fc58 	bl	8007034 <__aeabi_dmul>
 8002784:	2200      	movs	r2, #0
 8002786:	2300      	movs	r3, #0
 8002788:	4606      	mov	r6, r0
 800278a:	460f      	mov	r7, r1
 800278c:	f004 feba 	bl	8007504 <__aeabi_dcmpeq>
 8002790:	2800      	cmp	r0, #0
 8002792:	d0d5      	beq.n	8002740 <_dtoa_r+0x538>
 8002794:	46a2      	mov	sl, r4
 8002796:	ee18 5a10 	vmov	r5, s16
 800279a:	ee18 4a90 	vmov	r4, s17
 800279e:	9b05      	ldr	r3, [sp, #20]
 80027a0:	3301      	adds	r3, #1
 80027a2:	9305      	str	r3, [sp, #20]
 80027a4:	46d1      	mov	r9, sl
 80027a6:	e11b      	b.n	80029e0 <_dtoa_r+0x7d8>
 80027a8:	0800cce0 	.word	0x0800cce0
 80027ac:	0800cdd0 	.word	0x0800cdd0
 80027b0:	3ff00000 	.word	0x3ff00000
 80027b4:	401c0000 	.word	0x401c0000
 80027b8:	3fe00000 	.word	0x3fe00000
 80027bc:	40240000 	.word	0x40240000
 80027c0:	40140000 	.word	0x40140000
 80027c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80027c6:	2a00      	cmp	r2, #0
 80027c8:	d03f      	beq.n	800284a <_dtoa_r+0x642>
 80027ca:	9a01      	ldr	r2, [sp, #4]
 80027cc:	2a01      	cmp	r2, #1
 80027ce:	f340 829c 	ble.w	8002d0a <_dtoa_r+0xb02>
 80027d2:	9b07      	ldr	r3, [sp, #28]
 80027d4:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80027d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80027da:	4543      	cmp	r3, r8
 80027dc:	f2c0 826e 	blt.w	8002cbc <_dtoa_r+0xab4>
 80027e0:	eba3 0808 	sub.w	r8, r3, r8
 80027e4:	9b07      	ldr	r3, [sp, #28]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	f2c0 8366 	blt.w	8002eb8 <_dtoa_r+0xcb0>
 80027ec:	9a04      	ldr	r2, [sp, #16]
 80027ee:	441a      	add	r2, r3
 80027f0:	9204      	str	r2, [sp, #16]
 80027f2:	9a08      	ldr	r2, [sp, #32]
 80027f4:	4617      	mov	r7, r2
 80027f6:	441a      	add	r2, r3
 80027f8:	9208      	str	r2, [sp, #32]
 80027fa:	2101      	movs	r1, #1
 80027fc:	4620      	mov	r0, r4
 80027fe:	f001 ff97 	bl	8004730 <__i2b>
 8002802:	4606      	mov	r6, r0
 8002804:	e025      	b.n	8002852 <_dtoa_r+0x64a>
 8002806:	2301      	movs	r3, #1
 8002808:	1bbe      	subs	r6, r7, r6
 800280a:	930c      	str	r3, [sp, #48]	; 0x30
 800280c:	1e73      	subs	r3, r6, #1
 800280e:	9304      	str	r3, [sp, #16]
 8002810:	f57f adb1 	bpl.w	8002376 <_dtoa_r+0x16e>
 8002814:	f1c6 0301 	rsb	r3, r6, #1
 8002818:	9308      	str	r3, [sp, #32]
 800281a:	2300      	movs	r3, #0
 800281c:	9304      	str	r3, [sp, #16]
 800281e:	e5ac      	b.n	800237a <_dtoa_r+0x172>
 8002820:	4658      	mov	r0, fp
 8002822:	f004 fb9d 	bl	8006f60 <__aeabi_i2d>
 8002826:	4642      	mov	r2, r8
 8002828:	464b      	mov	r3, r9
 800282a:	f004 fe6b 	bl	8007504 <__aeabi_dcmpeq>
 800282e:	2800      	cmp	r0, #0
 8002830:	f47f ad89 	bne.w	8002346 <_dtoa_r+0x13e>
 8002834:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8002838:	e585      	b.n	8002346 <_dtoa_r+0x13e>
 800283a:	4b87      	ldr	r3, [pc, #540]	; (8002a58 <_dtoa_r+0x850>)
 800283c:	9300      	str	r3, [sp, #0]
 800283e:	9800      	ldr	r0, [sp, #0]
 8002840:	b015      	add	sp, #84	; 0x54
 8002842:	ecbd 8b06 	vpop	{d8-d10}
 8002846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800284a:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800284e:	9f08      	ldr	r7, [sp, #32]
 8002850:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8002852:	2f00      	cmp	r7, #0
 8002854:	dd0c      	ble.n	8002870 <_dtoa_r+0x668>
 8002856:	9a04      	ldr	r2, [sp, #16]
 8002858:	2a00      	cmp	r2, #0
 800285a:	dd09      	ble.n	8002870 <_dtoa_r+0x668>
 800285c:	9908      	ldr	r1, [sp, #32]
 800285e:	42ba      	cmp	r2, r7
 8002860:	4613      	mov	r3, r2
 8002862:	bfa8      	it	ge
 8002864:	463b      	movge	r3, r7
 8002866:	1ac9      	subs	r1, r1, r3
 8002868:	1aff      	subs	r7, r7, r3
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	9108      	str	r1, [sp, #32]
 800286e:	9304      	str	r3, [sp, #16]
 8002870:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002872:	b1db      	cbz	r3, 80028ac <_dtoa_r+0x6a4>
 8002874:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002876:	2b00      	cmp	r3, #0
 8002878:	f000 8282 	beq.w	8002d80 <_dtoa_r+0xb78>
 800287c:	f1b8 0f00 	cmp.w	r8, #0
 8002880:	dd0f      	ble.n	80028a2 <_dtoa_r+0x69a>
 8002882:	4631      	mov	r1, r6
 8002884:	4642      	mov	r2, r8
 8002886:	4620      	mov	r0, r4
 8002888:	f002 f82e 	bl	80048e8 <__pow5mult>
 800288c:	462a      	mov	r2, r5
 800288e:	4601      	mov	r1, r0
 8002890:	4606      	mov	r6, r0
 8002892:	4620      	mov	r0, r4
 8002894:	f001 ff7a 	bl	800478c <__multiply>
 8002898:	4629      	mov	r1, r5
 800289a:	4605      	mov	r5, r0
 800289c:	4620      	mov	r0, r4
 800289e:	f001 fe3f 	bl	8004520 <_Bfree>
 80028a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80028a4:	ebb3 0208 	subs.w	r2, r3, r8
 80028a8:	f040 8300 	bne.w	8002eac <_dtoa_r+0xca4>
 80028ac:	2101      	movs	r1, #1
 80028ae:	4620      	mov	r0, r4
 80028b0:	f001 ff3e 	bl	8004730 <__i2b>
 80028b4:	f1bb 0f00 	cmp.w	fp, #0
 80028b8:	4682      	mov	sl, r0
 80028ba:	f300 80b7 	bgt.w	8002a2c <_dtoa_r+0x824>
 80028be:	9b01      	ldr	r3, [sp, #4]
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	f340 8186 	ble.w	8002bd2 <_dtoa_r+0x9ca>
 80028c6:	f04f 0800 	mov.w	r8, #0
 80028ca:	2001      	movs	r0, #1
 80028cc:	f1bb 0f00 	cmp.w	fp, #0
 80028d0:	f040 80b8 	bne.w	8002a44 <_dtoa_r+0x83c>
 80028d4:	9a04      	ldr	r2, [sp, #16]
 80028d6:	4410      	add	r0, r2
 80028d8:	f010 001f 	ands.w	r0, r0, #31
 80028dc:	f000 8096 	beq.w	8002a0c <_dtoa_r+0x804>
 80028e0:	f1c0 0320 	rsb	r3, r0, #32
 80028e4:	2b04      	cmp	r3, #4
 80028e6:	f340 83f8 	ble.w	80030da <_dtoa_r+0xed2>
 80028ea:	9b08      	ldr	r3, [sp, #32]
 80028ec:	f1c0 001c 	rsb	r0, r0, #28
 80028f0:	4403      	add	r3, r0
 80028f2:	4402      	add	r2, r0
 80028f4:	9308      	str	r3, [sp, #32]
 80028f6:	4407      	add	r7, r0
 80028f8:	9204      	str	r2, [sp, #16]
 80028fa:	9b08      	ldr	r3, [sp, #32]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	dd05      	ble.n	800290c <_dtoa_r+0x704>
 8002900:	4629      	mov	r1, r5
 8002902:	461a      	mov	r2, r3
 8002904:	4620      	mov	r0, r4
 8002906:	f002 f84f 	bl	80049a8 <__lshift>
 800290a:	4605      	mov	r5, r0
 800290c:	9b04      	ldr	r3, [sp, #16]
 800290e:	2b00      	cmp	r3, #0
 8002910:	dd05      	ble.n	800291e <_dtoa_r+0x716>
 8002912:	4651      	mov	r1, sl
 8002914:	461a      	mov	r2, r3
 8002916:	4620      	mov	r0, r4
 8002918:	f002 f846 	bl	80049a8 <__lshift>
 800291c:	4682      	mov	sl, r0
 800291e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002920:	2b00      	cmp	r3, #0
 8002922:	f040 8137 	bne.w	8002b94 <_dtoa_r+0x98c>
 8002926:	9b07      	ldr	r3, [sp, #28]
 8002928:	2b00      	cmp	r3, #0
 800292a:	f340 811e 	ble.w	8002b6a <_dtoa_r+0x962>
 800292e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002930:	2b00      	cmp	r3, #0
 8002932:	f040 80a1 	bne.w	8002a78 <_dtoa_r+0x870>
 8002936:	9b05      	ldr	r3, [sp, #20]
 8002938:	3301      	adds	r3, #1
 800293a:	9305      	str	r3, [sp, #20]
 800293c:	f8dd 8000 	ldr.w	r8, [sp]
 8002940:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8002944:	2701      	movs	r7, #1
 8002946:	e007      	b.n	8002958 <_dtoa_r+0x750>
 8002948:	4629      	mov	r1, r5
 800294a:	2300      	movs	r3, #0
 800294c:	220a      	movs	r2, #10
 800294e:	4620      	mov	r0, r4
 8002950:	f001 fdf0 	bl	8004534 <__multadd>
 8002954:	3701      	adds	r7, #1
 8002956:	4605      	mov	r5, r0
 8002958:	4651      	mov	r1, sl
 800295a:	4628      	mov	r0, r5
 800295c:	f7ff fbc0 	bl	80020e0 <quorem>
 8002960:	454f      	cmp	r7, r9
 8002962:	f100 0030 	add.w	r0, r0, #48	; 0x30
 8002966:	f808 0b01 	strb.w	r0, [r8], #1
 800296a:	dbed      	blt.n	8002948 <_dtoa_r+0x740>
 800296c:	9a07      	ldr	r2, [sp, #28]
 800296e:	2a00      	cmp	r2, #0
 8002970:	bfc8      	it	gt
 8002972:	4693      	movgt	fp, r2
 8002974:	9a00      	ldr	r2, [sp, #0]
 8002976:	bfd8      	it	le
 8002978:	f04f 0b01 	movle.w	fp, #1
 800297c:	4603      	mov	r3, r0
 800297e:	4493      	add	fp, r2
 8002980:	2700      	movs	r7, #0
 8002982:	4629      	mov	r1, r5
 8002984:	2201      	movs	r2, #1
 8002986:	4620      	mov	r0, r4
 8002988:	9301      	str	r3, [sp, #4]
 800298a:	f002 f80d 	bl	80049a8 <__lshift>
 800298e:	4651      	mov	r1, sl
 8002990:	4605      	mov	r5, r0
 8002992:	f002 f881 	bl	8004a98 <__mcmp>
 8002996:	2800      	cmp	r0, #0
 8002998:	f340 81a5 	ble.w	8002ce6 <_dtoa_r+0xade>
 800299c:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
 80029a0:	9a00      	ldr	r2, [sp, #0]
 80029a2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80029a6:	e004      	b.n	80029b2 <_dtoa_r+0x7aa>
 80029a8:	455a      	cmp	r2, fp
 80029aa:	f000 81a7 	beq.w	8002cfc <_dtoa_r+0xaf4>
 80029ae:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
 80029b2:	2b39      	cmp	r3, #57	; 0x39
 80029b4:	f10b 0901 	add.w	r9, fp, #1
 80029b8:	d0f6      	beq.n	80029a8 <_dtoa_r+0x7a0>
 80029ba:	3301      	adds	r3, #1
 80029bc:	f88b 3000 	strb.w	r3, [fp]
 80029c0:	4651      	mov	r1, sl
 80029c2:	4620      	mov	r0, r4
 80029c4:	f001 fdac 	bl	8004520 <_Bfree>
 80029c8:	b156      	cbz	r6, 80029e0 <_dtoa_r+0x7d8>
 80029ca:	b12f      	cbz	r7, 80029d8 <_dtoa_r+0x7d0>
 80029cc:	42b7      	cmp	r7, r6
 80029ce:	d003      	beq.n	80029d8 <_dtoa_r+0x7d0>
 80029d0:	4639      	mov	r1, r7
 80029d2:	4620      	mov	r0, r4
 80029d4:	f001 fda4 	bl	8004520 <_Bfree>
 80029d8:	4631      	mov	r1, r6
 80029da:	4620      	mov	r0, r4
 80029dc:	f001 fda0 	bl	8004520 <_Bfree>
 80029e0:	4629      	mov	r1, r5
 80029e2:	4620      	mov	r0, r4
 80029e4:	f001 fd9c 	bl	8004520 <_Bfree>
 80029e8:	2300      	movs	r3, #0
 80029ea:	f889 3000 	strb.w	r3, [r9]
 80029ee:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 80029f2:	601a      	str	r2, [r3, #0]
 80029f4:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	f43f ac48 	beq.w	800228c <_dtoa_r+0x84>
 80029fc:	9800      	ldr	r0, [sp, #0]
 80029fe:	f8c3 9000 	str.w	r9, [r3]
 8002a02:	b015      	add	sp, #84	; 0x54
 8002a04:	ecbd 8b06 	vpop	{d8-d10}
 8002a08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a0c:	201c      	movs	r0, #28
 8002a0e:	9b08      	ldr	r3, [sp, #32]
 8002a10:	4403      	add	r3, r0
 8002a12:	9308      	str	r3, [sp, #32]
 8002a14:	9b04      	ldr	r3, [sp, #16]
 8002a16:	4403      	add	r3, r0
 8002a18:	4407      	add	r7, r0
 8002a1a:	9304      	str	r3, [sp, #16]
 8002a1c:	e76d      	b.n	80028fa <_dtoa_r+0x6f2>
 8002a1e:	2601      	movs	r6, #1
 8002a20:	e4c2      	b.n	80023a8 <_dtoa_r+0x1a0>
 8002a22:	f1c0 0020 	rsb	r0, r0, #32
 8002a26:	fa08 f000 	lsl.w	r0, r8, r0
 8002a2a:	e459      	b.n	80022e0 <_dtoa_r+0xd8>
 8002a2c:	4601      	mov	r1, r0
 8002a2e:	465a      	mov	r2, fp
 8002a30:	4620      	mov	r0, r4
 8002a32:	f001 ff59 	bl	80048e8 <__pow5mult>
 8002a36:	9b01      	ldr	r3, [sp, #4]
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	4682      	mov	sl, r0
 8002a3c:	f340 81d5 	ble.w	8002dea <_dtoa_r+0xbe2>
 8002a40:	f04f 0800 	mov.w	r8, #0
 8002a44:	f8da 3010 	ldr.w	r3, [sl, #16]
 8002a48:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 8002a4c:	6918      	ldr	r0, [r3, #16]
 8002a4e:	f001 fe1f 	bl	8004690 <__hi0bits>
 8002a52:	f1c0 0020 	rsb	r0, r0, #32
 8002a56:	e73d      	b.n	80028d4 <_dtoa_r+0x6cc>
 8002a58:	0801c0c4 	.word	0x0801c0c4
 8002a5c:	4631      	mov	r1, r6
 8002a5e:	2300      	movs	r3, #0
 8002a60:	220a      	movs	r2, #10
 8002a62:	4620      	mov	r0, r4
 8002a64:	f001 fd66 	bl	8004534 <__multadd>
 8002a68:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	4606      	mov	r6, r0
 8002a6e:	f340 8323 	ble.w	80030b8 <_dtoa_r+0xeb0>
 8002a72:	f8cd 9014 	str.w	r9, [sp, #20]
 8002a76:	9307      	str	r3, [sp, #28]
 8002a78:	2f00      	cmp	r7, #0
 8002a7a:	f300 8118 	bgt.w	8002cae <_dtoa_r+0xaa6>
 8002a7e:	f1b8 0f00 	cmp.w	r8, #0
 8002a82:	f040 81fc 	bne.w	8002e7e <_dtoa_r+0xc76>
 8002a86:	46b0      	mov	r8, r6
 8002a88:	9b02      	ldr	r3, [sp, #8]
 8002a8a:	9f00      	ldr	r7, [sp, #0]
 8002a8c:	9907      	ldr	r1, [sp, #28]
 8002a8e:	f003 0201 	and.w	r2, r3, #1
 8002a92:	1e7b      	subs	r3, r7, #1
 8002a94:	4419      	add	r1, r3
 8002a96:	9b01      	ldr	r3, [sp, #4]
 8002a98:	920a      	str	r2, [sp, #40]	; 0x28
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	9108      	str	r1, [sp, #32]
 8002a9e:	9309      	str	r3, [sp, #36]	; 0x24
 8002aa0:	4651      	mov	r1, sl
 8002aa2:	4628      	mov	r0, r5
 8002aa4:	f7ff fb1c 	bl	80020e0 <quorem>
 8002aa8:	4631      	mov	r1, r6
 8002aaa:	4683      	mov	fp, r0
 8002aac:	4628      	mov	r0, r5
 8002aae:	f001 fff3 	bl	8004a98 <__mcmp>
 8002ab2:	4642      	mov	r2, r8
 8002ab4:	4651      	mov	r1, sl
 8002ab6:	4681      	mov	r9, r0
 8002ab8:	4620      	mov	r0, r4
 8002aba:	f002 f80f 	bl	8004adc <__mdiff>
 8002abe:	68c2      	ldr	r2, [r0, #12]
 8002ac0:	4601      	mov	r1, r0
 8002ac2:	f10b 0330 	add.w	r3, fp, #48	; 0x30
 8002ac6:	2a00      	cmp	r2, #0
 8002ac8:	d142      	bne.n	8002b50 <_dtoa_r+0x948>
 8002aca:	9004      	str	r0, [sp, #16]
 8002acc:	4628      	mov	r0, r5
 8002ace:	9307      	str	r3, [sp, #28]
 8002ad0:	f001 ffe2 	bl	8004a98 <__mcmp>
 8002ad4:	9904      	ldr	r1, [sp, #16]
 8002ad6:	9002      	str	r0, [sp, #8]
 8002ad8:	4620      	mov	r0, r4
 8002ada:	f001 fd21 	bl	8004520 <_Bfree>
 8002ade:	9a02      	ldr	r2, [sp, #8]
 8002ae0:	9b07      	ldr	r3, [sp, #28]
 8002ae2:	b91a      	cbnz	r2, 8002aec <_dtoa_r+0x8e4>
 8002ae4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002ae6:	2900      	cmp	r1, #0
 8002ae8:	f000 82d6 	beq.w	8003098 <_dtoa_r+0xe90>
 8002aec:	f1b9 0f00 	cmp.w	r9, #0
 8002af0:	f2c0 8187 	blt.w	8002e02 <_dtoa_r+0xbfa>
 8002af4:	9901      	ldr	r1, [sp, #4]
 8002af6:	ea49 0901 	orr.w	r9, r9, r1
 8002afa:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002afc:	ea51 0109 	orrs.w	r1, r1, r9
 8002b00:	f000 817f 	beq.w	8002e02 <_dtoa_r+0xbfa>
 8002b04:	2a00      	cmp	r2, #0
 8002b06:	f300 81e7 	bgt.w	8002ed8 <_dtoa_r+0xcd0>
 8002b0a:	9a08      	ldr	r2, [sp, #32]
 8002b0c:	703b      	strb	r3, [r7, #0]
 8002b0e:	f107 0901 	add.w	r9, r7, #1
 8002b12:	4297      	cmp	r7, r2
 8002b14:	46cb      	mov	fp, r9
 8002b16:	f000 81e5 	beq.w	8002ee4 <_dtoa_r+0xcdc>
 8002b1a:	4629      	mov	r1, r5
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	220a      	movs	r2, #10
 8002b20:	4620      	mov	r0, r4
 8002b22:	f001 fd07 	bl	8004534 <__multadd>
 8002b26:	4546      	cmp	r6, r8
 8002b28:	4605      	mov	r5, r0
 8002b2a:	4631      	mov	r1, r6
 8002b2c:	f04f 0300 	mov.w	r3, #0
 8002b30:	f04f 020a 	mov.w	r2, #10
 8002b34:	4620      	mov	r0, r4
 8002b36:	d012      	beq.n	8002b5e <_dtoa_r+0x956>
 8002b38:	f001 fcfc 	bl	8004534 <__multadd>
 8002b3c:	4641      	mov	r1, r8
 8002b3e:	4606      	mov	r6, r0
 8002b40:	2300      	movs	r3, #0
 8002b42:	220a      	movs	r2, #10
 8002b44:	4620      	mov	r0, r4
 8002b46:	f001 fcf5 	bl	8004534 <__multadd>
 8002b4a:	464f      	mov	r7, r9
 8002b4c:	4680      	mov	r8, r0
 8002b4e:	e7a7      	b.n	8002aa0 <_dtoa_r+0x898>
 8002b50:	4620      	mov	r0, r4
 8002b52:	9302      	str	r3, [sp, #8]
 8002b54:	f001 fce4 	bl	8004520 <_Bfree>
 8002b58:	9b02      	ldr	r3, [sp, #8]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	e7c6      	b.n	8002aec <_dtoa_r+0x8e4>
 8002b5e:	f001 fce9 	bl	8004534 <__multadd>
 8002b62:	464f      	mov	r7, r9
 8002b64:	4606      	mov	r6, r0
 8002b66:	4680      	mov	r8, r0
 8002b68:	e79a      	b.n	8002aa0 <_dtoa_r+0x898>
 8002b6a:	9b01      	ldr	r3, [sp, #4]
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	dc77      	bgt.n	8002c60 <_dtoa_r+0xa58>
 8002b70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d180      	bne.n	8002a78 <_dtoa_r+0x870>
 8002b76:	9b05      	ldr	r3, [sp, #20]
 8002b78:	4651      	mov	r1, sl
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	4628      	mov	r0, r5
 8002b7e:	9305      	str	r3, [sp, #20]
 8002b80:	f7ff faae 	bl	80020e0 <quorem>
 8002b84:	f8dd b000 	ldr.w	fp, [sp]
 8002b88:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8002b8c:	f80b 3b01 	strb.w	r3, [fp], #1
 8002b90:	2700      	movs	r7, #0
 8002b92:	e6f6      	b.n	8002982 <_dtoa_r+0x77a>
 8002b94:	4651      	mov	r1, sl
 8002b96:	4628      	mov	r0, r5
 8002b98:	f001 ff7e 	bl	8004a98 <__mcmp>
 8002b9c:	2800      	cmp	r0, #0
 8002b9e:	f6bf aec2 	bge.w	8002926 <_dtoa_r+0x71e>
 8002ba2:	4629      	mov	r1, r5
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	220a      	movs	r2, #10
 8002ba8:	4620      	mov	r0, r4
 8002baa:	f001 fcc3 	bl	8004534 <__multadd>
 8002bae:	9b05      	ldr	r3, [sp, #20]
 8002bb0:	f103 39ff 	add.w	r9, r3, #4294967295	; 0xffffffff
 8002bb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002bb6:	4605      	mov	r5, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	f47f af4f 	bne.w	8002a5c <_dtoa_r+0x854>
 8002bbe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	f340 8270 	ble.w	80030a6 <_dtoa_r+0xe9e>
 8002bc6:	9307      	str	r3, [sp, #28]
 8002bc8:	e6b8      	b.n	800293c <_dtoa_r+0x734>
 8002bca:	4bbd      	ldr	r3, [pc, #756]	; (8002ec0 <_dtoa_r+0xcb8>)
 8002bcc:	9300      	str	r3, [sp, #0]
 8002bce:	3303      	adds	r3, #3
 8002bd0:	e405      	b.n	80023de <_dtoa_r+0x1d6>
 8002bd2:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8002bd6:	2900      	cmp	r1, #0
 8002bd8:	f47f ae75 	bne.w	80028c6 <_dtoa_r+0x6be>
 8002bdc:	f3c2 0313 	ubfx	r3, r2, #0, #20
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	f47f ae70 	bne.w	80028c6 <_dtoa_r+0x6be>
 8002be6:	4bb7      	ldr	r3, [pc, #732]	; (8002ec4 <_dtoa_r+0xcbc>)
 8002be8:	4013      	ands	r3, r2
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	f000 823d 	beq.w	800306a <_dtoa_r+0xe62>
 8002bf0:	9b08      	ldr	r3, [sp, #32]
 8002bf2:	3301      	adds	r3, #1
 8002bf4:	9308      	str	r3, [sp, #32]
 8002bf6:	9b04      	ldr	r3, [sp, #16]
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	9304      	str	r3, [sp, #16]
 8002bfc:	f04f 0801 	mov.w	r8, #1
 8002c00:	e663      	b.n	80028ca <_dtoa_r+0x6c2>
 8002c02:	2301      	movs	r3, #1
 8002c04:	930a      	str	r3, [sp, #40]	; 0x28
 8002c06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002c08:	9a05      	ldr	r2, [sp, #20]
 8002c0a:	4413      	add	r3, r2
 8002c0c:	930f      	str	r3, [sp, #60]	; 0x3c
 8002c0e:	3301      	adds	r3, #1
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	461f      	mov	r7, r3
 8002c14:	9307      	str	r3, [sp, #28]
 8002c16:	bfb8      	it	lt
 8002c18:	2701      	movlt	r7, #1
 8002c1a:	2100      	movs	r1, #0
 8002c1c:	2f17      	cmp	r7, #23
 8002c1e:	6461      	str	r1, [r4, #68]	; 0x44
 8002c20:	f77f ac32 	ble.w	8002488 <_dtoa_r+0x280>
 8002c24:	2201      	movs	r2, #1
 8002c26:	2304      	movs	r3, #4
 8002c28:	005b      	lsls	r3, r3, #1
 8002c2a:	f103 0014 	add.w	r0, r3, #20
 8002c2e:	42b8      	cmp	r0, r7
 8002c30:	4611      	mov	r1, r2
 8002c32:	f102 0201 	add.w	r2, r2, #1
 8002c36:	d9f7      	bls.n	8002c28 <_dtoa_r+0xa20>
 8002c38:	6461      	str	r1, [r4, #68]	; 0x44
 8002c3a:	e425      	b.n	8002488 <_dtoa_r+0x280>
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	930a      	str	r3, [sp, #40]	; 0x28
 8002c40:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8002c42:	2f00      	cmp	r7, #0
 8002c44:	dd4a      	ble.n	8002cdc <_dtoa_r+0xad4>
 8002c46:	970f      	str	r7, [sp, #60]	; 0x3c
 8002c48:	9707      	str	r7, [sp, #28]
 8002c4a:	e7e6      	b.n	8002c1a <_dtoa_r+0xa12>
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	930a      	str	r3, [sp, #40]	; 0x28
 8002c50:	e7d9      	b.n	8002c06 <_dtoa_r+0x9fe>
 8002c52:	2300      	movs	r3, #0
 8002c54:	930a      	str	r3, [sp, #40]	; 0x28
 8002c56:	e7f3      	b.n	8002c40 <_dtoa_r+0xa38>
 8002c58:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002c5a:	f8cd 9014 	str.w	r9, [sp, #20]
 8002c5e:	9307      	str	r3, [sp, #28]
 8002c60:	9b07      	ldr	r3, [sp, #28]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	f47f ad3d 	bne.w	80026e2 <_dtoa_r+0x4da>
 8002c68:	4651      	mov	r1, sl
 8002c6a:	2205      	movs	r2, #5
 8002c6c:	4620      	mov	r0, r4
 8002c6e:	f001 fc61 	bl	8004534 <__multadd>
 8002c72:	4601      	mov	r1, r0
 8002c74:	4682      	mov	sl, r0
 8002c76:	4628      	mov	r0, r5
 8002c78:	f001 ff0e 	bl	8004a98 <__mcmp>
 8002c7c:	2800      	cmp	r0, #0
 8002c7e:	f77f ad30 	ble.w	80026e2 <_dtoa_r+0x4da>
 8002c82:	9800      	ldr	r0, [sp, #0]
 8002c84:	9f05      	ldr	r7, [sp, #20]
 8002c86:	2331      	movs	r3, #49	; 0x31
 8002c88:	4680      	mov	r8, r0
 8002c8a:	f800 3b01 	strb.w	r3, [r0], #1
 8002c8e:	3701      	adds	r7, #1
 8002c90:	9000      	str	r0, [sp, #0]
 8002c92:	4651      	mov	r1, sl
 8002c94:	4620      	mov	r0, r4
 8002c96:	f001 fc43 	bl	8004520 <_Bfree>
 8002c9a:	1c7b      	adds	r3, r7, #1
 8002c9c:	f8dd 9000 	ldr.w	r9, [sp]
 8002ca0:	9305      	str	r3, [sp, #20]
 8002ca2:	f8cd 8000 	str.w	r8, [sp]
 8002ca6:	2e00      	cmp	r6, #0
 8002ca8:	f47f ae96 	bne.w	80029d8 <_dtoa_r+0x7d0>
 8002cac:	e698      	b.n	80029e0 <_dtoa_r+0x7d8>
 8002cae:	4631      	mov	r1, r6
 8002cb0:	463a      	mov	r2, r7
 8002cb2:	4620      	mov	r0, r4
 8002cb4:	f001 fe78 	bl	80049a8 <__lshift>
 8002cb8:	4606      	mov	r6, r0
 8002cba:	e6e0      	b.n	8002a7e <_dtoa_r+0x876>
 8002cbc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002cbe:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8002cc2:	eba8 0303 	sub.w	r3, r8, r3
 8002cc6:	449b      	add	fp, r3
 8002cc8:	f04f 0800 	mov.w	r8, #0
 8002ccc:	e58a      	b.n	80027e4 <_dtoa_r+0x5dc>
 8002cce:	f04f 0a02 	mov.w	sl, #2
 8002cd2:	eeb0 8a49 	vmov.f32	s16, s18
 8002cd6:	eef0 8a69 	vmov.f32	s17, s19
 8002cda:	e402      	b.n	80024e2 <_dtoa_r+0x2da>
 8002cdc:	2301      	movs	r3, #1
 8002cde:	9309      	str	r3, [sp, #36]	; 0x24
 8002ce0:	9307      	str	r3, [sp, #28]
 8002ce2:	f7ff bbcd 	b.w	8002480 <_dtoa_r+0x278>
 8002ce6:	d103      	bne.n	8002cf0 <_dtoa_r+0xae8>
 8002ce8:	9b01      	ldr	r3, [sp, #4]
 8002cea:	07db      	lsls	r3, r3, #31
 8002cec:	f53f ae56 	bmi.w	800299c <_dtoa_r+0x794>
 8002cf0:	46d9      	mov	r9, fp
 8002cf2:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
 8002cf6:	2b30      	cmp	r3, #48	; 0x30
 8002cf8:	d0fa      	beq.n	8002cf0 <_dtoa_r+0xae8>
 8002cfa:	e661      	b.n	80029c0 <_dtoa_r+0x7b8>
 8002cfc:	9b05      	ldr	r3, [sp, #20]
 8002cfe:	9a00      	ldr	r2, [sp, #0]
 8002d00:	3301      	adds	r3, #1
 8002d02:	9305      	str	r3, [sp, #20]
 8002d04:	2331      	movs	r3, #49	; 0x31
 8002d06:	7013      	strb	r3, [r2, #0]
 8002d08:	e65a      	b.n	80029c0 <_dtoa_r+0x7b8>
 8002d0a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8002d0c:	2a00      	cmp	r2, #0
 8002d0e:	f000 8163 	beq.w	8002fd8 <_dtoa_r+0xdd0>
 8002d12:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8002d16:	9a04      	ldr	r2, [sp, #16]
 8002d18:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8002d1c:	441a      	add	r2, r3
 8002d1e:	9204      	str	r2, [sp, #16]
 8002d20:	9a08      	ldr	r2, [sp, #32]
 8002d22:	4617      	mov	r7, r2
 8002d24:	441a      	add	r2, r3
 8002d26:	9208      	str	r2, [sp, #32]
 8002d28:	e567      	b.n	80027fa <_dtoa_r+0x5f2>
 8002d2a:	4650      	mov	r0, sl
 8002d2c:	f004 f918 	bl	8006f60 <__aeabi_i2d>
 8002d30:	ec53 2b1a 	vmov	r2, r3, d10
 8002d34:	f004 f97e 	bl	8007034 <__aeabi_dmul>
 8002d38:	4b63      	ldr	r3, [pc, #396]	; (8002ec8 <_dtoa_r+0xcc0>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	f003 ffc4 	bl	8006cc8 <__adddf3>
 8002d40:	4680      	mov	r8, r0
 8002d42:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 8002d46:	4b61      	ldr	r3, [pc, #388]	; (8002ecc <_dtoa_r+0xcc4>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	ec51 0b1a 	vmov	r0, r1, d10
 8002d4e:	f003 ffb9 	bl	8006cc4 <__aeabi_dsub>
 8002d52:	4642      	mov	r2, r8
 8002d54:	464b      	mov	r3, r9
 8002d56:	4606      	mov	r6, r0
 8002d58:	460f      	mov	r7, r1
 8002d5a:	f004 fbfb 	bl	8007554 <__aeabi_dcmpgt>
 8002d5e:	2800      	cmp	r0, #0
 8002d60:	f040 817f 	bne.w	8003062 <_dtoa_r+0xe5a>
 8002d64:	4630      	mov	r0, r6
 8002d66:	4639      	mov	r1, r7
 8002d68:	4642      	mov	r2, r8
 8002d6a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8002d6e:	f004 fbd3 	bl	8007518 <__aeabi_dcmplt>
 8002d72:	2800      	cmp	r0, #0
 8002d74:	f43f ac8e 	beq.w	8002694 <_dtoa_r+0x48c>
 8002d78:	f04f 0a00 	mov.w	sl, #0
 8002d7c:	4656      	mov	r6, sl
 8002d7e:	e4b0      	b.n	80026e2 <_dtoa_r+0x4da>
 8002d80:	4629      	mov	r1, r5
 8002d82:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002d84:	4620      	mov	r0, r4
 8002d86:	f001 fdaf 	bl	80048e8 <__pow5mult>
 8002d8a:	4605      	mov	r5, r0
 8002d8c:	e58e      	b.n	80028ac <_dtoa_r+0x6a4>
 8002d8e:	900c      	str	r0, [sp, #48]	; 0x30
 8002d90:	e540      	b.n	8002814 <_dtoa_r+0x60c>
 8002d92:	f000 814e 	beq.w	8003032 <_dtoa_r+0xe2a>
 8002d96:	9a05      	ldr	r2, [sp, #20]
 8002d98:	4b4d      	ldr	r3, [pc, #308]	; (8002ed0 <_dtoa_r+0xcc8>)
 8002d9a:	4256      	negs	r6, r2
 8002d9c:	f006 020f 	and.w	r2, r6, #15
 8002da0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002da8:	ec51 0b19 	vmov	r0, r1, d9
 8002dac:	f004 f942 	bl	8007034 <__aeabi_dmul>
 8002db0:	1136      	asrs	r6, r6, #4
 8002db2:	ec41 0b1a 	vmov	d10, r0, r1
 8002db6:	f000 8188 	beq.w	80030ca <_dtoa_r+0xec2>
 8002dba:	4f46      	ldr	r7, [pc, #280]	; (8002ed4 <_dtoa_r+0xccc>)
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	f04f 0a02 	mov.w	sl, #2
 8002dc2:	07f2      	lsls	r2, r6, #31
 8002dc4:	d506      	bpl.n	8002dd4 <_dtoa_r+0xbcc>
 8002dc6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002dca:	f004 f933 	bl	8007034 <__aeabi_dmul>
 8002dce:	f10a 0a01 	add.w	sl, sl, #1
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	1076      	asrs	r6, r6, #1
 8002dd6:	f107 0708 	add.w	r7, r7, #8
 8002dda:	d1f2      	bne.n	8002dc2 <_dtoa_r+0xbba>
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	f43f ab9f 	beq.w	8002520 <_dtoa_r+0x318>
 8002de2:	ec41 0b1a 	vmov	d10, r0, r1
 8002de6:	f7ff bb9b 	b.w	8002520 <_dtoa_r+0x318>
 8002dea:	9b02      	ldr	r3, [sp, #8]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	f47f ae27 	bne.w	8002a40 <_dtoa_r+0x838>
 8002df2:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8002df6:	f3c2 0313 	ubfx	r3, r2, #0, #20
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	f43f aef3 	beq.w	8002be6 <_dtoa_r+0x9de>
 8002e00:	e61e      	b.n	8002a40 <_dtoa_r+0x838>
 8002e02:	2a00      	cmp	r2, #0
 8002e04:	dd12      	ble.n	8002e2c <_dtoa_r+0xc24>
 8002e06:	4629      	mov	r1, r5
 8002e08:	2201      	movs	r2, #1
 8002e0a:	4620      	mov	r0, r4
 8002e0c:	9301      	str	r3, [sp, #4]
 8002e0e:	f001 fdcb 	bl	80049a8 <__lshift>
 8002e12:	4651      	mov	r1, sl
 8002e14:	4605      	mov	r5, r0
 8002e16:	f001 fe3f 	bl	8004a98 <__mcmp>
 8002e1a:	2800      	cmp	r0, #0
 8002e1c:	9b01      	ldr	r3, [sp, #4]
 8002e1e:	f340 8135 	ble.w	800308c <_dtoa_r+0xe84>
 8002e22:	2b39      	cmp	r3, #57	; 0x39
 8002e24:	f000 8113 	beq.w	800304e <_dtoa_r+0xe46>
 8002e28:	f10b 0331 	add.w	r3, fp, #49	; 0x31
 8002e2c:	46b9      	mov	r9, r7
 8002e2e:	f809 3b01 	strb.w	r3, [r9], #1
 8002e32:	9b05      	ldr	r3, [sp, #20]
 8002e34:	3301      	adds	r3, #1
 8002e36:	4637      	mov	r7, r6
 8002e38:	9305      	str	r3, [sp, #20]
 8002e3a:	4646      	mov	r6, r8
 8002e3c:	e5c0      	b.n	80029c0 <_dtoa_r+0x7b8>
 8002e3e:	46a2      	mov	sl, r4
 8002e40:	ee18 5a10 	vmov	r5, s16
 8002e44:	ee18 4a90 	vmov	r4, s17
 8002e48:	4602      	mov	r2, r0
 8002e4a:	460b      	mov	r3, r1
 8002e4c:	f003 ff3c 	bl	8006cc8 <__adddf3>
 8002e50:	4642      	mov	r2, r8
 8002e52:	464b      	mov	r3, r9
 8002e54:	4606      	mov	r6, r0
 8002e56:	460f      	mov	r7, r1
 8002e58:	f004 fb7c 	bl	8007554 <__aeabi_dcmpgt>
 8002e5c:	b960      	cbnz	r0, 8002e78 <_dtoa_r+0xc70>
 8002e5e:	4642      	mov	r2, r8
 8002e60:	464b      	mov	r3, r9
 8002e62:	4630      	mov	r0, r6
 8002e64:	4639      	mov	r1, r7
 8002e66:	f004 fb4d 	bl	8007504 <__aeabi_dcmpeq>
 8002e6a:	2800      	cmp	r0, #0
 8002e6c:	f43f ac97 	beq.w	800279e <_dtoa_r+0x596>
 8002e70:	ea5f 71cb 	movs.w	r1, fp, lsl #31
 8002e74:	f57f ac93 	bpl.w	800279e <_dtoa_r+0x596>
 8002e78:	9a00      	ldr	r2, [sp, #0]
 8002e7a:	f7ff bbf8 	b.w	800266e <_dtoa_r+0x466>
 8002e7e:	6871      	ldr	r1, [r6, #4]
 8002e80:	4620      	mov	r0, r4
 8002e82:	f001 fb27 	bl	80044d4 <_Balloc>
 8002e86:	4607      	mov	r7, r0
 8002e88:	2800      	cmp	r0, #0
 8002e8a:	f000 813a 	beq.w	8003102 <_dtoa_r+0xefa>
 8002e8e:	6933      	ldr	r3, [r6, #16]
 8002e90:	3302      	adds	r3, #2
 8002e92:	009a      	lsls	r2, r3, #2
 8002e94:	f106 010c 	add.w	r1, r6, #12
 8002e98:	300c      	adds	r0, #12
 8002e9a:	f001 fa01 	bl	80042a0 <memcpy>
 8002e9e:	4639      	mov	r1, r7
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	4620      	mov	r0, r4
 8002ea4:	f001 fd80 	bl	80049a8 <__lshift>
 8002ea8:	4680      	mov	r8, r0
 8002eaa:	e5ed      	b.n	8002a88 <_dtoa_r+0x880>
 8002eac:	4629      	mov	r1, r5
 8002eae:	4620      	mov	r0, r4
 8002eb0:	f001 fd1a 	bl	80048e8 <__pow5mult>
 8002eb4:	4605      	mov	r5, r0
 8002eb6:	e4f9      	b.n	80028ac <_dtoa_r+0x6a4>
 8002eb8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8002ebc:	1a9f      	subs	r7, r3, r2
 8002ebe:	e49c      	b.n	80027fa <_dtoa_r+0x5f2>
 8002ec0:	0801c0c8 	.word	0x0801c0c8
 8002ec4:	7ff00000 	.word	0x7ff00000
 8002ec8:	401c0000 	.word	0x401c0000
 8002ecc:	40140000 	.word	0x40140000
 8002ed0:	0800cce0 	.word	0x0800cce0
 8002ed4:	0800cdd0 	.word	0x0800cdd0
 8002ed8:	2b39      	cmp	r3, #57	; 0x39
 8002eda:	f000 80b8 	beq.w	800304e <_dtoa_r+0xe46>
 8002ede:	46b9      	mov	r9, r7
 8002ee0:	3301      	adds	r3, #1
 8002ee2:	e7a4      	b.n	8002e2e <_dtoa_r+0xc26>
 8002ee4:	9a05      	ldr	r2, [sp, #20]
 8002ee6:	3201      	adds	r2, #1
 8002ee8:	4637      	mov	r7, r6
 8002eea:	9205      	str	r2, [sp, #20]
 8002eec:	4646      	mov	r6, r8
 8002eee:	e548      	b.n	8002982 <_dtoa_r+0x77a>
 8002ef0:	980e      	ldr	r0, [sp, #56]	; 0x38
 8002ef2:	498d      	ldr	r1, [pc, #564]	; (8003128 <_dtoa_r+0xf20>)
 8002ef4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8002ef8:	4642      	mov	r2, r8
 8002efa:	464b      	mov	r3, r9
 8002efc:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8002f00:	f004 f898 	bl	8007034 <__aeabi_dmul>
 8002f04:	ec5a 9b1a 	vmov	r9, sl, d10
 8002f08:	ec41 0b18 	vmov	d8, r0, r1
 8002f0c:	4651      	mov	r1, sl
 8002f0e:	ee1a 0a10 	vmov	r0, s20
 8002f12:	f004 fb3f 	bl	8007594 <__aeabi_d2iz>
 8002f16:	4607      	mov	r7, r0
 8002f18:	f004 f822 	bl	8006f60 <__aeabi_i2d>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	460b      	mov	r3, r1
 8002f20:	ee1a 0a10 	vmov	r0, s20
 8002f24:	4651      	mov	r1, sl
 8002f26:	f003 fecd 	bl	8006cc4 <__aeabi_dsub>
 8002f2a:	4606      	mov	r6, r0
 8002f2c:	980e      	ldr	r0, [sp, #56]	; 0x38
 8002f2e:	f8dd 8000 	ldr.w	r8, [sp]
 8002f32:	3730      	adds	r7, #48	; 0x30
 8002f34:	2801      	cmp	r0, #1
 8002f36:	f808 7b01 	strb.w	r7, [r8], #1
 8002f3a:	460f      	mov	r7, r1
 8002f3c:	f000 80ba 	beq.w	80030b4 <_dtoa_r+0xeac>
 8002f40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002f42:	9a00      	ldr	r2, [sp, #0]
 8002f44:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8002f48:	4413      	add	r3, r2
 8002f4a:	469b      	mov	fp, r3
 8002f4c:	46c2      	mov	sl, r8
 8002f4e:	4b77      	ldr	r3, [pc, #476]	; (800312c <_dtoa_r+0xf24>)
 8002f50:	2200      	movs	r2, #0
 8002f52:	4630      	mov	r0, r6
 8002f54:	4639      	mov	r1, r7
 8002f56:	f004 f86d 	bl	8007034 <__aeabi_dmul>
 8002f5a:	4689      	mov	r9, r1
 8002f5c:	4680      	mov	r8, r0
 8002f5e:	f004 fb19 	bl	8007594 <__aeabi_d2iz>
 8002f62:	4607      	mov	r7, r0
 8002f64:	f003 fffc 	bl	8006f60 <__aeabi_i2d>
 8002f68:	3730      	adds	r7, #48	; 0x30
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	460b      	mov	r3, r1
 8002f6e:	4640      	mov	r0, r8
 8002f70:	4649      	mov	r1, r9
 8002f72:	f003 fea7 	bl	8006cc4 <__aeabi_dsub>
 8002f76:	f80a 7b01 	strb.w	r7, [sl], #1
 8002f7a:	45da      	cmp	sl, fp
 8002f7c:	4606      	mov	r6, r0
 8002f7e:	460f      	mov	r7, r1
 8002f80:	d1e5      	bne.n	8002f4e <_dtoa_r+0xd46>
 8002f82:	46da      	mov	sl, fp
 8002f84:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 8002f88:	4b69      	ldr	r3, [pc, #420]	; (8003130 <_dtoa_r+0xf28>)
 8002f8a:	ec59 8b18 	vmov	r8, r9, d8
 8002f8e:	2200      	movs	r2, #0
 8002f90:	ee18 0a10 	vmov	r0, s16
 8002f94:	4649      	mov	r1, r9
 8002f96:	f003 fe97 	bl	8006cc8 <__adddf3>
 8002f9a:	4632      	mov	r2, r6
 8002f9c:	463b      	mov	r3, r7
 8002f9e:	f004 fabb 	bl	8007518 <__aeabi_dcmplt>
 8002fa2:	2800      	cmp	r0, #0
 8002fa4:	d16d      	bne.n	8003082 <_dtoa_r+0xe7a>
 8002fa6:	ee18 2a10 	vmov	r2, s16
 8002faa:	464b      	mov	r3, r9
 8002fac:	4960      	ldr	r1, [pc, #384]	; (8003130 <_dtoa_r+0xf28>)
 8002fae:	2000      	movs	r0, #0
 8002fb0:	f003 fe88 	bl	8006cc4 <__aeabi_dsub>
 8002fb4:	4632      	mov	r2, r6
 8002fb6:	463b      	mov	r3, r7
 8002fb8:	f004 facc 	bl	8007554 <__aeabi_dcmpgt>
 8002fbc:	2800      	cmp	r0, #0
 8002fbe:	f43f ab69 	beq.w	8002694 <_dtoa_r+0x48c>
 8002fc2:	46d1      	mov	r9, sl
 8002fc4:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8002fc8:	f819 3c01 	ldrb.w	r3, [r9, #-1]
 8002fcc:	2b30      	cmp	r3, #48	; 0x30
 8002fce:	d0f8      	beq.n	8002fc2 <_dtoa_r+0xdba>
 8002fd0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	9305      	str	r3, [sp, #20]
 8002fd6:	e503      	b.n	80029e0 <_dtoa_r+0x7d8>
 8002fd8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002fda:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8002fde:	e69a      	b.n	8002d16 <_dtoa_r+0xb0e>
 8002fe0:	9b07      	ldr	r3, [sp, #28]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	f43f aea1 	beq.w	8002d2a <_dtoa_r+0xb22>
 8002fe8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	f77f ab52 	ble.w	8002694 <_dtoa_r+0x48c>
 8002ff0:	9a05      	ldr	r2, [sp, #20]
 8002ff2:	930e      	str	r3, [sp, #56]	; 0x38
 8002ff4:	3a01      	subs	r2, #1
 8002ff6:	4b4d      	ldr	r3, [pc, #308]	; (800312c <_dtoa_r+0xf24>)
 8002ff8:	9210      	str	r2, [sp, #64]	; 0x40
 8002ffa:	ee1a 0a10 	vmov	r0, s20
 8002ffe:	4639      	mov	r1, r7
 8003000:	2200      	movs	r2, #0
 8003002:	f004 f817 	bl	8007034 <__aeabi_dmul>
 8003006:	4602      	mov	r2, r0
 8003008:	4616      	mov	r6, r2
 800300a:	460f      	mov	r7, r1
 800300c:	f10a 0001 	add.w	r0, sl, #1
 8003010:	f003 ffa6 	bl	8006f60 <__aeabi_i2d>
 8003014:	4632      	mov	r2, r6
 8003016:	463b      	mov	r3, r7
 8003018:	f004 f80c 	bl	8007034 <__aeabi_dmul>
 800301c:	4b45      	ldr	r3, [pc, #276]	; (8003134 <_dtoa_r+0xf2c>)
 800301e:	2200      	movs	r2, #0
 8003020:	f003 fe52 	bl	8006cc8 <__adddf3>
 8003024:	ec47 6b1a 	vmov	d10, r6, r7
 8003028:	4680      	mov	r8, r0
 800302a:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 800302e:	f7ff ba9b 	b.w	8002568 <_dtoa_r+0x360>
 8003032:	f04f 0a02 	mov.w	sl, #2
 8003036:	eeb0 aa49 	vmov.f32	s20, s18
 800303a:	eef0 aa69 	vmov.f32	s21, s19
 800303e:	f7ff ba6f 	b.w	8002520 <_dtoa_r+0x318>
 8003042:	9b05      	ldr	r3, [sp, #20]
 8003044:	3301      	adds	r3, #1
 8003046:	9305      	str	r3, [sp, #20]
 8003048:	2331      	movs	r3, #49	; 0x31
 800304a:	f7ff bb17 	b.w	800267c <_dtoa_r+0x474>
 800304e:	9b05      	ldr	r3, [sp, #20]
 8003050:	46bb      	mov	fp, r7
 8003052:	3301      	adds	r3, #1
 8003054:	9305      	str	r3, [sp, #20]
 8003056:	2339      	movs	r3, #57	; 0x39
 8003058:	4637      	mov	r7, r6
 800305a:	f80b 3b01 	strb.w	r3, [fp], #1
 800305e:	4646      	mov	r6, r8
 8003060:	e49e      	b.n	80029a0 <_dtoa_r+0x798>
 8003062:	f04f 0a00 	mov.w	sl, #0
 8003066:	4656      	mov	r6, sl
 8003068:	e60b      	b.n	8002c82 <_dtoa_r+0xa7a>
 800306a:	4698      	mov	r8, r3
 800306c:	e42d      	b.n	80028ca <_dtoa_r+0x6c2>
 800306e:	46aa      	mov	sl, r5
 8003070:	ee18 4a10 	vmov	r4, s16
 8003074:	ee1a 5a10 	vmov	r5, s20
 8003078:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800307a:	3301      	adds	r3, #1
 800307c:	9305      	str	r3, [sp, #20]
 800307e:	46d1      	mov	r9, sl
 8003080:	e4ae      	b.n	80029e0 <_dtoa_r+0x7d8>
 8003082:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003084:	9a00      	ldr	r2, [sp, #0]
 8003086:	9305      	str	r3, [sp, #20]
 8003088:	f7ff baf1 	b.w	800266e <_dtoa_r+0x466>
 800308c:	f47f aece 	bne.w	8002e2c <_dtoa_r+0xc24>
 8003090:	07da      	lsls	r2, r3, #31
 8003092:	f57f aecb 	bpl.w	8002e2c <_dtoa_r+0xc24>
 8003096:	e6c4      	b.n	8002e22 <_dtoa_r+0xc1a>
 8003098:	2b39      	cmp	r3, #57	; 0x39
 800309a:	d0d8      	beq.n	800304e <_dtoa_r+0xe46>
 800309c:	f1b9 0f00 	cmp.w	r9, #0
 80030a0:	f73f aec2 	bgt.w	8002e28 <_dtoa_r+0xc20>
 80030a4:	e6c2      	b.n	8002e2c <_dtoa_r+0xc24>
 80030a6:	9b01      	ldr	r3, [sp, #4]
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	f73f add5 	bgt.w	8002c58 <_dtoa_r+0xa50>
 80030ae:	f8cd 9014 	str.w	r9, [sp, #20]
 80030b2:	e560      	b.n	8002b76 <_dtoa_r+0x96e>
 80030b4:	46c2      	mov	sl, r8
 80030b6:	e767      	b.n	8002f88 <_dtoa_r+0xd80>
 80030b8:	9b01      	ldr	r3, [sp, #4]
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	f73f adcc 	bgt.w	8002c58 <_dtoa_r+0xa50>
 80030c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80030c2:	f8cd 9014 	str.w	r9, [sp, #20]
 80030c6:	9307      	str	r3, [sp, #28]
 80030c8:	e4d6      	b.n	8002a78 <_dtoa_r+0x870>
 80030ca:	f04f 0a02 	mov.w	sl, #2
 80030ce:	f7ff ba27 	b.w	8002520 <_dtoa_r+0x318>
 80030d2:	4b19      	ldr	r3, [pc, #100]	; (8003138 <_dtoa_r+0xf30>)
 80030d4:	9300      	str	r3, [sp, #0]
 80030d6:	f7ff b8d9 	b.w	800228c <_dtoa_r+0x84>
 80030da:	f43f ac0e 	beq.w	80028fa <_dtoa_r+0x6f2>
 80030de:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
 80030e2:	e494      	b.n	8002a0e <_dtoa_r+0x806>
 80030e4:	2600      	movs	r6, #0
 80030e6:	6466      	str	r6, [r4, #68]	; 0x44
 80030e8:	4631      	mov	r1, r6
 80030ea:	4620      	mov	r0, r4
 80030ec:	f001 f9f2 	bl	80044d4 <_Balloc>
 80030f0:	9000      	str	r0, [sp, #0]
 80030f2:	b968      	cbnz	r0, 8003110 <_dtoa_r+0xf08>
 80030f4:	4b11      	ldr	r3, [pc, #68]	; (800313c <_dtoa_r+0xf34>)
 80030f6:	4812      	ldr	r0, [pc, #72]	; (8003140 <_dtoa_r+0xf38>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80030fe:	f003 f8cf 	bl	80062a0 <__assert_func>
 8003102:	4b0e      	ldr	r3, [pc, #56]	; (800313c <_dtoa_r+0xf34>)
 8003104:	480e      	ldr	r0, [pc, #56]	; (8003140 <_dtoa_r+0xf38>)
 8003106:	463a      	mov	r2, r7
 8003108:	f240 21ea 	movw	r1, #746	; 0x2ea
 800310c:	f003 f8c8 	bl	80062a0 <__assert_func>
 8003110:	9b00      	ldr	r3, [sp, #0]
 8003112:	6423      	str	r3, [r4, #64]	; 0x40
 8003114:	2201      	movs	r2, #1
 8003116:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800311a:	9609      	str	r6, [sp, #36]	; 0x24
 800311c:	930f      	str	r3, [sp, #60]	; 0x3c
 800311e:	920a      	str	r2, [sp, #40]	; 0x28
 8003120:	9307      	str	r3, [sp, #28]
 8003122:	f7ff bab7 	b.w	8002694 <_dtoa_r+0x48c>
 8003126:	bf00      	nop
 8003128:	0800cce0 	.word	0x0800cce0
 800312c:	40240000 	.word	0x40240000
 8003130:	3fe00000 	.word	0x3fe00000
 8003134:	401c0000 	.word	0x401c0000
 8003138:	0801c0cc 	.word	0x0801c0cc
 800313c:	0801c0d8 	.word	0x0801c0d8
 8003140:	0801c0ec 	.word	0x0801c0ec

08003144 <__sflush_r>:
 8003144:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800314c:	460c      	mov	r4, r1
 800314e:	0711      	lsls	r1, r2, #28
 8003150:	4680      	mov	r8, r0
 8003152:	d447      	bmi.n	80031e4 <__sflush_r+0xa0>
 8003154:	6863      	ldr	r3, [r4, #4]
 8003156:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800315a:	2b00      	cmp	r3, #0
 800315c:	81a2      	strh	r2, [r4, #12]
 800315e:	dd5e      	ble.n	800321e <__sflush_r+0xda>
 8003160:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8003162:	2d00      	cmp	r5, #0
 8003164:	d058      	beq.n	8003218 <__sflush_r+0xd4>
 8003166:	2300      	movs	r3, #0
 8003168:	f8d8 6000 	ldr.w	r6, [r8]
 800316c:	f8c8 3000 	str.w	r3, [r8]
 8003170:	b293      	uxth	r3, r2
 8003172:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003176:	d156      	bne.n	8003226 <__sflush_r+0xe2>
 8003178:	2301      	movs	r3, #1
 800317a:	69e1      	ldr	r1, [r4, #28]
 800317c:	4640      	mov	r0, r8
 800317e:	47a8      	blx	r5
 8003180:	1c43      	adds	r3, r0, #1
 8003182:	d067      	beq.n	8003254 <__sflush_r+0x110>
 8003184:	89a3      	ldrh	r3, [r4, #12]
 8003186:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8003188:	075f      	lsls	r7, r3, #29
 800318a:	d505      	bpl.n	8003198 <__sflush_r+0x54>
 800318c:	6863      	ldr	r3, [r4, #4]
 800318e:	1ac0      	subs	r0, r0, r3
 8003190:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003192:	b10b      	cbz	r3, 8003198 <__sflush_r+0x54>
 8003194:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003196:	1ac0      	subs	r0, r0, r3
 8003198:	69e1      	ldr	r1, [r4, #28]
 800319a:	4602      	mov	r2, r0
 800319c:	2300      	movs	r3, #0
 800319e:	4640      	mov	r0, r8
 80031a0:	47a8      	blx	r5
 80031a2:	1c41      	adds	r1, r0, #1
 80031a4:	d141      	bne.n	800322a <__sflush_r+0xe6>
 80031a6:	f8d8 3000 	ldr.w	r3, [r8]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d03d      	beq.n	800322a <__sflush_r+0xe6>
 80031ae:	2b1d      	cmp	r3, #29
 80031b0:	d001      	beq.n	80031b6 <__sflush_r+0x72>
 80031b2:	2b16      	cmp	r3, #22
 80031b4:	d156      	bne.n	8003264 <__sflush_r+0x120>
 80031b6:	89a3      	ldrh	r3, [r4, #12]
 80031b8:	6922      	ldr	r2, [r4, #16]
 80031ba:	6022      	str	r2, [r4, #0]
 80031bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80031c0:	2100      	movs	r1, #0
 80031c2:	6061      	str	r1, [r4, #4]
 80031c4:	81a3      	strh	r3, [r4, #12]
 80031c6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80031c8:	f8c8 6000 	str.w	r6, [r8]
 80031cc:	b321      	cbz	r1, 8003218 <__sflush_r+0xd4>
 80031ce:	f104 0340 	add.w	r3, r4, #64	; 0x40
 80031d2:	4299      	cmp	r1, r3
 80031d4:	d002      	beq.n	80031dc <__sflush_r+0x98>
 80031d6:	4640      	mov	r0, r8
 80031d8:	f000 f9e6 	bl	80035a8 <_free_r>
 80031dc:	2000      	movs	r0, #0
 80031de:	6320      	str	r0, [r4, #48]	; 0x30
 80031e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80031e4:	6926      	ldr	r6, [r4, #16]
 80031e6:	b1be      	cbz	r6, 8003218 <__sflush_r+0xd4>
 80031e8:	b293      	uxth	r3, r2
 80031ea:	6825      	ldr	r5, [r4, #0]
 80031ec:	6026      	str	r6, [r4, #0]
 80031ee:	079a      	lsls	r2, r3, #30
 80031f0:	bf0c      	ite	eq
 80031f2:	6963      	ldreq	r3, [r4, #20]
 80031f4:	2300      	movne	r3, #0
 80031f6:	1bad      	subs	r5, r5, r6
 80031f8:	60a3      	str	r3, [r4, #8]
 80031fa:	e00b      	b.n	8003214 <__sflush_r+0xd0>
 80031fc:	462b      	mov	r3, r5
 80031fe:	4632      	mov	r2, r6
 8003200:	69e1      	ldr	r1, [r4, #28]
 8003202:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8003204:	4640      	mov	r0, r8
 8003206:	47b8      	blx	r7
 8003208:	f1b0 0c00 	subs.w	ip, r0, #0
 800320c:	eba5 050c 	sub.w	r5, r5, ip
 8003210:	4466      	add	r6, ip
 8003212:	dd17      	ble.n	8003244 <__sflush_r+0x100>
 8003214:	2d00      	cmp	r5, #0
 8003216:	dcf1      	bgt.n	80031fc <__sflush_r+0xb8>
 8003218:	2000      	movs	r0, #0
 800321a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800321e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003220:	2b00      	cmp	r3, #0
 8003222:	dc9d      	bgt.n	8003160 <__sflush_r+0x1c>
 8003224:	e7f8      	b.n	8003218 <__sflush_r+0xd4>
 8003226:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8003228:	e7ae      	b.n	8003188 <__sflush_r+0x44>
 800322a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800322e:	6922      	ldr	r2, [r4, #16]
 8003230:	6022      	str	r2, [r4, #0]
 8003232:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003236:	81a3      	strh	r3, [r4, #12]
 8003238:	2200      	movs	r2, #0
 800323a:	04db      	lsls	r3, r3, #19
 800323c:	6062      	str	r2, [r4, #4]
 800323e:	d5c2      	bpl.n	80031c6 <__sflush_r+0x82>
 8003240:	6520      	str	r0, [r4, #80]	; 0x50
 8003242:	e7c0      	b.n	80031c6 <__sflush_r+0x82>
 8003244:	89a3      	ldrh	r3, [r4, #12]
 8003246:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800324a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800324e:	81a3      	strh	r3, [r4, #12]
 8003250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003254:	f8d8 3000 	ldr.w	r3, [r8]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d093      	beq.n	8003184 <__sflush_r+0x40>
 800325c:	2b1d      	cmp	r3, #29
 800325e:	d006      	beq.n	800326e <__sflush_r+0x12a>
 8003260:	2b16      	cmp	r3, #22
 8003262:	d004      	beq.n	800326e <__sflush_r+0x12a>
 8003264:	89a3      	ldrh	r3, [r4, #12]
 8003266:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800326a:	81a3      	strh	r3, [r4, #12]
 800326c:	e7d5      	b.n	800321a <__sflush_r+0xd6>
 800326e:	f8c8 6000 	str.w	r6, [r8]
 8003272:	e7d1      	b.n	8003218 <__sflush_r+0xd4>

08003274 <_fflush_r>:
 8003274:	b538      	push	{r3, r4, r5, lr}
 8003276:	460d      	mov	r5, r1
 8003278:	4604      	mov	r4, r0
 800327a:	b108      	cbz	r0, 8003280 <_fflush_r+0xc>
 800327c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800327e:	b11b      	cbz	r3, 8003288 <_fflush_r+0x14>
 8003280:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
 8003284:	b930      	cbnz	r0, 8003294 <_fflush_r+0x20>
 8003286:	bd38      	pop	{r3, r4, r5, pc}
 8003288:	f000 f91e 	bl	80034c8 <__sinit>
 800328c:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
 8003290:	2800      	cmp	r0, #0
 8003292:	d0f8      	beq.n	8003286 <_fflush_r+0x12>
 8003294:	4629      	mov	r1, r5
 8003296:	4620      	mov	r0, r4
 8003298:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800329c:	f7ff bf52 	b.w	8003144 <__sflush_r>

080032a0 <fflush>:
 80032a0:	b538      	push	{r3, r4, r5, lr}
 80032a2:	b1b8      	cbz	r0, 80032d4 <fflush+0x34>
 80032a4:	4b0f      	ldr	r3, [pc, #60]	; (80032e4 <fflush+0x44>)
 80032a6:	681d      	ldr	r5, [r3, #0]
 80032a8:	4604      	mov	r4, r0
 80032aa:	b10d      	cbz	r5, 80032b0 <fflush+0x10>
 80032ac:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80032ae:	b14b      	cbz	r3, 80032c4 <fflush+0x24>
 80032b0:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 80032b4:	b900      	cbnz	r0, 80032b8 <fflush+0x18>
 80032b6:	bd38      	pop	{r3, r4, r5, pc}
 80032b8:	4621      	mov	r1, r4
 80032ba:	4628      	mov	r0, r5
 80032bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80032c0:	f7ff bf40 	b.w	8003144 <__sflush_r>
 80032c4:	4628      	mov	r0, r5
 80032c6:	f000 f8ff 	bl	80034c8 <__sinit>
 80032ca:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 80032ce:	2800      	cmp	r0, #0
 80032d0:	d0f1      	beq.n	80032b6 <fflush+0x16>
 80032d2:	e7f1      	b.n	80032b8 <fflush+0x18>
 80032d4:	4b04      	ldr	r3, [pc, #16]	; (80032e8 <fflush+0x48>)
 80032d6:	4905      	ldr	r1, [pc, #20]	; (80032ec <fflush+0x4c>)
 80032d8:	6818      	ldr	r0, [r3, #0]
 80032da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80032de:	f000 bc01 	b.w	8003ae4 <_fwalk_reent>
 80032e2:	bf00      	nop
 80032e4:	20000008 	.word	0x20000008
 80032e8:	0800cca8 	.word	0x0800cca8
 80032ec:	08003275 	.word	0x08003275

080032f0 <__fp_lock>:
 80032f0:	2000      	movs	r0, #0
 80032f2:	4770      	bx	lr

080032f4 <_cleanup_r>:
 80032f4:	4901      	ldr	r1, [pc, #4]	; (80032fc <_cleanup_r+0x8>)
 80032f6:	f000 bbf5 	b.w	8003ae4 <_fwalk_reent>
 80032fa:	bf00      	nop
 80032fc:	080063b1 	.word	0x080063b1

08003300 <__fp_unlock>:
 8003300:	2000      	movs	r0, #0
 8003302:	4770      	bx	lr

08003304 <__sinit.part.0>:
 8003304:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003308:	4a2d      	ldr	r2, [pc, #180]	; (80033c0 <__sinit.part.0+0xbc>)
 800330a:	6846      	ldr	r6, [r0, #4]
 800330c:	63c2      	str	r2, [r0, #60]	; 0x3c
 800330e:	2400      	movs	r4, #0
 8003310:	2303      	movs	r3, #3
 8003312:	e9c0 43b8 	strd	r4, r3, [r0, #736]	; 0x2e0
 8003316:	4607      	mov	r7, r0
 8003318:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
 800331c:	2304      	movs	r3, #4
 800331e:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
 8003322:	4621      	mov	r1, r4
 8003324:	e9c6 4302 	strd	r4, r3, [r6, #8]
 8003328:	2208      	movs	r2, #8
 800332a:	e9c6 4400 	strd	r4, r4, [r6]
 800332e:	e9c6 4404 	strd	r4, r4, [r6, #16]
 8003332:	6674      	str	r4, [r6, #100]	; 0x64
 8003334:	61b4      	str	r4, [r6, #24]
 8003336:	f106 005c 	add.w	r0, r6, #92	; 0x5c
 800333a:	f7fd f805 	bl	8000348 <memset>
 800333e:	f8df b08c 	ldr.w	fp, [pc, #140]	; 80033cc <__sinit.part.0+0xc8>
 8003342:	68bd      	ldr	r5, [r7, #8]
 8003344:	f8df a088 	ldr.w	sl, [pc, #136]	; 80033d0 <__sinit.part.0+0xcc>
 8003348:	f8df 9088 	ldr.w	r9, [pc, #136]	; 80033d4 <__sinit.part.0+0xd0>
 800334c:	f8df 8088 	ldr.w	r8, [pc, #136]	; 80033d8 <__sinit.part.0+0xd4>
 8003350:	4b1c      	ldr	r3, [pc, #112]	; (80033c4 <__sinit.part.0+0xc0>)
 8003352:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
 8003356:	e9c6 6b07 	strd	r6, fp, [r6, #28]
 800335a:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
 800335e:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
 8003362:	2208      	movs	r2, #8
 8003364:	60eb      	str	r3, [r5, #12]
 8003366:	e9c5 4400 	strd	r4, r4, [r5]
 800336a:	e9c5 4404 	strd	r4, r4, [r5, #16]
 800336e:	666c      	str	r4, [r5, #100]	; 0x64
 8003370:	60ac      	str	r4, [r5, #8]
 8003372:	61ac      	str	r4, [r5, #24]
 8003374:	4621      	mov	r1, r4
 8003376:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 800337a:	f7fc ffe5 	bl	8000348 <memset>
 800337e:	e9c5 5b07 	strd	r5, fp, [r5, #28]
 8003382:	e9c5 a909 	strd	sl, r9, [r5, #36]	; 0x24
 8003386:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 800338a:	68fd      	ldr	r5, [r7, #12]
 800338c:	4b0e      	ldr	r3, [pc, #56]	; (80033c8 <__sinit.part.0+0xc4>)
 800338e:	60eb      	str	r3, [r5, #12]
 8003390:	e9c5 4400 	strd	r4, r4, [r5]
 8003394:	e9c5 4404 	strd	r4, r4, [r5, #16]
 8003398:	666c      	str	r4, [r5, #100]	; 0x64
 800339a:	60ac      	str	r4, [r5, #8]
 800339c:	61ac      	str	r4, [r5, #24]
 800339e:	4621      	mov	r1, r4
 80033a0:	2208      	movs	r2, #8
 80033a2:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 80033a6:	f7fc ffcf 	bl	8000348 <memset>
 80033aa:	2301      	movs	r3, #1
 80033ac:	e9c5 5b07 	strd	r5, fp, [r5, #28]
 80033b0:	e9c5 980a 	strd	r9, r8, [r5, #40]	; 0x28
 80033b4:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 80033b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80033ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033be:	bf00      	nop
 80033c0:	080032f5 	.word	0x080032f5
 80033c4:	00010009 	.word	0x00010009
 80033c8:	00020012 	.word	0x00020012
 80033cc:	08005405 	.word	0x08005405
 80033d0:	0800542d 	.word	0x0800542d
 80033d4:	0800546d 	.word	0x0800546d
 80033d8:	0800548d 	.word	0x0800548d

080033dc <__sfmoreglue>:
 80033dc:	b570      	push	{r4, r5, r6, lr}
 80033de:	2268      	movs	r2, #104	; 0x68
 80033e0:	1e4d      	subs	r5, r1, #1
 80033e2:	fb02 f505 	mul.w	r5, r2, r5
 80033e6:	460e      	mov	r6, r1
 80033e8:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80033ec:	f000 fc58 	bl	8003ca0 <_malloc_r>
 80033f0:	4604      	mov	r4, r0
 80033f2:	b140      	cbz	r0, 8003406 <__sfmoreglue+0x2a>
 80033f4:	2100      	movs	r1, #0
 80033f6:	300c      	adds	r0, #12
 80033f8:	e9c4 1600 	strd	r1, r6, [r4]
 80033fc:	60a0      	str	r0, [r4, #8]
 80033fe:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003402:	f7fc ffa1 	bl	8000348 <memset>
 8003406:	4620      	mov	r0, r4
 8003408:	bd70      	pop	{r4, r5, r6, pc}
 800340a:	bf00      	nop

0800340c <__sfp>:
 800340c:	4b27      	ldr	r3, [pc, #156]	; (80034ac <__sfp+0xa0>)
 800340e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003412:	681e      	ldr	r6, [r3, #0]
 8003414:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8003416:	4607      	mov	r7, r0
 8003418:	b35b      	cbz	r3, 8003472 <__sfp+0x66>
 800341a:	f506 7638 	add.w	r6, r6, #736	; 0x2e0
 800341e:	f04f 0804 	mov.w	r8, #4
 8003422:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003426:	3b01      	subs	r3, #1
 8003428:	d504      	bpl.n	8003434 <__sfp+0x28>
 800342a:	e01e      	b.n	800346a <__sfp+0x5e>
 800342c:	1c5a      	adds	r2, r3, #1
 800342e:	f104 0468 	add.w	r4, r4, #104	; 0x68
 8003432:	d01a      	beq.n	800346a <__sfp+0x5e>
 8003434:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003438:	3b01      	subs	r3, #1
 800343a:	2d00      	cmp	r5, #0
 800343c:	d1f6      	bne.n	800342c <__sfp+0x20>
 800343e:	4b1c      	ldr	r3, [pc, #112]	; (80034b0 <__sfp+0xa4>)
 8003440:	6665      	str	r5, [r4, #100]	; 0x64
 8003442:	e9c4 5500 	strd	r5, r5, [r4]
 8003446:	e9c4 5302 	strd	r5, r3, [r4, #8]
 800344a:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800344e:	61a5      	str	r5, [r4, #24]
 8003450:	2208      	movs	r2, #8
 8003452:	4629      	mov	r1, r5
 8003454:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003458:	f7fc ff76 	bl	8000348 <memset>
 800345c:	e9c4 550c 	strd	r5, r5, [r4, #48]	; 0x30
 8003460:	e9c4 5511 	strd	r5, r5, [r4, #68]	; 0x44
 8003464:	4620      	mov	r0, r4
 8003466:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800346a:	6835      	ldr	r5, [r6, #0]
 800346c:	b12d      	cbz	r5, 800347a <__sfp+0x6e>
 800346e:	462e      	mov	r6, r5
 8003470:	e7d7      	b.n	8003422 <__sfp+0x16>
 8003472:	4630      	mov	r0, r6
 8003474:	f7ff ff46 	bl	8003304 <__sinit.part.0>
 8003478:	e7cf      	b.n	800341a <__sfp+0xe>
 800347a:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 800347e:	4638      	mov	r0, r7
 8003480:	f000 fc0e 	bl	8003ca0 <_malloc_r>
 8003484:	4604      	mov	r4, r0
 8003486:	b168      	cbz	r0, 80034a4 <__sfp+0x98>
 8003488:	6005      	str	r5, [r0, #0]
 800348a:	f8c0 8004 	str.w	r8, [r0, #4]
 800348e:	300c      	adds	r0, #12
 8003490:	4629      	mov	r1, r5
 8003492:	60a0      	str	r0, [r4, #8]
 8003494:	4625      	mov	r5, r4
 8003496:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 800349a:	f7fc ff55 	bl	8000348 <memset>
 800349e:	6034      	str	r4, [r6, #0]
 80034a0:	462e      	mov	r6, r5
 80034a2:	e7be      	b.n	8003422 <__sfp+0x16>
 80034a4:	230c      	movs	r3, #12
 80034a6:	6030      	str	r0, [r6, #0]
 80034a8:	603b      	str	r3, [r7, #0]
 80034aa:	e7db      	b.n	8003464 <__sfp+0x58>
 80034ac:	0800cca8 	.word	0x0800cca8
 80034b0:	ffff0001 	.word	0xffff0001

080034b4 <_cleanup>:
 80034b4:	4b02      	ldr	r3, [pc, #8]	; (80034c0 <_cleanup+0xc>)
 80034b6:	4903      	ldr	r1, [pc, #12]	; (80034c4 <_cleanup+0x10>)
 80034b8:	6818      	ldr	r0, [r3, #0]
 80034ba:	f000 bb13 	b.w	8003ae4 <_fwalk_reent>
 80034be:	bf00      	nop
 80034c0:	0800cca8 	.word	0x0800cca8
 80034c4:	080063b1 	.word	0x080063b1

080034c8 <__sinit>:
 80034c8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80034ca:	b103      	cbz	r3, 80034ce <__sinit+0x6>
 80034cc:	4770      	bx	lr
 80034ce:	e719      	b.n	8003304 <__sinit.part.0>

080034d0 <__sfp_lock_acquire>:
 80034d0:	4770      	bx	lr
 80034d2:	bf00      	nop

080034d4 <__sfp_lock_release>:
 80034d4:	4770      	bx	lr
 80034d6:	bf00      	nop

080034d8 <__sinit_lock_acquire>:
 80034d8:	4770      	bx	lr
 80034da:	bf00      	nop

080034dc <__sinit_lock_release>:
 80034dc:	4770      	bx	lr
 80034de:	bf00      	nop

080034e0 <__fp_lock_all>:
 80034e0:	4b02      	ldr	r3, [pc, #8]	; (80034ec <__fp_lock_all+0xc>)
 80034e2:	4903      	ldr	r1, [pc, #12]	; (80034f0 <__fp_lock_all+0x10>)
 80034e4:	6818      	ldr	r0, [r3, #0]
 80034e6:	f000 badd 	b.w	8003aa4 <_fwalk>
 80034ea:	bf00      	nop
 80034ec:	20000008 	.word	0x20000008
 80034f0:	080032f1 	.word	0x080032f1

080034f4 <__fp_unlock_all>:
 80034f4:	4b02      	ldr	r3, [pc, #8]	; (8003500 <__fp_unlock_all+0xc>)
 80034f6:	4903      	ldr	r1, [pc, #12]	; (8003504 <__fp_unlock_all+0x10>)
 80034f8:	6818      	ldr	r0, [r3, #0]
 80034fa:	f000 bad3 	b.w	8003aa4 <_fwalk>
 80034fe:	bf00      	nop
 8003500:	20000008 	.word	0x20000008
 8003504:	08003301 	.word	0x08003301

08003508 <_malloc_trim_r>:
 8003508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800350a:	4f24      	ldr	r7, [pc, #144]	; (800359c <_malloc_trim_r+0x94>)
 800350c:	460c      	mov	r4, r1
 800350e:	4606      	mov	r6, r0
 8003510:	f000 ffdc 	bl	80044cc <__malloc_lock>
 8003514:	68ba      	ldr	r2, [r7, #8]
 8003516:	6855      	ldr	r5, [r2, #4]
 8003518:	f5c4 637e 	rsb	r3, r4, #4064	; 0xfe0
 800351c:	330f      	adds	r3, #15
 800351e:	f025 0503 	bic.w	r5, r5, #3
 8003522:	442b      	add	r3, r5
 8003524:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8003528:	f023 030f 	bic.w	r3, r3, #15
 800352c:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
 8003530:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 8003534:	db07      	blt.n	8003546 <_malloc_trim_r+0x3e>
 8003536:	2100      	movs	r1, #0
 8003538:	4630      	mov	r0, r6
 800353a:	f004 fd05 	bl	8007f48 <_sbrk_r>
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	442b      	add	r3, r5
 8003542:	4298      	cmp	r0, r3
 8003544:	d004      	beq.n	8003550 <_malloc_trim_r+0x48>
 8003546:	4630      	mov	r0, r6
 8003548:	f000 ffc2 	bl	80044d0 <__malloc_unlock>
 800354c:	2000      	movs	r0, #0
 800354e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003550:	4261      	negs	r1, r4
 8003552:	4630      	mov	r0, r6
 8003554:	f004 fcf8 	bl	8007f48 <_sbrk_r>
 8003558:	3001      	adds	r0, #1
 800355a:	d00d      	beq.n	8003578 <_malloc_trim_r+0x70>
 800355c:	4a10      	ldr	r2, [pc, #64]	; (80035a0 <_malloc_trim_r+0x98>)
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	1b2d      	subs	r5, r5, r4
 8003562:	f045 0501 	orr.w	r5, r5, #1
 8003566:	605d      	str	r5, [r3, #4]
 8003568:	6813      	ldr	r3, [r2, #0]
 800356a:	4630      	mov	r0, r6
 800356c:	1b1b      	subs	r3, r3, r4
 800356e:	6013      	str	r3, [r2, #0]
 8003570:	f000 ffae 	bl	80044d0 <__malloc_unlock>
 8003574:	2001      	movs	r0, #1
 8003576:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003578:	2100      	movs	r1, #0
 800357a:	4630      	mov	r0, r6
 800357c:	f004 fce4 	bl	8007f48 <_sbrk_r>
 8003580:	68ba      	ldr	r2, [r7, #8]
 8003582:	1a83      	subs	r3, r0, r2
 8003584:	2b0f      	cmp	r3, #15
 8003586:	ddde      	ble.n	8003546 <_malloc_trim_r+0x3e>
 8003588:	f043 0301 	orr.w	r3, r3, #1
 800358c:	6053      	str	r3, [r2, #4]
 800358e:	4b05      	ldr	r3, [pc, #20]	; (80035a4 <_malloc_trim_r+0x9c>)
 8003590:	4903      	ldr	r1, [pc, #12]	; (80035a0 <_malloc_trim_r+0x98>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	1ac0      	subs	r0, r0, r3
 8003596:	6008      	str	r0, [r1, #0]
 8003598:	e7d5      	b.n	8003546 <_malloc_trim_r+0x3e>
 800359a:	bf00      	nop
 800359c:	20000438 	.word	0x20000438
 80035a0:	20000c44 	.word	0x20000c44
 80035a4:	20000840 	.word	0x20000840

080035a8 <_free_r>:
 80035a8:	2900      	cmp	r1, #0
 80035aa:	d061      	beq.n	8003670 <_free_r+0xc8>
 80035ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035ae:	460c      	mov	r4, r1
 80035b0:	4606      	mov	r6, r0
 80035b2:	f000 ff8b 	bl	80044cc <__malloc_lock>
 80035b6:	f854 2c04 	ldr.w	r2, [r4, #-4]
 80035ba:	4f7b      	ldr	r7, [pc, #492]	; (80037a8 <_free_r+0x200>)
 80035bc:	f1a4 0508 	sub.w	r5, r4, #8
 80035c0:	f022 0101 	bic.w	r1, r2, #1
 80035c4:	eb05 0c01 	add.w	ip, r5, r1
 80035c8:	68b8      	ldr	r0, [r7, #8]
 80035ca:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80035ce:	4560      	cmp	r0, ip
 80035d0:	f023 0303 	bic.w	r3, r3, #3
 80035d4:	f000 808b 	beq.w	80036ee <_free_r+0x146>
 80035d8:	07d2      	lsls	r2, r2, #31
 80035da:	f8cc 3004 	str.w	r3, [ip, #4]
 80035de:	d432      	bmi.n	8003646 <_free_r+0x9e>
 80035e0:	f854 2c08 	ldr.w	r2, [r4, #-8]
 80035e4:	1aad      	subs	r5, r5, r2
 80035e6:	4411      	add	r1, r2
 80035e8:	68aa      	ldr	r2, [r5, #8]
 80035ea:	f107 0008 	add.w	r0, r7, #8
 80035ee:	4282      	cmp	r2, r0
 80035f0:	d06a      	beq.n	80036c8 <_free_r+0x120>
 80035f2:	eb0c 0403 	add.w	r4, ip, r3
 80035f6:	f8d4 e004 	ldr.w	lr, [r4, #4]
 80035fa:	68ec      	ldr	r4, [r5, #12]
 80035fc:	60d4      	str	r4, [r2, #12]
 80035fe:	f01e 0f01 	tst.w	lr, #1
 8003602:	60a2      	str	r2, [r4, #8]
 8003604:	f000 8097 	beq.w	8003736 <_free_r+0x18e>
 8003608:	f041 0301 	orr.w	r3, r1, #1
 800360c:	606b      	str	r3, [r5, #4]
 800360e:	f8cc 1000 	str.w	r1, [ip]
 8003612:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8003616:	d235      	bcs.n	8003684 <_free_r+0xdc>
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	08cb      	lsrs	r3, r1, #3
 800361c:	0948      	lsrs	r0, r1, #5
 800361e:	2101      	movs	r1, #1
 8003620:	3301      	adds	r3, #1
 8003622:	4081      	lsls	r1, r0
 8003624:	4311      	orrs	r1, r2
 8003626:	6079      	str	r1, [r7, #4]
 8003628:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
 800362c:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
 8003630:	3a08      	subs	r2, #8
 8003632:	e9c5 1202 	strd	r1, r2, [r5, #8]
 8003636:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
 800363a:	60cd      	str	r5, [r1, #12]
 800363c:	4630      	mov	r0, r6
 800363e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003642:	f000 bf45 	b.w	80044d0 <__malloc_unlock>
 8003646:	eb0c 0203 	add.w	r2, ip, r3
 800364a:	6852      	ldr	r2, [r2, #4]
 800364c:	07d0      	lsls	r0, r2, #31
 800364e:	d410      	bmi.n	8003672 <_free_r+0xca>
 8003650:	4419      	add	r1, r3
 8003652:	f107 0008 	add.w	r0, r7, #8
 8003656:	f8dc 3008 	ldr.w	r3, [ip, #8]
 800365a:	4283      	cmp	r3, r0
 800365c:	d073      	beq.n	8003746 <_free_r+0x19e>
 800365e:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8003662:	60da      	str	r2, [r3, #12]
 8003664:	6093      	str	r3, [r2, #8]
 8003666:	f041 0301 	orr.w	r3, r1, #1
 800366a:	606b      	str	r3, [r5, #4]
 800366c:	5069      	str	r1, [r5, r1]
 800366e:	e7d0      	b.n	8003612 <_free_r+0x6a>
 8003670:	4770      	bx	lr
 8003672:	f041 0301 	orr.w	r3, r1, #1
 8003676:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800367a:	f844 3c04 	str.w	r3, [r4, #-4]
 800367e:	f8cc 1000 	str.w	r1, [ip]
 8003682:	d3c9      	bcc.n	8003618 <_free_r+0x70>
 8003684:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
 8003688:	ea4f 2351 	mov.w	r3, r1, lsr #9
 800368c:	d248      	bcs.n	8003720 <_free_r+0x178>
 800368e:	098b      	lsrs	r3, r1, #6
 8003690:	f103 0039 	add.w	r0, r3, #57	; 0x39
 8003694:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8003698:	00c3      	lsls	r3, r0, #3
 800369a:	18f8      	adds	r0, r7, r3
 800369c:	58fb      	ldr	r3, [r7, r3]
 800369e:	3808      	subs	r0, #8
 80036a0:	4298      	cmp	r0, r3
 80036a2:	d059      	beq.n	8003758 <_free_r+0x1b0>
 80036a4:	685a      	ldr	r2, [r3, #4]
 80036a6:	f022 0203 	bic.w	r2, r2, #3
 80036aa:	428a      	cmp	r2, r1
 80036ac:	d902      	bls.n	80036b4 <_free_r+0x10c>
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	4298      	cmp	r0, r3
 80036b2:	d1f7      	bne.n	80036a4 <_free_r+0xfc>
 80036b4:	68d8      	ldr	r0, [r3, #12]
 80036b6:	e9c5 3002 	strd	r3, r0, [r5, #8]
 80036ba:	6085      	str	r5, [r0, #8]
 80036bc:	60dd      	str	r5, [r3, #12]
 80036be:	4630      	mov	r0, r6
 80036c0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80036c4:	f000 bf04 	b.w	80044d0 <__malloc_unlock>
 80036c8:	eb0c 0203 	add.w	r2, ip, r3
 80036cc:	6852      	ldr	r2, [r2, #4]
 80036ce:	07d2      	lsls	r2, r2, #31
 80036d0:	d463      	bmi.n	800379a <_free_r+0x1f2>
 80036d2:	440b      	add	r3, r1
 80036d4:	e9dc 1202 	ldrd	r1, r2, [ip, #8]
 80036d8:	60ca      	str	r2, [r1, #12]
 80036da:	6091      	str	r1, [r2, #8]
 80036dc:	f043 0201 	orr.w	r2, r3, #1
 80036e0:	606a      	str	r2, [r5, #4]
 80036e2:	4630      	mov	r0, r6
 80036e4:	50eb      	str	r3, [r5, r3]
 80036e6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80036ea:	f000 bef1 	b.w	80044d0 <__malloc_unlock>
 80036ee:	440b      	add	r3, r1
 80036f0:	07d1      	lsls	r1, r2, #31
 80036f2:	d407      	bmi.n	8003704 <_free_r+0x15c>
 80036f4:	f854 2c08 	ldr.w	r2, [r4, #-8]
 80036f8:	1aad      	subs	r5, r5, r2
 80036fa:	4413      	add	r3, r2
 80036fc:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
 8003700:	60ca      	str	r2, [r1, #12]
 8003702:	6091      	str	r1, [r2, #8]
 8003704:	f043 0201 	orr.w	r2, r3, #1
 8003708:	606a      	str	r2, [r5, #4]
 800370a:	4a28      	ldr	r2, [pc, #160]	; (80037ac <_free_r+0x204>)
 800370c:	60bd      	str	r5, [r7, #8]
 800370e:	6812      	ldr	r2, [r2, #0]
 8003710:	429a      	cmp	r2, r3
 8003712:	d893      	bhi.n	800363c <_free_r+0x94>
 8003714:	4b26      	ldr	r3, [pc, #152]	; (80037b0 <_free_r+0x208>)
 8003716:	4630      	mov	r0, r6
 8003718:	6819      	ldr	r1, [r3, #0]
 800371a:	f7ff fef5 	bl	8003508 <_malloc_trim_r>
 800371e:	e78d      	b.n	800363c <_free_r+0x94>
 8003720:	2b14      	cmp	r3, #20
 8003722:	d90a      	bls.n	800373a <_free_r+0x192>
 8003724:	2b54      	cmp	r3, #84	; 0x54
 8003726:	d81f      	bhi.n	8003768 <_free_r+0x1c0>
 8003728:	0b0b      	lsrs	r3, r1, #12
 800372a:	f103 006f 	add.w	r0, r3, #111	; 0x6f
 800372e:	f103 026e 	add.w	r2, r3, #110	; 0x6e
 8003732:	00c3      	lsls	r3, r0, #3
 8003734:	e7b1      	b.n	800369a <_free_r+0xf2>
 8003736:	4419      	add	r1, r3
 8003738:	e78d      	b.n	8003656 <_free_r+0xae>
 800373a:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 800373e:	f103 025b 	add.w	r2, r3, #91	; 0x5b
 8003742:	00c3      	lsls	r3, r0, #3
 8003744:	e7a9      	b.n	800369a <_free_r+0xf2>
 8003746:	f041 0301 	orr.w	r3, r1, #1
 800374a:	e9c7 5504 	strd	r5, r5, [r7, #16]
 800374e:	e9c5 0002 	strd	r0, r0, [r5, #8]
 8003752:	606b      	str	r3, [r5, #4]
 8003754:	5069      	str	r1, [r5, r1]
 8003756:	e771      	b.n	800363c <_free_r+0x94>
 8003758:	6879      	ldr	r1, [r7, #4]
 800375a:	1092      	asrs	r2, r2, #2
 800375c:	2401      	movs	r4, #1
 800375e:	fa04 f202 	lsl.w	r2, r4, r2
 8003762:	430a      	orrs	r2, r1
 8003764:	607a      	str	r2, [r7, #4]
 8003766:	e7a6      	b.n	80036b6 <_free_r+0x10e>
 8003768:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800376c:	d806      	bhi.n	800377c <_free_r+0x1d4>
 800376e:	0bcb      	lsrs	r3, r1, #15
 8003770:	f103 0078 	add.w	r0, r3, #120	; 0x78
 8003774:	f103 0277 	add.w	r2, r3, #119	; 0x77
 8003778:	00c3      	lsls	r3, r0, #3
 800377a:	e78e      	b.n	800369a <_free_r+0xf2>
 800377c:	f240 5254 	movw	r2, #1364	; 0x554
 8003780:	4293      	cmp	r3, r2
 8003782:	d806      	bhi.n	8003792 <_free_r+0x1ea>
 8003784:	0c8b      	lsrs	r3, r1, #18
 8003786:	f103 007d 	add.w	r0, r3, #125	; 0x7d
 800378a:	f103 027c 	add.w	r2, r3, #124	; 0x7c
 800378e:	00c3      	lsls	r3, r0, #3
 8003790:	e783      	b.n	800369a <_free_r+0xf2>
 8003792:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 8003796:	227e      	movs	r2, #126	; 0x7e
 8003798:	e77f      	b.n	800369a <_free_r+0xf2>
 800379a:	f041 0301 	orr.w	r3, r1, #1
 800379e:	606b      	str	r3, [r5, #4]
 80037a0:	f8cc 1000 	str.w	r1, [ip]
 80037a4:	e74a      	b.n	800363c <_free_r+0x94>
 80037a6:	bf00      	nop
 80037a8:	20000438 	.word	0x20000438
 80037ac:	20000844 	.word	0x20000844
 80037b0:	20000c40 	.word	0x20000c40

080037b4 <__sfvwrite_r>:
 80037b4:	6893      	ldr	r3, [r2, #8]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	f000 8085 	beq.w	80038c6 <__sfvwrite_r+0x112>
 80037bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037c0:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 80037c4:	460c      	mov	r4, r1
 80037c6:	0719      	lsls	r1, r3, #28
 80037c8:	4680      	mov	r8, r0
 80037ca:	b083      	sub	sp, #12
 80037cc:	4617      	mov	r7, r2
 80037ce:	b298      	uxth	r0, r3
 80037d0:	d525      	bpl.n	800381e <__sfvwrite_r+0x6a>
 80037d2:	6923      	ldr	r3, [r4, #16]
 80037d4:	b31b      	cbz	r3, 800381e <__sfvwrite_r+0x6a>
 80037d6:	f010 0302 	ands.w	r3, r0, #2
 80037da:	683d      	ldr	r5, [r7, #0]
 80037dc:	d02d      	beq.n	800383a <__sfvwrite_r+0x86>
 80037de:	f04f 0a00 	mov.w	sl, #0
 80037e2:	f8df b2bc 	ldr.w	fp, [pc, #700]	; 8003aa0 <__sfvwrite_r+0x2ec>
 80037e6:	4656      	mov	r6, sl
 80037e8:	46b9      	mov	r9, r7
 80037ea:	455e      	cmp	r6, fp
 80037ec:	4633      	mov	r3, r6
 80037ee:	4652      	mov	r2, sl
 80037f0:	bf28      	it	cs
 80037f2:	465b      	movcs	r3, fp
 80037f4:	4640      	mov	r0, r8
 80037f6:	2e00      	cmp	r6, #0
 80037f8:	d052      	beq.n	80038a0 <__sfvwrite_r+0xec>
 80037fa:	69e1      	ldr	r1, [r4, #28]
 80037fc:	6a67      	ldr	r7, [r4, #36]	; 0x24
 80037fe:	47b8      	blx	r7
 8003800:	2800      	cmp	r0, #0
 8003802:	dd56      	ble.n	80038b2 <__sfvwrite_r+0xfe>
 8003804:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8003808:	1a1b      	subs	r3, r3, r0
 800380a:	4482      	add	sl, r0
 800380c:	1a36      	subs	r6, r6, r0
 800380e:	f8c9 3008 	str.w	r3, [r9, #8]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d1e9      	bne.n	80037ea <__sfvwrite_r+0x36>
 8003816:	2000      	movs	r0, #0
 8003818:	b003      	add	sp, #12
 800381a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800381e:	4621      	mov	r1, r4
 8003820:	4640      	mov	r0, r8
 8003822:	f7fe fbbf 	bl	8001fa4 <__swsetup_r>
 8003826:	2800      	cmp	r0, #0
 8003828:	f040 8136 	bne.w	8003a98 <__sfvwrite_r+0x2e4>
 800382c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003830:	683d      	ldr	r5, [r7, #0]
 8003832:	b298      	uxth	r0, r3
 8003834:	f010 0302 	ands.w	r3, r0, #2
 8003838:	d1d1      	bne.n	80037de <__sfvwrite_r+0x2a>
 800383a:	f010 0901 	ands.w	r9, r0, #1
 800383e:	d144      	bne.n	80038ca <__sfvwrite_r+0x116>
 8003840:	464e      	mov	r6, r9
 8003842:	9700      	str	r7, [sp, #0]
 8003844:	b346      	cbz	r6, 8003898 <__sfvwrite_r+0xe4>
 8003846:	0582      	lsls	r2, r0, #22
 8003848:	f8d4 b008 	ldr.w	fp, [r4, #8]
 800384c:	f140 8083 	bpl.w	8003956 <__sfvwrite_r+0x1a2>
 8003850:	45b3      	cmp	fp, r6
 8003852:	465a      	mov	r2, fp
 8003854:	f200 80b2 	bhi.w	80039bc <__sfvwrite_r+0x208>
 8003858:	f410 6f90 	tst.w	r0, #1152	; 0x480
 800385c:	f040 80bf 	bne.w	80039de <__sfvwrite_r+0x22a>
 8003860:	6820      	ldr	r0, [r4, #0]
 8003862:	9201      	str	r2, [sp, #4]
 8003864:	4649      	mov	r1, r9
 8003866:	f000 fdb5 	bl	80043d4 <memmove>
 800386a:	68a3      	ldr	r3, [r4, #8]
 800386c:	9a01      	ldr	r2, [sp, #4]
 800386e:	eba3 010b 	sub.w	r1, r3, fp
 8003872:	6823      	ldr	r3, [r4, #0]
 8003874:	60a1      	str	r1, [r4, #8]
 8003876:	4413      	add	r3, r2
 8003878:	46b2      	mov	sl, r6
 800387a:	6023      	str	r3, [r4, #0]
 800387c:	2600      	movs	r6, #0
 800387e:	9b00      	ldr	r3, [sp, #0]
 8003880:	6898      	ldr	r0, [r3, #8]
 8003882:	eba0 000a 	sub.w	r0, r0, sl
 8003886:	44d1      	add	r9, sl
 8003888:	6098      	str	r0, [r3, #8]
 800388a:	2800      	cmp	r0, #0
 800388c:	d0c3      	beq.n	8003816 <__sfvwrite_r+0x62>
 800388e:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 8003892:	b280      	uxth	r0, r0
 8003894:	2e00      	cmp	r6, #0
 8003896:	d1d6      	bne.n	8003846 <__sfvwrite_r+0x92>
 8003898:	e9d5 9600 	ldrd	r9, r6, [r5]
 800389c:	3508      	adds	r5, #8
 800389e:	e7d1      	b.n	8003844 <__sfvwrite_r+0x90>
 80038a0:	e9d5 a600 	ldrd	sl, r6, [r5]
 80038a4:	3508      	adds	r5, #8
 80038a6:	e7a0      	b.n	80037ea <__sfvwrite_r+0x36>
 80038a8:	4621      	mov	r1, r4
 80038aa:	4640      	mov	r0, r8
 80038ac:	f7ff fce2 	bl	8003274 <_fflush_r>
 80038b0:	b380      	cbz	r0, 8003914 <__sfvwrite_r+0x160>
 80038b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80038b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80038be:	81a3      	strh	r3, [r4, #12]
 80038c0:	b003      	add	sp, #12
 80038c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038c6:	2000      	movs	r0, #0
 80038c8:	4770      	bx	lr
 80038ca:	461e      	mov	r6, r3
 80038cc:	46aa      	mov	sl, r5
 80038ce:	4699      	mov	r9, r3
 80038d0:	4618      	mov	r0, r3
 80038d2:	461d      	mov	r5, r3
 80038d4:	9700      	str	r7, [sp, #0]
 80038d6:	b356      	cbz	r6, 800392e <__sfvwrite_r+0x17a>
 80038d8:	b388      	cbz	r0, 800393e <__sfvwrite_r+0x18a>
 80038da:	464a      	mov	r2, r9
 80038dc:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
 80038e0:	6820      	ldr	r0, [r4, #0]
 80038e2:	42b2      	cmp	r2, r6
 80038e4:	bf28      	it	cs
 80038e6:	4632      	movcs	r2, r6
 80038e8:	4288      	cmp	r0, r1
 80038ea:	d905      	bls.n	80038f8 <__sfvwrite_r+0x144>
 80038ec:	68a1      	ldr	r1, [r4, #8]
 80038ee:	eb03 0b01 	add.w	fp, r3, r1
 80038f2:	455a      	cmp	r2, fp
 80038f4:	f300 80a6 	bgt.w	8003a44 <__sfvwrite_r+0x290>
 80038f8:	4293      	cmp	r3, r2
 80038fa:	dc63      	bgt.n	80039c4 <__sfvwrite_r+0x210>
 80038fc:	69e1      	ldr	r1, [r4, #28]
 80038fe:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8003900:	462a      	mov	r2, r5
 8003902:	4640      	mov	r0, r8
 8003904:	47b8      	blx	r7
 8003906:	f1b0 0b00 	subs.w	fp, r0, #0
 800390a:	ddd2      	ble.n	80038b2 <__sfvwrite_r+0xfe>
 800390c:	ebb9 090b 	subs.w	r9, r9, fp
 8003910:	d0ca      	beq.n	80038a8 <__sfvwrite_r+0xf4>
 8003912:	2001      	movs	r0, #1
 8003914:	9a00      	ldr	r2, [sp, #0]
 8003916:	6893      	ldr	r3, [r2, #8]
 8003918:	eba3 030b 	sub.w	r3, r3, fp
 800391c:	445d      	add	r5, fp
 800391e:	eba6 060b 	sub.w	r6, r6, fp
 8003922:	6093      	str	r3, [r2, #8]
 8003924:	2b00      	cmp	r3, #0
 8003926:	f43f af76 	beq.w	8003816 <__sfvwrite_r+0x62>
 800392a:	2e00      	cmp	r6, #0
 800392c:	d1d4      	bne.n	80038d8 <__sfvwrite_r+0x124>
 800392e:	f10a 0308 	add.w	r3, sl, #8
 8003932:	e953 5602 	ldrd	r5, r6, [r3, #-8]
 8003936:	469a      	mov	sl, r3
 8003938:	3308      	adds	r3, #8
 800393a:	2e00      	cmp	r6, #0
 800393c:	d0f9      	beq.n	8003932 <__sfvwrite_r+0x17e>
 800393e:	4632      	mov	r2, r6
 8003940:	210a      	movs	r1, #10
 8003942:	4628      	mov	r0, r5
 8003944:	f000 fc5c 	bl	8004200 <memchr>
 8003948:	2800      	cmp	r0, #0
 800394a:	f000 809c 	beq.w	8003a86 <__sfvwrite_r+0x2d2>
 800394e:	3001      	adds	r0, #1
 8003950:	eba0 0905 	sub.w	r9, r0, r5
 8003954:	e7c1      	b.n	80038da <__sfvwrite_r+0x126>
 8003956:	6820      	ldr	r0, [r4, #0]
 8003958:	6923      	ldr	r3, [r4, #16]
 800395a:	4298      	cmp	r0, r3
 800395c:	d816      	bhi.n	800398c <__sfvwrite_r+0x1d8>
 800395e:	6963      	ldr	r3, [r4, #20]
 8003960:	42b3      	cmp	r3, r6
 8003962:	d813      	bhi.n	800398c <__sfvwrite_r+0x1d8>
 8003964:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003968:	42b2      	cmp	r2, r6
 800396a:	bf28      	it	cs
 800396c:	4632      	movcs	r2, r6
 800396e:	69e1      	ldr	r1, [r4, #28]
 8003970:	fb92 f2f3 	sdiv	r2, r2, r3
 8003974:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8003976:	fb02 f303 	mul.w	r3, r2, r3
 800397a:	4640      	mov	r0, r8
 800397c:	464a      	mov	r2, r9
 800397e:	47b8      	blx	r7
 8003980:	f1b0 0a00 	subs.w	sl, r0, #0
 8003984:	dd95      	ble.n	80038b2 <__sfvwrite_r+0xfe>
 8003986:	eba6 060a 	sub.w	r6, r6, sl
 800398a:	e778      	b.n	800387e <__sfvwrite_r+0xca>
 800398c:	45b3      	cmp	fp, r6
 800398e:	46da      	mov	sl, fp
 8003990:	bf28      	it	cs
 8003992:	46b2      	movcs	sl, r6
 8003994:	4652      	mov	r2, sl
 8003996:	4649      	mov	r1, r9
 8003998:	f000 fd1c 	bl	80043d4 <memmove>
 800399c:	68a3      	ldr	r3, [r4, #8]
 800399e:	6822      	ldr	r2, [r4, #0]
 80039a0:	eba3 030a 	sub.w	r3, r3, sl
 80039a4:	4452      	add	r2, sl
 80039a6:	60a3      	str	r3, [r4, #8]
 80039a8:	6022      	str	r2, [r4, #0]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d1eb      	bne.n	8003986 <__sfvwrite_r+0x1d2>
 80039ae:	4621      	mov	r1, r4
 80039b0:	4640      	mov	r0, r8
 80039b2:	f7ff fc5f 	bl	8003274 <_fflush_r>
 80039b6:	2800      	cmp	r0, #0
 80039b8:	d0e5      	beq.n	8003986 <__sfvwrite_r+0x1d2>
 80039ba:	e77a      	b.n	80038b2 <__sfvwrite_r+0xfe>
 80039bc:	6820      	ldr	r0, [r4, #0]
 80039be:	46b3      	mov	fp, r6
 80039c0:	4632      	mov	r2, r6
 80039c2:	e74e      	b.n	8003862 <__sfvwrite_r+0xae>
 80039c4:	4629      	mov	r1, r5
 80039c6:	9201      	str	r2, [sp, #4]
 80039c8:	f000 fd04 	bl	80043d4 <memmove>
 80039cc:	9a01      	ldr	r2, [sp, #4]
 80039ce:	68a3      	ldr	r3, [r4, #8]
 80039d0:	1a9b      	subs	r3, r3, r2
 80039d2:	60a3      	str	r3, [r4, #8]
 80039d4:	6823      	ldr	r3, [r4, #0]
 80039d6:	4413      	add	r3, r2
 80039d8:	6023      	str	r3, [r4, #0]
 80039da:	4693      	mov	fp, r2
 80039dc:	e796      	b.n	800390c <__sfvwrite_r+0x158>
 80039de:	6823      	ldr	r3, [r4, #0]
 80039e0:	6921      	ldr	r1, [r4, #16]
 80039e2:	eba3 0b01 	sub.w	fp, r3, r1
 80039e6:	6963      	ldr	r3, [r4, #20]
 80039e8:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
 80039ec:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
 80039f0:	f10b 0301 	add.w	r3, fp, #1
 80039f4:	ea4f 0a6a 	mov.w	sl, sl, asr #1
 80039f8:	4433      	add	r3, r6
 80039fa:	4553      	cmp	r3, sl
 80039fc:	4652      	mov	r2, sl
 80039fe:	bf84      	itt	hi
 8003a00:	469a      	movhi	sl, r3
 8003a02:	4652      	movhi	r2, sl
 8003a04:	0543      	lsls	r3, r0, #21
 8003a06:	d52c      	bpl.n	8003a62 <__sfvwrite_r+0x2ae>
 8003a08:	4611      	mov	r1, r2
 8003a0a:	4640      	mov	r0, r8
 8003a0c:	f000 f948 	bl	8003ca0 <_malloc_r>
 8003a10:	2800      	cmp	r0, #0
 8003a12:	d03b      	beq.n	8003a8c <__sfvwrite_r+0x2d8>
 8003a14:	465a      	mov	r2, fp
 8003a16:	6921      	ldr	r1, [r4, #16]
 8003a18:	9001      	str	r0, [sp, #4]
 8003a1a:	f000 fc41 	bl	80042a0 <memcpy>
 8003a1e:	89a2      	ldrh	r2, [r4, #12]
 8003a20:	9b01      	ldr	r3, [sp, #4]
 8003a22:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8003a26:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003a2a:	81a2      	strh	r2, [r4, #12]
 8003a2c:	eb03 000b 	add.w	r0, r3, fp
 8003a30:	6123      	str	r3, [r4, #16]
 8003a32:	ebaa 030b 	sub.w	r3, sl, fp
 8003a36:	f8c4 a014 	str.w	sl, [r4, #20]
 8003a3a:	60a3      	str	r3, [r4, #8]
 8003a3c:	6020      	str	r0, [r4, #0]
 8003a3e:	46b3      	mov	fp, r6
 8003a40:	4632      	mov	r2, r6
 8003a42:	e70e      	b.n	8003862 <__sfvwrite_r+0xae>
 8003a44:	4629      	mov	r1, r5
 8003a46:	465a      	mov	r2, fp
 8003a48:	f000 fcc4 	bl	80043d4 <memmove>
 8003a4c:	6823      	ldr	r3, [r4, #0]
 8003a4e:	445b      	add	r3, fp
 8003a50:	6023      	str	r3, [r4, #0]
 8003a52:	4621      	mov	r1, r4
 8003a54:	4640      	mov	r0, r8
 8003a56:	f7ff fc0d 	bl	8003274 <_fflush_r>
 8003a5a:	2800      	cmp	r0, #0
 8003a5c:	f43f af56 	beq.w	800390c <__sfvwrite_r+0x158>
 8003a60:	e727      	b.n	80038b2 <__sfvwrite_r+0xfe>
 8003a62:	4640      	mov	r0, r8
 8003a64:	f001 fae2 	bl	800502c <_realloc_r>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2800      	cmp	r0, #0
 8003a6c:	d1de      	bne.n	8003a2c <__sfvwrite_r+0x278>
 8003a6e:	6921      	ldr	r1, [r4, #16]
 8003a70:	4640      	mov	r0, r8
 8003a72:	f7ff fd99 	bl	80035a8 <_free_r>
 8003a76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a7a:	220c      	movs	r2, #12
 8003a7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a80:	f8c8 2000 	str.w	r2, [r8]
 8003a84:	e717      	b.n	80038b6 <__sfvwrite_r+0x102>
 8003a86:	1c72      	adds	r2, r6, #1
 8003a88:	4691      	mov	r9, r2
 8003a8a:	e727      	b.n	80038dc <__sfvwrite_r+0x128>
 8003a8c:	220c      	movs	r2, #12
 8003a8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a92:	f8c8 2000 	str.w	r2, [r8]
 8003a96:	e70e      	b.n	80038b6 <__sfvwrite_r+0x102>
 8003a98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a9c:	e6bc      	b.n	8003818 <__sfvwrite_r+0x64>
 8003a9e:	bf00      	nop
 8003aa0:	7ffffc00 	.word	0x7ffffc00

08003aa4 <_fwalk>:
 8003aa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003aa8:	4688      	mov	r8, r1
 8003aaa:	f500 7738 	add.w	r7, r0, #736	; 0x2e0
 8003aae:	2600      	movs	r6, #0
 8003ab0:	e9d7 5401 	ldrd	r5, r4, [r7, #4]
 8003ab4:	3d01      	subs	r5, #1
 8003ab6:	d40f      	bmi.n	8003ad8 <_fwalk+0x34>
 8003ab8:	89a3      	ldrh	r3, [r4, #12]
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8003ac0:	d906      	bls.n	8003ad0 <_fwalk+0x2c>
 8003ac2:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8003ac6:	3301      	adds	r3, #1
 8003ac8:	4620      	mov	r0, r4
 8003aca:	d001      	beq.n	8003ad0 <_fwalk+0x2c>
 8003acc:	47c0      	blx	r8
 8003ace:	4306      	orrs	r6, r0
 8003ad0:	1c6b      	adds	r3, r5, #1
 8003ad2:	f104 0468 	add.w	r4, r4, #104	; 0x68
 8003ad6:	d1ef      	bne.n	8003ab8 <_fwalk+0x14>
 8003ad8:	683f      	ldr	r7, [r7, #0]
 8003ada:	2f00      	cmp	r7, #0
 8003adc:	d1e8      	bne.n	8003ab0 <_fwalk+0xc>
 8003ade:	4630      	mov	r0, r6
 8003ae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003ae4 <_fwalk_reent>:
 8003ae4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ae8:	4607      	mov	r7, r0
 8003aea:	4688      	mov	r8, r1
 8003aec:	f500 7638 	add.w	r6, r0, #736	; 0x2e0
 8003af0:	f04f 0900 	mov.w	r9, #0
 8003af4:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
 8003af8:	3d01      	subs	r5, #1
 8003afa:	d411      	bmi.n	8003b20 <_fwalk_reent+0x3c>
 8003afc:	89a3      	ldrh	r3, [r4, #12]
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8003b04:	d908      	bls.n	8003b18 <_fwalk_reent+0x34>
 8003b06:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8003b0a:	3301      	adds	r3, #1
 8003b0c:	4621      	mov	r1, r4
 8003b0e:	d003      	beq.n	8003b18 <_fwalk_reent+0x34>
 8003b10:	4638      	mov	r0, r7
 8003b12:	47c0      	blx	r8
 8003b14:	ea49 0900 	orr.w	r9, r9, r0
 8003b18:	1c6b      	adds	r3, r5, #1
 8003b1a:	f104 0468 	add.w	r4, r4, #104	; 0x68
 8003b1e:	d1ed      	bne.n	8003afc <_fwalk_reent+0x18>
 8003b20:	6836      	ldr	r6, [r6, #0]
 8003b22:	2e00      	cmp	r6, #0
 8003b24:	d1e6      	bne.n	8003af4 <_fwalk_reent+0x10>
 8003b26:	4648      	mov	r0, r9
 8003b28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08003b2c <__localeconv_l>:
 8003b2c:	30f0      	adds	r0, #240	; 0xf0
 8003b2e:	4770      	bx	lr

08003b30 <_localeconv_r>:
 8003b30:	4800      	ldr	r0, [pc, #0]	; (8003b34 <_localeconv_r+0x4>)
 8003b32:	4770      	bx	lr
 8003b34:	20000938 	.word	0x20000938

08003b38 <localeconv>:
 8003b38:	4800      	ldr	r0, [pc, #0]	; (8003b3c <localeconv+0x4>)
 8003b3a:	4770      	bx	lr
 8003b3c:	20000938 	.word	0x20000938

08003b40 <__smakebuf_r>:
 8003b40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b44:	898b      	ldrh	r3, [r1, #12]
 8003b46:	460c      	mov	r4, r1
 8003b48:	0799      	lsls	r1, r3, #30
 8003b4a:	b096      	sub	sp, #88	; 0x58
 8003b4c:	d508      	bpl.n	8003b60 <__smakebuf_r+0x20>
 8003b4e:	f104 0343 	add.w	r3, r4, #67	; 0x43
 8003b52:	2201      	movs	r2, #1
 8003b54:	e9c4 3204 	strd	r3, r2, [r4, #16]
 8003b58:	6023      	str	r3, [r4, #0]
 8003b5a:	b016      	add	sp, #88	; 0x58
 8003b5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003b64:	2900      	cmp	r1, #0
 8003b66:	4606      	mov	r6, r0
 8003b68:	db27      	blt.n	8003bba <__smakebuf_r+0x7a>
 8003b6a:	466a      	mov	r2, sp
 8003b6c:	f004 fa07 	bl	8007f7e <_fstat_r>
 8003b70:	2800      	cmp	r0, #0
 8003b72:	db21      	blt.n	8003bb8 <__smakebuf_r+0x78>
 8003b74:	9d01      	ldr	r5, [sp, #4]
 8003b76:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
 8003b7a:	f5a5 5500 	sub.w	r5, r5, #8192	; 0x2000
 8003b7e:	fab5 f585 	clz	r5, r5
 8003b82:	f44f 6880 	mov.w	r8, #1024	; 0x400
 8003b86:	096d      	lsrs	r5, r5, #5
 8003b88:	f44f 6700 	mov.w	r7, #2048	; 0x800
 8003b8c:	4641      	mov	r1, r8
 8003b8e:	4630      	mov	r0, r6
 8003b90:	f000 f886 	bl	8003ca0 <_malloc_r>
 8003b94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b98:	b1f0      	cbz	r0, 8003bd8 <__smakebuf_r+0x98>
 8003b9a:	4a20      	ldr	r2, [pc, #128]	; (8003c1c <__smakebuf_r+0xdc>)
 8003b9c:	63f2      	str	r2, [r6, #60]	; 0x3c
 8003b9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ba2:	f8c4 8014 	str.w	r8, [r4, #20]
 8003ba6:	81a3      	strh	r3, [r4, #12]
 8003ba8:	6020      	str	r0, [r4, #0]
 8003baa:	6120      	str	r0, [r4, #16]
 8003bac:	bb35      	cbnz	r5, 8003bfc <__smakebuf_r+0xbc>
 8003bae:	433b      	orrs	r3, r7
 8003bb0:	81a3      	strh	r3, [r4, #12]
 8003bb2:	b016      	add	sp, #88	; 0x58
 8003bb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003bb8:	89a3      	ldrh	r3, [r4, #12]
 8003bba:	f013 0580 	ands.w	r5, r3, #128	; 0x80
 8003bbe:	d019      	beq.n	8003bf4 <__smakebuf_r+0xb4>
 8003bc0:	f04f 0840 	mov.w	r8, #64	; 0x40
 8003bc4:	4641      	mov	r1, r8
 8003bc6:	4630      	mov	r0, r6
 8003bc8:	f000 f86a 	bl	8003ca0 <_malloc_r>
 8003bcc:	2500      	movs	r5, #0
 8003bce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003bd2:	462f      	mov	r7, r5
 8003bd4:	2800      	cmp	r0, #0
 8003bd6:	d1e0      	bne.n	8003b9a <__smakebuf_r+0x5a>
 8003bd8:	059a      	lsls	r2, r3, #22
 8003bda:	d4be      	bmi.n	8003b5a <__smakebuf_r+0x1a>
 8003bdc:	f023 0303 	bic.w	r3, r3, #3
 8003be0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003be4:	f043 0302 	orr.w	r3, r3, #2
 8003be8:	2101      	movs	r1, #1
 8003bea:	e9c4 2104 	strd	r2, r1, [r4, #16]
 8003bee:	81a3      	strh	r3, [r4, #12]
 8003bf0:	6022      	str	r2, [r4, #0]
 8003bf2:	e7b2      	b.n	8003b5a <__smakebuf_r+0x1a>
 8003bf4:	f44f 6880 	mov.w	r8, #1024	; 0x400
 8003bf8:	462f      	mov	r7, r5
 8003bfa:	e7c7      	b.n	8003b8c <__smakebuf_r+0x4c>
 8003bfc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003c00:	4630      	mov	r0, r6
 8003c02:	f004 f9c1 	bl	8007f88 <_isatty_r>
 8003c06:	b910      	cbnz	r0, 8003c0e <__smakebuf_r+0xce>
 8003c08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c0c:	e7cf      	b.n	8003bae <__smakebuf_r+0x6e>
 8003c0e:	89a3      	ldrh	r3, [r4, #12]
 8003c10:	f023 0303 	bic.w	r3, r3, #3
 8003c14:	f043 0301 	orr.w	r3, r3, #1
 8003c18:	b21b      	sxth	r3, r3
 8003c1a:	e7c8      	b.n	8003bae <__smakebuf_r+0x6e>
 8003c1c:	080032f5 	.word	0x080032f5

08003c20 <__swhatbuf_r>:
 8003c20:	b570      	push	{r4, r5, r6, lr}
 8003c22:	460c      	mov	r4, r1
 8003c24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c28:	2900      	cmp	r1, #0
 8003c2a:	b096      	sub	sp, #88	; 0x58
 8003c2c:	4615      	mov	r5, r2
 8003c2e:	461e      	mov	r6, r3
 8003c30:	db14      	blt.n	8003c5c <__swhatbuf_r+0x3c>
 8003c32:	466a      	mov	r2, sp
 8003c34:	f004 f9a3 	bl	8007f7e <_fstat_r>
 8003c38:	2800      	cmp	r0, #0
 8003c3a:	db0f      	blt.n	8003c5c <__swhatbuf_r+0x3c>
 8003c3c:	9a01      	ldr	r2, [sp, #4]
 8003c3e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003c42:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
 8003c46:	fab2 f282 	clz	r2, r2
 8003c4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c4e:	0952      	lsrs	r2, r2, #5
 8003c50:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003c54:	6032      	str	r2, [r6, #0]
 8003c56:	602b      	str	r3, [r5, #0]
 8003c58:	b016      	add	sp, #88	; 0x58
 8003c5a:	bd70      	pop	{r4, r5, r6, pc}
 8003c5c:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8003c60:	2300      	movs	r3, #0
 8003c62:	f011 0080 	ands.w	r0, r1, #128	; 0x80
 8003c66:	6033      	str	r3, [r6, #0]
 8003c68:	d004      	beq.n	8003c74 <__swhatbuf_r+0x54>
 8003c6a:	2240      	movs	r2, #64	; 0x40
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	602a      	str	r2, [r5, #0]
 8003c70:	b016      	add	sp, #88	; 0x58
 8003c72:	bd70      	pop	{r4, r5, r6, pc}
 8003c74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c78:	602b      	str	r3, [r5, #0]
 8003c7a:	b016      	add	sp, #88	; 0x58
 8003c7c:	bd70      	pop	{r4, r5, r6, pc}
 8003c7e:	bf00      	nop

08003c80 <malloc>:
 8003c80:	4b02      	ldr	r3, [pc, #8]	; (8003c8c <malloc+0xc>)
 8003c82:	4601      	mov	r1, r0
 8003c84:	6818      	ldr	r0, [r3, #0]
 8003c86:	f000 b80b 	b.w	8003ca0 <_malloc_r>
 8003c8a:	bf00      	nop
 8003c8c:	20000008 	.word	0x20000008

08003c90 <free>:
 8003c90:	4b02      	ldr	r3, [pc, #8]	; (8003c9c <free+0xc>)
 8003c92:	4601      	mov	r1, r0
 8003c94:	6818      	ldr	r0, [r3, #0]
 8003c96:	f7ff bc87 	b.w	80035a8 <_free_r>
 8003c9a:	bf00      	nop
 8003c9c:	20000008 	.word	0x20000008

08003ca0 <_malloc_r>:
 8003ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ca4:	f101 060b 	add.w	r6, r1, #11
 8003ca8:	2e16      	cmp	r6, #22
 8003caa:	b083      	sub	sp, #12
 8003cac:	4604      	mov	r4, r0
 8003cae:	d824      	bhi.n	8003cfa <_malloc_r+0x5a>
 8003cb0:	2910      	cmp	r1, #16
 8003cb2:	f200 80ba 	bhi.w	8003e2a <_malloc_r+0x18a>
 8003cb6:	f000 fc09 	bl	80044cc <__malloc_lock>
 8003cba:	2610      	movs	r6, #16
 8003cbc:	2218      	movs	r2, #24
 8003cbe:	2002      	movs	r0, #2
 8003cc0:	4fb7      	ldr	r7, [pc, #732]	; (8003fa0 <_malloc_r+0x300>)
 8003cc2:	443a      	add	r2, r7
 8003cc4:	f1a2 0108 	sub.w	r1, r2, #8
 8003cc8:	6853      	ldr	r3, [r2, #4]
 8003cca:	428b      	cmp	r3, r1
 8003ccc:	f000 80ba 	beq.w	8003e44 <_malloc_r+0x1a4>
 8003cd0:	685a      	ldr	r2, [r3, #4]
 8003cd2:	68d9      	ldr	r1, [r3, #12]
 8003cd4:	f022 0203 	bic.w	r2, r2, #3
 8003cd8:	441a      	add	r2, r3
 8003cda:	689d      	ldr	r5, [r3, #8]
 8003cdc:	60e9      	str	r1, [r5, #12]
 8003cde:	608d      	str	r5, [r1, #8]
 8003ce0:	6851      	ldr	r1, [r2, #4]
 8003ce2:	f041 0101 	orr.w	r1, r1, #1
 8003ce6:	4620      	mov	r0, r4
 8003ce8:	6051      	str	r1, [r2, #4]
 8003cea:	f103 0508 	add.w	r5, r3, #8
 8003cee:	f000 fbef 	bl	80044d0 <__malloc_unlock>
 8003cf2:	4628      	mov	r0, r5
 8003cf4:	b003      	add	sp, #12
 8003cf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cfa:	f036 0607 	bics.w	r6, r6, #7
 8003cfe:	f100 8094 	bmi.w	8003e2a <_malloc_r+0x18a>
 8003d02:	42b1      	cmp	r1, r6
 8003d04:	f200 8091 	bhi.w	8003e2a <_malloc_r+0x18a>
 8003d08:	f000 fbe0 	bl	80044cc <__malloc_lock>
 8003d0c:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
 8003d10:	f0c0 8196 	bcc.w	8004040 <_malloc_r+0x3a0>
 8003d14:	0a73      	lsrs	r3, r6, #9
 8003d16:	f000 808f 	beq.w	8003e38 <_malloc_r+0x198>
 8003d1a:	2b04      	cmp	r3, #4
 8003d1c:	f200 816b 	bhi.w	8003ff6 <_malloc_r+0x356>
 8003d20:	09b3      	lsrs	r3, r6, #6
 8003d22:	f103 0039 	add.w	r0, r3, #57	; 0x39
 8003d26:	f103 0c38 	add.w	ip, r3, #56	; 0x38
 8003d2a:	00c3      	lsls	r3, r0, #3
 8003d2c:	4f9c      	ldr	r7, [pc, #624]	; (8003fa0 <_malloc_r+0x300>)
 8003d2e:	443b      	add	r3, r7
 8003d30:	f1a3 0508 	sub.w	r5, r3, #8
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	429d      	cmp	r5, r3
 8003d38:	d106      	bne.n	8003d48 <_malloc_r+0xa8>
 8003d3a:	e00c      	b.n	8003d56 <_malloc_r+0xb6>
 8003d3c:	2900      	cmp	r1, #0
 8003d3e:	f280 812b 	bge.w	8003f98 <_malloc_r+0x2f8>
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	429d      	cmp	r5, r3
 8003d46:	d006      	beq.n	8003d56 <_malloc_r+0xb6>
 8003d48:	685a      	ldr	r2, [r3, #4]
 8003d4a:	f022 0203 	bic.w	r2, r2, #3
 8003d4e:	1b91      	subs	r1, r2, r6
 8003d50:	290f      	cmp	r1, #15
 8003d52:	ddf3      	ble.n	8003d3c <_malloc_r+0x9c>
 8003d54:	4660      	mov	r0, ip
 8003d56:	693d      	ldr	r5, [r7, #16]
 8003d58:	f8df c248 	ldr.w	ip, [pc, #584]	; 8003fa4 <_malloc_r+0x304>
 8003d5c:	4565      	cmp	r5, ip
 8003d5e:	d07c      	beq.n	8003e5a <_malloc_r+0x1ba>
 8003d60:	686a      	ldr	r2, [r5, #4]
 8003d62:	f022 0203 	bic.w	r2, r2, #3
 8003d66:	1b93      	subs	r3, r2, r6
 8003d68:	2b0f      	cmp	r3, #15
 8003d6a:	f300 8177 	bgt.w	800405c <_malloc_r+0x3bc>
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	e9c7 cc04 	strd	ip, ip, [r7, #16]
 8003d74:	f280 8168 	bge.w	8004048 <_malloc_r+0x3a8>
 8003d78:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8003d7c:	f080 8116 	bcs.w	8003fac <_malloc_r+0x30c>
 8003d80:	08d3      	lsrs	r3, r2, #3
 8003d82:	6879      	ldr	r1, [r7, #4]
 8003d84:	3301      	adds	r3, #1
 8003d86:	ea4f 1e52 	mov.w	lr, r2, lsr #5
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	fa02 f20e 	lsl.w	r2, r2, lr
 8003d90:	430a      	orrs	r2, r1
 8003d92:	f857 e033 	ldr.w	lr, [r7, r3, lsl #3]
 8003d96:	f8c5 e008 	str.w	lr, [r5, #8]
 8003d9a:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
 8003d9e:	3908      	subs	r1, #8
 8003da0:	60e9      	str	r1, [r5, #12]
 8003da2:	607a      	str	r2, [r7, #4]
 8003da4:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
 8003da8:	f8ce 500c 	str.w	r5, [lr, #12]
 8003dac:	1083      	asrs	r3, r0, #2
 8003dae:	2101      	movs	r1, #1
 8003db0:	4099      	lsls	r1, r3
 8003db2:	4291      	cmp	r1, r2
 8003db4:	d857      	bhi.n	8003e66 <_malloc_r+0x1c6>
 8003db6:	4211      	tst	r1, r2
 8003db8:	d106      	bne.n	8003dc8 <_malloc_r+0x128>
 8003dba:	f020 0003 	bic.w	r0, r0, #3
 8003dbe:	0049      	lsls	r1, r1, #1
 8003dc0:	4211      	tst	r1, r2
 8003dc2:	f100 0004 	add.w	r0, r0, #4
 8003dc6:	d0fa      	beq.n	8003dbe <_malloc_r+0x11e>
 8003dc8:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
 8003dcc:	464d      	mov	r5, r9
 8003dce:	4686      	mov	lr, r0
 8003dd0:	f8d5 800c 	ldr.w	r8, [r5, #12]
 8003dd4:	4545      	cmp	r5, r8
 8003dd6:	d108      	bne.n	8003dea <_malloc_r+0x14a>
 8003dd8:	e119      	b.n	800400e <_malloc_r+0x36e>
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	f280 8120 	bge.w	8004020 <_malloc_r+0x380>
 8003de0:	f8d8 800c 	ldr.w	r8, [r8, #12]
 8003de4:	4545      	cmp	r5, r8
 8003de6:	f000 8112 	beq.w	800400e <_malloc_r+0x36e>
 8003dea:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8003dee:	f022 0203 	bic.w	r2, r2, #3
 8003df2:	1b93      	subs	r3, r2, r6
 8003df4:	2b0f      	cmp	r3, #15
 8003df6:	ddf0      	ble.n	8003dda <_malloc_r+0x13a>
 8003df8:	4620      	mov	r0, r4
 8003dfa:	e9d8 5402 	ldrd	r5, r4, [r8, #8]
 8003dfe:	eb08 0106 	add.w	r1, r8, r6
 8003e02:	f046 0601 	orr.w	r6, r6, #1
 8003e06:	f8c8 6004 	str.w	r6, [r8, #4]
 8003e0a:	60ec      	str	r4, [r5, #12]
 8003e0c:	60a5      	str	r5, [r4, #8]
 8003e0e:	f043 0401 	orr.w	r4, r3, #1
 8003e12:	e9c7 1104 	strd	r1, r1, [r7, #16]
 8003e16:	e9c1 cc02 	strd	ip, ip, [r1, #8]
 8003e1a:	604c      	str	r4, [r1, #4]
 8003e1c:	f848 3002 	str.w	r3, [r8, r2]
 8003e20:	f000 fb56 	bl	80044d0 <__malloc_unlock>
 8003e24:	f108 0508 	add.w	r5, r8, #8
 8003e28:	e002      	b.n	8003e30 <_malloc_r+0x190>
 8003e2a:	230c      	movs	r3, #12
 8003e2c:	6023      	str	r3, [r4, #0]
 8003e2e:	2500      	movs	r5, #0
 8003e30:	4628      	mov	r0, r5
 8003e32:	b003      	add	sp, #12
 8003e34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e3c:	2040      	movs	r0, #64	; 0x40
 8003e3e:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
 8003e42:	e773      	b.n	8003d2c <_malloc_r+0x8c>
 8003e44:	68d3      	ldr	r3, [r2, #12]
 8003e46:	429a      	cmp	r2, r3
 8003e48:	bf08      	it	eq
 8003e4a:	3002      	addeq	r0, #2
 8003e4c:	f47f af40 	bne.w	8003cd0 <_malloc_r+0x30>
 8003e50:	693d      	ldr	r5, [r7, #16]
 8003e52:	f8df c150 	ldr.w	ip, [pc, #336]	; 8003fa4 <_malloc_r+0x304>
 8003e56:	4565      	cmp	r5, ip
 8003e58:	d182      	bne.n	8003d60 <_malloc_r+0xc0>
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	1083      	asrs	r3, r0, #2
 8003e5e:	2101      	movs	r1, #1
 8003e60:	4099      	lsls	r1, r3
 8003e62:	4291      	cmp	r1, r2
 8003e64:	d9a7      	bls.n	8003db6 <_malloc_r+0x116>
 8003e66:	68bd      	ldr	r5, [r7, #8]
 8003e68:	686b      	ldr	r3, [r5, #4]
 8003e6a:	f023 0803 	bic.w	r8, r3, #3
 8003e6e:	4546      	cmp	r6, r8
 8003e70:	d803      	bhi.n	8003e7a <_malloc_r+0x1da>
 8003e72:	eba8 0306 	sub.w	r3, r8, r6
 8003e76:	2b0f      	cmp	r3, #15
 8003e78:	dc7e      	bgt.n	8003f78 <_malloc_r+0x2d8>
 8003e7a:	f8df 912c 	ldr.w	r9, [pc, #300]	; 8003fa8 <_malloc_r+0x308>
 8003e7e:	f8d7 2408 	ldr.w	r2, [r7, #1032]	; 0x408
 8003e82:	f8d9 3000 	ldr.w	r3, [r9]
 8003e86:	3201      	adds	r2, #1
 8003e88:	4433      	add	r3, r6
 8003e8a:	eb05 0a08 	add.w	sl, r5, r8
 8003e8e:	f000 812f 	beq.w	80040f0 <_malloc_r+0x450>
 8003e92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e96:	330f      	adds	r3, #15
 8003e98:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
 8003e9c:	f02b 0b0f 	bic.w	fp, fp, #15
 8003ea0:	4659      	mov	r1, fp
 8003ea2:	4620      	mov	r0, r4
 8003ea4:	f004 f850 	bl	8007f48 <_sbrk_r>
 8003ea8:	1c41      	adds	r1, r0, #1
 8003eaa:	4602      	mov	r2, r0
 8003eac:	f000 80ef 	beq.w	800408e <_malloc_r+0x3ee>
 8003eb0:	4582      	cmp	sl, r0
 8003eb2:	f200 80ea 	bhi.w	800408a <_malloc_r+0x3ea>
 8003eb6:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8003eba:	4459      	add	r1, fp
 8003ebc:	f8c9 1004 	str.w	r1, [r9, #4]
 8003ec0:	460b      	mov	r3, r1
 8003ec2:	f000 814b 	beq.w	800415c <_malloc_r+0x4bc>
 8003ec6:	f8d7 1408 	ldr.w	r1, [r7, #1032]	; 0x408
 8003eca:	3101      	adds	r1, #1
 8003ecc:	bf1b      	ittet	ne
 8003ece:	eba2 0a0a 	subne.w	sl, r2, sl
 8003ed2:	4453      	addne	r3, sl
 8003ed4:	f8c7 2408 	streq.w	r2, [r7, #1032]	; 0x408
 8003ed8:	f8c9 3004 	strne.w	r3, [r9, #4]
 8003edc:	f012 0307 	ands.w	r3, r2, #7
 8003ee0:	f000 8112 	beq.w	8004108 <_malloc_r+0x468>
 8003ee4:	f1c3 0108 	rsb	r1, r3, #8
 8003ee8:	440a      	add	r2, r1
 8003eea:	f5c3 5180 	rsb	r1, r3, #4096	; 0x1000
 8003eee:	4493      	add	fp, r2
 8003ef0:	3108      	adds	r1, #8
 8003ef2:	eba1 010b 	sub.w	r1, r1, fp
 8003ef6:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
 8003efa:	4651      	mov	r1, sl
 8003efc:	4620      	mov	r0, r4
 8003efe:	9201      	str	r2, [sp, #4]
 8003f00:	9300      	str	r3, [sp, #0]
 8003f02:	f004 f821 	bl	8007f48 <_sbrk_r>
 8003f06:	1c42      	adds	r2, r0, #1
 8003f08:	e9dd 3200 	ldrd	r3, r2, [sp]
 8003f0c:	f000 814b 	beq.w	80041a6 <_malloc_r+0x506>
 8003f10:	1a83      	subs	r3, r0, r2
 8003f12:	eb03 0b0a 	add.w	fp, r3, sl
 8003f16:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8003f1a:	60ba      	str	r2, [r7, #8]
 8003f1c:	f04b 0301 	orr.w	r3, fp, #1
 8003f20:	eb0a 0100 	add.w	r1, sl, r0
 8003f24:	42bd      	cmp	r5, r7
 8003f26:	6053      	str	r3, [r2, #4]
 8003f28:	f8c9 1004 	str.w	r1, [r9, #4]
 8003f2c:	f000 8122 	beq.w	8004174 <_malloc_r+0x4d4>
 8003f30:	f1b8 0f0f 	cmp.w	r8, #15
 8003f34:	f240 8120 	bls.w	8004178 <_malloc_r+0x4d8>
 8003f38:	686b      	ldr	r3, [r5, #4]
 8003f3a:	f1a8 000c 	sub.w	r0, r8, #12
 8003f3e:	f020 0007 	bic.w	r0, r0, #7
 8003f42:	f003 0301 	and.w	r3, r3, #1
 8003f46:	4303      	orrs	r3, r0
 8003f48:	606b      	str	r3, [r5, #4]
 8003f4a:	f04f 0c05 	mov.w	ip, #5
 8003f4e:	182b      	adds	r3, r5, r0
 8003f50:	280f      	cmp	r0, #15
 8003f52:	e9c3 cc01 	strd	ip, ip, [r3, #4]
 8003f56:	f200 812d 	bhi.w	80041b4 <_malloc_r+0x514>
 8003f5a:	6853      	ldr	r3, [r2, #4]
 8003f5c:	4615      	mov	r5, r2
 8003f5e:	f8d9 202c 	ldr.w	r2, [r9, #44]	; 0x2c
 8003f62:	428a      	cmp	r2, r1
 8003f64:	f8d9 2030 	ldr.w	r2, [r9, #48]	; 0x30
 8003f68:	bf38      	it	cc
 8003f6a:	f8c9 102c 	strcc.w	r1, [r9, #44]	; 0x2c
 8003f6e:	428a      	cmp	r2, r1
 8003f70:	bf38      	it	cc
 8003f72:	f8c9 1030 	strcc.w	r1, [r9, #48]	; 0x30
 8003f76:	e08c      	b.n	8004092 <_malloc_r+0x3f2>
 8003f78:	19aa      	adds	r2, r5, r6
 8003f7a:	f043 0301 	orr.w	r3, r3, #1
 8003f7e:	f046 0601 	orr.w	r6, r6, #1
 8003f82:	606e      	str	r6, [r5, #4]
 8003f84:	4620      	mov	r0, r4
 8003f86:	60ba      	str	r2, [r7, #8]
 8003f88:	6053      	str	r3, [r2, #4]
 8003f8a:	f000 faa1 	bl	80044d0 <__malloc_unlock>
 8003f8e:	3508      	adds	r5, #8
 8003f90:	4628      	mov	r0, r5
 8003f92:	b003      	add	sp, #12
 8003f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f98:	68d9      	ldr	r1, [r3, #12]
 8003f9a:	441a      	add	r2, r3
 8003f9c:	e69d      	b.n	8003cda <_malloc_r+0x3a>
 8003f9e:	bf00      	nop
 8003fa0:	20000438 	.word	0x20000438
 8003fa4:	20000440 	.word	0x20000440
 8003fa8:	20000c40 	.word	0x20000c40
 8003fac:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
 8003fb0:	ea4f 2352 	mov.w	r3, r2, lsr #9
 8003fb4:	d363      	bcc.n	800407e <_malloc_r+0x3de>
 8003fb6:	2b14      	cmp	r3, #20
 8003fb8:	f200 80b8 	bhi.w	800412c <_malloc_r+0x48c>
 8003fbc:	f103 015c 	add.w	r1, r3, #92	; 0x5c
 8003fc0:	00c9      	lsls	r1, r1, #3
 8003fc2:	335b      	adds	r3, #91	; 0x5b
 8003fc4:	eb07 0e01 	add.w	lr, r7, r1
 8003fc8:	5879      	ldr	r1, [r7, r1]
 8003fca:	f1ae 0e08 	sub.w	lr, lr, #8
 8003fce:	458e      	cmp	lr, r1
 8003fd0:	f000 8091 	beq.w	80040f6 <_malloc_r+0x456>
 8003fd4:	684b      	ldr	r3, [r1, #4]
 8003fd6:	f023 0303 	bic.w	r3, r3, #3
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d902      	bls.n	8003fe4 <_malloc_r+0x344>
 8003fde:	6889      	ldr	r1, [r1, #8]
 8003fe0:	458e      	cmp	lr, r1
 8003fe2:	d1f7      	bne.n	8003fd4 <_malloc_r+0x334>
 8003fe4:	f8d1 e00c 	ldr.w	lr, [r1, #12]
 8003fe8:	687a      	ldr	r2, [r7, #4]
 8003fea:	e9c5 1e02 	strd	r1, lr, [r5, #8]
 8003fee:	f8ce 5008 	str.w	r5, [lr, #8]
 8003ff2:	60cd      	str	r5, [r1, #12]
 8003ff4:	e6da      	b.n	8003dac <_malloc_r+0x10c>
 8003ff6:	2b14      	cmp	r3, #20
 8003ff8:	d959      	bls.n	80040ae <_malloc_r+0x40e>
 8003ffa:	2b54      	cmp	r3, #84	; 0x54
 8003ffc:	f200 809e 	bhi.w	800413c <_malloc_r+0x49c>
 8004000:	0b33      	lsrs	r3, r6, #12
 8004002:	f103 006f 	add.w	r0, r3, #111	; 0x6f
 8004006:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
 800400a:	00c3      	lsls	r3, r0, #3
 800400c:	e68e      	b.n	8003d2c <_malloc_r+0x8c>
 800400e:	f10e 0e01 	add.w	lr, lr, #1
 8004012:	f01e 0f03 	tst.w	lr, #3
 8004016:	f105 0508 	add.w	r5, r5, #8
 800401a:	f47f aed9 	bne.w	8003dd0 <_malloc_r+0x130>
 800401e:	e051      	b.n	80040c4 <_malloc_r+0x424>
 8004020:	4442      	add	r2, r8
 8004022:	4645      	mov	r5, r8
 8004024:	6853      	ldr	r3, [r2, #4]
 8004026:	f8d8 100c 	ldr.w	r1, [r8, #12]
 800402a:	f043 0301 	orr.w	r3, r3, #1
 800402e:	6053      	str	r3, [r2, #4]
 8004030:	f855 3f08 	ldr.w	r3, [r5, #8]!
 8004034:	4620      	mov	r0, r4
 8004036:	60d9      	str	r1, [r3, #12]
 8004038:	608b      	str	r3, [r1, #8]
 800403a:	f000 fa49 	bl	80044d0 <__malloc_unlock>
 800403e:	e6f7      	b.n	8003e30 <_malloc_r+0x190>
 8004040:	08f0      	lsrs	r0, r6, #3
 8004042:	f106 0208 	add.w	r2, r6, #8
 8004046:	e63b      	b.n	8003cc0 <_malloc_r+0x20>
 8004048:	442a      	add	r2, r5
 800404a:	4620      	mov	r0, r4
 800404c:	6853      	ldr	r3, [r2, #4]
 800404e:	f043 0301 	orr.w	r3, r3, #1
 8004052:	6053      	str	r3, [r2, #4]
 8004054:	3508      	adds	r5, #8
 8004056:	f000 fa3b 	bl	80044d0 <__malloc_unlock>
 800405a:	e6e9      	b.n	8003e30 <_malloc_r+0x190>
 800405c:	19a9      	adds	r1, r5, r6
 800405e:	4620      	mov	r0, r4
 8004060:	f046 0601 	orr.w	r6, r6, #1
 8004064:	f043 0401 	orr.w	r4, r3, #1
 8004068:	606e      	str	r6, [r5, #4]
 800406a:	e9c7 1104 	strd	r1, r1, [r7, #16]
 800406e:	e9c1 cc02 	strd	ip, ip, [r1, #8]
 8004072:	604c      	str	r4, [r1, #4]
 8004074:	50ab      	str	r3, [r5, r2]
 8004076:	f000 fa2b 	bl	80044d0 <__malloc_unlock>
 800407a:	3508      	adds	r5, #8
 800407c:	e6d8      	b.n	8003e30 <_malloc_r+0x190>
 800407e:	0993      	lsrs	r3, r2, #6
 8004080:	f103 0139 	add.w	r1, r3, #57	; 0x39
 8004084:	00c9      	lsls	r1, r1, #3
 8004086:	3338      	adds	r3, #56	; 0x38
 8004088:	e79c      	b.n	8003fc4 <_malloc_r+0x324>
 800408a:	42bd      	cmp	r5, r7
 800408c:	d060      	beq.n	8004150 <_malloc_r+0x4b0>
 800408e:	68bd      	ldr	r5, [r7, #8]
 8004090:	686b      	ldr	r3, [r5, #4]
 8004092:	f023 0b03 	bic.w	fp, r3, #3
 8004096:	455e      	cmp	r6, fp
 8004098:	ebab 0306 	sub.w	r3, fp, r6
 800409c:	d802      	bhi.n	80040a4 <_malloc_r+0x404>
 800409e:	2b0f      	cmp	r3, #15
 80040a0:	f73f af6a 	bgt.w	8003f78 <_malloc_r+0x2d8>
 80040a4:	4620      	mov	r0, r4
 80040a6:	f000 fa13 	bl	80044d0 <__malloc_unlock>
 80040aa:	2500      	movs	r5, #0
 80040ac:	e6c0      	b.n	8003e30 <_malloc_r+0x190>
 80040ae:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 80040b2:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
 80040b6:	00c3      	lsls	r3, r0, #3
 80040b8:	e638      	b.n	8003d2c <_malloc_r+0x8c>
 80040ba:	f859 3908 	ldr.w	r3, [r9], #-8
 80040be:	454b      	cmp	r3, r9
 80040c0:	f040 8096 	bne.w	80041f0 <_malloc_r+0x550>
 80040c4:	f010 0f03 	tst.w	r0, #3
 80040c8:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 80040cc:	d1f5      	bne.n	80040ba <_malloc_r+0x41a>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	ea23 0301 	bic.w	r3, r3, r1
 80040d4:	607b      	str	r3, [r7, #4]
 80040d6:	0049      	lsls	r1, r1, #1
 80040d8:	4299      	cmp	r1, r3
 80040da:	f63f aec4 	bhi.w	8003e66 <_malloc_r+0x1c6>
 80040de:	b919      	cbnz	r1, 80040e8 <_malloc_r+0x448>
 80040e0:	e6c1      	b.n	8003e66 <_malloc_r+0x1c6>
 80040e2:	0049      	lsls	r1, r1, #1
 80040e4:	f10e 0e04 	add.w	lr, lr, #4
 80040e8:	4219      	tst	r1, r3
 80040ea:	d0fa      	beq.n	80040e2 <_malloc_r+0x442>
 80040ec:	4670      	mov	r0, lr
 80040ee:	e66b      	b.n	8003dc8 <_malloc_r+0x128>
 80040f0:	f103 0b10 	add.w	fp, r3, #16
 80040f4:	e6d4      	b.n	8003ea0 <_malloc_r+0x200>
 80040f6:	109a      	asrs	r2, r3, #2
 80040f8:	f04f 0801 	mov.w	r8, #1
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	fa08 f202 	lsl.w	r2, r8, r2
 8004102:	431a      	orrs	r2, r3
 8004104:	607a      	str	r2, [r7, #4]
 8004106:	e770      	b.n	8003fea <_malloc_r+0x34a>
 8004108:	eb02 010b 	add.w	r1, r2, fp
 800410c:	4249      	negs	r1, r1
 800410e:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
 8004112:	4651      	mov	r1, sl
 8004114:	4620      	mov	r0, r4
 8004116:	9301      	str	r3, [sp, #4]
 8004118:	9200      	str	r2, [sp, #0]
 800411a:	f003 ff15 	bl	8007f48 <_sbrk_r>
 800411e:	1c43      	adds	r3, r0, #1
 8004120:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004124:	f47f aef4 	bne.w	8003f10 <_malloc_r+0x270>
 8004128:	469a      	mov	sl, r3
 800412a:	e6f4      	b.n	8003f16 <_malloc_r+0x276>
 800412c:	2b54      	cmp	r3, #84	; 0x54
 800412e:	d826      	bhi.n	800417e <_malloc_r+0x4de>
 8004130:	0b13      	lsrs	r3, r2, #12
 8004132:	f103 016f 	add.w	r1, r3, #111	; 0x6f
 8004136:	00c9      	lsls	r1, r1, #3
 8004138:	336e      	adds	r3, #110	; 0x6e
 800413a:	e743      	b.n	8003fc4 <_malloc_r+0x324>
 800413c:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8004140:	d826      	bhi.n	8004190 <_malloc_r+0x4f0>
 8004142:	0bf3      	lsrs	r3, r6, #15
 8004144:	f103 0078 	add.w	r0, r3, #120	; 0x78
 8004148:	f103 0c77 	add.w	ip, r3, #119	; 0x77
 800414c:	00c3      	lsls	r3, r0, #3
 800414e:	e5ed      	b.n	8003d2c <_malloc_r+0x8c>
 8004150:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8004154:	445b      	add	r3, fp
 8004156:	f8c9 3004 	str.w	r3, [r9, #4]
 800415a:	e6b4      	b.n	8003ec6 <_malloc_r+0x226>
 800415c:	f3ca 000b 	ubfx	r0, sl, #0, #12
 8004160:	2800      	cmp	r0, #0
 8004162:	f47f aeb0 	bne.w	8003ec6 <_malloc_r+0x226>
 8004166:	68bd      	ldr	r5, [r7, #8]
 8004168:	eb08 030b 	add.w	r3, r8, fp
 800416c:	f043 0301 	orr.w	r3, r3, #1
 8004170:	606b      	str	r3, [r5, #4]
 8004172:	e6f4      	b.n	8003f5e <_malloc_r+0x2be>
 8004174:	4615      	mov	r5, r2
 8004176:	e6f2      	b.n	8003f5e <_malloc_r+0x2be>
 8004178:	2301      	movs	r3, #1
 800417a:	6053      	str	r3, [r2, #4]
 800417c:	e792      	b.n	80040a4 <_malloc_r+0x404>
 800417e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8004182:	d821      	bhi.n	80041c8 <_malloc_r+0x528>
 8004184:	0bd3      	lsrs	r3, r2, #15
 8004186:	f103 0178 	add.w	r1, r3, #120	; 0x78
 800418a:	00c9      	lsls	r1, r1, #3
 800418c:	3377      	adds	r3, #119	; 0x77
 800418e:	e719      	b.n	8003fc4 <_malloc_r+0x324>
 8004190:	f240 5254 	movw	r2, #1364	; 0x554
 8004194:	4293      	cmp	r3, r2
 8004196:	d821      	bhi.n	80041dc <_malloc_r+0x53c>
 8004198:	0cb3      	lsrs	r3, r6, #18
 800419a:	f103 007d 	add.w	r0, r3, #125	; 0x7d
 800419e:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
 80041a2:	00c3      	lsls	r3, r0, #3
 80041a4:	e5c2      	b.n	8003d2c <_malloc_r+0x8c>
 80041a6:	3b08      	subs	r3, #8
 80041a8:	449b      	add	fp, r3
 80041aa:	ebab 0b02 	sub.w	fp, fp, r2
 80041ae:	f04f 0a00 	mov.w	sl, #0
 80041b2:	e6b0      	b.n	8003f16 <_malloc_r+0x276>
 80041b4:	f105 0108 	add.w	r1, r5, #8
 80041b8:	4620      	mov	r0, r4
 80041ba:	f7ff f9f5 	bl	80035a8 <_free_r>
 80041be:	68bd      	ldr	r5, [r7, #8]
 80041c0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80041c4:	686b      	ldr	r3, [r5, #4]
 80041c6:	e6ca      	b.n	8003f5e <_malloc_r+0x2be>
 80041c8:	f240 5154 	movw	r1, #1364	; 0x554
 80041cc:	428b      	cmp	r3, r1
 80041ce:	d80b      	bhi.n	80041e8 <_malloc_r+0x548>
 80041d0:	0c93      	lsrs	r3, r2, #18
 80041d2:	f103 017d 	add.w	r1, r3, #125	; 0x7d
 80041d6:	00c9      	lsls	r1, r1, #3
 80041d8:	337c      	adds	r3, #124	; 0x7c
 80041da:	e6f3      	b.n	8003fc4 <_malloc_r+0x324>
 80041dc:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 80041e0:	207f      	movs	r0, #127	; 0x7f
 80041e2:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
 80041e6:	e5a1      	b.n	8003d2c <_malloc_r+0x8c>
 80041e8:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 80041ec:	237e      	movs	r3, #126	; 0x7e
 80041ee:	e6e9      	b.n	8003fc4 <_malloc_r+0x324>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	e770      	b.n	80040d6 <_malloc_r+0x436>
	...

08004200 <memchr>:
 8004200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8004204:	2a10      	cmp	r2, #16
 8004206:	db2b      	blt.n	8004260 <memchr+0x60>
 8004208:	f010 0f07 	tst.w	r0, #7
 800420c:	d008      	beq.n	8004220 <memchr+0x20>
 800420e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8004212:	3a01      	subs	r2, #1
 8004214:	428b      	cmp	r3, r1
 8004216:	d02d      	beq.n	8004274 <memchr+0x74>
 8004218:	f010 0f07 	tst.w	r0, #7
 800421c:	b342      	cbz	r2, 8004270 <memchr+0x70>
 800421e:	d1f6      	bne.n	800420e <memchr+0xe>
 8004220:	b4f0      	push	{r4, r5, r6, r7}
 8004222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8004226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800422a:	f022 0407 	bic.w	r4, r2, #7
 800422e:	f07f 0700 	mvns.w	r7, #0
 8004232:	2300      	movs	r3, #0
 8004234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8004238:	3c08      	subs	r4, #8
 800423a:	ea85 0501 	eor.w	r5, r5, r1
 800423e:	ea86 0601 	eor.w	r6, r6, r1
 8004242:	fa85 f547 	uadd8	r5, r5, r7
 8004246:	faa3 f587 	sel	r5, r3, r7
 800424a:	fa86 f647 	uadd8	r6, r6, r7
 800424e:	faa5 f687 	sel	r6, r5, r7
 8004252:	b98e      	cbnz	r6, 8004278 <memchr+0x78>
 8004254:	d1ee      	bne.n	8004234 <memchr+0x34>
 8004256:	bcf0      	pop	{r4, r5, r6, r7}
 8004258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800425c:	f002 0207 	and.w	r2, r2, #7
 8004260:	b132      	cbz	r2, 8004270 <memchr+0x70>
 8004262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8004266:	3a01      	subs	r2, #1
 8004268:	ea83 0301 	eor.w	r3, r3, r1
 800426c:	b113      	cbz	r3, 8004274 <memchr+0x74>
 800426e:	d1f8      	bne.n	8004262 <memchr+0x62>
 8004270:	2000      	movs	r0, #0
 8004272:	4770      	bx	lr
 8004274:	3801      	subs	r0, #1
 8004276:	4770      	bx	lr
 8004278:	2d00      	cmp	r5, #0
 800427a:	bf06      	itte	eq
 800427c:	4635      	moveq	r5, r6
 800427e:	3803      	subeq	r0, #3
 8004280:	3807      	subne	r0, #7
 8004282:	f015 0f01 	tst.w	r5, #1
 8004286:	d107      	bne.n	8004298 <memchr+0x98>
 8004288:	3001      	adds	r0, #1
 800428a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800428e:	bf02      	ittt	eq
 8004290:	3001      	addeq	r0, #1
 8004292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8004296:	3001      	addeq	r0, #1
 8004298:	bcf0      	pop	{r4, r5, r6, r7}
 800429a:	3801      	subs	r0, #1
 800429c:	4770      	bx	lr
 800429e:	bf00      	nop

080042a0 <memcpy>:
 80042a0:	4684      	mov	ip, r0
 80042a2:	ea41 0300 	orr.w	r3, r1, r0
 80042a6:	f013 0303 	ands.w	r3, r3, #3
 80042aa:	d16d      	bne.n	8004388 <memcpy+0xe8>
 80042ac:	3a40      	subs	r2, #64	; 0x40
 80042ae:	d341      	bcc.n	8004334 <memcpy+0x94>
 80042b0:	f851 3b04 	ldr.w	r3, [r1], #4
 80042b4:	f840 3b04 	str.w	r3, [r0], #4
 80042b8:	f851 3b04 	ldr.w	r3, [r1], #4
 80042bc:	f840 3b04 	str.w	r3, [r0], #4
 80042c0:	f851 3b04 	ldr.w	r3, [r1], #4
 80042c4:	f840 3b04 	str.w	r3, [r0], #4
 80042c8:	f851 3b04 	ldr.w	r3, [r1], #4
 80042cc:	f840 3b04 	str.w	r3, [r0], #4
 80042d0:	f851 3b04 	ldr.w	r3, [r1], #4
 80042d4:	f840 3b04 	str.w	r3, [r0], #4
 80042d8:	f851 3b04 	ldr.w	r3, [r1], #4
 80042dc:	f840 3b04 	str.w	r3, [r0], #4
 80042e0:	f851 3b04 	ldr.w	r3, [r1], #4
 80042e4:	f840 3b04 	str.w	r3, [r0], #4
 80042e8:	f851 3b04 	ldr.w	r3, [r1], #4
 80042ec:	f840 3b04 	str.w	r3, [r0], #4
 80042f0:	f851 3b04 	ldr.w	r3, [r1], #4
 80042f4:	f840 3b04 	str.w	r3, [r0], #4
 80042f8:	f851 3b04 	ldr.w	r3, [r1], #4
 80042fc:	f840 3b04 	str.w	r3, [r0], #4
 8004300:	f851 3b04 	ldr.w	r3, [r1], #4
 8004304:	f840 3b04 	str.w	r3, [r0], #4
 8004308:	f851 3b04 	ldr.w	r3, [r1], #4
 800430c:	f840 3b04 	str.w	r3, [r0], #4
 8004310:	f851 3b04 	ldr.w	r3, [r1], #4
 8004314:	f840 3b04 	str.w	r3, [r0], #4
 8004318:	f851 3b04 	ldr.w	r3, [r1], #4
 800431c:	f840 3b04 	str.w	r3, [r0], #4
 8004320:	f851 3b04 	ldr.w	r3, [r1], #4
 8004324:	f840 3b04 	str.w	r3, [r0], #4
 8004328:	f851 3b04 	ldr.w	r3, [r1], #4
 800432c:	f840 3b04 	str.w	r3, [r0], #4
 8004330:	3a40      	subs	r2, #64	; 0x40
 8004332:	d2bd      	bcs.n	80042b0 <memcpy+0x10>
 8004334:	3230      	adds	r2, #48	; 0x30
 8004336:	d311      	bcc.n	800435c <memcpy+0xbc>
 8004338:	f851 3b04 	ldr.w	r3, [r1], #4
 800433c:	f840 3b04 	str.w	r3, [r0], #4
 8004340:	f851 3b04 	ldr.w	r3, [r1], #4
 8004344:	f840 3b04 	str.w	r3, [r0], #4
 8004348:	f851 3b04 	ldr.w	r3, [r1], #4
 800434c:	f840 3b04 	str.w	r3, [r0], #4
 8004350:	f851 3b04 	ldr.w	r3, [r1], #4
 8004354:	f840 3b04 	str.w	r3, [r0], #4
 8004358:	3a10      	subs	r2, #16
 800435a:	d2ed      	bcs.n	8004338 <memcpy+0x98>
 800435c:	320c      	adds	r2, #12
 800435e:	d305      	bcc.n	800436c <memcpy+0xcc>
 8004360:	f851 3b04 	ldr.w	r3, [r1], #4
 8004364:	f840 3b04 	str.w	r3, [r0], #4
 8004368:	3a04      	subs	r2, #4
 800436a:	d2f9      	bcs.n	8004360 <memcpy+0xc0>
 800436c:	3204      	adds	r2, #4
 800436e:	d008      	beq.n	8004382 <memcpy+0xe2>
 8004370:	07d2      	lsls	r2, r2, #31
 8004372:	bf1c      	itt	ne
 8004374:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8004378:	f800 3b01 	strbne.w	r3, [r0], #1
 800437c:	d301      	bcc.n	8004382 <memcpy+0xe2>
 800437e:	880b      	ldrh	r3, [r1, #0]
 8004380:	8003      	strh	r3, [r0, #0]
 8004382:	4660      	mov	r0, ip
 8004384:	4770      	bx	lr
 8004386:	bf00      	nop
 8004388:	2a08      	cmp	r2, #8
 800438a:	d313      	bcc.n	80043b4 <memcpy+0x114>
 800438c:	078b      	lsls	r3, r1, #30
 800438e:	d08d      	beq.n	80042ac <memcpy+0xc>
 8004390:	f010 0303 	ands.w	r3, r0, #3
 8004394:	d08a      	beq.n	80042ac <memcpy+0xc>
 8004396:	f1c3 0304 	rsb	r3, r3, #4
 800439a:	1ad2      	subs	r2, r2, r3
 800439c:	07db      	lsls	r3, r3, #31
 800439e:	bf1c      	itt	ne
 80043a0:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80043a4:	f800 3b01 	strbne.w	r3, [r0], #1
 80043a8:	d380      	bcc.n	80042ac <memcpy+0xc>
 80043aa:	f831 3b02 	ldrh.w	r3, [r1], #2
 80043ae:	f820 3b02 	strh.w	r3, [r0], #2
 80043b2:	e77b      	b.n	80042ac <memcpy+0xc>
 80043b4:	3a04      	subs	r2, #4
 80043b6:	d3d9      	bcc.n	800436c <memcpy+0xcc>
 80043b8:	3a01      	subs	r2, #1
 80043ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80043be:	f800 3b01 	strb.w	r3, [r0], #1
 80043c2:	d2f9      	bcs.n	80043b8 <memcpy+0x118>
 80043c4:	780b      	ldrb	r3, [r1, #0]
 80043c6:	7003      	strb	r3, [r0, #0]
 80043c8:	784b      	ldrb	r3, [r1, #1]
 80043ca:	7043      	strb	r3, [r0, #1]
 80043cc:	788b      	ldrb	r3, [r1, #2]
 80043ce:	7083      	strb	r3, [r0, #2]
 80043d0:	4660      	mov	r0, ip
 80043d2:	4770      	bx	lr

080043d4 <memmove>:
 80043d4:	4288      	cmp	r0, r1
 80043d6:	d90d      	bls.n	80043f4 <memmove+0x20>
 80043d8:	188b      	adds	r3, r1, r2
 80043da:	4283      	cmp	r3, r0
 80043dc:	d90a      	bls.n	80043f4 <memmove+0x20>
 80043de:	eb00 0c02 	add.w	ip, r0, r2
 80043e2:	b1ba      	cbz	r2, 8004414 <memmove+0x40>
 80043e4:	4662      	mov	r2, ip
 80043e6:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
 80043ea:	f802 cd01 	strb.w	ip, [r2, #-1]!
 80043ee:	4299      	cmp	r1, r3
 80043f0:	d1f9      	bne.n	80043e6 <memmove+0x12>
 80043f2:	4770      	bx	lr
 80043f4:	2a0f      	cmp	r2, #15
 80043f6:	d80e      	bhi.n	8004416 <memmove+0x42>
 80043f8:	4603      	mov	r3, r0
 80043fa:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
 80043fe:	b14a      	cbz	r2, 8004414 <memmove+0x40>
 8004400:	f10c 0c01 	add.w	ip, ip, #1
 8004404:	3b01      	subs	r3, #1
 8004406:	448c      	add	ip, r1
 8004408:	f811 2b01 	ldrb.w	r2, [r1], #1
 800440c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004410:	4561      	cmp	r1, ip
 8004412:	d1f9      	bne.n	8004408 <memmove+0x34>
 8004414:	4770      	bx	lr
 8004416:	ea40 0301 	orr.w	r3, r0, r1
 800441a:	079b      	lsls	r3, r3, #30
 800441c:	d150      	bne.n	80044c0 <memmove+0xec>
 800441e:	f1a2 0310 	sub.w	r3, r2, #16
 8004422:	b570      	push	{r4, r5, r6, lr}
 8004424:	f101 0c20 	add.w	ip, r1, #32
 8004428:	f023 050f 	bic.w	r5, r3, #15
 800442c:	f101 0e10 	add.w	lr, r1, #16
 8004430:	f100 0410 	add.w	r4, r0, #16
 8004434:	44ac      	add	ip, r5
 8004436:	091b      	lsrs	r3, r3, #4
 8004438:	f85e 5c10 	ldr.w	r5, [lr, #-16]
 800443c:	f844 5c10 	str.w	r5, [r4, #-16]
 8004440:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
 8004444:	f844 5c0c 	str.w	r5, [r4, #-12]
 8004448:	f85e 5c08 	ldr.w	r5, [lr, #-8]
 800444c:	f844 5c08 	str.w	r5, [r4, #-8]
 8004450:	f85e 5c04 	ldr.w	r5, [lr, #-4]
 8004454:	f844 5c04 	str.w	r5, [r4, #-4]
 8004458:	f10e 0e10 	add.w	lr, lr, #16
 800445c:	45e6      	cmp	lr, ip
 800445e:	f104 0410 	add.w	r4, r4, #16
 8004462:	d1e9      	bne.n	8004438 <memmove+0x64>
 8004464:	3301      	adds	r3, #1
 8004466:	f012 0f0c 	tst.w	r2, #12
 800446a:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 800446e:	f002 040f 	and.w	r4, r2, #15
 8004472:	eb00 1303 	add.w	r3, r0, r3, lsl #4
 8004476:	d027      	beq.n	80044c8 <memmove+0xf4>
 8004478:	3c04      	subs	r4, #4
 800447a:	f024 0603 	bic.w	r6, r4, #3
 800447e:	ea4f 0c94 	mov.w	ip, r4, lsr #2
 8004482:	441e      	add	r6, r3
 8004484:	1f1c      	subs	r4, r3, #4
 8004486:	468e      	mov	lr, r1
 8004488:	f85e 5b04 	ldr.w	r5, [lr], #4
 800448c:	f844 5f04 	str.w	r5, [r4, #4]!
 8004490:	42b4      	cmp	r4, r6
 8004492:	d1f9      	bne.n	8004488 <memmove+0xb4>
 8004494:	f10c 0401 	add.w	r4, ip, #1
 8004498:	f002 0203 	and.w	r2, r2, #3
 800449c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80044a0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80044a4:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
 80044a8:	b14a      	cbz	r2, 80044be <memmove+0xea>
 80044aa:	f10c 0c01 	add.w	ip, ip, #1
 80044ae:	3b01      	subs	r3, #1
 80044b0:	448c      	add	ip, r1
 80044b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80044b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80044ba:	4561      	cmp	r1, ip
 80044bc:	d1f9      	bne.n	80044b2 <memmove+0xde>
 80044be:	bd70      	pop	{r4, r5, r6, pc}
 80044c0:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
 80044c4:	4603      	mov	r3, r0
 80044c6:	e79b      	b.n	8004400 <memmove+0x2c>
 80044c8:	4622      	mov	r2, r4
 80044ca:	e7eb      	b.n	80044a4 <memmove+0xd0>

080044cc <__malloc_lock>:
 80044cc:	4770      	bx	lr
 80044ce:	bf00      	nop

080044d0 <__malloc_unlock>:
 80044d0:	4770      	bx	lr
 80044d2:	bf00      	nop

080044d4 <_Balloc>:
 80044d4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80044d6:	b570      	push	{r4, r5, r6, lr}
 80044d8:	4605      	mov	r5, r0
 80044da:	460c      	mov	r4, r1
 80044dc:	b14b      	cbz	r3, 80044f2 <_Balloc+0x1e>
 80044de:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80044e2:	b180      	cbz	r0, 8004506 <_Balloc+0x32>
 80044e4:	6802      	ldr	r2, [r0, #0]
 80044e6:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 80044ea:	2300      	movs	r3, #0
 80044ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80044f0:	bd70      	pop	{r4, r5, r6, pc}
 80044f2:	2221      	movs	r2, #33	; 0x21
 80044f4:	2104      	movs	r1, #4
 80044f6:	f001 fef9 	bl	80062ec <_calloc_r>
 80044fa:	4603      	mov	r3, r0
 80044fc:	64e8      	str	r0, [r5, #76]	; 0x4c
 80044fe:	2800      	cmp	r0, #0
 8004500:	d1ed      	bne.n	80044de <_Balloc+0xa>
 8004502:	2000      	movs	r0, #0
 8004504:	bd70      	pop	{r4, r5, r6, pc}
 8004506:	2101      	movs	r1, #1
 8004508:	fa01 f604 	lsl.w	r6, r1, r4
 800450c:	1d72      	adds	r2, r6, #5
 800450e:	0092      	lsls	r2, r2, #2
 8004510:	4628      	mov	r0, r5
 8004512:	f001 feeb 	bl	80062ec <_calloc_r>
 8004516:	2800      	cmp	r0, #0
 8004518:	d0f3      	beq.n	8004502 <_Balloc+0x2e>
 800451a:	e9c0 4601 	strd	r4, r6, [r0, #4]
 800451e:	e7e4      	b.n	80044ea <_Balloc+0x16>

08004520 <_Bfree>:
 8004520:	b131      	cbz	r1, 8004530 <_Bfree+0x10>
 8004522:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8004524:	684a      	ldr	r2, [r1, #4]
 8004526:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800452a:	6008      	str	r0, [r1, #0]
 800452c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004530:	4770      	bx	lr
 8004532:	bf00      	nop

08004534 <__multadd>:
 8004534:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004536:	690c      	ldr	r4, [r1, #16]
 8004538:	4606      	mov	r6, r0
 800453a:	b083      	sub	sp, #12
 800453c:	460d      	mov	r5, r1
 800453e:	f101 0e14 	add.w	lr, r1, #20
 8004542:	2000      	movs	r0, #0
 8004544:	f8de 1000 	ldr.w	r1, [lr]
 8004548:	fa1f fc81 	uxth.w	ip, r1
 800454c:	fb02 330c 	mla	r3, r2, ip, r3
 8004550:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8004554:	0c09      	lsrs	r1, r1, #16
 8004556:	fb02 cc01 	mla	ip, r2, r1, ip
 800455a:	3001      	adds	r0, #1
 800455c:	b29b      	uxth	r3, r3
 800455e:	eb03 430c 	add.w	r3, r3, ip, lsl #16
 8004562:	4284      	cmp	r4, r0
 8004564:	f84e 3b04 	str.w	r3, [lr], #4
 8004568:	ea4f 431c 	mov.w	r3, ip, lsr #16
 800456c:	dcea      	bgt.n	8004544 <__multadd+0x10>
 800456e:	b13b      	cbz	r3, 8004580 <__multadd+0x4c>
 8004570:	68aa      	ldr	r2, [r5, #8]
 8004572:	42a2      	cmp	r2, r4
 8004574:	dd07      	ble.n	8004586 <__multadd+0x52>
 8004576:	eb05 0284 	add.w	r2, r5, r4, lsl #2
 800457a:	3401      	adds	r4, #1
 800457c:	6153      	str	r3, [r2, #20]
 800457e:	612c      	str	r4, [r5, #16]
 8004580:	4628      	mov	r0, r5
 8004582:	b003      	add	sp, #12
 8004584:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004586:	6869      	ldr	r1, [r5, #4]
 8004588:	9301      	str	r3, [sp, #4]
 800458a:	3101      	adds	r1, #1
 800458c:	4630      	mov	r0, r6
 800458e:	f7ff ffa1 	bl	80044d4 <_Balloc>
 8004592:	9b01      	ldr	r3, [sp, #4]
 8004594:	4607      	mov	r7, r0
 8004596:	b1b8      	cbz	r0, 80045c8 <__multadd+0x94>
 8004598:	692a      	ldr	r2, [r5, #16]
 800459a:	9301      	str	r3, [sp, #4]
 800459c:	3202      	adds	r2, #2
 800459e:	f105 010c 	add.w	r1, r5, #12
 80045a2:	0092      	lsls	r2, r2, #2
 80045a4:	300c      	adds	r0, #12
 80045a6:	f7ff fe7b 	bl	80042a0 <memcpy>
 80045aa:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
 80045ac:	6869      	ldr	r1, [r5, #4]
 80045ae:	9b01      	ldr	r3, [sp, #4]
 80045b0:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 80045b4:	6028      	str	r0, [r5, #0]
 80045b6:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
 80045ba:	463d      	mov	r5, r7
 80045bc:	eb05 0284 	add.w	r2, r5, r4, lsl #2
 80045c0:	3401      	adds	r4, #1
 80045c2:	6153      	str	r3, [r2, #20]
 80045c4:	612c      	str	r4, [r5, #16]
 80045c6:	e7db      	b.n	8004580 <__multadd+0x4c>
 80045c8:	4b02      	ldr	r3, [pc, #8]	; (80045d4 <__multadd+0xa0>)
 80045ca:	4803      	ldr	r0, [pc, #12]	; (80045d8 <__multadd+0xa4>)
 80045cc:	463a      	mov	r2, r7
 80045ce:	21b5      	movs	r1, #181	; 0xb5
 80045d0:	f001 fe66 	bl	80062a0 <__assert_func>
 80045d4:	0801c0d8 	.word	0x0801c0d8
 80045d8:	0801c120 	.word	0x0801c120

080045dc <__s2b>:
 80045dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80045e0:	460c      	mov	r4, r1
 80045e2:	4928      	ldr	r1, [pc, #160]	; (8004684 <__s2b+0xa8>)
 80045e4:	461f      	mov	r7, r3
 80045e6:	4616      	mov	r6, r2
 80045e8:	f103 0208 	add.w	r2, r3, #8
 80045ec:	fb81 3102 	smull	r3, r1, r1, r2
 80045f0:	2f09      	cmp	r7, #9
 80045f2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80045f6:	4605      	mov	r5, r0
 80045f8:	ebc3 0361 	rsb	r3, r3, r1, asr #1
 80045fc:	dd39      	ble.n	8004672 <__s2b+0x96>
 80045fe:	f04f 0c01 	mov.w	ip, #1
 8004602:	2100      	movs	r1, #0
 8004604:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8004608:	4563      	cmp	r3, ip
 800460a:	f101 0101 	add.w	r1, r1, #1
 800460e:	dcf9      	bgt.n	8004604 <__s2b+0x28>
 8004610:	4628      	mov	r0, r5
 8004612:	f7ff ff5f 	bl	80044d4 <_Balloc>
 8004616:	4601      	mov	r1, r0
 8004618:	b368      	cbz	r0, 8004676 <__s2b+0x9a>
 800461a:	9b08      	ldr	r3, [sp, #32]
 800461c:	6143      	str	r3, [r0, #20]
 800461e:	2e09      	cmp	r6, #9
 8004620:	f04f 0301 	mov.w	r3, #1
 8004624:	6103      	str	r3, [r0, #16]
 8004626:	dc12      	bgt.n	800464e <__s2b+0x72>
 8004628:	340a      	adds	r4, #10
 800462a:	2609      	movs	r6, #9
 800462c:	42b7      	cmp	r7, r6
 800462e:	dd0b      	ble.n	8004648 <__s2b+0x6c>
 8004630:	1bbe      	subs	r6, r7, r6
 8004632:	4426      	add	r6, r4
 8004634:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004638:	220a      	movs	r2, #10
 800463a:	3b30      	subs	r3, #48	; 0x30
 800463c:	4628      	mov	r0, r5
 800463e:	f7ff ff79 	bl	8004534 <__multadd>
 8004642:	42a6      	cmp	r6, r4
 8004644:	4601      	mov	r1, r0
 8004646:	d1f5      	bne.n	8004634 <__s2b+0x58>
 8004648:	4608      	mov	r0, r1
 800464a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800464e:	f104 0909 	add.w	r9, r4, #9
 8004652:	46c8      	mov	r8, r9
 8004654:	4434      	add	r4, r6
 8004656:	f818 3b01 	ldrb.w	r3, [r8], #1
 800465a:	220a      	movs	r2, #10
 800465c:	3b30      	subs	r3, #48	; 0x30
 800465e:	4628      	mov	r0, r5
 8004660:	f7ff ff68 	bl	8004534 <__multadd>
 8004664:	45a0      	cmp	r8, r4
 8004666:	4601      	mov	r1, r0
 8004668:	d1f5      	bne.n	8004656 <__s2b+0x7a>
 800466a:	f1a6 0408 	sub.w	r4, r6, #8
 800466e:	444c      	add	r4, r9
 8004670:	e7dc      	b.n	800462c <__s2b+0x50>
 8004672:	2100      	movs	r1, #0
 8004674:	e7cc      	b.n	8004610 <__s2b+0x34>
 8004676:	460a      	mov	r2, r1
 8004678:	4b03      	ldr	r3, [pc, #12]	; (8004688 <__s2b+0xac>)
 800467a:	4804      	ldr	r0, [pc, #16]	; (800468c <__s2b+0xb0>)
 800467c:	21ce      	movs	r1, #206	; 0xce
 800467e:	f001 fe0f 	bl	80062a0 <__assert_func>
 8004682:	bf00      	nop
 8004684:	38e38e39 	.word	0x38e38e39
 8004688:	0801c0d8 	.word	0x0801c0d8
 800468c:	0801c120 	.word	0x0801c120

08004690 <__hi0bits>:
 8004690:	0c03      	lsrs	r3, r0, #16
 8004692:	041b      	lsls	r3, r3, #16
 8004694:	b9d3      	cbnz	r3, 80046cc <__hi0bits+0x3c>
 8004696:	0400      	lsls	r0, r0, #16
 8004698:	2310      	movs	r3, #16
 800469a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800469e:	bf04      	itt	eq
 80046a0:	0200      	lsleq	r0, r0, #8
 80046a2:	3308      	addeq	r3, #8
 80046a4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80046a8:	bf04      	itt	eq
 80046aa:	0100      	lsleq	r0, r0, #4
 80046ac:	3304      	addeq	r3, #4
 80046ae:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80046b2:	bf04      	itt	eq
 80046b4:	0080      	lsleq	r0, r0, #2
 80046b6:	3302      	addeq	r3, #2
 80046b8:	2800      	cmp	r0, #0
 80046ba:	db05      	blt.n	80046c8 <__hi0bits+0x38>
 80046bc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80046c0:	f103 0301 	add.w	r3, r3, #1
 80046c4:	bf08      	it	eq
 80046c6:	2320      	moveq	r3, #32
 80046c8:	4618      	mov	r0, r3
 80046ca:	4770      	bx	lr
 80046cc:	2300      	movs	r3, #0
 80046ce:	e7e4      	b.n	800469a <__hi0bits+0xa>

080046d0 <__lo0bits>:
 80046d0:	6803      	ldr	r3, [r0, #0]
 80046d2:	f013 0207 	ands.w	r2, r3, #7
 80046d6:	4601      	mov	r1, r0
 80046d8:	d007      	beq.n	80046ea <__lo0bits+0x1a>
 80046da:	07da      	lsls	r2, r3, #31
 80046dc:	d41f      	bmi.n	800471e <__lo0bits+0x4e>
 80046de:	0798      	lsls	r0, r3, #30
 80046e0:	d521      	bpl.n	8004726 <__lo0bits+0x56>
 80046e2:	085b      	lsrs	r3, r3, #1
 80046e4:	600b      	str	r3, [r1, #0]
 80046e6:	2001      	movs	r0, #1
 80046e8:	4770      	bx	lr
 80046ea:	b298      	uxth	r0, r3
 80046ec:	b1a0      	cbz	r0, 8004718 <__lo0bits+0x48>
 80046ee:	4610      	mov	r0, r2
 80046f0:	b2da      	uxtb	r2, r3
 80046f2:	b90a      	cbnz	r2, 80046f8 <__lo0bits+0x28>
 80046f4:	3008      	adds	r0, #8
 80046f6:	0a1b      	lsrs	r3, r3, #8
 80046f8:	071a      	lsls	r2, r3, #28
 80046fa:	bf04      	itt	eq
 80046fc:	091b      	lsreq	r3, r3, #4
 80046fe:	3004      	addeq	r0, #4
 8004700:	079a      	lsls	r2, r3, #30
 8004702:	bf04      	itt	eq
 8004704:	089b      	lsreq	r3, r3, #2
 8004706:	3002      	addeq	r0, #2
 8004708:	07da      	lsls	r2, r3, #31
 800470a:	d403      	bmi.n	8004714 <__lo0bits+0x44>
 800470c:	085b      	lsrs	r3, r3, #1
 800470e:	f100 0001 	add.w	r0, r0, #1
 8004712:	d006      	beq.n	8004722 <__lo0bits+0x52>
 8004714:	600b      	str	r3, [r1, #0]
 8004716:	4770      	bx	lr
 8004718:	0c1b      	lsrs	r3, r3, #16
 800471a:	2010      	movs	r0, #16
 800471c:	e7e8      	b.n	80046f0 <__lo0bits+0x20>
 800471e:	2000      	movs	r0, #0
 8004720:	4770      	bx	lr
 8004722:	2020      	movs	r0, #32
 8004724:	4770      	bx	lr
 8004726:	089b      	lsrs	r3, r3, #2
 8004728:	600b      	str	r3, [r1, #0]
 800472a:	2002      	movs	r0, #2
 800472c:	4770      	bx	lr
 800472e:	bf00      	nop

08004730 <__i2b>:
 8004730:	b538      	push	{r3, r4, r5, lr}
 8004732:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8004734:	4604      	mov	r4, r0
 8004736:	460d      	mov	r5, r1
 8004738:	b14b      	cbz	r3, 800474e <__i2b+0x1e>
 800473a:	6858      	ldr	r0, [r3, #4]
 800473c:	b1b0      	cbz	r0, 800476c <__i2b+0x3c>
 800473e:	6802      	ldr	r2, [r0, #0]
 8004740:	605a      	str	r2, [r3, #4]
 8004742:	2200      	movs	r2, #0
 8004744:	2301      	movs	r3, #1
 8004746:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800474a:	60c2      	str	r2, [r0, #12]
 800474c:	bd38      	pop	{r3, r4, r5, pc}
 800474e:	2221      	movs	r2, #33	; 0x21
 8004750:	2104      	movs	r1, #4
 8004752:	f001 fdcb 	bl	80062ec <_calloc_r>
 8004756:	4603      	mov	r3, r0
 8004758:	64e0      	str	r0, [r4, #76]	; 0x4c
 800475a:	2800      	cmp	r0, #0
 800475c:	d1ed      	bne.n	800473a <__i2b+0xa>
 800475e:	4b09      	ldr	r3, [pc, #36]	; (8004784 <__i2b+0x54>)
 8004760:	4809      	ldr	r0, [pc, #36]	; (8004788 <__i2b+0x58>)
 8004762:	2200      	movs	r2, #0
 8004764:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8004768:	f001 fd9a 	bl	80062a0 <__assert_func>
 800476c:	221c      	movs	r2, #28
 800476e:	2101      	movs	r1, #1
 8004770:	4620      	mov	r0, r4
 8004772:	f001 fdbb 	bl	80062ec <_calloc_r>
 8004776:	2800      	cmp	r0, #0
 8004778:	d0f1      	beq.n	800475e <__i2b+0x2e>
 800477a:	2201      	movs	r2, #1
 800477c:	2302      	movs	r3, #2
 800477e:	e9c0 2301 	strd	r2, r3, [r0, #4]
 8004782:	e7de      	b.n	8004742 <__i2b+0x12>
 8004784:	0801c0d8 	.word	0x0801c0d8
 8004788:	0801c120 	.word	0x0801c120

0800478c <__multiply>:
 800478c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004790:	690e      	ldr	r6, [r1, #16]
 8004792:	6915      	ldr	r5, [r2, #16]
 8004794:	42ae      	cmp	r6, r5
 8004796:	b085      	sub	sp, #20
 8004798:	4688      	mov	r8, r1
 800479a:	4614      	mov	r4, r2
 800479c:	db05      	blt.n	80047aa <__multiply+0x1e>
 800479e:	462a      	mov	r2, r5
 80047a0:	4623      	mov	r3, r4
 80047a2:	4635      	mov	r5, r6
 80047a4:	460c      	mov	r4, r1
 80047a6:	4616      	mov	r6, r2
 80047a8:	4698      	mov	r8, r3
 80047aa:	68a3      	ldr	r3, [r4, #8]
 80047ac:	6861      	ldr	r1, [r4, #4]
 80047ae:	19af      	adds	r7, r5, r6
 80047b0:	42bb      	cmp	r3, r7
 80047b2:	bfb8      	it	lt
 80047b4:	3101      	addlt	r1, #1
 80047b6:	f7ff fe8d 	bl	80044d4 <_Balloc>
 80047ba:	9001      	str	r0, [sp, #4]
 80047bc:	2800      	cmp	r0, #0
 80047be:	f000 8087 	beq.w	80048d0 <__multiply+0x144>
 80047c2:	9b01      	ldr	r3, [sp, #4]
 80047c4:	f103 0914 	add.w	r9, r3, #20
 80047c8:	eb09 0a87 	add.w	sl, r9, r7, lsl #2
 80047cc:	45d1      	cmp	r9, sl
 80047ce:	d205      	bcs.n	80047dc <__multiply+0x50>
 80047d0:	464b      	mov	r3, r9
 80047d2:	2200      	movs	r2, #0
 80047d4:	f843 2b04 	str.w	r2, [r3], #4
 80047d8:	459a      	cmp	sl, r3
 80047da:	d8fb      	bhi.n	80047d4 <__multiply+0x48>
 80047dc:	f108 0814 	add.w	r8, r8, #20
 80047e0:	eb08 0b86 	add.w	fp, r8, r6, lsl #2
 80047e4:	f104 0314 	add.w	r3, r4, #20
 80047e8:	45d8      	cmp	r8, fp
 80047ea:	461a      	mov	r2, r3
 80047ec:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 80047f0:	d25f      	bcs.n	80048b2 <__multiply+0x126>
 80047f2:	1b2b      	subs	r3, r5, r4
 80047f4:	3b15      	subs	r3, #21
 80047f6:	f023 0303 	bic.w	r3, r3, #3
 80047fa:	3304      	adds	r3, #4
 80047fc:	3415      	adds	r4, #21
 80047fe:	42a5      	cmp	r5, r4
 8004800:	bf38      	it	cc
 8004802:	2304      	movcc	r3, #4
 8004804:	e9cd a702 	strd	sl, r7, [sp, #8]
 8004808:	46ac      	mov	ip, r5
 800480a:	461f      	mov	r7, r3
 800480c:	4692      	mov	sl, r2
 800480e:	e005      	b.n	800481c <__multiply+0x90>
 8004810:	0c00      	lsrs	r0, r0, #16
 8004812:	d129      	bne.n	8004868 <__multiply+0xdc>
 8004814:	45c3      	cmp	fp, r8
 8004816:	f109 0904 	add.w	r9, r9, #4
 800481a:	d948      	bls.n	80048ae <__multiply+0x122>
 800481c:	f858 0b04 	ldr.w	r0, [r8], #4
 8004820:	b285      	uxth	r5, r0
 8004822:	2d00      	cmp	r5, #0
 8004824:	d0f4      	beq.n	8004810 <__multiply+0x84>
 8004826:	4656      	mov	r6, sl
 8004828:	464c      	mov	r4, r9
 800482a:	2300      	movs	r3, #0
 800482c:	f856 0b04 	ldr.w	r0, [r6], #4
 8004830:	6821      	ldr	r1, [r4, #0]
 8004832:	b282      	uxth	r2, r0
 8004834:	fa1f fe81 	uxth.w	lr, r1
 8004838:	fb05 ee02 	mla	lr, r5, r2, lr
 800483c:	0c00      	lsrs	r0, r0, #16
 800483e:	0c0a      	lsrs	r2, r1, #16
 8004840:	4473      	add	r3, lr
 8004842:	fb05 2200 	mla	r2, r5, r0, r2
 8004846:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800484a:	b29b      	uxth	r3, r3
 800484c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004850:	45b4      	cmp	ip, r6
 8004852:	f844 3b04 	str.w	r3, [r4], #4
 8004856:	ea4f 4312 	mov.w	r3, r2, lsr #16
 800485a:	d8e7      	bhi.n	800482c <__multiply+0xa0>
 800485c:	f849 3007 	str.w	r3, [r9, r7]
 8004860:	f858 0c04 	ldr.w	r0, [r8, #-4]
 8004864:	0c00      	lsrs	r0, r0, #16
 8004866:	d0d5      	beq.n	8004814 <__multiply+0x88>
 8004868:	f8d9 3000 	ldr.w	r3, [r9]
 800486c:	4654      	mov	r4, sl
 800486e:	4619      	mov	r1, r3
 8004870:	464d      	mov	r5, r9
 8004872:	2200      	movs	r2, #0
 8004874:	8826      	ldrh	r6, [r4, #0]
 8004876:	0c09      	lsrs	r1, r1, #16
 8004878:	fb00 1106 	mla	r1, r0, r6, r1
 800487c:	440a      	add	r2, r1
 800487e:	b29b      	uxth	r3, r3
 8004880:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004884:	f845 3b04 	str.w	r3, [r5], #4
 8004888:	f854 6b04 	ldr.w	r6, [r4], #4
 800488c:	6829      	ldr	r1, [r5, #0]
 800488e:	0c36      	lsrs	r6, r6, #16
 8004890:	b28b      	uxth	r3, r1
 8004892:	fb00 3306 	mla	r3, r0, r6, r3
 8004896:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800489a:	45a4      	cmp	ip, r4
 800489c:	ea4f 4213 	mov.w	r2, r3, lsr #16
 80048a0:	d8e8      	bhi.n	8004874 <__multiply+0xe8>
 80048a2:	45c3      	cmp	fp, r8
 80048a4:	f849 3007 	str.w	r3, [r9, r7]
 80048a8:	f109 0904 	add.w	r9, r9, #4
 80048ac:	d8b6      	bhi.n	800481c <__multiply+0x90>
 80048ae:	e9dd a702 	ldrd	sl, r7, [sp, #8]
 80048b2:	2f00      	cmp	r7, #0
 80048b4:	dc02      	bgt.n	80048bc <__multiply+0x130>
 80048b6:	e005      	b.n	80048c4 <__multiply+0x138>
 80048b8:	3f01      	subs	r7, #1
 80048ba:	d003      	beq.n	80048c4 <__multiply+0x138>
 80048bc:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d0f9      	beq.n	80048b8 <__multiply+0x12c>
 80048c4:	9b01      	ldr	r3, [sp, #4]
 80048c6:	4618      	mov	r0, r3
 80048c8:	611f      	str	r7, [r3, #16]
 80048ca:	b005      	add	sp, #20
 80048cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048d0:	4b03      	ldr	r3, [pc, #12]	; (80048e0 <__multiply+0x154>)
 80048d2:	4804      	ldr	r0, [pc, #16]	; (80048e4 <__multiply+0x158>)
 80048d4:	9a01      	ldr	r2, [sp, #4]
 80048d6:	f240 115d 	movw	r1, #349	; 0x15d
 80048da:	f001 fce1 	bl	80062a0 <__assert_func>
 80048de:	bf00      	nop
 80048e0:	0801c0d8 	.word	0x0801c0d8
 80048e4:	0801c120 	.word	0x0801c120

080048e8 <__pow5mult>:
 80048e8:	f012 0303 	ands.w	r3, r2, #3
 80048ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048f0:	4614      	mov	r4, r2
 80048f2:	4606      	mov	r6, r0
 80048f4:	d132      	bne.n	800495c <__pow5mult+0x74>
 80048f6:	460d      	mov	r5, r1
 80048f8:	10a4      	asrs	r4, r4, #2
 80048fa:	d020      	beq.n	800493e <__pow5mult+0x56>
 80048fc:	f8d6 8048 	ldr.w	r8, [r6, #72]	; 0x48
 8004900:	f1b8 0f00 	cmp.w	r8, #0
 8004904:	d033      	beq.n	800496e <__pow5mult+0x86>
 8004906:	07e3      	lsls	r3, r4, #31
 8004908:	f04f 0700 	mov.w	r7, #0
 800490c:	d407      	bmi.n	800491e <__pow5mult+0x36>
 800490e:	1064      	asrs	r4, r4, #1
 8004910:	d015      	beq.n	800493e <__pow5mult+0x56>
 8004912:	f8d8 0000 	ldr.w	r0, [r8]
 8004916:	b1a8      	cbz	r0, 8004944 <__pow5mult+0x5c>
 8004918:	4680      	mov	r8, r0
 800491a:	07e3      	lsls	r3, r4, #31
 800491c:	d5f7      	bpl.n	800490e <__pow5mult+0x26>
 800491e:	4642      	mov	r2, r8
 8004920:	4629      	mov	r1, r5
 8004922:	4630      	mov	r0, r6
 8004924:	f7ff ff32 	bl	800478c <__multiply>
 8004928:	b1b5      	cbz	r5, 8004958 <__pow5mult+0x70>
 800492a:	6869      	ldr	r1, [r5, #4]
 800492c:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 800492e:	1064      	asrs	r4, r4, #1
 8004930:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 8004934:	602a      	str	r2, [r5, #0]
 8004936:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
 800493a:	4605      	mov	r5, r0
 800493c:	d1e9      	bne.n	8004912 <__pow5mult+0x2a>
 800493e:	4628      	mov	r0, r5
 8004940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004944:	4642      	mov	r2, r8
 8004946:	4641      	mov	r1, r8
 8004948:	4630      	mov	r0, r6
 800494a:	f7ff ff1f 	bl	800478c <__multiply>
 800494e:	f8c8 0000 	str.w	r0, [r8]
 8004952:	6007      	str	r7, [r0, #0]
 8004954:	4680      	mov	r8, r0
 8004956:	e7e0      	b.n	800491a <__pow5mult+0x32>
 8004958:	4605      	mov	r5, r0
 800495a:	e7d8      	b.n	800490e <__pow5mult+0x26>
 800495c:	3b01      	subs	r3, #1
 800495e:	4a0f      	ldr	r2, [pc, #60]	; (800499c <__pow5mult+0xb4>)
 8004960:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004964:	2300      	movs	r3, #0
 8004966:	f7ff fde5 	bl	8004534 <__multadd>
 800496a:	4605      	mov	r5, r0
 800496c:	e7c4      	b.n	80048f8 <__pow5mult+0x10>
 800496e:	2101      	movs	r1, #1
 8004970:	4630      	mov	r0, r6
 8004972:	f7ff fdaf 	bl	80044d4 <_Balloc>
 8004976:	4680      	mov	r8, r0
 8004978:	b140      	cbz	r0, 800498c <__pow5mult+0xa4>
 800497a:	2301      	movs	r3, #1
 800497c:	f240 2271 	movw	r2, #625	; 0x271
 8004980:	e9c0 3204 	strd	r3, r2, [r0, #16]
 8004984:	2300      	movs	r3, #0
 8004986:	64b0      	str	r0, [r6, #72]	; 0x48
 8004988:	6003      	str	r3, [r0, #0]
 800498a:	e7bc      	b.n	8004906 <__pow5mult+0x1e>
 800498c:	4b04      	ldr	r3, [pc, #16]	; (80049a0 <__pow5mult+0xb8>)
 800498e:	4805      	ldr	r0, [pc, #20]	; (80049a4 <__pow5mult+0xbc>)
 8004990:	4642      	mov	r2, r8
 8004992:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8004996:	f001 fc83 	bl	80062a0 <__assert_func>
 800499a:	bf00      	nop
 800499c:	0800ccd0 	.word	0x0800ccd0
 80049a0:	0801c0d8 	.word	0x0801c0d8
 80049a4:	0801c120 	.word	0x0801c120

080049a8 <__lshift>:
 80049a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049ac:	460c      	mov	r4, r1
 80049ae:	4690      	mov	r8, r2
 80049b0:	6926      	ldr	r6, [r4, #16]
 80049b2:	68a3      	ldr	r3, [r4, #8]
 80049b4:	6849      	ldr	r1, [r1, #4]
 80049b6:	eb06 1662 	add.w	r6, r6, r2, asr #5
 80049ba:	1c75      	adds	r5, r6, #1
 80049bc:	429d      	cmp	r5, r3
 80049be:	4607      	mov	r7, r0
 80049c0:	ea4f 1962 	mov.w	r9, r2, asr #5
 80049c4:	dd04      	ble.n	80049d0 <__lshift+0x28>
 80049c6:	005b      	lsls	r3, r3, #1
 80049c8:	429d      	cmp	r5, r3
 80049ca:	f101 0101 	add.w	r1, r1, #1
 80049ce:	dcfa      	bgt.n	80049c6 <__lshift+0x1e>
 80049d0:	4638      	mov	r0, r7
 80049d2:	f7ff fd7f 	bl	80044d4 <_Balloc>
 80049d6:	4684      	mov	ip, r0
 80049d8:	2800      	cmp	r0, #0
 80049da:	d051      	beq.n	8004a80 <__lshift+0xd8>
 80049dc:	f1b9 0f00 	cmp.w	r9, #0
 80049e0:	f100 0014 	add.w	r0, r0, #20
 80049e4:	dd0e      	ble.n	8004a04 <__lshift+0x5c>
 80049e6:	f109 0205 	add.w	r2, r9, #5
 80049ea:	ea4f 0e82 	mov.w	lr, r2, lsl #2
 80049ee:	4603      	mov	r3, r0
 80049f0:	eb0c 0282 	add.w	r2, ip, r2, lsl #2
 80049f4:	2100      	movs	r1, #0
 80049f6:	f843 1b04 	str.w	r1, [r3], #4
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d1fb      	bne.n	80049f6 <__lshift+0x4e>
 80049fe:	f1ae 0314 	sub.w	r3, lr, #20
 8004a02:	4418      	add	r0, r3
 8004a04:	6921      	ldr	r1, [r4, #16]
 8004a06:	f104 0314 	add.w	r3, r4, #20
 8004a0a:	f018 081f 	ands.w	r8, r8, #31
 8004a0e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8004a12:	d02d      	beq.n	8004a70 <__lshift+0xc8>
 8004a14:	f1c8 0920 	rsb	r9, r8, #32
 8004a18:	4686      	mov	lr, r0
 8004a1a:	f04f 0a00 	mov.w	sl, #0
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	fa02 f208 	lsl.w	r2, r2, r8
 8004a24:	ea42 020a 	orr.w	r2, r2, sl
 8004a28:	f84e 2b04 	str.w	r2, [lr], #4
 8004a2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a30:	4299      	cmp	r1, r3
 8004a32:	fa22 fa09 	lsr.w	sl, r2, r9
 8004a36:	d8f2      	bhi.n	8004a1e <__lshift+0x76>
 8004a38:	1b0b      	subs	r3, r1, r4
 8004a3a:	3b15      	subs	r3, #21
 8004a3c:	f023 0303 	bic.w	r3, r3, #3
 8004a40:	3304      	adds	r3, #4
 8004a42:	f104 0215 	add.w	r2, r4, #21
 8004a46:	4291      	cmp	r1, r2
 8004a48:	bf38      	it	cc
 8004a4a:	2304      	movcc	r3, #4
 8004a4c:	f1ba 0f00 	cmp.w	sl, #0
 8004a50:	bf18      	it	ne
 8004a52:	462e      	movne	r6, r5
 8004a54:	f840 a003 	str.w	sl, [r0, r3]
 8004a58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a5a:	6862      	ldr	r2, [r4, #4]
 8004a5c:	f8cc 6010 	str.w	r6, [ip, #16]
 8004a60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004a64:	6021      	str	r1, [r4, #0]
 8004a66:	4660      	mov	r0, ip
 8004a68:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004a6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a70:	3804      	subs	r0, #4
 8004a72:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a76:	f840 2f04 	str.w	r2, [r0, #4]!
 8004a7a:	4299      	cmp	r1, r3
 8004a7c:	d8f9      	bhi.n	8004a72 <__lshift+0xca>
 8004a7e:	e7eb      	b.n	8004a58 <__lshift+0xb0>
 8004a80:	4b03      	ldr	r3, [pc, #12]	; (8004a90 <__lshift+0xe8>)
 8004a82:	4804      	ldr	r0, [pc, #16]	; (8004a94 <__lshift+0xec>)
 8004a84:	4662      	mov	r2, ip
 8004a86:	f240 11d9 	movw	r1, #473	; 0x1d9
 8004a8a:	f001 fc09 	bl	80062a0 <__assert_func>
 8004a8e:	bf00      	nop
 8004a90:	0801c0d8 	.word	0x0801c0d8
 8004a94:	0801c120 	.word	0x0801c120

08004a98 <__mcmp>:
 8004a98:	690b      	ldr	r3, [r1, #16]
 8004a9a:	4684      	mov	ip, r0
 8004a9c:	6900      	ldr	r0, [r0, #16]
 8004a9e:	1ac0      	subs	r0, r0, r3
 8004aa0:	d116      	bne.n	8004ad0 <__mcmp+0x38>
 8004aa2:	f10c 0c14 	add.w	ip, ip, #20
 8004aa6:	3114      	adds	r1, #20
 8004aa8:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
 8004aac:	b410      	push	{r4}
 8004aae:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8004ab2:	e001      	b.n	8004ab8 <__mcmp+0x20>
 8004ab4:	4594      	cmp	ip, r2
 8004ab6:	d208      	bcs.n	8004aca <__mcmp+0x32>
 8004ab8:	f852 4d04 	ldr.w	r4, [r2, #-4]!
 8004abc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8004ac0:	428c      	cmp	r4, r1
 8004ac2:	d0f7      	beq.n	8004ab4 <__mcmp+0x1c>
 8004ac4:	d205      	bcs.n	8004ad2 <__mcmp+0x3a>
 8004ac6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004aca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004ace:	4770      	bx	lr
 8004ad0:	4770      	bx	lr
 8004ad2:	2001      	movs	r0, #1
 8004ad4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004ad8:	4770      	bx	lr
 8004ada:	bf00      	nop

08004adc <__mdiff>:
 8004adc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ae0:	690f      	ldr	r7, [r1, #16]
 8004ae2:	6913      	ldr	r3, [r2, #16]
 8004ae4:	1aff      	subs	r7, r7, r3
 8004ae6:	2f00      	cmp	r7, #0
 8004ae8:	460e      	mov	r6, r1
 8004aea:	4690      	mov	r8, r2
 8004aec:	d17a      	bne.n	8004be4 <__mdiff+0x108>
 8004aee:	f101 0514 	add.w	r5, r1, #20
 8004af2:	3214      	adds	r2, #20
 8004af4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8004af8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8004afc:	e001      	b.n	8004b02 <__mdiff+0x26>
 8004afe:	429d      	cmp	r5, r3
 8004b00:	d273      	bcs.n	8004bea <__mdiff+0x10e>
 8004b02:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8004b06:	f852 4d04 	ldr.w	r4, [r2, #-4]!
 8004b0a:	42a1      	cmp	r1, r4
 8004b0c:	d0f7      	beq.n	8004afe <__mdiff+0x22>
 8004b0e:	d364      	bcc.n	8004bda <__mdiff+0xfe>
 8004b10:	6871      	ldr	r1, [r6, #4]
 8004b12:	f7ff fcdf 	bl	80044d4 <_Balloc>
 8004b16:	4681      	mov	r9, r0
 8004b18:	2800      	cmp	r0, #0
 8004b1a:	d072      	beq.n	8004c02 <__mdiff+0x126>
 8004b1c:	6935      	ldr	r5, [r6, #16]
 8004b1e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8004b22:	60c7      	str	r7, [r0, #12]
 8004b24:	f108 0e14 	add.w	lr, r8, #20
 8004b28:	f106 0014 	add.w	r0, r6, #20
 8004b2c:	f109 0a14 	add.w	sl, r9, #20
 8004b30:	f106 0c10 	add.w	ip, r6, #16
 8004b34:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
 8004b38:	eb00 0785 	add.w	r7, r0, r5, lsl #2
 8004b3c:	4656      	mov	r6, sl
 8004b3e:	2100      	movs	r1, #0
 8004b40:	f85e 4b04 	ldr.w	r4, [lr], #4
 8004b44:	f85c bf04 	ldr.w	fp, [ip, #4]!
 8004b48:	b2a3      	uxth	r3, r4
 8004b4a:	fa11 f18b 	uxtah	r1, r1, fp
 8004b4e:	1acb      	subs	r3, r1, r3
 8004b50:	0c21      	lsrs	r1, r4, #16
 8004b52:	ebc1 411b 	rsb	r1, r1, fp, lsr #16
 8004b56:	eb01 4123 	add.w	r1, r1, r3, asr #16
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8004b60:	4572      	cmp	r2, lr
 8004b62:	f846 3b04 	str.w	r3, [r6], #4
 8004b66:	ea4f 4121 	mov.w	r1, r1, asr #16
 8004b6a:	d8e9      	bhi.n	8004b40 <__mdiff+0x64>
 8004b6c:	eba2 0408 	sub.w	r4, r2, r8
 8004b70:	3c15      	subs	r4, #21
 8004b72:	f108 0815 	add.w	r8, r8, #21
 8004b76:	4542      	cmp	r2, r8
 8004b78:	f024 0603 	bic.w	r6, r4, #3
 8004b7c:	f106 0604 	add.w	r6, r6, #4
 8004b80:	bf38      	it	cc
 8004b82:	2604      	movcc	r6, #4
 8004b84:	4430      	add	r0, r6
 8004b86:	f024 0203 	bic.w	r2, r4, #3
 8004b8a:	bf38      	it	cc
 8004b8c:	2200      	movcc	r2, #0
 8004b8e:	4287      	cmp	r7, r0
 8004b90:	4452      	add	r2, sl
 8004b92:	44b2      	add	sl, r6
 8004b94:	d916      	bls.n	8004bc4 <__mdiff+0xe8>
 8004b96:	4656      	mov	r6, sl
 8004b98:	4604      	mov	r4, r0
 8004b9a:	f854 3b04 	ldr.w	r3, [r4], #4
 8004b9e:	fa11 f183 	uxtah	r1, r1, r3
 8004ba2:	140a      	asrs	r2, r1, #16
 8004ba4:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8004ba8:	b289      	uxth	r1, r1
 8004baa:	ea41 4302 	orr.w	r3, r1, r2, lsl #16
 8004bae:	42a7      	cmp	r7, r4
 8004bb0:	f846 3b04 	str.w	r3, [r6], #4
 8004bb4:	ea4f 4122 	mov.w	r1, r2, asr #16
 8004bb8:	d8ef      	bhi.n	8004b9a <__mdiff+0xbe>
 8004bba:	1e7a      	subs	r2, r7, #1
 8004bbc:	1a10      	subs	r0, r2, r0
 8004bbe:	f020 0203 	bic.w	r2, r0, #3
 8004bc2:	4452      	add	r2, sl
 8004bc4:	b923      	cbnz	r3, 8004bd0 <__mdiff+0xf4>
 8004bc6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8004bca:	3d01      	subs	r5, #1
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d0fa      	beq.n	8004bc6 <__mdiff+0xea>
 8004bd0:	f8c9 5010 	str.w	r5, [r9, #16]
 8004bd4:	4648      	mov	r0, r9
 8004bd6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bda:	4633      	mov	r3, r6
 8004bdc:	2701      	movs	r7, #1
 8004bde:	4646      	mov	r6, r8
 8004be0:	4698      	mov	r8, r3
 8004be2:	e795      	b.n	8004b10 <__mdiff+0x34>
 8004be4:	dbf9      	blt.n	8004bda <__mdiff+0xfe>
 8004be6:	2700      	movs	r7, #0
 8004be8:	e792      	b.n	8004b10 <__mdiff+0x34>
 8004bea:	2100      	movs	r1, #0
 8004bec:	f7ff fc72 	bl	80044d4 <_Balloc>
 8004bf0:	4681      	mov	r9, r0
 8004bf2:	b168      	cbz	r0, 8004c10 <__mdiff+0x134>
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	e9c9 2304 	strd	r2, r3, [r9, #16]
 8004bfc:	4648      	mov	r0, r9
 8004bfe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c02:	4b07      	ldr	r3, [pc, #28]	; (8004c20 <__mdiff+0x144>)
 8004c04:	4807      	ldr	r0, [pc, #28]	; (8004c24 <__mdiff+0x148>)
 8004c06:	464a      	mov	r2, r9
 8004c08:	f44f 7110 	mov.w	r1, #576	; 0x240
 8004c0c:	f001 fb48 	bl	80062a0 <__assert_func>
 8004c10:	4b03      	ldr	r3, [pc, #12]	; (8004c20 <__mdiff+0x144>)
 8004c12:	4804      	ldr	r0, [pc, #16]	; (8004c24 <__mdiff+0x148>)
 8004c14:	464a      	mov	r2, r9
 8004c16:	f240 2132 	movw	r1, #562	; 0x232
 8004c1a:	f001 fb41 	bl	80062a0 <__assert_func>
 8004c1e:	bf00      	nop
 8004c20:	0801c0d8 	.word	0x0801c0d8
 8004c24:	0801c120 	.word	0x0801c120

08004c28 <__ulp>:
 8004c28:	b082      	sub	sp, #8
 8004c2a:	ed8d 0b00 	vstr	d0, [sp]
 8004c2e:	4b15      	ldr	r3, [pc, #84]	; (8004c84 <__ulp+0x5c>)
 8004c30:	9a01      	ldr	r2, [sp, #4]
 8004c32:	4013      	ands	r3, r2
 8004c34:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	dd05      	ble.n	8004c48 <__ulp+0x20>
 8004c3c:	2000      	movs	r0, #0
 8004c3e:	4619      	mov	r1, r3
 8004c40:	ec41 0b10 	vmov	d0, r0, r1
 8004c44:	b002      	add	sp, #8
 8004c46:	4770      	bx	lr
 8004c48:	425b      	negs	r3, r3
 8004c4a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8004c4e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8004c52:	da08      	bge.n	8004c66 <__ulp+0x3e>
 8004c54:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004c58:	2000      	movs	r0, #0
 8004c5a:	fa43 f102 	asr.w	r1, r3, r2
 8004c5e:	ec41 0b10 	vmov	d0, r0, r1
 8004c62:	b002      	add	sp, #8
 8004c64:	4770      	bx	lr
 8004c66:	3a14      	subs	r2, #20
 8004c68:	2a1e      	cmp	r2, #30
 8004c6a:	bfda      	itte	le
 8004c6c:	f04f 4300 	movle.w	r3, #2147483648	; 0x80000000
 8004c70:	fa23 f202 	lsrle.w	r2, r3, r2
 8004c74:	2201      	movgt	r2, #1
 8004c76:	2100      	movs	r1, #0
 8004c78:	4610      	mov	r0, r2
 8004c7a:	ec41 0b10 	vmov	d0, r0, r1
 8004c7e:	b002      	add	sp, #8
 8004c80:	4770      	bx	lr
 8004c82:	bf00      	nop
 8004c84:	7ff00000 	.word	0x7ff00000

08004c88 <__b2d>:
 8004c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c8a:	6904      	ldr	r4, [r0, #16]
 8004c8c:	f100 0614 	add.w	r6, r0, #20
 8004c90:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8004c94:	1f27      	subs	r7, r4, #4
 8004c96:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8004c9a:	4628      	mov	r0, r5
 8004c9c:	f7ff fcf8 	bl	8004690 <__hi0bits>
 8004ca0:	f1c0 0320 	rsb	r3, r0, #32
 8004ca4:	280a      	cmp	r0, #10
 8004ca6:	600b      	str	r3, [r1, #0]
 8004ca8:	dd31      	ble.n	8004d0e <__b2d+0x86>
 8004caa:	42be      	cmp	r6, r7
 8004cac:	d21b      	bcs.n	8004ce6 <__b2d+0x5e>
 8004cae:	380b      	subs	r0, #11
 8004cb0:	f854 1c08 	ldr.w	r1, [r4, #-8]
 8004cb4:	d023      	beq.n	8004cfe <__b2d+0x76>
 8004cb6:	f1c0 0c20 	rsb	ip, r0, #32
 8004cba:	4085      	lsls	r5, r0
 8004cbc:	fa21 f70c 	lsr.w	r7, r1, ip
 8004cc0:	432f      	orrs	r7, r5
 8004cc2:	f1a4 0508 	sub.w	r5, r4, #8
 8004cc6:	f047 537f 	orr.w	r3, r7, #1069547520	; 0x3fc00000
 8004cca:	42ae      	cmp	r6, r5
 8004ccc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8004cd0:	d236      	bcs.n	8004d40 <__b2d+0xb8>
 8004cd2:	4081      	lsls	r1, r0
 8004cd4:	f854 0c0c 	ldr.w	r0, [r4, #-12]
 8004cd8:	fa20 f00c 	lsr.w	r0, r0, ip
 8004cdc:	4308      	orrs	r0, r1
 8004cde:	4602      	mov	r2, r0
 8004ce0:	ec43 2b10 	vmov	d0, r2, r3
 8004ce4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ce6:	380b      	subs	r0, #11
 8004ce8:	d008      	beq.n	8004cfc <__b2d+0x74>
 8004cea:	fa05 f000 	lsl.w	r0, r5, r0
 8004cee:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 8004cf2:	2000      	movs	r0, #0
 8004cf4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	e7f1      	b.n	8004ce0 <__b2d+0x58>
 8004cfc:	4601      	mov	r1, r0
 8004cfe:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8004d02:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8004d06:	460a      	mov	r2, r1
 8004d08:	ec43 2b10 	vmov	d0, r2, r3
 8004d0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d0e:	f1c0 0c0b 	rsb	ip, r0, #11
 8004d12:	fa25 f10c 	lsr.w	r1, r5, ip
 8004d16:	42be      	cmp	r6, r7
 8004d18:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
 8004d1c:	bf38      	it	cc
 8004d1e:	f854 1c08 	ldrcc.w	r1, [r4, #-8]
 8004d22:	f100 0015 	add.w	r0, r0, #21
 8004d26:	bf34      	ite	cc
 8004d28:	fa21 f10c 	lsrcc.w	r1, r1, ip
 8004d2c:	2100      	movcs	r1, #0
 8004d2e:	fa05 f000 	lsl.w	r0, r5, r0
 8004d32:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8004d36:	ea40 0201 	orr.w	r2, r0, r1
 8004d3a:	ec43 2b10 	vmov	d0, r2, r3
 8004d3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d40:	fa01 f000 	lsl.w	r0, r1, r0
 8004d44:	4602      	mov	r2, r0
 8004d46:	e7cb      	b.n	8004ce0 <__b2d+0x58>

08004d48 <__d2b>:
 8004d48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004d4c:	4688      	mov	r8, r1
 8004d4e:	b083      	sub	sp, #12
 8004d50:	2101      	movs	r1, #1
 8004d52:	ec57 6b10 	vmov	r6, r7, d0
 8004d56:	4615      	mov	r5, r2
 8004d58:	f7ff fbbc 	bl	80044d4 <_Balloc>
 8004d5c:	4604      	mov	r4, r0
 8004d5e:	2800      	cmp	r0, #0
 8004d60:	d04f      	beq.n	8004e02 <__d2b+0xba>
 8004d62:	f3c7 590a 	ubfx	r9, r7, #20, #11
 8004d66:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004d6a:	f1b9 0f00 	cmp.w	r9, #0
 8004d6e:	d001      	beq.n	8004d74 <__d2b+0x2c>
 8004d70:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d74:	2e00      	cmp	r6, #0
 8004d76:	9301      	str	r3, [sp, #4]
 8004d78:	d024      	beq.n	8004dc4 <__d2b+0x7c>
 8004d7a:	4668      	mov	r0, sp
 8004d7c:	9600      	str	r6, [sp, #0]
 8004d7e:	f7ff fca7 	bl	80046d0 <__lo0bits>
 8004d82:	2800      	cmp	r0, #0
 8004d84:	d039      	beq.n	8004dfa <__d2b+0xb2>
 8004d86:	e9dd 1300 	ldrd	r1, r3, [sp]
 8004d8a:	f1c0 0220 	rsb	r2, r0, #32
 8004d8e:	fa03 f202 	lsl.w	r2, r3, r2
 8004d92:	430a      	orrs	r2, r1
 8004d94:	40c3      	lsrs	r3, r0
 8004d96:	6162      	str	r2, [r4, #20]
 8004d98:	9301      	str	r3, [sp, #4]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	bf14      	ite	ne
 8004d9e:	2202      	movne	r2, #2
 8004da0:	2201      	moveq	r2, #1
 8004da2:	61a3      	str	r3, [r4, #24]
 8004da4:	6122      	str	r2, [r4, #16]
 8004da6:	f1b9 0f00 	cmp.w	r9, #0
 8004daa:	d016      	beq.n	8004dda <__d2b+0x92>
 8004dac:	f2a9 4333 	subw	r3, r9, #1075	; 0x433
 8004db0:	4403      	add	r3, r0
 8004db2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004db6:	f8c8 3000 	str.w	r3, [r8]
 8004dba:	6028      	str	r0, [r5, #0]
 8004dbc:	4620      	mov	r0, r4
 8004dbe:	b003      	add	sp, #12
 8004dc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004dc4:	a801      	add	r0, sp, #4
 8004dc6:	f7ff fc83 	bl	80046d0 <__lo0bits>
 8004dca:	9b01      	ldr	r3, [sp, #4]
 8004dcc:	6163      	str	r3, [r4, #20]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	3020      	adds	r0, #32
 8004dd2:	6122      	str	r2, [r4, #16]
 8004dd4:	f1b9 0f00 	cmp.w	r9, #0
 8004dd8:	d1e8      	bne.n	8004dac <__d2b+0x64>
 8004dda:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8004dde:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004de2:	f8c8 0000 	str.w	r0, [r8]
 8004de6:	6918      	ldr	r0, [r3, #16]
 8004de8:	f7ff fc52 	bl	8004690 <__hi0bits>
 8004dec:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8004df0:	6028      	str	r0, [r5, #0]
 8004df2:	4620      	mov	r0, r4
 8004df4:	b003      	add	sp, #12
 8004df6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004dfa:	9b00      	ldr	r3, [sp, #0]
 8004dfc:	6163      	str	r3, [r4, #20]
 8004dfe:	9b01      	ldr	r3, [sp, #4]
 8004e00:	e7cb      	b.n	8004d9a <__d2b+0x52>
 8004e02:	4b03      	ldr	r3, [pc, #12]	; (8004e10 <__d2b+0xc8>)
 8004e04:	4803      	ldr	r0, [pc, #12]	; (8004e14 <__d2b+0xcc>)
 8004e06:	4622      	mov	r2, r4
 8004e08:	f240 310a 	movw	r1, #778	; 0x30a
 8004e0c:	f001 fa48 	bl	80062a0 <__assert_func>
 8004e10:	0801c0d8 	.word	0x0801c0d8
 8004e14:	0801c120 	.word	0x0801c120

08004e18 <__ratio>:
 8004e18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004e1c:	b083      	sub	sp, #12
 8004e1e:	460e      	mov	r6, r1
 8004e20:	4669      	mov	r1, sp
 8004e22:	4607      	mov	r7, r0
 8004e24:	f7ff ff30 	bl	8004c88 <__b2d>
 8004e28:	a901      	add	r1, sp, #4
 8004e2a:	4630      	mov	r0, r6
 8004e2c:	ec55 4b10 	vmov	r4, r5, d0
 8004e30:	f7ff ff2a 	bl	8004c88 <__b2d>
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	6931      	ldr	r1, [r6, #16]
 8004e38:	1a59      	subs	r1, r3, r1
 8004e3a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004e3e:	1ad3      	subs	r3, r2, r3
 8004e40:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	ec51 0b10 	vmov	r0, r1, d0
 8004e4a:	dd0d      	ble.n	8004e68 <__ratio+0x50>
 8004e4c:	eb05 5903 	add.w	r9, r5, r3, lsl #20
 8004e50:	464d      	mov	r5, r9
 8004e52:	4602      	mov	r2, r0
 8004e54:	460b      	mov	r3, r1
 8004e56:	4620      	mov	r0, r4
 8004e58:	4629      	mov	r1, r5
 8004e5a:	f002 fa15 	bl	8007288 <__aeabi_ddiv>
 8004e5e:	ec41 0b10 	vmov	d0, r0, r1
 8004e62:	b003      	add	sp, #12
 8004e64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004e68:	ebc3 3303 	rsb	r3, r3, r3, lsl #12
 8004e6c:	eb01 5703 	add.w	r7, r1, r3, lsl #20
 8004e70:	4639      	mov	r1, r7
 8004e72:	e7ee      	b.n	8004e52 <__ratio+0x3a>

08004e74 <_mprec_log10>:
 8004e74:	2817      	cmp	r0, #23
 8004e76:	b570      	push	{r4, r5, r6, lr}
 8004e78:	4606      	mov	r6, r0
 8004e7a:	dd0c      	ble.n	8004e96 <_mprec_log10+0x22>
 8004e7c:	490a      	ldr	r1, [pc, #40]	; (8004ea8 <_mprec_log10+0x34>)
 8004e7e:	4d0b      	ldr	r5, [pc, #44]	; (8004eac <_mprec_log10+0x38>)
 8004e80:	2000      	movs	r0, #0
 8004e82:	2400      	movs	r4, #0
 8004e84:	4622      	mov	r2, r4
 8004e86:	462b      	mov	r3, r5
 8004e88:	f002 f8d4 	bl	8007034 <__aeabi_dmul>
 8004e8c:	3e01      	subs	r6, #1
 8004e8e:	d1f9      	bne.n	8004e84 <_mprec_log10+0x10>
 8004e90:	ec41 0b10 	vmov	d0, r0, r1
 8004e94:	bd70      	pop	{r4, r5, r6, pc}
 8004e96:	4b06      	ldr	r3, [pc, #24]	; (8004eb0 <_mprec_log10+0x3c>)
 8004e98:	eb03 06c0 	add.w	r6, r3, r0, lsl #3
 8004e9c:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
 8004ea0:	ec41 0b10 	vmov	d0, r0, r1
 8004ea4:	bd70      	pop	{r4, r5, r6, pc}
 8004ea6:	bf00      	nop
 8004ea8:	3ff00000 	.word	0x3ff00000
 8004eac:	40240000 	.word	0x40240000
 8004eb0:	0800ccd0 	.word	0x0800ccd0

08004eb4 <__copybits>:
 8004eb4:	3901      	subs	r1, #1
 8004eb6:	1149      	asrs	r1, r1, #5
 8004eb8:	f101 0c01 	add.w	ip, r1, #1
 8004ebc:	6911      	ldr	r1, [r2, #16]
 8004ebe:	f102 0314 	add.w	r3, r2, #20
 8004ec2:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8004ec6:	428b      	cmp	r3, r1
 8004ec8:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8004ecc:	d216      	bcs.n	8004efc <__copybits+0x48>
 8004ece:	b510      	push	{r4, lr}
 8004ed0:	f1a0 0e04 	sub.w	lr, r0, #4
 8004ed4:	f853 4b04 	ldr.w	r4, [r3], #4
 8004ed8:	f84e 4f04 	str.w	r4, [lr, #4]!
 8004edc:	4299      	cmp	r1, r3
 8004ede:	d8f9      	bhi.n	8004ed4 <__copybits+0x20>
 8004ee0:	1a8b      	subs	r3, r1, r2
 8004ee2:	3b15      	subs	r3, #21
 8004ee4:	f023 0303 	bic.w	r3, r3, #3
 8004ee8:	3304      	adds	r3, #4
 8004eea:	4418      	add	r0, r3
 8004eec:	4584      	cmp	ip, r0
 8004eee:	d904      	bls.n	8004efa <__copybits+0x46>
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	f840 3b04 	str.w	r3, [r0], #4
 8004ef6:	4584      	cmp	ip, r0
 8004ef8:	d8fb      	bhi.n	8004ef2 <__copybits+0x3e>
 8004efa:	bd10      	pop	{r4, pc}
 8004efc:	4584      	cmp	ip, r0
 8004efe:	d905      	bls.n	8004f0c <__copybits+0x58>
 8004f00:	2300      	movs	r3, #0
 8004f02:	f840 3b04 	str.w	r3, [r0], #4
 8004f06:	4584      	cmp	ip, r0
 8004f08:	d8fb      	bhi.n	8004f02 <__copybits+0x4e>
 8004f0a:	4770      	bx	lr
 8004f0c:	4770      	bx	lr
 8004f0e:	bf00      	nop

08004f10 <__any_on>:
 8004f10:	6903      	ldr	r3, [r0, #16]
 8004f12:	114a      	asrs	r2, r1, #5
 8004f14:	4293      	cmp	r3, r2
 8004f16:	f100 0014 	add.w	r0, r0, #20
 8004f1a:	da09      	bge.n	8004f30 <__any_on+0x20>
 8004f1c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8004f20:	e002      	b.n	8004f28 <__any_on+0x18>
 8004f22:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8004f26:	b9ca      	cbnz	r2, 8004f5c <__any_on+0x4c>
 8004f28:	4283      	cmp	r3, r0
 8004f2a:	d8fa      	bhi.n	8004f22 <__any_on+0x12>
 8004f2c:	2000      	movs	r0, #0
 8004f2e:	4770      	bx	lr
 8004f30:	dd11      	ble.n	8004f56 <__any_on+0x46>
 8004f32:	f011 011f 	ands.w	r1, r1, #31
 8004f36:	d00e      	beq.n	8004f56 <__any_on+0x46>
 8004f38:	b410      	push	{r4}
 8004f3a:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
 8004f3e:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 8004f42:	fa24 f201 	lsr.w	r2, r4, r1
 8004f46:	fa02 f101 	lsl.w	r1, r2, r1
 8004f4a:	428c      	cmp	r4, r1
 8004f4c:	d00c      	beq.n	8004f68 <__any_on+0x58>
 8004f4e:	2001      	movs	r0, #1
 8004f50:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004f54:	4770      	bx	lr
 8004f56:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 8004f5a:	e7e5      	b.n	8004f28 <__any_on+0x18>
 8004f5c:	2001      	movs	r0, #1
 8004f5e:	4770      	bx	lr
 8004f60:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8004f64:	2a00      	cmp	r2, #0
 8004f66:	d1f2      	bne.n	8004f4e <__any_on+0x3e>
 8004f68:	4283      	cmp	r3, r0
 8004f6a:	d8f9      	bhi.n	8004f60 <__any_on+0x50>
 8004f6c:	2000      	movs	r0, #0
 8004f6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004f72:	4770      	bx	lr

08004f74 <_putc_r>:
 8004f74:	b570      	push	{r4, r5, r6, lr}
 8004f76:	460d      	mov	r5, r1
 8004f78:	4616      	mov	r6, r2
 8004f7a:	4604      	mov	r4, r0
 8004f7c:	b108      	cbz	r0, 8004f82 <_putc_r+0xe>
 8004f7e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004f80:	b17b      	cbz	r3, 8004fa2 <_putc_r+0x2e>
 8004f82:	68b3      	ldr	r3, [r6, #8]
 8004f84:	3b01      	subs	r3, #1
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	60b3      	str	r3, [r6, #8]
 8004f8a:	da11      	bge.n	8004fb0 <_putc_r+0x3c>
 8004f8c:	69b0      	ldr	r0, [r6, #24]
 8004f8e:	4283      	cmp	r3, r0
 8004f90:	db14      	blt.n	8004fbc <_putc_r+0x48>
 8004f92:	b2e8      	uxtb	r0, r5
 8004f94:	280a      	cmp	r0, #10
 8004f96:	d011      	beq.n	8004fbc <_putc_r+0x48>
 8004f98:	6833      	ldr	r3, [r6, #0]
 8004f9a:	1c5c      	adds	r4, r3, #1
 8004f9c:	6034      	str	r4, [r6, #0]
 8004f9e:	701d      	strb	r5, [r3, #0]
 8004fa0:	bd70      	pop	{r4, r5, r6, pc}
 8004fa2:	f7fe fa91 	bl	80034c8 <__sinit>
 8004fa6:	68b3      	ldr	r3, [r6, #8]
 8004fa8:	3b01      	subs	r3, #1
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	60b3      	str	r3, [r6, #8]
 8004fae:	dbed      	blt.n	8004f8c <_putc_r+0x18>
 8004fb0:	6833      	ldr	r3, [r6, #0]
 8004fb2:	1c5c      	adds	r4, r3, #1
 8004fb4:	6034      	str	r4, [r6, #0]
 8004fb6:	701d      	strb	r5, [r3, #0]
 8004fb8:	b2e8      	uxtb	r0, r5
 8004fba:	bd70      	pop	{r4, r5, r6, pc}
 8004fbc:	4632      	mov	r2, r6
 8004fbe:	4629      	mov	r1, r5
 8004fc0:	4620      	mov	r0, r4
 8004fc2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004fc6:	f001 b907 	b.w	80061d8 <__swbuf_r>
 8004fca:	bf00      	nop

08004fcc <putc>:
 8004fcc:	4b16      	ldr	r3, [pc, #88]	; (8005028 <putc+0x5c>)
 8004fce:	b570      	push	{r4, r5, r6, lr}
 8004fd0:	681e      	ldr	r6, [r3, #0]
 8004fd2:	4605      	mov	r5, r0
 8004fd4:	460c      	mov	r4, r1
 8004fd6:	b10e      	cbz	r6, 8004fdc <putc+0x10>
 8004fd8:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8004fda:	b17b      	cbz	r3, 8004ffc <putc+0x30>
 8004fdc:	68a3      	ldr	r3, [r4, #8]
 8004fde:	3b01      	subs	r3, #1
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	60a3      	str	r3, [r4, #8]
 8004fe4:	da12      	bge.n	800500c <putc+0x40>
 8004fe6:	69a2      	ldr	r2, [r4, #24]
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	db15      	blt.n	8005018 <putc+0x4c>
 8004fec:	b2e8      	uxtb	r0, r5
 8004fee:	280a      	cmp	r0, #10
 8004ff0:	d012      	beq.n	8005018 <putc+0x4c>
 8004ff2:	6823      	ldr	r3, [r4, #0]
 8004ff4:	1c5a      	adds	r2, r3, #1
 8004ff6:	6022      	str	r2, [r4, #0]
 8004ff8:	701d      	strb	r5, [r3, #0]
 8004ffa:	bd70      	pop	{r4, r5, r6, pc}
 8004ffc:	4630      	mov	r0, r6
 8004ffe:	f7fe fa63 	bl	80034c8 <__sinit>
 8005002:	68a3      	ldr	r3, [r4, #8]
 8005004:	3b01      	subs	r3, #1
 8005006:	2b00      	cmp	r3, #0
 8005008:	60a3      	str	r3, [r4, #8]
 800500a:	dbec      	blt.n	8004fe6 <putc+0x1a>
 800500c:	6823      	ldr	r3, [r4, #0]
 800500e:	1c5a      	adds	r2, r3, #1
 8005010:	6022      	str	r2, [r4, #0]
 8005012:	701d      	strb	r5, [r3, #0]
 8005014:	b2e8      	uxtb	r0, r5
 8005016:	bd70      	pop	{r4, r5, r6, pc}
 8005018:	4622      	mov	r2, r4
 800501a:	4629      	mov	r1, r5
 800501c:	4630      	mov	r0, r6
 800501e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005022:	f001 b8d9 	b.w	80061d8 <__swbuf_r>
 8005026:	bf00      	nop
 8005028:	20000008 	.word	0x20000008

0800502c <_realloc_r>:
 800502c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005030:	4617      	mov	r7, r2
 8005032:	2900      	cmp	r1, #0
 8005034:	f000 8098 	beq.w	8005168 <_realloc_r+0x13c>
 8005038:	f107 050b 	add.w	r5, r7, #11
 800503c:	4680      	mov	r8, r0
 800503e:	460c      	mov	r4, r1
 8005040:	f7ff fa44 	bl	80044cc <__malloc_lock>
 8005044:	2d16      	cmp	r5, #22
 8005046:	d85d      	bhi.n	8005104 <_realloc_r+0xd8>
 8005048:	2510      	movs	r5, #16
 800504a:	462a      	mov	r2, r5
 800504c:	42af      	cmp	r7, r5
 800504e:	d85e      	bhi.n	800510e <_realloc_r+0xe2>
 8005050:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8005054:	f021 0603 	bic.w	r6, r1, #3
 8005058:	4296      	cmp	r6, r2
 800505a:	f1a4 0908 	sub.w	r9, r4, #8
 800505e:	da62      	bge.n	8005126 <_realloc_r+0xfa>
 8005060:	4bbc      	ldr	r3, [pc, #752]	; (8005354 <_realloc_r+0x328>)
 8005062:	f8d3 c008 	ldr.w	ip, [r3, #8]
 8005066:	eb09 0006 	add.w	r0, r9, r6
 800506a:	4584      	cmp	ip, r0
 800506c:	f000 8097 	beq.w	800519e <_realloc_r+0x172>
 8005070:	f8d0 c004 	ldr.w	ip, [r0, #4]
 8005074:	f02c 0301 	bic.w	r3, ip, #1
 8005078:	4403      	add	r3, r0
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	07db      	lsls	r3, r3, #31
 800507e:	d468      	bmi.n	8005152 <_realloc_r+0x126>
 8005080:	f02c 0c03 	bic.w	ip, ip, #3
 8005084:	eb06 030c 	add.w	r3, r6, ip
 8005088:	4293      	cmp	r3, r2
 800508a:	da47      	bge.n	800511c <_realloc_r+0xf0>
 800508c:	07cb      	lsls	r3, r1, #31
 800508e:	d410      	bmi.n	80050b2 <_realloc_r+0x86>
 8005090:	f854 3c08 	ldr.w	r3, [r4, #-8]
 8005094:	eba9 0a03 	sub.w	sl, r9, r3
 8005098:	f8da 3004 	ldr.w	r3, [sl, #4]
 800509c:	f023 0103 	bic.w	r1, r3, #3
 80050a0:	448c      	add	ip, r1
 80050a2:	44b4      	add	ip, r6
 80050a4:	4594      	cmp	ip, r2
 80050a6:	f280 8111 	bge.w	80052cc <_realloc_r+0x2a0>
 80050aa:	1873      	adds	r3, r6, r1
 80050ac:	4293      	cmp	r3, r2
 80050ae:	f280 80e8 	bge.w	8005282 <_realloc_r+0x256>
 80050b2:	4639      	mov	r1, r7
 80050b4:	4640      	mov	r0, r8
 80050b6:	f7fe fdf3 	bl	8003ca0 <_malloc_r>
 80050ba:	4607      	mov	r7, r0
 80050bc:	b1e0      	cbz	r0, 80050f8 <_realloc_r+0xcc>
 80050be:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80050c2:	f023 0301 	bic.w	r3, r3, #1
 80050c6:	444b      	add	r3, r9
 80050c8:	f1a0 0208 	sub.w	r2, r0, #8
 80050cc:	4293      	cmp	r3, r2
 80050ce:	f000 80d2 	beq.w	8005276 <_realloc_r+0x24a>
 80050d2:	1f32      	subs	r2, r6, #4
 80050d4:	2a24      	cmp	r2, #36	; 0x24
 80050d6:	f200 80f5 	bhi.w	80052c4 <_realloc_r+0x298>
 80050da:	2a13      	cmp	r2, #19
 80050dc:	f200 80ac 	bhi.w	8005238 <_realloc_r+0x20c>
 80050e0:	4603      	mov	r3, r0
 80050e2:	4622      	mov	r2, r4
 80050e4:	6811      	ldr	r1, [r2, #0]
 80050e6:	6019      	str	r1, [r3, #0]
 80050e8:	6851      	ldr	r1, [r2, #4]
 80050ea:	6059      	str	r1, [r3, #4]
 80050ec:	6892      	ldr	r2, [r2, #8]
 80050ee:	609a      	str	r2, [r3, #8]
 80050f0:	4621      	mov	r1, r4
 80050f2:	4640      	mov	r0, r8
 80050f4:	f7fe fa58 	bl	80035a8 <_free_r>
 80050f8:	4640      	mov	r0, r8
 80050fa:	f7ff f9e9 	bl	80044d0 <__malloc_unlock>
 80050fe:	4638      	mov	r0, r7
 8005100:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005104:	f025 0507 	bic.w	r5, r5, #7
 8005108:	2d00      	cmp	r5, #0
 800510a:	462a      	mov	r2, r5
 800510c:	da9e      	bge.n	800504c <_realloc_r+0x20>
 800510e:	230c      	movs	r3, #12
 8005110:	f8c8 3000 	str.w	r3, [r8]
 8005114:	2700      	movs	r7, #0
 8005116:	4638      	mov	r0, r7
 8005118:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800511c:	461e      	mov	r6, r3
 800511e:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 8005122:	60d3      	str	r3, [r2, #12]
 8005124:	609a      	str	r2, [r3, #8]
 8005126:	1b73      	subs	r3, r6, r5
 8005128:	2b0f      	cmp	r3, #15
 800512a:	d822      	bhi.n	8005172 <_realloc_r+0x146>
 800512c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8005130:	f003 0301 	and.w	r3, r3, #1
 8005134:	4333      	orrs	r3, r6
 8005136:	444e      	add	r6, r9
 8005138:	f8c9 3004 	str.w	r3, [r9, #4]
 800513c:	6873      	ldr	r3, [r6, #4]
 800513e:	f043 0301 	orr.w	r3, r3, #1
 8005142:	6073      	str	r3, [r6, #4]
 8005144:	4640      	mov	r0, r8
 8005146:	4627      	mov	r7, r4
 8005148:	f7ff f9c2 	bl	80044d0 <__malloc_unlock>
 800514c:	4638      	mov	r0, r7
 800514e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005152:	07c9      	lsls	r1, r1, #31
 8005154:	d4ad      	bmi.n	80050b2 <_realloc_r+0x86>
 8005156:	f854 3c08 	ldr.w	r3, [r4, #-8]
 800515a:	eba9 0a03 	sub.w	sl, r9, r3
 800515e:	f8da 1004 	ldr.w	r1, [sl, #4]
 8005162:	f021 0103 	bic.w	r1, r1, #3
 8005166:	e7a0      	b.n	80050aa <_realloc_r+0x7e>
 8005168:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800516c:	4611      	mov	r1, r2
 800516e:	f7fe bd97 	b.w	8003ca0 <_malloc_r>
 8005172:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005176:	f001 0101 	and.w	r1, r1, #1
 800517a:	4329      	orrs	r1, r5
 800517c:	f8c9 1004 	str.w	r1, [r9, #4]
 8005180:	eb09 0105 	add.w	r1, r9, r5
 8005184:	444e      	add	r6, r9
 8005186:	f043 0301 	orr.w	r3, r3, #1
 800518a:	604b      	str	r3, [r1, #4]
 800518c:	6873      	ldr	r3, [r6, #4]
 800518e:	f043 0301 	orr.w	r3, r3, #1
 8005192:	3108      	adds	r1, #8
 8005194:	6073      	str	r3, [r6, #4]
 8005196:	4640      	mov	r0, r8
 8005198:	f7fe fa06 	bl	80035a8 <_free_r>
 800519c:	e7d2      	b.n	8005144 <_realloc_r+0x118>
 800519e:	f8dc 0004 	ldr.w	r0, [ip, #4]
 80051a2:	f020 0b03 	bic.w	fp, r0, #3
 80051a6:	eb06 0c0b 	add.w	ip, r6, fp
 80051aa:	f105 0010 	add.w	r0, r5, #16
 80051ae:	4584      	cmp	ip, r0
 80051b0:	da4d      	bge.n	800524e <_realloc_r+0x222>
 80051b2:	07c9      	lsls	r1, r1, #31
 80051b4:	f53f af7d 	bmi.w	80050b2 <_realloc_r+0x86>
 80051b8:	f854 1c08 	ldr.w	r1, [r4, #-8]
 80051bc:	eba9 0a01 	sub.w	sl, r9, r1
 80051c0:	f8da 1004 	ldr.w	r1, [sl, #4]
 80051c4:	f021 0103 	bic.w	r1, r1, #3
 80051c8:	448b      	add	fp, r1
 80051ca:	44b3      	add	fp, r6
 80051cc:	4558      	cmp	r0, fp
 80051ce:	f73f af6c 	bgt.w	80050aa <_realloc_r+0x7e>
 80051d2:	4657      	mov	r7, sl
 80051d4:	f8da 100c 	ldr.w	r1, [sl, #12]
 80051d8:	f857 0f08 	ldr.w	r0, [r7, #8]!
 80051dc:	1f32      	subs	r2, r6, #4
 80051de:	2a24      	cmp	r2, #36	; 0x24
 80051e0:	60c1      	str	r1, [r0, #12]
 80051e2:	6088      	str	r0, [r1, #8]
 80051e4:	f200 80db 	bhi.w	800539e <_realloc_r+0x372>
 80051e8:	2a13      	cmp	r2, #19
 80051ea:	f240 80d6 	bls.w	800539a <_realloc_r+0x36e>
 80051ee:	6821      	ldr	r1, [r4, #0]
 80051f0:	f8ca 1008 	str.w	r1, [sl, #8]
 80051f4:	6861      	ldr	r1, [r4, #4]
 80051f6:	f8ca 100c 	str.w	r1, [sl, #12]
 80051fa:	2a1b      	cmp	r2, #27
 80051fc:	f200 80df 	bhi.w	80053be <_realloc_r+0x392>
 8005200:	3408      	adds	r4, #8
 8005202:	f10a 0210 	add.w	r2, sl, #16
 8005206:	6821      	ldr	r1, [r4, #0]
 8005208:	6011      	str	r1, [r2, #0]
 800520a:	6861      	ldr	r1, [r4, #4]
 800520c:	6051      	str	r1, [r2, #4]
 800520e:	68a1      	ldr	r1, [r4, #8]
 8005210:	6091      	str	r1, [r2, #8]
 8005212:	eb0a 0105 	add.w	r1, sl, r5
 8005216:	ebab 0205 	sub.w	r2, fp, r5
 800521a:	f042 0201 	orr.w	r2, r2, #1
 800521e:	6099      	str	r1, [r3, #8]
 8005220:	604a      	str	r2, [r1, #4]
 8005222:	f8da 3004 	ldr.w	r3, [sl, #4]
 8005226:	f003 0301 	and.w	r3, r3, #1
 800522a:	431d      	orrs	r5, r3
 800522c:	4640      	mov	r0, r8
 800522e:	f8ca 5004 	str.w	r5, [sl, #4]
 8005232:	f7ff f94d 	bl	80044d0 <__malloc_unlock>
 8005236:	e76e      	b.n	8005116 <_realloc_r+0xea>
 8005238:	6823      	ldr	r3, [r4, #0]
 800523a:	6003      	str	r3, [r0, #0]
 800523c:	6863      	ldr	r3, [r4, #4]
 800523e:	6043      	str	r3, [r0, #4]
 8005240:	2a1b      	cmp	r2, #27
 8005242:	d868      	bhi.n	8005316 <_realloc_r+0x2ea>
 8005244:	f104 0208 	add.w	r2, r4, #8
 8005248:	f100 0308 	add.w	r3, r0, #8
 800524c:	e74a      	b.n	80050e4 <_realloc_r+0xb8>
 800524e:	eb09 0205 	add.w	r2, r9, r5
 8005252:	609a      	str	r2, [r3, #8]
 8005254:	ebac 0305 	sub.w	r3, ip, r5
 8005258:	f043 0301 	orr.w	r3, r3, #1
 800525c:	6053      	str	r3, [r2, #4]
 800525e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8005262:	f003 0301 	and.w	r3, r3, #1
 8005266:	431d      	orrs	r5, r3
 8005268:	4640      	mov	r0, r8
 800526a:	f844 5c04 	str.w	r5, [r4, #-4]
 800526e:	f7ff f92f 	bl	80044d0 <__malloc_unlock>
 8005272:	4627      	mov	r7, r4
 8005274:	e74f      	b.n	8005116 <_realloc_r+0xea>
 8005276:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800527a:	f023 0303 	bic.w	r3, r3, #3
 800527e:	441e      	add	r6, r3
 8005280:	e751      	b.n	8005126 <_realloc_r+0xfa>
 8005282:	4657      	mov	r7, sl
 8005284:	f8da 100c 	ldr.w	r1, [sl, #12]
 8005288:	f857 0f08 	ldr.w	r0, [r7, #8]!
 800528c:	1f32      	subs	r2, r6, #4
 800528e:	2a24      	cmp	r2, #36	; 0x24
 8005290:	60c1      	str	r1, [r0, #12]
 8005292:	6088      	str	r0, [r1, #8]
 8005294:	d84c      	bhi.n	8005330 <_realloc_r+0x304>
 8005296:	2a13      	cmp	r2, #19
 8005298:	d948      	bls.n	800532c <_realloc_r+0x300>
 800529a:	6821      	ldr	r1, [r4, #0]
 800529c:	f8ca 1008 	str.w	r1, [sl, #8]
 80052a0:	6861      	ldr	r1, [r4, #4]
 80052a2:	f8ca 100c 	str.w	r1, [sl, #12]
 80052a6:	2a1b      	cmp	r2, #27
 80052a8:	d856      	bhi.n	8005358 <_realloc_r+0x32c>
 80052aa:	3408      	adds	r4, #8
 80052ac:	f10a 0210 	add.w	r2, sl, #16
 80052b0:	461e      	mov	r6, r3
 80052b2:	6823      	ldr	r3, [r4, #0]
 80052b4:	6013      	str	r3, [r2, #0]
 80052b6:	6863      	ldr	r3, [r4, #4]
 80052b8:	6053      	str	r3, [r2, #4]
 80052ba:	68a3      	ldr	r3, [r4, #8]
 80052bc:	6093      	str	r3, [r2, #8]
 80052be:	46d1      	mov	r9, sl
 80052c0:	463c      	mov	r4, r7
 80052c2:	e730      	b.n	8005126 <_realloc_r+0xfa>
 80052c4:	4621      	mov	r1, r4
 80052c6:	f7ff f885 	bl	80043d4 <memmove>
 80052ca:	e711      	b.n	80050f0 <_realloc_r+0xc4>
 80052cc:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
 80052d0:	4657      	mov	r7, sl
 80052d2:	60cb      	str	r3, [r1, #12]
 80052d4:	6099      	str	r1, [r3, #8]
 80052d6:	f857 1f08 	ldr.w	r1, [r7, #8]!
 80052da:	f8da 300c 	ldr.w	r3, [sl, #12]
 80052de:	60cb      	str	r3, [r1, #12]
 80052e0:	1f32      	subs	r2, r6, #4
 80052e2:	2a24      	cmp	r2, #36	; 0x24
 80052e4:	6099      	str	r1, [r3, #8]
 80052e6:	d82d      	bhi.n	8005344 <_realloc_r+0x318>
 80052e8:	2a13      	cmp	r2, #19
 80052ea:	d929      	bls.n	8005340 <_realloc_r+0x314>
 80052ec:	6823      	ldr	r3, [r4, #0]
 80052ee:	f8ca 3008 	str.w	r3, [sl, #8]
 80052f2:	6863      	ldr	r3, [r4, #4]
 80052f4:	f8ca 300c 	str.w	r3, [sl, #12]
 80052f8:	2a1b      	cmp	r2, #27
 80052fa:	d842      	bhi.n	8005382 <_realloc_r+0x356>
 80052fc:	3408      	adds	r4, #8
 80052fe:	f10a 0310 	add.w	r3, sl, #16
 8005302:	6822      	ldr	r2, [r4, #0]
 8005304:	601a      	str	r2, [r3, #0]
 8005306:	6862      	ldr	r2, [r4, #4]
 8005308:	605a      	str	r2, [r3, #4]
 800530a:	68a2      	ldr	r2, [r4, #8]
 800530c:	609a      	str	r2, [r3, #8]
 800530e:	4666      	mov	r6, ip
 8005310:	46d1      	mov	r9, sl
 8005312:	463c      	mov	r4, r7
 8005314:	e707      	b.n	8005126 <_realloc_r+0xfa>
 8005316:	68a3      	ldr	r3, [r4, #8]
 8005318:	6083      	str	r3, [r0, #8]
 800531a:	68e3      	ldr	r3, [r4, #12]
 800531c:	60c3      	str	r3, [r0, #12]
 800531e:	2a24      	cmp	r2, #36	; 0x24
 8005320:	d026      	beq.n	8005370 <_realloc_r+0x344>
 8005322:	f104 0210 	add.w	r2, r4, #16
 8005326:	f100 0310 	add.w	r3, r0, #16
 800532a:	e6db      	b.n	80050e4 <_realloc_r+0xb8>
 800532c:	463a      	mov	r2, r7
 800532e:	e7bf      	b.n	80052b0 <_realloc_r+0x284>
 8005330:	4621      	mov	r1, r4
 8005332:	4638      	mov	r0, r7
 8005334:	461e      	mov	r6, r3
 8005336:	46d1      	mov	r9, sl
 8005338:	f7ff f84c 	bl	80043d4 <memmove>
 800533c:	463c      	mov	r4, r7
 800533e:	e6f2      	b.n	8005126 <_realloc_r+0xfa>
 8005340:	463b      	mov	r3, r7
 8005342:	e7de      	b.n	8005302 <_realloc_r+0x2d6>
 8005344:	4621      	mov	r1, r4
 8005346:	4638      	mov	r0, r7
 8005348:	4666      	mov	r6, ip
 800534a:	46d1      	mov	r9, sl
 800534c:	f7ff f842 	bl	80043d4 <memmove>
 8005350:	463c      	mov	r4, r7
 8005352:	e6e8      	b.n	8005126 <_realloc_r+0xfa>
 8005354:	20000438 	.word	0x20000438
 8005358:	68a1      	ldr	r1, [r4, #8]
 800535a:	f8ca 1010 	str.w	r1, [sl, #16]
 800535e:	68e1      	ldr	r1, [r4, #12]
 8005360:	f8ca 1014 	str.w	r1, [sl, #20]
 8005364:	2a24      	cmp	r2, #36	; 0x24
 8005366:	d020      	beq.n	80053aa <_realloc_r+0x37e>
 8005368:	3410      	adds	r4, #16
 800536a:	f10a 0218 	add.w	r2, sl, #24
 800536e:	e79f      	b.n	80052b0 <_realloc_r+0x284>
 8005370:	6923      	ldr	r3, [r4, #16]
 8005372:	6103      	str	r3, [r0, #16]
 8005374:	6961      	ldr	r1, [r4, #20]
 8005376:	6141      	str	r1, [r0, #20]
 8005378:	f104 0218 	add.w	r2, r4, #24
 800537c:	f100 0318 	add.w	r3, r0, #24
 8005380:	e6b0      	b.n	80050e4 <_realloc_r+0xb8>
 8005382:	68a3      	ldr	r3, [r4, #8]
 8005384:	f8ca 3010 	str.w	r3, [sl, #16]
 8005388:	68e3      	ldr	r3, [r4, #12]
 800538a:	f8ca 3014 	str.w	r3, [sl, #20]
 800538e:	2a24      	cmp	r2, #36	; 0x24
 8005390:	d021      	beq.n	80053d6 <_realloc_r+0x3aa>
 8005392:	3410      	adds	r4, #16
 8005394:	f10a 0318 	add.w	r3, sl, #24
 8005398:	e7b3      	b.n	8005302 <_realloc_r+0x2d6>
 800539a:	463a      	mov	r2, r7
 800539c:	e733      	b.n	8005206 <_realloc_r+0x1da>
 800539e:	4621      	mov	r1, r4
 80053a0:	4638      	mov	r0, r7
 80053a2:	f7ff f817 	bl	80043d4 <memmove>
 80053a6:	4b16      	ldr	r3, [pc, #88]	; (8005400 <_realloc_r+0x3d4>)
 80053a8:	e733      	b.n	8005212 <_realloc_r+0x1e6>
 80053aa:	6922      	ldr	r2, [r4, #16]
 80053ac:	f8ca 2018 	str.w	r2, [sl, #24]
 80053b0:	6962      	ldr	r2, [r4, #20]
 80053b2:	f8ca 201c 	str.w	r2, [sl, #28]
 80053b6:	3418      	adds	r4, #24
 80053b8:	f10a 0220 	add.w	r2, sl, #32
 80053bc:	e778      	b.n	80052b0 <_realloc_r+0x284>
 80053be:	68a1      	ldr	r1, [r4, #8]
 80053c0:	f8ca 1010 	str.w	r1, [sl, #16]
 80053c4:	68e1      	ldr	r1, [r4, #12]
 80053c6:	f8ca 1014 	str.w	r1, [sl, #20]
 80053ca:	2a24      	cmp	r2, #36	; 0x24
 80053cc:	d00d      	beq.n	80053ea <_realloc_r+0x3be>
 80053ce:	3410      	adds	r4, #16
 80053d0:	f10a 0218 	add.w	r2, sl, #24
 80053d4:	e717      	b.n	8005206 <_realloc_r+0x1da>
 80053d6:	6923      	ldr	r3, [r4, #16]
 80053d8:	f8ca 3018 	str.w	r3, [sl, #24]
 80053dc:	6963      	ldr	r3, [r4, #20]
 80053de:	f8ca 301c 	str.w	r3, [sl, #28]
 80053e2:	3418      	adds	r4, #24
 80053e4:	f10a 0320 	add.w	r3, sl, #32
 80053e8:	e78b      	b.n	8005302 <_realloc_r+0x2d6>
 80053ea:	6922      	ldr	r2, [r4, #16]
 80053ec:	f8ca 2018 	str.w	r2, [sl, #24]
 80053f0:	6962      	ldr	r2, [r4, #20]
 80053f2:	f8ca 201c 	str.w	r2, [sl, #28]
 80053f6:	3418      	adds	r4, #24
 80053f8:	f10a 0220 	add.w	r2, sl, #32
 80053fc:	e703      	b.n	8005206 <_realloc_r+0x1da>
 80053fe:	bf00      	nop
 8005400:	20000438 	.word	0x20000438

08005404 <__sread>:
 8005404:	b510      	push	{r4, lr}
 8005406:	460c      	mov	r4, r1
 8005408:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800540c:	f002 fe88 	bl	8008120 <_read_r>
 8005410:	2800      	cmp	r0, #0
 8005412:	db03      	blt.n	800541c <__sread+0x18>
 8005414:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005416:	4403      	add	r3, r0
 8005418:	6523      	str	r3, [r4, #80]	; 0x50
 800541a:	bd10      	pop	{r4, pc}
 800541c:	89a3      	ldrh	r3, [r4, #12]
 800541e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005422:	81a3      	strh	r3, [r4, #12]
 8005424:	bd10      	pop	{r4, pc}
 8005426:	bf00      	nop

08005428 <__seofread>:
 8005428:	2000      	movs	r0, #0
 800542a:	4770      	bx	lr

0800542c <__swrite>:
 800542c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005430:	460c      	mov	r4, r1
 8005432:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
 8005436:	461f      	mov	r7, r3
 8005438:	05cb      	lsls	r3, r1, #23
 800543a:	4605      	mov	r5, r0
 800543c:	4616      	mov	r6, r2
 800543e:	d40b      	bmi.n	8005458 <__swrite+0x2c>
 8005440:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 8005444:	81a1      	strh	r1, [r4, #12]
 8005446:	463b      	mov	r3, r7
 8005448:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800544c:	4632      	mov	r2, r6
 800544e:	4628      	mov	r0, r5
 8005450:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005454:	f002 beee 	b.w	8008234 <_write_r>
 8005458:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800545c:	2302      	movs	r3, #2
 800545e:	2200      	movs	r2, #0
 8005460:	f002 fd94 	bl	8007f8c <_lseek_r>
 8005464:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8005468:	e7ea      	b.n	8005440 <__swrite+0x14>
 800546a:	bf00      	nop

0800546c <__sseek>:
 800546c:	b510      	push	{r4, lr}
 800546e:	460c      	mov	r4, r1
 8005470:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005474:	f002 fd8a 	bl	8007f8c <_lseek_r>
 8005478:	89a3      	ldrh	r3, [r4, #12]
 800547a:	1c42      	adds	r2, r0, #1
 800547c:	bf0e      	itee	eq
 800547e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005482:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005486:	6520      	strne	r0, [r4, #80]	; 0x50
 8005488:	81a3      	strh	r3, [r4, #12]
 800548a:	bd10      	pop	{r4, pc}

0800548c <__sclose>:
 800548c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005490:	f002 bd72 	b.w	8007f78 <_close_r>

08005494 <__sprint_r.part.0>:
 8005494:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005498:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800549a:	049c      	lsls	r4, r3, #18
 800549c:	4690      	mov	r8, r2
 800549e:	d52d      	bpl.n	80054fc <__sprint_r.part.0+0x68>
 80054a0:	6893      	ldr	r3, [r2, #8]
 80054a2:	6812      	ldr	r2, [r2, #0]
 80054a4:	b343      	cbz	r3, 80054f8 <__sprint_r.part.0+0x64>
 80054a6:	468b      	mov	fp, r1
 80054a8:	4606      	mov	r6, r0
 80054aa:	f102 0908 	add.w	r9, r2, #8
 80054ae:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
 80054b2:	ea5f 079a 	movs.w	r7, sl, lsr #2
 80054b6:	d015      	beq.n	80054e4 <__sprint_r.part.0+0x50>
 80054b8:	3d04      	subs	r5, #4
 80054ba:	2400      	movs	r4, #0
 80054bc:	e001      	b.n	80054c2 <__sprint_r.part.0+0x2e>
 80054be:	42a7      	cmp	r7, r4
 80054c0:	d00e      	beq.n	80054e0 <__sprint_r.part.0+0x4c>
 80054c2:	f855 1f04 	ldr.w	r1, [r5, #4]!
 80054c6:	465a      	mov	r2, fp
 80054c8:	4630      	mov	r0, r6
 80054ca:	f001 f81f 	bl	800650c <_fputwc_r>
 80054ce:	1c43      	adds	r3, r0, #1
 80054d0:	f104 0401 	add.w	r4, r4, #1
 80054d4:	d1f3      	bne.n	80054be <__sprint_r.part.0+0x2a>
 80054d6:	2300      	movs	r3, #0
 80054d8:	e9c8 3301 	strd	r3, r3, [r8, #4]
 80054dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054e0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80054e4:	f02a 0a03 	bic.w	sl, sl, #3
 80054e8:	eba3 030a 	sub.w	r3, r3, sl
 80054ec:	f8c8 3008 	str.w	r3, [r8, #8]
 80054f0:	f109 0908 	add.w	r9, r9, #8
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d1da      	bne.n	80054ae <__sprint_r.part.0+0x1a>
 80054f8:	2000      	movs	r0, #0
 80054fa:	e7ec      	b.n	80054d6 <__sprint_r.part.0+0x42>
 80054fc:	f7fe f95a 	bl	80037b4 <__sfvwrite_r>
 8005500:	2300      	movs	r3, #0
 8005502:	e9c8 3301 	strd	r3, r3, [r8, #4]
 8005506:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800550a:	bf00      	nop

0800550c <__sprint_r>:
 800550c:	b410      	push	{r4}
 800550e:	6894      	ldr	r4, [r2, #8]
 8005510:	b114      	cbz	r4, 8005518 <__sprint_r+0xc>
 8005512:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005516:	e7bd      	b.n	8005494 <__sprint_r.part.0>
 8005518:	4620      	mov	r0, r4
 800551a:	6054      	str	r4, [r2, #4]
 800551c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005520:	4770      	bx	lr
 8005522:	bf00      	nop

08005524 <_vfiprintf_r>:
 8005524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005528:	b0ab      	sub	sp, #172	; 0xac
 800552a:	461c      	mov	r4, r3
 800552c:	4688      	mov	r8, r1
 800552e:	4617      	mov	r7, r2
 8005530:	9306      	str	r3, [sp, #24]
 8005532:	4683      	mov	fp, r0
 8005534:	b118      	cbz	r0, 800553e <_vfiprintf_r+0x1a>
 8005536:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005538:	2b00      	cmp	r3, #0
 800553a:	f000 8225 	beq.w	8005988 <_vfiprintf_r+0x464>
 800553e:	f9b8 100c 	ldrsh.w	r1, [r8, #12]
 8005542:	0488      	lsls	r0, r1, #18
 8005544:	b28a      	uxth	r2, r1
 8005546:	d40a      	bmi.n	800555e <_vfiprintf_r+0x3a>
 8005548:	f8d8 3064 	ldr.w	r3, [r8, #100]	; 0x64
 800554c:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
 8005550:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005554:	f8a8 200c 	strh.w	r2, [r8, #12]
 8005558:	f8c8 3064 	str.w	r3, [r8, #100]	; 0x64
 800555c:	b292      	uxth	r2, r2
 800555e:	0713      	lsls	r3, r2, #28
 8005560:	f140 80a4 	bpl.w	80056ac <_vfiprintf_r+0x188>
 8005564:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8005568:	2b00      	cmp	r3, #0
 800556a:	f000 809f 	beq.w	80056ac <_vfiprintf_r+0x188>
 800556e:	f002 021a 	and.w	r2, r2, #26
 8005572:	2a0a      	cmp	r2, #10
 8005574:	f000 80a8 	beq.w	80056c8 <_vfiprintf_r+0x1a4>
 8005578:	ab1a      	add	r3, sp, #104	; 0x68
 800557a:	930d      	str	r3, [sp, #52]	; 0x34
 800557c:	2300      	movs	r3, #0
 800557e:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
 8005582:	9309      	str	r3, [sp, #36]	; 0x24
 8005584:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 8005588:	9305      	str	r3, [sp, #20]
 800558a:	783b      	ldrb	r3, [r7, #0]
 800558c:	2b00      	cmp	r3, #0
 800558e:	f000 810d 	beq.w	80057ac <_vfiprintf_r+0x288>
 8005592:	463c      	mov	r4, r7
 8005594:	e004      	b.n	80055a0 <_vfiprintf_r+0x7c>
 8005596:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800559a:	2b00      	cmp	r3, #0
 800559c:	f000 80e8 	beq.w	8005770 <_vfiprintf_r+0x24c>
 80055a0:	2b25      	cmp	r3, #37	; 0x25
 80055a2:	d1f8      	bne.n	8005596 <_vfiprintf_r+0x72>
 80055a4:	1be5      	subs	r5, r4, r7
 80055a6:	f040 80e5 	bne.w	8005774 <_vfiprintf_r+0x250>
 80055aa:	7823      	ldrb	r3, [r4, #0]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	f000 80fd 	beq.w	80057ac <_vfiprintf_r+0x288>
 80055b2:	f04f 0200 	mov.w	r2, #0
 80055b6:	2100      	movs	r1, #0
 80055b8:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
 80055bc:	7863      	ldrb	r3, [r4, #1]
 80055be:	9104      	str	r1, [sp, #16]
 80055c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80055c4:	1c67      	adds	r7, r4, #1
 80055c6:	4608      	mov	r0, r1
 80055c8:	9202      	str	r2, [sp, #8]
 80055ca:	468a      	mov	sl, r1
 80055cc:	3701      	adds	r7, #1
 80055ce:	f1a3 0220 	sub.w	r2, r3, #32
 80055d2:	2a58      	cmp	r2, #88	; 0x58
 80055d4:	f200 80f7 	bhi.w	80057c6 <_vfiprintf_r+0x2a2>
 80055d8:	e8df f012 	tbh	[pc, r2, lsl #1]
 80055dc:	00f50233 	.word	0x00f50233
 80055e0:	022f00f5 	.word	0x022f00f5
 80055e4:	00f500f5 	.word	0x00f500f5
 80055e8:	00f500f5 	.word	0x00f500f5
 80055ec:	00f500f5 	.word	0x00f500f5
 80055f0:	022b01e5 	.word	0x022b01e5
 80055f4:	01f000f5 	.word	0x01f000f5
 80055f8:	00f501f4 	.word	0x00f501f4
 80055fc:	00590227 	.word	0x00590227
 8005600:	00590059 	.word	0x00590059
 8005604:	00590059 	.word	0x00590059
 8005608:	00590059 	.word	0x00590059
 800560c:	00590059 	.word	0x00590059
 8005610:	00f500f5 	.word	0x00f500f5
 8005614:	00f500f5 	.word	0x00f500f5
 8005618:	00f500f5 	.word	0x00f500f5
 800561c:	00f500f5 	.word	0x00f500f5
 8005620:	00f500f5 	.word	0x00f500f5
 8005624:	00f5020e 	.word	0x00f5020e
 8005628:	00f500f5 	.word	0x00f500f5
 800562c:	00f500f5 	.word	0x00f500f5
 8005630:	00f500f5 	.word	0x00f500f5
 8005634:	00f500f5 	.word	0x00f500f5
 8005638:	009400f5 	.word	0x009400f5
 800563c:	00f500f5 	.word	0x00f500f5
 8005640:	00f500f5 	.word	0x00f500f5
 8005644:	008400f5 	.word	0x008400f5
 8005648:	00f500f5 	.word	0x00f500f5
 800564c:	00f50248 	.word	0x00f50248
 8005650:	00f500f5 	.word	0x00f500f5
 8005654:	00f500f5 	.word	0x00f500f5
 8005658:	00f500f5 	.word	0x00f500f5
 800565c:	00f500f5 	.word	0x00f500f5
 8005660:	023a00f5 	.word	0x023a00f5
 8005664:	00f501a7 	.word	0x00f501a7
 8005668:	00f500f5 	.word	0x00f500f5
 800566c:	01a70289 	.word	0x01a70289
 8005670:	00f500f5 	.word	0x00f500f5
 8005674:	00f5027f 	.word	0x00f5027f
 8005678:	00960269 	.word	0x00960269
 800567c:	02c502c9 	.word	0x02c502c9
 8005680:	02a400f5 	.word	0x02a400f5
 8005684:	008600f5 	.word	0x008600f5
 8005688:	00f500f5 	.word	0x00f500f5
 800568c:	028d      	.short	0x028d
 800568e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8005692:	2400      	movs	r4, #0
 8005694:	f817 3b01 	ldrb.w	r3, [r7], #1
 8005698:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800569c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80056a0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80056a4:	2a09      	cmp	r2, #9
 80056a6:	d9f5      	bls.n	8005694 <_vfiprintf_r+0x170>
 80056a8:	9404      	str	r4, [sp, #16]
 80056aa:	e790      	b.n	80055ce <_vfiprintf_r+0xaa>
 80056ac:	4641      	mov	r1, r8
 80056ae:	4658      	mov	r0, fp
 80056b0:	f7fc fc78 	bl	8001fa4 <__swsetup_r>
 80056b4:	2800      	cmp	r0, #0
 80056b6:	f040 8535 	bne.w	8006124 <_vfiprintf_r+0xc00>
 80056ba:	f8b8 200c 	ldrh.w	r2, [r8, #12]
 80056be:	f002 021a 	and.w	r2, r2, #26
 80056c2:	2a0a      	cmp	r2, #10
 80056c4:	f47f af58 	bne.w	8005578 <_vfiprintf_r+0x54>
 80056c8:	f9b8 300e 	ldrsh.w	r3, [r8, #14]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	f6ff af53 	blt.w	8005578 <_vfiprintf_r+0x54>
 80056d2:	4623      	mov	r3, r4
 80056d4:	463a      	mov	r2, r7
 80056d6:	4641      	mov	r1, r8
 80056d8:	4658      	mov	r0, fp
 80056da:	b02b      	add	sp, #172	; 0xac
 80056dc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056e0:	f000 bd44 	b.w	800616c <__sbprintf>
 80056e4:	f04a 0a10 	orr.w	sl, sl, #16
 80056e8:	f01a 0120 	ands.w	r1, sl, #32
 80056ec:	f000 810f 	beq.w	800590e <_vfiprintf_r+0x3ea>
 80056f0:	9b06      	ldr	r3, [sp, #24]
 80056f2:	3307      	adds	r3, #7
 80056f4:	f023 0307 	bic.w	r3, r3, #7
 80056f8:	6859      	ldr	r1, [r3, #4]
 80056fa:	f853 0b08 	ldr.w	r0, [r3], #8
 80056fe:	9306      	str	r3, [sp, #24]
 8005700:	2301      	movs	r3, #1
 8005702:	e00e      	b.n	8005722 <_vfiprintf_r+0x1fe>
 8005704:	f04a 0a10 	orr.w	sl, sl, #16
 8005708:	f01a 0120 	ands.w	r1, sl, #32
 800570c:	f000 80f2 	beq.w	80058f4 <_vfiprintf_r+0x3d0>
 8005710:	9b06      	ldr	r3, [sp, #24]
 8005712:	3307      	adds	r3, #7
 8005714:	f023 0307 	bic.w	r3, r3, #7
 8005718:	6859      	ldr	r1, [r3, #4]
 800571a:	f853 0b08 	ldr.w	r0, [r3], #8
 800571e:	9306      	str	r3, [sp, #24]
 8005720:	2300      	movs	r3, #0
 8005722:	f04f 0200 	mov.w	r2, #0
 8005726:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
 800572a:	2200      	movs	r2, #0
 800572c:	9207      	str	r2, [sp, #28]
 800572e:	9a02      	ldr	r2, [sp, #8]
 8005730:	1c54      	adds	r4, r2, #1
 8005732:	f000 822f 	beq.w	8005b94 <_vfiprintf_r+0x670>
 8005736:	f02a 0480 	bic.w	r4, sl, #128	; 0x80
 800573a:	9401      	str	r4, [sp, #4]
 800573c:	ea50 0401 	orrs.w	r4, r0, r1
 8005740:	f040 8226 	bne.w	8005b90 <_vfiprintf_r+0x66c>
 8005744:	2a00      	cmp	r2, #0
 8005746:	f040 8495 	bne.w	8006074 <_vfiprintf_r+0xb50>
 800574a:	2b00      	cmp	r3, #0
 800574c:	f040 840e 	bne.w	8005f6c <_vfiprintf_r+0xa48>
 8005750:	f01a 0301 	ands.w	r3, sl, #1
 8005754:	9303      	str	r3, [sp, #12]
 8005756:	f040 843e 	bne.w	8005fd6 <_vfiprintf_r+0xab2>
 800575a:	ac1a      	add	r4, sp, #104	; 0x68
 800575c:	e9dd 6302 	ldrd	r6, r3, [sp, #8]
 8005760:	429e      	cmp	r6, r3
 8005762:	bfb8      	it	lt
 8005764:	461e      	movlt	r6, r3
 8005766:	9b07      	ldr	r3, [sp, #28]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d03e      	beq.n	80057ea <_vfiprintf_r+0x2c6>
 800576c:	3601      	adds	r6, #1
 800576e:	e03c      	b.n	80057ea <_vfiprintf_r+0x2c6>
 8005770:	1be5      	subs	r5, r4, r7
 8005772:	d01b      	beq.n	80057ac <_vfiprintf_r+0x288>
 8005774:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005776:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005778:	3301      	adds	r3, #1
 800577a:	442a      	add	r2, r5
 800577c:	2b07      	cmp	r3, #7
 800577e:	e9c9 7500 	strd	r7, r5, [r9]
 8005782:	920f      	str	r2, [sp, #60]	; 0x3c
 8005784:	930e      	str	r3, [sp, #56]	; 0x38
 8005786:	dc05      	bgt.n	8005794 <_vfiprintf_r+0x270>
 8005788:	f109 0908 	add.w	r9, r9, #8
 800578c:	9b05      	ldr	r3, [sp, #20]
 800578e:	442b      	add	r3, r5
 8005790:	9305      	str	r3, [sp, #20]
 8005792:	e70a      	b.n	80055aa <_vfiprintf_r+0x86>
 8005794:	2a00      	cmp	r2, #0
 8005796:	f000 83d1 	beq.w	8005f3c <_vfiprintf_r+0xa18>
 800579a:	aa0d      	add	r2, sp, #52	; 0x34
 800579c:	4641      	mov	r1, r8
 800579e:	4658      	mov	r0, fp
 80057a0:	f7ff fe78 	bl	8005494 <__sprint_r.part.0>
 80057a4:	b930      	cbnz	r0, 80057b4 <_vfiprintf_r+0x290>
 80057a6:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 80057aa:	e7ef      	b.n	800578c <_vfiprintf_r+0x268>
 80057ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	f040 8485 	bne.w	80060be <_vfiprintf_r+0xb9a>
 80057b4:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80057b8:	065b      	lsls	r3, r3, #25
 80057ba:	f100 84b3 	bmi.w	8006124 <_vfiprintf_r+0xc00>
 80057be:	9805      	ldr	r0, [sp, #20]
 80057c0:	b02b      	add	sp, #172	; 0xac
 80057c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057c6:	2900      	cmp	r1, #0
 80057c8:	f040 8475 	bne.w	80060b6 <_vfiprintf_r+0xb92>
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d0ed      	beq.n	80057ac <_vfiprintf_r+0x288>
 80057d0:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 80057d4:	2601      	movs	r6, #1
 80057d6:	f04f 0300 	mov.w	r3, #0
 80057da:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
 80057de:	9603      	str	r6, [sp, #12]
 80057e0:	ac10      	add	r4, sp, #64	; 0x40
 80057e2:	2300      	movs	r3, #0
 80057e4:	f8cd a004 	str.w	sl, [sp, #4]
 80057e8:	9302      	str	r3, [sp, #8]
 80057ea:	9b01      	ldr	r3, [sp, #4]
 80057ec:	f013 0302 	ands.w	r3, r3, #2
 80057f0:	9307      	str	r3, [sp, #28]
 80057f2:	9b01      	ldr	r3, [sp, #4]
 80057f4:	bf18      	it	ne
 80057f6:	3602      	addne	r6, #2
 80057f8:	f013 0384 	ands.w	r3, r3, #132	; 0x84
 80057fc:	9308      	str	r3, [sp, #32]
 80057fe:	d104      	bne.n	800580a <_vfiprintf_r+0x2e6>
 8005800:	9b04      	ldr	r3, [sp, #16]
 8005802:	1b9d      	subs	r5, r3, r6
 8005804:	2d00      	cmp	r5, #0
 8005806:	f300 82db 	bgt.w	8005dc0 <_vfiprintf_r+0x89c>
 800580a:	e9dd 100e 	ldrd	r1, r0, [sp, #56]	; 0x38
 800580e:	f101 0c01 	add.w	ip, r1, #1
 8005812:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 8005816:	b193      	cbz	r3, 800583e <_vfiprintf_r+0x31a>
 8005818:	3001      	adds	r0, #1
 800581a:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 800581e:	2101      	movs	r1, #1
 8005820:	f1bc 0f07 	cmp.w	ip, #7
 8005824:	e9cd c00e 	strd	ip, r0, [sp, #56]	; 0x38
 8005828:	f8c9 3000 	str.w	r3, [r9]
 800582c:	f8c9 1004 	str.w	r1, [r9, #4]
 8005830:	f300 82a6 	bgt.w	8005d80 <_vfiprintf_r+0x85c>
 8005834:	4661      	mov	r1, ip
 8005836:	f109 0908 	add.w	r9, r9, #8
 800583a:	f10c 0c01 	add.w	ip, ip, #1
 800583e:	9b07      	ldr	r3, [sp, #28]
 8005840:	b1eb      	cbz	r3, 800587e <_vfiprintf_r+0x35a>
 8005842:	ab0c      	add	r3, sp, #48	; 0x30
 8005844:	3002      	adds	r0, #2
 8005846:	f8c9 3000 	str.w	r3, [r9]
 800584a:	f1bc 0f07 	cmp.w	ip, #7
 800584e:	f04f 0302 	mov.w	r3, #2
 8005852:	e9cd c00e 	strd	ip, r0, [sp, #56]	; 0x38
 8005856:	f8c9 3004 	str.w	r3, [r9, #4]
 800585a:	f340 82ab 	ble.w	8005db4 <_vfiprintf_r+0x890>
 800585e:	2800      	cmp	r0, #0
 8005860:	f000 8366 	beq.w	8005f30 <_vfiprintf_r+0xa0c>
 8005864:	aa0d      	add	r2, sp, #52	; 0x34
 8005866:	4641      	mov	r1, r8
 8005868:	4658      	mov	r0, fp
 800586a:	f7ff fe13 	bl	8005494 <__sprint_r.part.0>
 800586e:	2800      	cmp	r0, #0
 8005870:	d1a0      	bne.n	80057b4 <_vfiprintf_r+0x290>
 8005872:	e9dd 100e 	ldrd	r1, r0, [sp, #56]	; 0x38
 8005876:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 800587a:	f101 0c01 	add.w	ip, r1, #1
 800587e:	9b08      	ldr	r3, [sp, #32]
 8005880:	2b80      	cmp	r3, #128	; 0x80
 8005882:	f000 81c8 	beq.w	8005c16 <_vfiprintf_r+0x6f2>
 8005886:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800588a:	1a9d      	subs	r5, r3, r2
 800588c:	2d00      	cmp	r5, #0
 800588e:	f300 821c 	bgt.w	8005cca <_vfiprintf_r+0x7a6>
 8005892:	9b03      	ldr	r3, [sp, #12]
 8005894:	f8c9 4000 	str.w	r4, [r9]
 8005898:	4418      	add	r0, r3
 800589a:	f1bc 0f07 	cmp.w	ip, #7
 800589e:	e9cd c00e 	strd	ip, r0, [sp, #56]	; 0x38
 80058a2:	f8c9 3004 	str.w	r3, [r9, #4]
 80058a6:	f340 81b3 	ble.w	8005c10 <_vfiprintf_r+0x6ec>
 80058aa:	2800      	cmp	r0, #0
 80058ac:	f000 82d2 	beq.w	8005e54 <_vfiprintf_r+0x930>
 80058b0:	aa0d      	add	r2, sp, #52	; 0x34
 80058b2:	4641      	mov	r1, r8
 80058b4:	4658      	mov	r0, fp
 80058b6:	f7ff fded 	bl	8005494 <__sprint_r.part.0>
 80058ba:	2800      	cmp	r0, #0
 80058bc:	f47f af7a 	bne.w	80057b4 <_vfiprintf_r+0x290>
 80058c0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80058c2:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 80058c6:	9b01      	ldr	r3, [sp, #4]
 80058c8:	075a      	lsls	r2, r3, #29
 80058ca:	d504      	bpl.n	80058d6 <_vfiprintf_r+0x3b2>
 80058cc:	9b04      	ldr	r3, [sp, #16]
 80058ce:	1b9c      	subs	r4, r3, r6
 80058d0:	2c00      	cmp	r4, #0
 80058d2:	f300 82c9 	bgt.w	8005e68 <_vfiprintf_r+0x944>
 80058d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80058da:	42b2      	cmp	r2, r6
 80058dc:	bfac      	ite	ge
 80058de:	189b      	addge	r3, r3, r2
 80058e0:	199b      	addlt	r3, r3, r6
 80058e2:	9305      	str	r3, [sp, #20]
 80058e4:	2800      	cmp	r0, #0
 80058e6:	f040 8236 	bne.w	8005d56 <_vfiprintf_r+0x832>
 80058ea:	2300      	movs	r3, #0
 80058ec:	930e      	str	r3, [sp, #56]	; 0x38
 80058ee:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 80058f2:	e64a      	b.n	800558a <_vfiprintf_r+0x66>
 80058f4:	f01a 0310 	ands.w	r3, sl, #16
 80058f8:	d149      	bne.n	800598e <_vfiprintf_r+0x46a>
 80058fa:	f01a 0140 	ands.w	r1, sl, #64	; 0x40
 80058fe:	d046      	beq.n	800598e <_vfiprintf_r+0x46a>
 8005900:	9a06      	ldr	r2, [sp, #24]
 8005902:	f852 0b04 	ldr.w	r0, [r2], #4
 8005906:	9206      	str	r2, [sp, #24]
 8005908:	4619      	mov	r1, r3
 800590a:	b280      	uxth	r0, r0
 800590c:	e709      	b.n	8005722 <_vfiprintf_r+0x1fe>
 800590e:	f01a 0310 	ands.w	r3, sl, #16
 8005912:	d142      	bne.n	800599a <_vfiprintf_r+0x476>
 8005914:	f01a 0140 	ands.w	r1, sl, #64	; 0x40
 8005918:	d03f      	beq.n	800599a <_vfiprintf_r+0x476>
 800591a:	9a06      	ldr	r2, [sp, #24]
 800591c:	f852 0b04 	ldr.w	r0, [r2], #4
 8005920:	9206      	str	r2, [sp, #24]
 8005922:	4619      	mov	r1, r3
 8005924:	b280      	uxth	r0, r0
 8005926:	2301      	movs	r3, #1
 8005928:	e6fb      	b.n	8005722 <_vfiprintf_r+0x1fe>
 800592a:	2900      	cmp	r1, #0
 800592c:	f040 83e1 	bne.w	80060f2 <_vfiprintf_r+0xbce>
 8005930:	f01a 0f20 	tst.w	sl, #32
 8005934:	9b06      	ldr	r3, [sp, #24]
 8005936:	d068      	beq.n	8005a0a <_vfiprintf_r+0x4e6>
 8005938:	3307      	adds	r3, #7
 800593a:	f023 0307 	bic.w	r3, r3, #7
 800593e:	461a      	mov	r2, r3
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	f852 0b08 	ldr.w	r0, [r2], #8
 8005946:	9206      	str	r2, [sp, #24]
 8005948:	4619      	mov	r1, r3
 800594a:	2b00      	cmp	r3, #0
 800594c:	f2c0 8304 	blt.w	8005f58 <_vfiprintf_r+0xa34>
 8005950:	9b02      	ldr	r3, [sp, #8]
 8005952:	3301      	adds	r3, #1
 8005954:	f000 838a 	beq.w	800606c <_vfiprintf_r+0xb48>
 8005958:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 800595c:	9307      	str	r3, [sp, #28]
 800595e:	ea50 0301 	orrs.w	r3, r0, r1
 8005962:	f02a 0a80 	bic.w	sl, sl, #128	; 0x80
 8005966:	f000 8354 	beq.w	8006012 <_vfiprintf_r+0xaee>
 800596a:	280a      	cmp	r0, #10
 800596c:	f171 0300 	sbcs.w	r3, r1, #0
 8005970:	f080 8312 	bcs.w	8005f98 <_vfiprintf_r+0xa74>
 8005974:	3030      	adds	r0, #48	; 0x30
 8005976:	2301      	movs	r3, #1
 8005978:	f88d 0067 	strb.w	r0, [sp, #103]	; 0x67
 800597c:	f8cd a004 	str.w	sl, [sp, #4]
 8005980:	9303      	str	r3, [sp, #12]
 8005982:	f10d 0467 	add.w	r4, sp, #103	; 0x67
 8005986:	e6e9      	b.n	800575c <_vfiprintf_r+0x238>
 8005988:	f7fd fd9e 	bl	80034c8 <__sinit>
 800598c:	e5d7      	b.n	800553e <_vfiprintf_r+0x1a>
 800598e:	9b06      	ldr	r3, [sp, #24]
 8005990:	f853 0b04 	ldr.w	r0, [r3], #4
 8005994:	9306      	str	r3, [sp, #24]
 8005996:	460b      	mov	r3, r1
 8005998:	e6c3      	b.n	8005722 <_vfiprintf_r+0x1fe>
 800599a:	9b06      	ldr	r3, [sp, #24]
 800599c:	f853 0b04 	ldr.w	r0, [r3], #4
 80059a0:	9306      	str	r3, [sp, #24]
 80059a2:	2301      	movs	r3, #1
 80059a4:	e6bd      	b.n	8005722 <_vfiprintf_r+0x1fe>
 80059a6:	9b06      	ldr	r3, [sp, #24]
 80059a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80059ac:	9204      	str	r2, [sp, #16]
 80059ae:	2a00      	cmp	r2, #0
 80059b0:	f280 830d 	bge.w	8005fce <_vfiprintf_r+0xaaa>
 80059b4:	9a04      	ldr	r2, [sp, #16]
 80059b6:	9306      	str	r3, [sp, #24]
 80059b8:	4252      	negs	r2, r2
 80059ba:	9204      	str	r2, [sp, #16]
 80059bc:	783b      	ldrb	r3, [r7, #0]
 80059be:	f04a 0a04 	orr.w	sl, sl, #4
 80059c2:	e603      	b.n	80055cc <_vfiprintf_r+0xa8>
 80059c4:	463c      	mov	r4, r7
 80059c6:	f814 3b01 	ldrb.w	r3, [r4], #1
 80059ca:	2b2a      	cmp	r3, #42	; 0x2a
 80059cc:	f000 83af 	beq.w	800612e <_vfiprintf_r+0xc0a>
 80059d0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80059d4:	2a09      	cmp	r2, #9
 80059d6:	4627      	mov	r7, r4
 80059d8:	bf98      	it	ls
 80059da:	2400      	movls	r4, #0
 80059dc:	f200 838f 	bhi.w	80060fe <_vfiprintf_r+0xbda>
 80059e0:	f817 3b01 	ldrb.w	r3, [r7], #1
 80059e4:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80059e8:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80059ec:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80059f0:	2a09      	cmp	r2, #9
 80059f2:	d9f5      	bls.n	80059e0 <_vfiprintf_r+0x4bc>
 80059f4:	9402      	str	r4, [sp, #8]
 80059f6:	e5ea      	b.n	80055ce <_vfiprintf_r+0xaa>
 80059f8:	2900      	cmp	r1, #0
 80059fa:	f040 8384 	bne.w	8006106 <_vfiprintf_r+0xbe2>
 80059fe:	f04a 0a10 	orr.w	sl, sl, #16
 8005a02:	f01a 0f20 	tst.w	sl, #32
 8005a06:	9b06      	ldr	r3, [sp, #24]
 8005a08:	d196      	bne.n	8005938 <_vfiprintf_r+0x414>
 8005a0a:	f853 0b04 	ldr.w	r0, [r3], #4
 8005a0e:	9306      	str	r3, [sp, #24]
 8005a10:	f01a 0f10 	tst.w	sl, #16
 8005a14:	f040 829b 	bne.w	8005f4e <_vfiprintf_r+0xa2a>
 8005a18:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8005a1c:	f000 8297 	beq.w	8005f4e <_vfiprintf_r+0xa2a>
 8005a20:	f340 31c0 	sbfx	r1, r0, #15, #1
 8005a24:	460b      	mov	r3, r1
 8005a26:	b200      	sxth	r0, r0
 8005a28:	e78f      	b.n	800594a <_vfiprintf_r+0x426>
 8005a2a:	783b      	ldrb	r3, [r7, #0]
 8005a2c:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 8005a30:	e5cc      	b.n	80055cc <_vfiprintf_r+0xa8>
 8005a32:	783b      	ldrb	r3, [r7, #0]
 8005a34:	2101      	movs	r1, #1
 8005a36:	202b      	movs	r0, #43	; 0x2b
 8005a38:	e5c8      	b.n	80055cc <_vfiprintf_r+0xa8>
 8005a3a:	783b      	ldrb	r3, [r7, #0]
 8005a3c:	f04a 0a01 	orr.w	sl, sl, #1
 8005a40:	e5c4      	b.n	80055cc <_vfiprintf_r+0xa8>
 8005a42:	783b      	ldrb	r3, [r7, #0]
 8005a44:	2800      	cmp	r0, #0
 8005a46:	f47f adc1 	bne.w	80055cc <_vfiprintf_r+0xa8>
 8005a4a:	2101      	movs	r1, #1
 8005a4c:	2020      	movs	r0, #32
 8005a4e:	e5bd      	b.n	80055cc <_vfiprintf_r+0xa8>
 8005a50:	9b06      	ldr	r3, [sp, #24]
 8005a52:	f04f 0200 	mov.w	r2, #0
 8005a56:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
 8005a5a:	2601      	movs	r6, #1
 8005a5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a60:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
 8005a64:	9306      	str	r3, [sp, #24]
 8005a66:	9603      	str	r6, [sp, #12]
 8005a68:	ac10      	add	r4, sp, #64	; 0x40
 8005a6a:	e6ba      	b.n	80057e2 <_vfiprintf_r+0x2be>
 8005a6c:	2900      	cmp	r1, #0
 8005a6e:	f040 834d 	bne.w	800610c <_vfiprintf_r+0xbe8>
 8005a72:	4abd      	ldr	r2, [pc, #756]	; (8005d68 <_vfiprintf_r+0x844>)
 8005a74:	9209      	str	r2, [sp, #36]	; 0x24
 8005a76:	f01a 0120 	ands.w	r1, sl, #32
 8005a7a:	d044      	beq.n	8005b06 <_vfiprintf_r+0x5e2>
 8005a7c:	9a06      	ldr	r2, [sp, #24]
 8005a7e:	3207      	adds	r2, #7
 8005a80:	f022 0207 	bic.w	r2, r2, #7
 8005a84:	6851      	ldr	r1, [r2, #4]
 8005a86:	f852 0b08 	ldr.w	r0, [r2], #8
 8005a8a:	9206      	str	r2, [sp, #24]
 8005a8c:	f01a 0f01 	tst.w	sl, #1
 8005a90:	d00b      	beq.n	8005aaa <_vfiprintf_r+0x586>
 8005a92:	ea50 0201 	orrs.w	r2, r0, r1
 8005a96:	d008      	beq.n	8005aaa <_vfiprintf_r+0x586>
 8005a98:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
 8005a9c:	2330      	movs	r3, #48	; 0x30
 8005a9e:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
 8005aa2:	f04a 0a02 	orr.w	sl, sl, #2
 8005aa6:	2302      	movs	r3, #2
 8005aa8:	e63b      	b.n	8005722 <_vfiprintf_r+0x1fe>
 8005aaa:	2302      	movs	r3, #2
 8005aac:	e639      	b.n	8005722 <_vfiprintf_r+0x1fe>
 8005aae:	2900      	cmp	r1, #0
 8005ab0:	f040 8322 	bne.w	80060f8 <_vfiprintf_r+0xbd4>
 8005ab4:	f01a 0f20 	tst.w	sl, #32
 8005ab8:	f040 829a 	bne.w	8005ff0 <_vfiprintf_r+0xacc>
 8005abc:	f01a 0f10 	tst.w	sl, #16
 8005ac0:	f040 82cc 	bne.w	800605c <_vfiprintf_r+0xb38>
 8005ac4:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8005ac8:	f000 82c8 	beq.w	800605c <_vfiprintf_r+0xb38>
 8005acc:	9b06      	ldr	r3, [sp, #24]
 8005ace:	9905      	ldr	r1, [sp, #20]
 8005ad0:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ad4:	9306      	str	r3, [sp, #24]
 8005ad6:	8011      	strh	r1, [r2, #0]
 8005ad8:	e557      	b.n	800558a <_vfiprintf_r+0x66>
 8005ada:	783b      	ldrb	r3, [r7, #0]
 8005adc:	2b6c      	cmp	r3, #108	; 0x6c
 8005ade:	bf03      	ittte	eq
 8005ae0:	787b      	ldrbeq	r3, [r7, #1]
 8005ae2:	f04a 0a20 	orreq.w	sl, sl, #32
 8005ae6:	3701      	addeq	r7, #1
 8005ae8:	f04a 0a10 	orrne.w	sl, sl, #16
 8005aec:	e56e      	b.n	80055cc <_vfiprintf_r+0xa8>
 8005aee:	783b      	ldrb	r3, [r7, #0]
 8005af0:	f04a 0a40 	orr.w	sl, sl, #64	; 0x40
 8005af4:	e56a      	b.n	80055cc <_vfiprintf_r+0xa8>
 8005af6:	2900      	cmp	r1, #0
 8005af8:	f040 82f8 	bne.w	80060ec <_vfiprintf_r+0xbc8>
 8005afc:	4a9b      	ldr	r2, [pc, #620]	; (8005d6c <_vfiprintf_r+0x848>)
 8005afe:	9209      	str	r2, [sp, #36]	; 0x24
 8005b00:	f01a 0120 	ands.w	r1, sl, #32
 8005b04:	d1ba      	bne.n	8005a7c <_vfiprintf_r+0x558>
 8005b06:	f01a 0210 	ands.w	r2, sl, #16
 8005b0a:	f040 821b 	bne.w	8005f44 <_vfiprintf_r+0xa20>
 8005b0e:	f01a 0140 	ands.w	r1, sl, #64	; 0x40
 8005b12:	f000 8217 	beq.w	8005f44 <_vfiprintf_r+0xa20>
 8005b16:	9c06      	ldr	r4, [sp, #24]
 8005b18:	f854 0b04 	ldr.w	r0, [r4], #4
 8005b1c:	9406      	str	r4, [sp, #24]
 8005b1e:	4611      	mov	r1, r2
 8005b20:	b280      	uxth	r0, r0
 8005b22:	e7b3      	b.n	8005a8c <_vfiprintf_r+0x568>
 8005b24:	9d06      	ldr	r5, [sp, #24]
 8005b26:	f855 4b04 	ldr.w	r4, [r5], #4
 8005b2a:	f04f 0300 	mov.w	r3, #0
 8005b2e:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
 8005b32:	2c00      	cmp	r4, #0
 8005b34:	f000 82a4 	beq.w	8006080 <_vfiprintf_r+0xb5c>
 8005b38:	9b02      	ldr	r3, [sp, #8]
 8005b3a:	1c5e      	adds	r6, r3, #1
 8005b3c:	f000 8272 	beq.w	8006024 <_vfiprintf_r+0xb00>
 8005b40:	461a      	mov	r2, r3
 8005b42:	2100      	movs	r1, #0
 8005b44:	4620      	mov	r0, r4
 8005b46:	f7fe fb5b 	bl	8004200 <memchr>
 8005b4a:	2800      	cmp	r0, #0
 8005b4c:	f000 82be 	beq.w	80060cc <_vfiprintf_r+0xba8>
 8005b50:	1b03      	subs	r3, r0, r4
 8005b52:	9303      	str	r3, [sp, #12]
 8005b54:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 8005b58:	9307      	str	r3, [sp, #28]
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	9506      	str	r5, [sp, #24]
 8005b5e:	f8cd a004 	str.w	sl, [sp, #4]
 8005b62:	9302      	str	r3, [sp, #8]
 8005b64:	e5fa      	b.n	800575c <_vfiprintf_r+0x238>
 8005b66:	783b      	ldrb	r3, [r7, #0]
 8005b68:	f04a 0a20 	orr.w	sl, sl, #32
 8005b6c:	e52e      	b.n	80055cc <_vfiprintf_r+0xa8>
 8005b6e:	9b06      	ldr	r3, [sp, #24]
 8005b70:	f853 0b04 	ldr.w	r0, [r3], #4
 8005b74:	9306      	str	r3, [sp, #24]
 8005b76:	2330      	movs	r3, #48	; 0x30
 8005b78:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
 8005b7c:	2378      	movs	r3, #120	; 0x78
 8005b7e:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
 8005b82:	4b7a      	ldr	r3, [pc, #488]	; (8005d6c <_vfiprintf_r+0x848>)
 8005b84:	9309      	str	r3, [sp, #36]	; 0x24
 8005b86:	f04a 0a02 	orr.w	sl, sl, #2
 8005b8a:	2100      	movs	r1, #0
 8005b8c:	2302      	movs	r3, #2
 8005b8e:	e5c8      	b.n	8005722 <_vfiprintf_r+0x1fe>
 8005b90:	f8dd a004 	ldr.w	sl, [sp, #4]
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	f43f aee8 	beq.w	800596a <_vfiprintf_r+0x446>
 8005b9a:	2b02      	cmp	r3, #2
 8005b9c:	ac1a      	add	r4, sp, #104	; 0x68
 8005b9e:	d112      	bne.n	8005bc6 <_vfiprintf_r+0x6a2>
 8005ba0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ba2:	f000 030f 	and.w	r3, r0, #15
 8005ba6:	0900      	lsrs	r0, r0, #4
 8005ba8:	5cd3      	ldrb	r3, [r2, r3]
 8005baa:	f804 3d01 	strb.w	r3, [r4, #-1]!
 8005bae:	ea40 7001 	orr.w	r0, r0, r1, lsl #28
 8005bb2:	0909      	lsrs	r1, r1, #4
 8005bb4:	ea50 0301 	orrs.w	r3, r0, r1
 8005bb8:	d1f3      	bne.n	8005ba2 <_vfiprintf_r+0x67e>
 8005bba:	ab1a      	add	r3, sp, #104	; 0x68
 8005bbc:	1b1b      	subs	r3, r3, r4
 8005bbe:	f8cd a004 	str.w	sl, [sp, #4]
 8005bc2:	9303      	str	r3, [sp, #12]
 8005bc4:	e5ca      	b.n	800575c <_vfiprintf_r+0x238>
 8005bc6:	f000 0307 	and.w	r3, r0, #7
 8005bca:	08c0      	lsrs	r0, r0, #3
 8005bcc:	ea40 7041 	orr.w	r0, r0, r1, lsl #29
 8005bd0:	08c9      	lsrs	r1, r1, #3
 8005bd2:	3330      	adds	r3, #48	; 0x30
 8005bd4:	ea50 0501 	orrs.w	r5, r0, r1
 8005bd8:	4622      	mov	r2, r4
 8005bda:	f804 3d01 	strb.w	r3, [r4, #-1]!
 8005bde:	d1f2      	bne.n	8005bc6 <_vfiprintf_r+0x6a2>
 8005be0:	f01a 0f01 	tst.w	sl, #1
 8005be4:	d0e9      	beq.n	8005bba <_vfiprintf_r+0x696>
 8005be6:	2b30      	cmp	r3, #48	; 0x30
 8005be8:	d0e7      	beq.n	8005bba <_vfiprintf_r+0x696>
 8005bea:	2330      	movs	r3, #48	; 0x30
 8005bec:	3a02      	subs	r2, #2
 8005bee:	f804 3c01 	strb.w	r3, [r4, #-1]
 8005bf2:	ab1a      	add	r3, sp, #104	; 0x68
 8005bf4:	1a9b      	subs	r3, r3, r2
 8005bf6:	f8cd a004 	str.w	sl, [sp, #4]
 8005bfa:	9303      	str	r3, [sp, #12]
 8005bfc:	4614      	mov	r4, r2
 8005bfe:	e5ad      	b.n	800575c <_vfiprintf_r+0x238>
 8005c00:	9803      	ldr	r0, [sp, #12]
 8005c02:	941a      	str	r4, [sp, #104]	; 0x68
 8005c04:	2301      	movs	r3, #1
 8005c06:	901b      	str	r0, [sp, #108]	; 0x6c
 8005c08:	900f      	str	r0, [sp, #60]	; 0x3c
 8005c0a:	930e      	str	r3, [sp, #56]	; 0x38
 8005c0c:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 8005c10:	f109 0908 	add.w	r9, r9, #8
 8005c14:	e657      	b.n	80058c6 <_vfiprintf_r+0x3a2>
 8005c16:	9b04      	ldr	r3, [sp, #16]
 8005c18:	1b9d      	subs	r5, r3, r6
 8005c1a:	2d00      	cmp	r5, #0
 8005c1c:	f77f ae33 	ble.w	8005886 <_vfiprintf_r+0x362>
 8005c20:	2d10      	cmp	r5, #16
 8005c22:	f340 827b 	ble.w	800611c <_vfiprintf_r+0xbf8>
 8005c26:	f8df a148 	ldr.w	sl, [pc, #328]	; 8005d70 <_vfiprintf_r+0x84c>
 8005c2a:	4652      	mov	r2, sl
 8005c2c:	2310      	movs	r3, #16
 8005c2e:	46a2      	mov	sl, r4
 8005c30:	4614      	mov	r4, r2
 8005c32:	e007      	b.n	8005c44 <_vfiprintf_r+0x720>
 8005c34:	f101 0e02 	add.w	lr, r1, #2
 8005c38:	f109 0908 	add.w	r9, r9, #8
 8005c3c:	4611      	mov	r1, r2
 8005c3e:	3d10      	subs	r5, #16
 8005c40:	2d10      	cmp	r5, #16
 8005c42:	dd1d      	ble.n	8005c80 <_vfiprintf_r+0x75c>
 8005c44:	1c4a      	adds	r2, r1, #1
 8005c46:	3010      	adds	r0, #16
 8005c48:	2a07      	cmp	r2, #7
 8005c4a:	e9c9 4300 	strd	r4, r3, [r9]
 8005c4e:	e9cd 200e 	strd	r2, r0, [sp, #56]	; 0x38
 8005c52:	ddef      	ble.n	8005c34 <_vfiprintf_r+0x710>
 8005c54:	aa0d      	add	r2, sp, #52	; 0x34
 8005c56:	2800      	cmp	r0, #0
 8005c58:	f000 808c 	beq.w	8005d74 <_vfiprintf_r+0x850>
 8005c5c:	4641      	mov	r1, r8
 8005c5e:	4658      	mov	r0, fp
 8005c60:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 8005c64:	f7ff fc16 	bl	8005494 <__sprint_r.part.0>
 8005c68:	2800      	cmp	r0, #0
 8005c6a:	f47f ada3 	bne.w	80057b4 <_vfiprintf_r+0x290>
 8005c6e:	e9dd 100e 	ldrd	r1, r0, [sp, #56]	; 0x38
 8005c72:	3d10      	subs	r5, #16
 8005c74:	2d10      	cmp	r5, #16
 8005c76:	f101 0e01 	add.w	lr, r1, #1
 8005c7a:	f04f 0310 	mov.w	r3, #16
 8005c7e:	dce1      	bgt.n	8005c44 <_vfiprintf_r+0x720>
 8005c80:	4623      	mov	r3, r4
 8005c82:	4654      	mov	r4, sl
 8005c84:	469a      	mov	sl, r3
 8005c86:	4428      	add	r0, r5
 8005c88:	f1be 0f07 	cmp.w	lr, #7
 8005c8c:	e9cd e00e 	strd	lr, r0, [sp, #56]	; 0x38
 8005c90:	f8c9 a000 	str.w	sl, [r9]
 8005c94:	f8c9 5004 	str.w	r5, [r9, #4]
 8005c98:	f340 81a4 	ble.w	8005fe4 <_vfiprintf_r+0xac0>
 8005c9c:	2800      	cmp	r0, #0
 8005c9e:	f000 81f8 	beq.w	8006092 <_vfiprintf_r+0xb6e>
 8005ca2:	aa0d      	add	r2, sp, #52	; 0x34
 8005ca4:	4641      	mov	r1, r8
 8005ca6:	4658      	mov	r0, fp
 8005ca8:	f7ff fbf4 	bl	8005494 <__sprint_r.part.0>
 8005cac:	2800      	cmp	r0, #0
 8005cae:	f47f ad81 	bne.w	80057b4 <_vfiprintf_r+0x290>
 8005cb2:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8005cb6:	e9dd 100e 	ldrd	r1, r0, [sp, #56]	; 0x38
 8005cba:	1a9d      	subs	r5, r3, r2
 8005cbc:	2d00      	cmp	r5, #0
 8005cbe:	f101 0c01 	add.w	ip, r1, #1
 8005cc2:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 8005cc6:	f77f ade4 	ble.w	8005892 <_vfiprintf_r+0x36e>
 8005cca:	2d10      	cmp	r5, #16
 8005ccc:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 8005d70 <_vfiprintf_r+0x84c>
 8005cd0:	dd2b      	ble.n	8005d2a <_vfiprintf_r+0x806>
 8005cd2:	4652      	mov	r2, sl
 8005cd4:	2310      	movs	r3, #16
 8005cd6:	46a2      	mov	sl, r4
 8005cd8:	4614      	mov	r4, r2
 8005cda:	e007      	b.n	8005cec <_vfiprintf_r+0x7c8>
 8005cdc:	f101 0c02 	add.w	ip, r1, #2
 8005ce0:	f109 0908 	add.w	r9, r9, #8
 8005ce4:	4611      	mov	r1, r2
 8005ce6:	3d10      	subs	r5, #16
 8005ce8:	2d10      	cmp	r5, #16
 8005cea:	dd1b      	ble.n	8005d24 <_vfiprintf_r+0x800>
 8005cec:	1c4a      	adds	r2, r1, #1
 8005cee:	3010      	adds	r0, #16
 8005cf0:	2a07      	cmp	r2, #7
 8005cf2:	e9c9 4300 	strd	r4, r3, [r9]
 8005cf6:	e9cd 200e 	strd	r2, r0, [sp, #56]	; 0x38
 8005cfa:	ddef      	ble.n	8005cdc <_vfiprintf_r+0x7b8>
 8005cfc:	aa0d      	add	r2, sp, #52	; 0x34
 8005cfe:	4641      	mov	r1, r8
 8005d00:	b318      	cbz	r0, 8005d4a <_vfiprintf_r+0x826>
 8005d02:	4658      	mov	r0, fp
 8005d04:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 8005d08:	f7ff fbc4 	bl	8005494 <__sprint_r.part.0>
 8005d0c:	2800      	cmp	r0, #0
 8005d0e:	f47f ad51 	bne.w	80057b4 <_vfiprintf_r+0x290>
 8005d12:	e9dd 100e 	ldrd	r1, r0, [sp, #56]	; 0x38
 8005d16:	3d10      	subs	r5, #16
 8005d18:	2d10      	cmp	r5, #16
 8005d1a:	f101 0c01 	add.w	ip, r1, #1
 8005d1e:	f04f 0310 	mov.w	r3, #16
 8005d22:	dce3      	bgt.n	8005cec <_vfiprintf_r+0x7c8>
 8005d24:	4623      	mov	r3, r4
 8005d26:	4654      	mov	r4, sl
 8005d28:	469a      	mov	sl, r3
 8005d2a:	4428      	add	r0, r5
 8005d2c:	f1bc 0f07 	cmp.w	ip, #7
 8005d30:	e9cd c00e 	strd	ip, r0, [sp, #56]	; 0x38
 8005d34:	f8c9 a000 	str.w	sl, [r9]
 8005d38:	f8c9 5004 	str.w	r5, [r9, #4]
 8005d3c:	f300 80e3 	bgt.w	8005f06 <_vfiprintf_r+0x9e2>
 8005d40:	f109 0908 	add.w	r9, r9, #8
 8005d44:	f10c 0c01 	add.w	ip, ip, #1
 8005d48:	e5a3      	b.n	8005892 <_vfiprintf_r+0x36e>
 8005d4a:	f04f 0c01 	mov.w	ip, #1
 8005d4e:	4601      	mov	r1, r0
 8005d50:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 8005d54:	e7c7      	b.n	8005ce6 <_vfiprintf_r+0x7c2>
 8005d56:	aa0d      	add	r2, sp, #52	; 0x34
 8005d58:	4641      	mov	r1, r8
 8005d5a:	4658      	mov	r0, fp
 8005d5c:	f7ff fb9a 	bl	8005494 <__sprint_r.part.0>
 8005d60:	2800      	cmp	r0, #0
 8005d62:	f43f adc2 	beq.w	80058ea <_vfiprintf_r+0x3c6>
 8005d66:	e525      	b.n	80057b4 <_vfiprintf_r+0x290>
 8005d68:	0801c0a8 	.word	0x0801c0a8
 8005d6c:	0801c094 	.word	0x0801c094
 8005d70:	0800ce08 	.word	0x0800ce08
 8005d74:	f04f 0e01 	mov.w	lr, #1
 8005d78:	4601      	mov	r1, r0
 8005d7a:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 8005d7e:	e75e      	b.n	8005c3e <_vfiprintf_r+0x71a>
 8005d80:	2800      	cmp	r0, #0
 8005d82:	f000 80d2 	beq.w	8005f2a <_vfiprintf_r+0xa06>
 8005d86:	aa0d      	add	r2, sp, #52	; 0x34
 8005d88:	4641      	mov	r1, r8
 8005d8a:	4658      	mov	r0, fp
 8005d8c:	f7ff fb82 	bl	8005494 <__sprint_r.part.0>
 8005d90:	2800      	cmp	r0, #0
 8005d92:	f47f ad0f 	bne.w	80057b4 <_vfiprintf_r+0x290>
 8005d96:	e9dd 100e 	ldrd	r1, r0, [sp, #56]	; 0x38
 8005d9a:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 8005d9e:	f101 0c01 	add.w	ip, r1, #1
 8005da2:	e54c      	b.n	800583e <_vfiprintf_r+0x31a>
 8005da4:	2002      	movs	r0, #2
 8005da6:	ab0c      	add	r3, sp, #48	; 0x30
 8005da8:	901b      	str	r0, [sp, #108]	; 0x6c
 8005daa:	931a      	str	r3, [sp, #104]	; 0x68
 8005dac:	f04f 0c01 	mov.w	ip, #1
 8005db0:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 8005db4:	4661      	mov	r1, ip
 8005db6:	f109 0908 	add.w	r9, r9, #8
 8005dba:	f101 0c01 	add.w	ip, r1, #1
 8005dbe:	e55e      	b.n	800587e <_vfiprintf_r+0x35a>
 8005dc0:	2d10      	cmp	r5, #16
 8005dc2:	f340 818d 	ble.w	80060e0 <_vfiprintf_r+0xbbc>
 8005dc6:	f8df a380 	ldr.w	sl, [pc, #896]	; 8006148 <_vfiprintf_r+0xc24>
 8005dca:	e9dd c00e 	ldrd	ip, r0, [sp, #56]	; 0x38
 8005dce:	4652      	mov	r2, sl
 8005dd0:	2310      	movs	r3, #16
 8005dd2:	46a2      	mov	sl, r4
 8005dd4:	4661      	mov	r1, ip
 8005dd6:	4614      	mov	r4, r2
 8005dd8:	e007      	b.n	8005dea <_vfiprintf_r+0x8c6>
 8005dda:	f101 0c02 	add.w	ip, r1, #2
 8005dde:	f109 0908 	add.w	r9, r9, #8
 8005de2:	4611      	mov	r1, r2
 8005de4:	3d10      	subs	r5, #16
 8005de6:	2d10      	cmp	r5, #16
 8005de8:	dd1b      	ble.n	8005e22 <_vfiprintf_r+0x8fe>
 8005dea:	1c4a      	adds	r2, r1, #1
 8005dec:	3010      	adds	r0, #16
 8005dee:	2a07      	cmp	r2, #7
 8005df0:	e9c9 4300 	strd	r4, r3, [r9]
 8005df4:	e9cd 200e 	strd	r2, r0, [sp, #56]	; 0x38
 8005df8:	ddef      	ble.n	8005dda <_vfiprintf_r+0x8b6>
 8005dfa:	aa0d      	add	r2, sp, #52	; 0x34
 8005dfc:	b320      	cbz	r0, 8005e48 <_vfiprintf_r+0x924>
 8005dfe:	4641      	mov	r1, r8
 8005e00:	4658      	mov	r0, fp
 8005e02:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 8005e06:	f7ff fb45 	bl	8005494 <__sprint_r.part.0>
 8005e0a:	2800      	cmp	r0, #0
 8005e0c:	f47f acd2 	bne.w	80057b4 <_vfiprintf_r+0x290>
 8005e10:	e9dd 100e 	ldrd	r1, r0, [sp, #56]	; 0x38
 8005e14:	3d10      	subs	r5, #16
 8005e16:	2d10      	cmp	r5, #16
 8005e18:	f101 0c01 	add.w	ip, r1, #1
 8005e1c:	f04f 0310 	mov.w	r3, #16
 8005e20:	dce3      	bgt.n	8005dea <_vfiprintf_r+0x8c6>
 8005e22:	4623      	mov	r3, r4
 8005e24:	4661      	mov	r1, ip
 8005e26:	4654      	mov	r4, sl
 8005e28:	469a      	mov	sl, r3
 8005e2a:	4428      	add	r0, r5
 8005e2c:	2907      	cmp	r1, #7
 8005e2e:	e9cd 100e 	strd	r1, r0, [sp, #56]	; 0x38
 8005e32:	f8c9 a000 	str.w	sl, [r9]
 8005e36:	f8c9 5004 	str.w	r5, [r9, #4]
 8005e3a:	f300 809c 	bgt.w	8005f76 <_vfiprintf_r+0xa52>
 8005e3e:	f109 0908 	add.w	r9, r9, #8
 8005e42:	f101 0c01 	add.w	ip, r1, #1
 8005e46:	e4e4      	b.n	8005812 <_vfiprintf_r+0x2ee>
 8005e48:	4601      	mov	r1, r0
 8005e4a:	f04f 0c01 	mov.w	ip, #1
 8005e4e:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 8005e52:	e7c7      	b.n	8005de4 <_vfiprintf_r+0x8c0>
 8005e54:	9b01      	ldr	r3, [sp, #4]
 8005e56:	900e      	str	r0, [sp, #56]	; 0x38
 8005e58:	0759      	lsls	r1, r3, #29
 8005e5a:	d54c      	bpl.n	8005ef6 <_vfiprintf_r+0x9d2>
 8005e5c:	9b04      	ldr	r3, [sp, #16]
 8005e5e:	1b9c      	subs	r4, r3, r6
 8005e60:	2c00      	cmp	r4, #0
 8005e62:	dd48      	ble.n	8005ef6 <_vfiprintf_r+0x9d2>
 8005e64:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 8005e68:	2c10      	cmp	r4, #16
 8005e6a:	f340 8152 	ble.w	8006112 <_vfiprintf_r+0xbee>
 8005e6e:	f8df a2d8 	ldr.w	sl, [pc, #728]	; 8006148 <_vfiprintf_r+0xc24>
 8005e72:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005e74:	4653      	mov	r3, sl
 8005e76:	2510      	movs	r5, #16
 8005e78:	46b2      	mov	sl, r6
 8005e7a:	461e      	mov	r6, r3
 8005e7c:	e006      	b.n	8005e8c <_vfiprintf_r+0x968>
 8005e7e:	1c91      	adds	r1, r2, #2
 8005e80:	f109 0908 	add.w	r9, r9, #8
 8005e84:	461a      	mov	r2, r3
 8005e86:	3c10      	subs	r4, #16
 8005e88:	2c10      	cmp	r4, #16
 8005e8a:	dd19      	ble.n	8005ec0 <_vfiprintf_r+0x99c>
 8005e8c:	1c53      	adds	r3, r2, #1
 8005e8e:	3010      	adds	r0, #16
 8005e90:	2b07      	cmp	r3, #7
 8005e92:	e9c9 6500 	strd	r6, r5, [r9]
 8005e96:	e9cd 300e 	strd	r3, r0, [sp, #56]	; 0x38
 8005e9a:	ddf0      	ble.n	8005e7e <_vfiprintf_r+0x95a>
 8005e9c:	aa0d      	add	r2, sp, #52	; 0x34
 8005e9e:	b328      	cbz	r0, 8005eec <_vfiprintf_r+0x9c8>
 8005ea0:	4641      	mov	r1, r8
 8005ea2:	4658      	mov	r0, fp
 8005ea4:	f7ff faf6 	bl	8005494 <__sprint_r.part.0>
 8005ea8:	2800      	cmp	r0, #0
 8005eaa:	f47f ac83 	bne.w	80057b4 <_vfiprintf_r+0x290>
 8005eae:	e9dd 200e 	ldrd	r2, r0, [sp, #56]	; 0x38
 8005eb2:	3c10      	subs	r4, #16
 8005eb4:	2c10      	cmp	r4, #16
 8005eb6:	f102 0101 	add.w	r1, r2, #1
 8005eba:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 8005ebe:	dce5      	bgt.n	8005e8c <_vfiprintf_r+0x968>
 8005ec0:	4633      	mov	r3, r6
 8005ec2:	4656      	mov	r6, sl
 8005ec4:	469a      	mov	sl, r3
 8005ec6:	4420      	add	r0, r4
 8005ec8:	2907      	cmp	r1, #7
 8005eca:	e9c9 a400 	strd	sl, r4, [r9]
 8005ece:	e9cd 100e 	strd	r1, r0, [sp, #56]	; 0x38
 8005ed2:	f77f ad00 	ble.w	80058d6 <_vfiprintf_r+0x3b2>
 8005ed6:	b170      	cbz	r0, 8005ef6 <_vfiprintf_r+0x9d2>
 8005ed8:	aa0d      	add	r2, sp, #52	; 0x34
 8005eda:	4641      	mov	r1, r8
 8005edc:	4658      	mov	r0, fp
 8005ede:	f7ff fad9 	bl	8005494 <__sprint_r.part.0>
 8005ee2:	2800      	cmp	r0, #0
 8005ee4:	f47f ac66 	bne.w	80057b4 <_vfiprintf_r+0x290>
 8005ee8:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8005eea:	e4f4      	b.n	80058d6 <_vfiprintf_r+0x3b2>
 8005eec:	2101      	movs	r1, #1
 8005eee:	4602      	mov	r2, r0
 8005ef0:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 8005ef4:	e7c7      	b.n	8005e86 <_vfiprintf_r+0x962>
 8005ef6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005efa:	42b2      	cmp	r2, r6
 8005efc:	bfac      	ite	ge
 8005efe:	189b      	addge	r3, r3, r2
 8005f00:	199b      	addlt	r3, r3, r6
 8005f02:	9305      	str	r3, [sp, #20]
 8005f04:	e4f1      	b.n	80058ea <_vfiprintf_r+0x3c6>
 8005f06:	2800      	cmp	r0, #0
 8005f08:	f43f ae7a 	beq.w	8005c00 <_vfiprintf_r+0x6dc>
 8005f0c:	aa0d      	add	r2, sp, #52	; 0x34
 8005f0e:	4641      	mov	r1, r8
 8005f10:	4658      	mov	r0, fp
 8005f12:	f7ff fabf 	bl	8005494 <__sprint_r.part.0>
 8005f16:	2800      	cmp	r0, #0
 8005f18:	f47f ac4c 	bne.w	80057b4 <_vfiprintf_r+0x290>
 8005f1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f1e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8005f20:	f103 0c01 	add.w	ip, r3, #1
 8005f24:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 8005f28:	e4b3      	b.n	8005892 <_vfiprintf_r+0x36e>
 8005f2a:	9b07      	ldr	r3, [sp, #28]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d169      	bne.n	8006004 <_vfiprintf_r+0xae0>
 8005f30:	f04f 0c01 	mov.w	ip, #1
 8005f34:	4601      	mov	r1, r0
 8005f36:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 8005f3a:	e4a0      	b.n	800587e <_vfiprintf_r+0x35a>
 8005f3c:	920e      	str	r2, [sp, #56]	; 0x38
 8005f3e:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 8005f42:	e423      	b.n	800578c <_vfiprintf_r+0x268>
 8005f44:	9a06      	ldr	r2, [sp, #24]
 8005f46:	f852 0b04 	ldr.w	r0, [r2], #4
 8005f4a:	9206      	str	r2, [sp, #24]
 8005f4c:	e59e      	b.n	8005a8c <_vfiprintf_r+0x568>
 8005f4e:	17c1      	asrs	r1, r0, #31
 8005f50:	460b      	mov	r3, r1
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	f6bf acfc 	bge.w	8005950 <_vfiprintf_r+0x42c>
 8005f58:	232d      	movs	r3, #45	; 0x2d
 8005f5a:	4240      	negs	r0, r0
 8005f5c:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
 8005f60:	9307      	str	r3, [sp, #28]
 8005f62:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8005f66:	2301      	movs	r3, #1
 8005f68:	f7ff bbe1 	b.w	800572e <_vfiprintf_r+0x20a>
 8005f6c:	9b02      	ldr	r3, [sp, #8]
 8005f6e:	9303      	str	r3, [sp, #12]
 8005f70:	ac1a      	add	r4, sp, #104	; 0x68
 8005f72:	f7ff bbf3 	b.w	800575c <_vfiprintf_r+0x238>
 8005f76:	2800      	cmp	r0, #0
 8005f78:	d062      	beq.n	8006040 <_vfiprintf_r+0xb1c>
 8005f7a:	aa0d      	add	r2, sp, #52	; 0x34
 8005f7c:	4641      	mov	r1, r8
 8005f7e:	4658      	mov	r0, fp
 8005f80:	f7ff fa88 	bl	8005494 <__sprint_r.part.0>
 8005f84:	2800      	cmp	r0, #0
 8005f86:	f47f ac15 	bne.w	80057b4 <_vfiprintf_r+0x290>
 8005f8a:	e9dd 100e 	ldrd	r1, r0, [sp, #56]	; 0x38
 8005f8e:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 8005f92:	f101 0c01 	add.w	ip, r1, #1
 8005f96:	e43c      	b.n	8005812 <_vfiprintf_r+0x2ee>
 8005f98:	ac1a      	add	r4, sp, #104	; 0x68
 8005f9a:	220a      	movs	r2, #10
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	4606      	mov	r6, r0
 8005fa0:	460d      	mov	r5, r1
 8005fa2:	f001 fb1f 	bl	80075e4 <__aeabi_uldivmod>
 8005fa6:	3230      	adds	r2, #48	; 0x30
 8005fa8:	f804 2d01 	strb.w	r2, [r4, #-1]!
 8005fac:	2300      	movs	r3, #0
 8005fae:	4630      	mov	r0, r6
 8005fb0:	4629      	mov	r1, r5
 8005fb2:	220a      	movs	r2, #10
 8005fb4:	f001 fb16 	bl	80075e4 <__aeabi_uldivmod>
 8005fb8:	2e0a      	cmp	r6, #10
 8005fba:	f175 0300 	sbcs.w	r3, r5, #0
 8005fbe:	d2ec      	bcs.n	8005f9a <_vfiprintf_r+0xa76>
 8005fc0:	ab1a      	add	r3, sp, #104	; 0x68
 8005fc2:	1b1b      	subs	r3, r3, r4
 8005fc4:	f8cd a004 	str.w	sl, [sp, #4]
 8005fc8:	9303      	str	r3, [sp, #12]
 8005fca:	f7ff bbc7 	b.w	800575c <_vfiprintf_r+0x238>
 8005fce:	9306      	str	r3, [sp, #24]
 8005fd0:	783b      	ldrb	r3, [r7, #0]
 8005fd2:	f7ff bafb 	b.w	80055cc <_vfiprintf_r+0xa8>
 8005fd6:	2330      	movs	r3, #48	; 0x30
 8005fd8:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8005fdc:	f10d 0467 	add.w	r4, sp, #103	; 0x67
 8005fe0:	f7ff bbbc 	b.w	800575c <_vfiprintf_r+0x238>
 8005fe4:	f109 0908 	add.w	r9, r9, #8
 8005fe8:	f10e 0c01 	add.w	ip, lr, #1
 8005fec:	4671      	mov	r1, lr
 8005fee:	e44a      	b.n	8005886 <_vfiprintf_r+0x362>
 8005ff0:	e9dd 0305 	ldrd	r0, r3, [sp, #20]
 8005ff4:	f853 1b04 	ldr.w	r1, [r3], #4
 8005ff8:	9306      	str	r3, [sp, #24]
 8005ffa:	17c2      	asrs	r2, r0, #31
 8005ffc:	e9c1 0200 	strd	r0, r2, [r1]
 8006000:	f7ff bac3 	b.w	800558a <_vfiprintf_r+0x66>
 8006004:	2002      	movs	r0, #2
 8006006:	ab0c      	add	r3, sp, #48	; 0x30
 8006008:	901b      	str	r0, [sp, #108]	; 0x6c
 800600a:	931a      	str	r3, [sp, #104]	; 0x68
 800600c:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 8006010:	e6d1      	b.n	8005db6 <_vfiprintf_r+0x892>
 8006012:	9b02      	ldr	r3, [sp, #8]
 8006014:	2b00      	cmp	r3, #0
 8006016:	f47f acad 	bne.w	8005974 <_vfiprintf_r+0x450>
 800601a:	f8cd a004 	str.w	sl, [sp, #4]
 800601e:	9303      	str	r3, [sp, #12]
 8006020:	f7ff bb9b 	b.w	800575a <_vfiprintf_r+0x236>
 8006024:	4620      	mov	r0, r4
 8006026:	9506      	str	r5, [sp, #24]
 8006028:	f8cd a004 	str.w	sl, [sp, #4]
 800602c:	f7fa fb88 	bl	8000740 <strlen>
 8006030:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 8006034:	9307      	str	r3, [sp, #28]
 8006036:	2300      	movs	r3, #0
 8006038:	9003      	str	r0, [sp, #12]
 800603a:	9302      	str	r3, [sp, #8]
 800603c:	f7ff bb8e 	b.w	800575c <_vfiprintf_r+0x238>
 8006040:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 8006044:	b363      	cbz	r3, 80060a0 <_vfiprintf_r+0xb7c>
 8006046:	2301      	movs	r3, #1
 8006048:	469c      	mov	ip, r3
 800604a:	931b      	str	r3, [sp, #108]	; 0x6c
 800604c:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 8006050:	931a      	str	r3, [sp, #104]	; 0x68
 8006052:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 8006056:	4660      	mov	r0, ip
 8006058:	f7ff bbec 	b.w	8005834 <_vfiprintf_r+0x310>
 800605c:	9b06      	ldr	r3, [sp, #24]
 800605e:	9905      	ldr	r1, [sp, #20]
 8006060:	f853 2b04 	ldr.w	r2, [r3], #4
 8006064:	6011      	str	r1, [r2, #0]
 8006066:	9306      	str	r3, [sp, #24]
 8006068:	f7ff ba8f 	b.w	800558a <_vfiprintf_r+0x66>
 800606c:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 8006070:	9307      	str	r3, [sp, #28]
 8006072:	e47a      	b.n	800596a <_vfiprintf_r+0x446>
 8006074:	2b01      	cmp	r3, #1
 8006076:	f8dd a004 	ldr.w	sl, [sp, #4]
 800607a:	f47f ad8e 	bne.w	8005b9a <_vfiprintf_r+0x676>
 800607e:	e479      	b.n	8005974 <_vfiprintf_r+0x450>
 8006080:	9e02      	ldr	r6, [sp, #8]
 8006082:	4c30      	ldr	r4, [pc, #192]	; (8006144 <_vfiprintf_r+0xc20>)
 8006084:	9506      	str	r5, [sp, #24]
 8006086:	2e06      	cmp	r6, #6
 8006088:	bf28      	it	cs
 800608a:	2606      	movcs	r6, #6
 800608c:	9603      	str	r6, [sp, #12]
 800608e:	f7ff bba8 	b.w	80057e2 <_vfiprintf_r+0x2be>
 8006092:	f04f 0c01 	mov.w	ip, #1
 8006096:	4601      	mov	r1, r0
 8006098:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 800609c:	f7ff bbf3 	b.w	8005886 <_vfiprintf_r+0x362>
 80060a0:	9b07      	ldr	r3, [sp, #28]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	f47f ae7e 	bne.w	8005da4 <_vfiprintf_r+0x880>
 80060a8:	4601      	mov	r1, r0
 80060aa:	f04f 0c01 	mov.w	ip, #1
 80060ae:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 80060b2:	f7ff bbe8 	b.w	8005886 <_vfiprintf_r+0x362>
 80060b6:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
 80060ba:	f7ff bb87 	b.w	80057cc <_vfiprintf_r+0x2a8>
 80060be:	aa0d      	add	r2, sp, #52	; 0x34
 80060c0:	4641      	mov	r1, r8
 80060c2:	4658      	mov	r0, fp
 80060c4:	f7ff f9e6 	bl	8005494 <__sprint_r.part.0>
 80060c8:	f7ff bb74 	b.w	80057b4 <_vfiprintf_r+0x290>
 80060cc:	9b02      	ldr	r3, [sp, #8]
 80060ce:	9303      	str	r3, [sp, #12]
 80060d0:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 80060d4:	9506      	str	r5, [sp, #24]
 80060d6:	e9cd a001 	strd	sl, r0, [sp, #4]
 80060da:	9307      	str	r3, [sp, #28]
 80060dc:	f7ff bb3e 	b.w	800575c <_vfiprintf_r+0x238>
 80060e0:	990e      	ldr	r1, [sp, #56]	; 0x38
 80060e2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80060e4:	f8df a060 	ldr.w	sl, [pc, #96]	; 8006148 <_vfiprintf_r+0xc24>
 80060e8:	3101      	adds	r1, #1
 80060ea:	e69e      	b.n	8005e2a <_vfiprintf_r+0x906>
 80060ec:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
 80060f0:	e504      	b.n	8005afc <_vfiprintf_r+0x5d8>
 80060f2:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
 80060f6:	e41b      	b.n	8005930 <_vfiprintf_r+0x40c>
 80060f8:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
 80060fc:	e4da      	b.n	8005ab4 <_vfiprintf_r+0x590>
 80060fe:	2200      	movs	r2, #0
 8006100:	9202      	str	r2, [sp, #8]
 8006102:	f7ff ba64 	b.w	80055ce <_vfiprintf_r+0xaa>
 8006106:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
 800610a:	e478      	b.n	80059fe <_vfiprintf_r+0x4da>
 800610c:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
 8006110:	e4af      	b.n	8005a72 <_vfiprintf_r+0x54e>
 8006112:	990e      	ldr	r1, [sp, #56]	; 0x38
 8006114:	f8df a030 	ldr.w	sl, [pc, #48]	; 8006148 <_vfiprintf_r+0xc24>
 8006118:	3101      	adds	r1, #1
 800611a:	e6d4      	b.n	8005ec6 <_vfiprintf_r+0x9a2>
 800611c:	f8df a02c 	ldr.w	sl, [pc, #44]	; 800614c <_vfiprintf_r+0xc28>
 8006120:	46e6      	mov	lr, ip
 8006122:	e5b0      	b.n	8005c86 <_vfiprintf_r+0x762>
 8006124:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006128:	9305      	str	r3, [sp, #20]
 800612a:	f7ff bb48 	b.w	80057be <_vfiprintf_r+0x29a>
 800612e:	9a06      	ldr	r2, [sp, #24]
 8006130:	787b      	ldrb	r3, [r7, #1]
 8006132:	4627      	mov	r7, r4
 8006134:	f852 4b04 	ldr.w	r4, [r2], #4
 8006138:	9206      	str	r2, [sp, #24]
 800613a:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
 800613e:	9402      	str	r4, [sp, #8]
 8006140:	f7ff ba44 	b.w	80055cc <_vfiprintf_r+0xa8>
 8006144:	0801c0bc 	.word	0x0801c0bc
 8006148:	0800cdf8 	.word	0x0800cdf8
 800614c:	0800ce08 	.word	0x0800ce08

08006150 <vfiprintf>:
 8006150:	b410      	push	{r4}
 8006152:	4c05      	ldr	r4, [pc, #20]	; (8006168 <vfiprintf+0x18>)
 8006154:	4684      	mov	ip, r0
 8006156:	4613      	mov	r3, r2
 8006158:	6820      	ldr	r0, [r4, #0]
 800615a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800615e:	460a      	mov	r2, r1
 8006160:	4661      	mov	r1, ip
 8006162:	f7ff b9df 	b.w	8005524 <_vfiprintf_r>
 8006166:	bf00      	nop
 8006168:	20000008 	.word	0x20000008

0800616c <__sbprintf>:
 800616c:	b570      	push	{r4, r5, r6, lr}
 800616e:	460c      	mov	r4, r1
 8006170:	8989      	ldrh	r1, [r1, #12]
 8006172:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
 8006176:	f021 0102 	bic.w	r1, r1, #2
 800617a:	f8ad 100c 	strh.w	r1, [sp, #12]
 800617e:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8006180:	9119      	str	r1, [sp, #100]	; 0x64
 8006182:	89e1      	ldrh	r1, [r4, #14]
 8006184:	f8ad 100e 	strh.w	r1, [sp, #14]
 8006188:	69e1      	ldr	r1, [r4, #28]
 800618a:	9107      	str	r1, [sp, #28]
 800618c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800618e:	9109      	str	r1, [sp, #36]	; 0x24
 8006190:	a91a      	add	r1, sp, #104	; 0x68
 8006192:	9100      	str	r1, [sp, #0]
 8006194:	9104      	str	r1, [sp, #16]
 8006196:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800619a:	9102      	str	r1, [sp, #8]
 800619c:	9105      	str	r1, [sp, #20]
 800619e:	2100      	movs	r1, #0
 80061a0:	9106      	str	r1, [sp, #24]
 80061a2:	4669      	mov	r1, sp
 80061a4:	4606      	mov	r6, r0
 80061a6:	f7ff f9bd 	bl	8005524 <_vfiprintf_r>
 80061aa:	1e05      	subs	r5, r0, #0
 80061ac:	db07      	blt.n	80061be <__sbprintf+0x52>
 80061ae:	4669      	mov	r1, sp
 80061b0:	4630      	mov	r0, r6
 80061b2:	f7fd f85f 	bl	8003274 <_fflush_r>
 80061b6:	2800      	cmp	r0, #0
 80061b8:	bf18      	it	ne
 80061ba:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 80061be:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80061c2:	065b      	lsls	r3, r3, #25
 80061c4:	d503      	bpl.n	80061ce <__sbprintf+0x62>
 80061c6:	89a3      	ldrh	r3, [r4, #12]
 80061c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061cc:	81a3      	strh	r3, [r4, #12]
 80061ce:	4628      	mov	r0, r5
 80061d0:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
 80061d4:	bd70      	pop	{r4, r5, r6, pc}
 80061d6:	bf00      	nop

080061d8 <__swbuf_r>:
 80061d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061da:	460d      	mov	r5, r1
 80061dc:	4614      	mov	r4, r2
 80061de:	4606      	mov	r6, r0
 80061e0:	b110      	cbz	r0, 80061e8 <__swbuf_r+0x10>
 80061e2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d043      	beq.n	8006270 <__swbuf_r+0x98>
 80061e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80061ec:	69a3      	ldr	r3, [r4, #24]
 80061ee:	60a3      	str	r3, [r4, #8]
 80061f0:	0717      	lsls	r7, r2, #28
 80061f2:	b290      	uxth	r0, r2
 80061f4:	d51b      	bpl.n	800622e <__swbuf_r+0x56>
 80061f6:	6923      	ldr	r3, [r4, #16]
 80061f8:	b1cb      	cbz	r3, 800622e <__swbuf_r+0x56>
 80061fa:	b2ed      	uxtb	r5, r5
 80061fc:	0481      	lsls	r1, r0, #18
 80061fe:	462f      	mov	r7, r5
 8006200:	d522      	bpl.n	8006248 <__swbuf_r+0x70>
 8006202:	6822      	ldr	r2, [r4, #0]
 8006204:	6961      	ldr	r1, [r4, #20]
 8006206:	1ad3      	subs	r3, r2, r3
 8006208:	4299      	cmp	r1, r3
 800620a:	dd29      	ble.n	8006260 <__swbuf_r+0x88>
 800620c:	3301      	adds	r3, #1
 800620e:	68a1      	ldr	r1, [r4, #8]
 8006210:	3901      	subs	r1, #1
 8006212:	60a1      	str	r1, [r4, #8]
 8006214:	1c51      	adds	r1, r2, #1
 8006216:	6021      	str	r1, [r4, #0]
 8006218:	7015      	strb	r5, [r2, #0]
 800621a:	6962      	ldr	r2, [r4, #20]
 800621c:	429a      	cmp	r2, r3
 800621e:	d02a      	beq.n	8006276 <__swbuf_r+0x9e>
 8006220:	89a3      	ldrh	r3, [r4, #12]
 8006222:	07db      	lsls	r3, r3, #31
 8006224:	d501      	bpl.n	800622a <__swbuf_r+0x52>
 8006226:	2d0a      	cmp	r5, #10
 8006228:	d025      	beq.n	8006276 <__swbuf_r+0x9e>
 800622a:	4638      	mov	r0, r7
 800622c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800622e:	4621      	mov	r1, r4
 8006230:	4630      	mov	r0, r6
 8006232:	f7fb feb7 	bl	8001fa4 <__swsetup_r>
 8006236:	bb20      	cbnz	r0, 8006282 <__swbuf_r+0xaa>
 8006238:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800623c:	6923      	ldr	r3, [r4, #16]
 800623e:	b290      	uxth	r0, r2
 8006240:	b2ed      	uxtb	r5, r5
 8006242:	0481      	lsls	r1, r0, #18
 8006244:	462f      	mov	r7, r5
 8006246:	d4dc      	bmi.n	8006202 <__swbuf_r+0x2a>
 8006248:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800624c:	81a2      	strh	r2, [r4, #12]
 800624e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006250:	6961      	ldr	r1, [r4, #20]
 8006252:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006256:	6662      	str	r2, [r4, #100]	; 0x64
 8006258:	6822      	ldr	r2, [r4, #0]
 800625a:	1ad3      	subs	r3, r2, r3
 800625c:	4299      	cmp	r1, r3
 800625e:	dcd5      	bgt.n	800620c <__swbuf_r+0x34>
 8006260:	4621      	mov	r1, r4
 8006262:	4630      	mov	r0, r6
 8006264:	f7fd f806 	bl	8003274 <_fflush_r>
 8006268:	b958      	cbnz	r0, 8006282 <__swbuf_r+0xaa>
 800626a:	6822      	ldr	r2, [r4, #0]
 800626c:	2301      	movs	r3, #1
 800626e:	e7ce      	b.n	800620e <__swbuf_r+0x36>
 8006270:	f7fd f92a 	bl	80034c8 <__sinit>
 8006274:	e7b8      	b.n	80061e8 <__swbuf_r+0x10>
 8006276:	4621      	mov	r1, r4
 8006278:	4630      	mov	r0, r6
 800627a:	f7fc fffb 	bl	8003274 <_fflush_r>
 800627e:	2800      	cmp	r0, #0
 8006280:	d0d3      	beq.n	800622a <__swbuf_r+0x52>
 8006282:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006286:	e7d0      	b.n	800622a <__swbuf_r+0x52>

08006288 <__swbuf>:
 8006288:	b410      	push	{r4}
 800628a:	4c04      	ldr	r4, [pc, #16]	; (800629c <__swbuf+0x14>)
 800628c:	4603      	mov	r3, r0
 800628e:	460a      	mov	r2, r1
 8006290:	6820      	ldr	r0, [r4, #0]
 8006292:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006296:	4619      	mov	r1, r3
 8006298:	f7ff bf9e 	b.w	80061d8 <__swbuf_r>
 800629c:	20000008 	.word	0x20000008

080062a0 <__assert_func>:
 80062a0:	b500      	push	{lr}
 80062a2:	4c0b      	ldr	r4, [pc, #44]	; (80062d0 <__assert_func+0x30>)
 80062a4:	6825      	ldr	r5, [r4, #0]
 80062a6:	4614      	mov	r4, r2
 80062a8:	68ee      	ldr	r6, [r5, #12]
 80062aa:	461a      	mov	r2, r3
 80062ac:	b085      	sub	sp, #20
 80062ae:	4603      	mov	r3, r0
 80062b0:	460d      	mov	r5, r1
 80062b2:	b14c      	cbz	r4, 80062c8 <__assert_func+0x28>
 80062b4:	4907      	ldr	r1, [pc, #28]	; (80062d4 <__assert_func+0x34>)
 80062b6:	9500      	str	r5, [sp, #0]
 80062b8:	e9cd 1401 	strd	r1, r4, [sp, #4]
 80062bc:	4630      	mov	r0, r6
 80062be:	4906      	ldr	r1, [pc, #24]	; (80062d8 <__assert_func+0x38>)
 80062c0:	f000 f8bc 	bl	800643c <fiprintf>
 80062c4:	f000 fb96 	bl	80069f4 <abort>
 80062c8:	4904      	ldr	r1, [pc, #16]	; (80062dc <__assert_func+0x3c>)
 80062ca:	460c      	mov	r4, r1
 80062cc:	e7f3      	b.n	80062b6 <__assert_func+0x16>
 80062ce:	bf00      	nop
 80062d0:	20000008 	.word	0x20000008
 80062d4:	0801c154 	.word	0x0801c154
 80062d8:	0801c164 	.word	0x0801c164
 80062dc:	0801c160 	.word	0x0801c160

080062e0 <__assert>:
 80062e0:	b508      	push	{r3, lr}
 80062e2:	4613      	mov	r3, r2
 80062e4:	2200      	movs	r2, #0
 80062e6:	f7ff ffdb 	bl	80062a0 <__assert_func>
 80062ea:	bf00      	nop

080062ec <_calloc_r>:
 80062ec:	b510      	push	{r4, lr}
 80062ee:	fb02 f101 	mul.w	r1, r2, r1
 80062f2:	f7fd fcd5 	bl	8003ca0 <_malloc_r>
 80062f6:	4604      	mov	r4, r0
 80062f8:	b168      	cbz	r0, 8006316 <_calloc_r+0x2a>
 80062fa:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80062fe:	f022 0203 	bic.w	r2, r2, #3
 8006302:	3a04      	subs	r2, #4
 8006304:	2a24      	cmp	r2, #36	; 0x24
 8006306:	d818      	bhi.n	800633a <_calloc_r+0x4e>
 8006308:	2a13      	cmp	r2, #19
 800630a:	d806      	bhi.n	800631a <_calloc_r+0x2e>
 800630c:	4602      	mov	r2, r0
 800630e:	2300      	movs	r3, #0
 8006310:	e9c2 3300 	strd	r3, r3, [r2]
 8006314:	6093      	str	r3, [r2, #8]
 8006316:	4620      	mov	r0, r4
 8006318:	bd10      	pop	{r4, pc}
 800631a:	2300      	movs	r3, #0
 800631c:	2a1b      	cmp	r2, #27
 800631e:	e9c0 3300 	strd	r3, r3, [r0]
 8006322:	d90f      	bls.n	8006344 <_calloc_r+0x58>
 8006324:	2a24      	cmp	r2, #36	; 0x24
 8006326:	e9c0 3302 	strd	r3, r3, [r0, #8]
 800632a:	bf11      	iteee	ne
 800632c:	f100 0210 	addne.w	r2, r0, #16
 8006330:	6103      	streq	r3, [r0, #16]
 8006332:	f100 0218 	addeq.w	r2, r0, #24
 8006336:	6143      	streq	r3, [r0, #20]
 8006338:	e7e9      	b.n	800630e <_calloc_r+0x22>
 800633a:	2100      	movs	r1, #0
 800633c:	f7fa f804 	bl	8000348 <memset>
 8006340:	4620      	mov	r0, r4
 8006342:	bd10      	pop	{r4, pc}
 8006344:	f100 0208 	add.w	r2, r0, #8
 8006348:	e7e1      	b.n	800630e <_calloc_r+0x22>
 800634a:	bf00      	nop

0800634c <_fclose_r.part.0>:
 800634c:	b570      	push	{r4, r5, r6, lr}
 800634e:	460c      	mov	r4, r1
 8006350:	4606      	mov	r6, r0
 8006352:	f7fc fef7 	bl	8003144 <__sflush_r>
 8006356:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006358:	4605      	mov	r5, r0
 800635a:	b133      	cbz	r3, 800636a <_fclose_r.part.0+0x1e>
 800635c:	69e1      	ldr	r1, [r4, #28]
 800635e:	4630      	mov	r0, r6
 8006360:	4798      	blx	r3
 8006362:	2800      	cmp	r0, #0
 8006364:	bfb8      	it	lt
 8006366:	f04f 35ff 	movlt.w	r5, #4294967295	; 0xffffffff
 800636a:	89a3      	ldrh	r3, [r4, #12]
 800636c:	061b      	lsls	r3, r3, #24
 800636e:	d419      	bmi.n	80063a4 <_fclose_r.part.0+0x58>
 8006370:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006372:	b141      	cbz	r1, 8006386 <_fclose_r.part.0+0x3a>
 8006374:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8006378:	4299      	cmp	r1, r3
 800637a:	d002      	beq.n	8006382 <_fclose_r.part.0+0x36>
 800637c:	4630      	mov	r0, r6
 800637e:	f7fd f913 	bl	80035a8 <_free_r>
 8006382:	2300      	movs	r3, #0
 8006384:	6323      	str	r3, [r4, #48]	; 0x30
 8006386:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8006388:	b121      	cbz	r1, 8006394 <_fclose_r.part.0+0x48>
 800638a:	4630      	mov	r0, r6
 800638c:	f7fd f90c 	bl	80035a8 <_free_r>
 8006390:	2300      	movs	r3, #0
 8006392:	6463      	str	r3, [r4, #68]	; 0x44
 8006394:	f7fd f89c 	bl	80034d0 <__sfp_lock_acquire>
 8006398:	2300      	movs	r3, #0
 800639a:	81a3      	strh	r3, [r4, #12]
 800639c:	f7fd f89a 	bl	80034d4 <__sfp_lock_release>
 80063a0:	4628      	mov	r0, r5
 80063a2:	bd70      	pop	{r4, r5, r6, pc}
 80063a4:	6921      	ldr	r1, [r4, #16]
 80063a6:	4630      	mov	r0, r6
 80063a8:	f7fd f8fe 	bl	80035a8 <_free_r>
 80063ac:	e7e0      	b.n	8006370 <_fclose_r.part.0+0x24>
 80063ae:	bf00      	nop

080063b0 <_fclose_r>:
 80063b0:	b1b1      	cbz	r1, 80063e0 <_fclose_r+0x30>
 80063b2:	b538      	push	{r3, r4, r5, lr}
 80063b4:	4604      	mov	r4, r0
 80063b6:	460d      	mov	r5, r1
 80063b8:	b108      	cbz	r0, 80063be <_fclose_r+0xe>
 80063ba:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80063bc:	b14b      	cbz	r3, 80063d2 <_fclose_r+0x22>
 80063be:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
 80063c2:	b90b      	cbnz	r3, 80063c8 <_fclose_r+0x18>
 80063c4:	2000      	movs	r0, #0
 80063c6:	bd38      	pop	{r3, r4, r5, pc}
 80063c8:	4629      	mov	r1, r5
 80063ca:	4620      	mov	r0, r4
 80063cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80063d0:	e7bc      	b.n	800634c <_fclose_r.part.0>
 80063d2:	f7fd f879 	bl	80034c8 <__sinit>
 80063d6:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d0f2      	beq.n	80063c4 <_fclose_r+0x14>
 80063de:	e7f3      	b.n	80063c8 <_fclose_r+0x18>
 80063e0:	2000      	movs	r0, #0
 80063e2:	4770      	bx	lr

080063e4 <fclose>:
 80063e4:	b1c0      	cbz	r0, 8006418 <fclose+0x34>
 80063e6:	b538      	push	{r3, r4, r5, lr}
 80063e8:	4b0c      	ldr	r3, [pc, #48]	; (800641c <fclose+0x38>)
 80063ea:	681d      	ldr	r5, [r3, #0]
 80063ec:	4604      	mov	r4, r0
 80063ee:	b10d      	cbz	r5, 80063f4 <fclose+0x10>
 80063f0:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80063f2:	b14b      	cbz	r3, 8006408 <fclose+0x24>
 80063f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063f8:	b90b      	cbnz	r3, 80063fe <fclose+0x1a>
 80063fa:	2000      	movs	r0, #0
 80063fc:	bd38      	pop	{r3, r4, r5, pc}
 80063fe:	4621      	mov	r1, r4
 8006400:	4628      	mov	r0, r5
 8006402:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006406:	e7a1      	b.n	800634c <_fclose_r.part.0>
 8006408:	4628      	mov	r0, r5
 800640a:	f7fd f85d 	bl	80034c8 <__sinit>
 800640e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d0f1      	beq.n	80063fa <fclose+0x16>
 8006416:	e7f2      	b.n	80063fe <fclose+0x1a>
 8006418:	2000      	movs	r0, #0
 800641a:	4770      	bx	lr
 800641c:	20000008 	.word	0x20000008

08006420 <_fiprintf_r>:
 8006420:	b40c      	push	{r2, r3}
 8006422:	b500      	push	{lr}
 8006424:	b083      	sub	sp, #12
 8006426:	ab04      	add	r3, sp, #16
 8006428:	f853 2b04 	ldr.w	r2, [r3], #4
 800642c:	9301      	str	r3, [sp, #4]
 800642e:	f7ff f879 	bl	8005524 <_vfiprintf_r>
 8006432:	b003      	add	sp, #12
 8006434:	f85d eb04 	ldr.w	lr, [sp], #4
 8006438:	b002      	add	sp, #8
 800643a:	4770      	bx	lr

0800643c <fiprintf>:
 800643c:	b40e      	push	{r1, r2, r3}
 800643e:	b510      	push	{r4, lr}
 8006440:	b083      	sub	sp, #12
 8006442:	ab05      	add	r3, sp, #20
 8006444:	4c06      	ldr	r4, [pc, #24]	; (8006460 <fiprintf+0x24>)
 8006446:	f853 2b04 	ldr.w	r2, [r3], #4
 800644a:	9301      	str	r3, [sp, #4]
 800644c:	4601      	mov	r1, r0
 800644e:	6820      	ldr	r0, [r4, #0]
 8006450:	f7ff f868 	bl	8005524 <_vfiprintf_r>
 8006454:	b003      	add	sp, #12
 8006456:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800645a:	b003      	add	sp, #12
 800645c:	4770      	bx	lr
 800645e:	bf00      	nop
 8006460:	20000008 	.word	0x20000008

08006464 <__fputwc>:
 8006464:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006468:	b082      	sub	sp, #8
 800646a:	4682      	mov	sl, r0
 800646c:	4688      	mov	r8, r1
 800646e:	4614      	mov	r4, r2
 8006470:	f000 f8a4 	bl	80065bc <__locale_mb_cur_max>
 8006474:	2801      	cmp	r0, #1
 8006476:	d103      	bne.n	8006480 <__fputwc+0x1c>
 8006478:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 800647c:	2bfe      	cmp	r3, #254	; 0xfe
 800647e:	d936      	bls.n	80064ee <__fputwc+0x8a>
 8006480:	4642      	mov	r2, r8
 8006482:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 8006486:	a901      	add	r1, sp, #4
 8006488:	4650      	mov	r0, sl
 800648a:	f000 fa57 	bl	800693c <_wcrtomb_r>
 800648e:	1c42      	adds	r2, r0, #1
 8006490:	4606      	mov	r6, r0
 8006492:	d032      	beq.n	80064fa <__fputwc+0x96>
 8006494:	b330      	cbz	r0, 80064e4 <__fputwc+0x80>
 8006496:	f89d c004 	ldrb.w	ip, [sp, #4]
 800649a:	f10d 0905 	add.w	r9, sp, #5
 800649e:	2500      	movs	r5, #0
 80064a0:	e009      	b.n	80064b6 <__fputwc+0x52>
 80064a2:	6823      	ldr	r3, [r4, #0]
 80064a4:	1c5a      	adds	r2, r3, #1
 80064a6:	6022      	str	r2, [r4, #0]
 80064a8:	f883 c000 	strb.w	ip, [r3]
 80064ac:	3501      	adds	r5, #1
 80064ae:	42b5      	cmp	r5, r6
 80064b0:	d218      	bcs.n	80064e4 <__fputwc+0x80>
 80064b2:	f819 cb01 	ldrb.w	ip, [r9], #1
 80064b6:	68a3      	ldr	r3, [r4, #8]
 80064b8:	3b01      	subs	r3, #1
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	60a3      	str	r3, [r4, #8]
 80064be:	daf0      	bge.n	80064a2 <__fputwc+0x3e>
 80064c0:	69a7      	ldr	r7, [r4, #24]
 80064c2:	42bb      	cmp	r3, r7
 80064c4:	4661      	mov	r1, ip
 80064c6:	4622      	mov	r2, r4
 80064c8:	4650      	mov	r0, sl
 80064ca:	db02      	blt.n	80064d2 <__fputwc+0x6e>
 80064cc:	f1bc 0f0a 	cmp.w	ip, #10
 80064d0:	d1e7      	bne.n	80064a2 <__fputwc+0x3e>
 80064d2:	f7ff fe81 	bl	80061d8 <__swbuf_r>
 80064d6:	1c43      	adds	r3, r0, #1
 80064d8:	d1e8      	bne.n	80064ac <__fputwc+0x48>
 80064da:	4606      	mov	r6, r0
 80064dc:	4630      	mov	r0, r6
 80064de:	b002      	add	sp, #8
 80064e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064e4:	4646      	mov	r6, r8
 80064e6:	4630      	mov	r0, r6
 80064e8:	b002      	add	sp, #8
 80064ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064ee:	fa5f fc88 	uxtb.w	ip, r8
 80064f2:	f88d c004 	strb.w	ip, [sp, #4]
 80064f6:	4606      	mov	r6, r0
 80064f8:	e7cf      	b.n	800649a <__fputwc+0x36>
 80064fa:	89a3      	ldrh	r3, [r4, #12]
 80064fc:	4630      	mov	r0, r6
 80064fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006502:	81a3      	strh	r3, [r4, #12]
 8006504:	b002      	add	sp, #8
 8006506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800650a:	bf00      	nop

0800650c <_fputwc_r>:
 800650c:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 8006510:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8006514:	d10b      	bne.n	800652e <_fputwc_r+0x22>
 8006516:	b410      	push	{r4}
 8006518:	6e54      	ldr	r4, [r2, #100]	; 0x64
 800651a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800651e:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 8006522:	6654      	str	r4, [r2, #100]	; 0x64
 8006524:	8193      	strh	r3, [r2, #12]
 8006526:	f85d 4b04 	ldr.w	r4, [sp], #4
 800652a:	f7ff bf9b 	b.w	8006464 <__fputwc>
 800652e:	f7ff bf99 	b.w	8006464 <__fputwc>
 8006532:	bf00      	nop

08006534 <fputwc>:
 8006534:	b530      	push	{r4, r5, lr}
 8006536:	4b10      	ldr	r3, [pc, #64]	; (8006578 <fputwc+0x44>)
 8006538:	681d      	ldr	r5, [r3, #0]
 800653a:	460c      	mov	r4, r1
 800653c:	b083      	sub	sp, #12
 800653e:	4601      	mov	r1, r0
 8006540:	b10d      	cbz	r5, 8006546 <fputwc+0x12>
 8006542:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8006544:	b18b      	cbz	r3, 800656a <fputwc+0x36>
 8006546:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800654a:	049a      	lsls	r2, r3, #18
 800654c:	d406      	bmi.n	800655c <fputwc+0x28>
 800654e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006550:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006554:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006558:	81a3      	strh	r3, [r4, #12]
 800655a:	6662      	str	r2, [r4, #100]	; 0x64
 800655c:	4622      	mov	r2, r4
 800655e:	4628      	mov	r0, r5
 8006560:	b003      	add	sp, #12
 8006562:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006566:	f7ff bf7d 	b.w	8006464 <__fputwc>
 800656a:	9001      	str	r0, [sp, #4]
 800656c:	4628      	mov	r0, r5
 800656e:	f7fc ffab 	bl	80034c8 <__sinit>
 8006572:	9901      	ldr	r1, [sp, #4]
 8006574:	e7e7      	b.n	8006546 <fputwc+0x12>
 8006576:	bf00      	nop
 8006578:	20000008 	.word	0x20000008

0800657c <_setlocale_r>:
 800657c:	b142      	cbz	r2, 8006590 <_setlocale_r+0x14>
 800657e:	b510      	push	{r4, lr}
 8006580:	490b      	ldr	r1, [pc, #44]	; (80065b0 <_setlocale_r+0x34>)
 8006582:	4610      	mov	r0, r2
 8006584:	4614      	mov	r4, r2
 8006586:	f000 f86f 	bl	8006668 <strcmp>
 800658a:	b918      	cbnz	r0, 8006594 <_setlocale_r+0x18>
 800658c:	4809      	ldr	r0, [pc, #36]	; (80065b4 <_setlocale_r+0x38>)
 800658e:	bd10      	pop	{r4, pc}
 8006590:	4808      	ldr	r0, [pc, #32]	; (80065b4 <_setlocale_r+0x38>)
 8006592:	4770      	bx	lr
 8006594:	4907      	ldr	r1, [pc, #28]	; (80065b4 <_setlocale_r+0x38>)
 8006596:	4620      	mov	r0, r4
 8006598:	f000 f866 	bl	8006668 <strcmp>
 800659c:	2800      	cmp	r0, #0
 800659e:	d0f5      	beq.n	800658c <_setlocale_r+0x10>
 80065a0:	4905      	ldr	r1, [pc, #20]	; (80065b8 <_setlocale_r+0x3c>)
 80065a2:	4620      	mov	r0, r4
 80065a4:	f000 f860 	bl	8006668 <strcmp>
 80065a8:	2800      	cmp	r0, #0
 80065aa:	d0ef      	beq.n	800658c <_setlocale_r+0x10>
 80065ac:	2000      	movs	r0, #0
 80065ae:	bd10      	pop	{r4, pc}
 80065b0:	0801c198 	.word	0x0801c198
 80065b4:	0801c194 	.word	0x0801c194
 80065b8:	0801c160 	.word	0x0801c160

080065bc <__locale_mb_cur_max>:
 80065bc:	4b01      	ldr	r3, [pc, #4]	; (80065c4 <__locale_mb_cur_max+0x8>)
 80065be:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 80065c2:	4770      	bx	lr
 80065c4:	20000848 	.word	0x20000848

080065c8 <setlocale>:
 80065c8:	b141      	cbz	r1, 80065dc <setlocale+0x14>
 80065ca:	b510      	push	{r4, lr}
 80065cc:	460c      	mov	r4, r1
 80065ce:	4620      	mov	r0, r4
 80065d0:	490a      	ldr	r1, [pc, #40]	; (80065fc <setlocale+0x34>)
 80065d2:	f000 f849 	bl	8006668 <strcmp>
 80065d6:	b918      	cbnz	r0, 80065e0 <setlocale+0x18>
 80065d8:	4809      	ldr	r0, [pc, #36]	; (8006600 <setlocale+0x38>)
 80065da:	bd10      	pop	{r4, pc}
 80065dc:	4808      	ldr	r0, [pc, #32]	; (8006600 <setlocale+0x38>)
 80065de:	4770      	bx	lr
 80065e0:	4907      	ldr	r1, [pc, #28]	; (8006600 <setlocale+0x38>)
 80065e2:	4620      	mov	r0, r4
 80065e4:	f000 f840 	bl	8006668 <strcmp>
 80065e8:	2800      	cmp	r0, #0
 80065ea:	d0f5      	beq.n	80065d8 <setlocale+0x10>
 80065ec:	4905      	ldr	r1, [pc, #20]	; (8006604 <setlocale+0x3c>)
 80065ee:	4620      	mov	r0, r4
 80065f0:	f000 f83a 	bl	8006668 <strcmp>
 80065f4:	2800      	cmp	r0, #0
 80065f6:	d0ef      	beq.n	80065d8 <setlocale+0x10>
 80065f8:	2000      	movs	r0, #0
 80065fa:	bd10      	pop	{r4, pc}
 80065fc:	0801c198 	.word	0x0801c198
 8006600:	0801c194 	.word	0x0801c194
 8006604:	0801c160 	.word	0x0801c160

08006608 <_mbtowc_r>:
 8006608:	b410      	push	{r4}
 800660a:	4c03      	ldr	r4, [pc, #12]	; (8006618 <_mbtowc_r+0x10>)
 800660c:	f8d4 40e4 	ldr.w	r4, [r4, #228]	; 0xe4
 8006610:	46a4      	mov	ip, r4
 8006612:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006616:	4760      	bx	ip
 8006618:	20000848 	.word	0x20000848

0800661c <__ascii_mbtowc>:
 800661c:	b082      	sub	sp, #8
 800661e:	b149      	cbz	r1, 8006634 <__ascii_mbtowc+0x18>
 8006620:	b15a      	cbz	r2, 800663a <__ascii_mbtowc+0x1e>
 8006622:	b16b      	cbz	r3, 8006640 <__ascii_mbtowc+0x24>
 8006624:	7813      	ldrb	r3, [r2, #0]
 8006626:	600b      	str	r3, [r1, #0]
 8006628:	7812      	ldrb	r2, [r2, #0]
 800662a:	1e10      	subs	r0, r2, #0
 800662c:	bf18      	it	ne
 800662e:	2001      	movne	r0, #1
 8006630:	b002      	add	sp, #8
 8006632:	4770      	bx	lr
 8006634:	a901      	add	r1, sp, #4
 8006636:	2a00      	cmp	r2, #0
 8006638:	d1f3      	bne.n	8006622 <__ascii_mbtowc+0x6>
 800663a:	4610      	mov	r0, r2
 800663c:	b002      	add	sp, #8
 800663e:	4770      	bx	lr
 8006640:	f06f 0001 	mvn.w	r0, #1
 8006644:	e7f4      	b.n	8006630 <__ascii_mbtowc+0x14>
 8006646:	bf00      	nop
	...
 8006660:	eba2 0003 	sub.w	r0, r2, r3
 8006664:	4770      	bx	lr
 8006666:	bf00      	nop

08006668 <strcmp>:
 8006668:	7802      	ldrb	r2, [r0, #0]
 800666a:	780b      	ldrb	r3, [r1, #0]
 800666c:	2a01      	cmp	r2, #1
 800666e:	bf28      	it	cs
 8006670:	429a      	cmpcs	r2, r3
 8006672:	d1f5      	bne.n	8006660 <__ascii_mbtowc+0x44>
 8006674:	e96d 4504 	strd	r4, r5, [sp, #-16]!
 8006678:	ea40 0401 	orr.w	r4, r0, r1
 800667c:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8006680:	f06f 0c00 	mvn.w	ip, #0
 8006684:	ea4f 7244 	mov.w	r2, r4, lsl #29
 8006688:	b312      	cbz	r2, 80066d0 <strcmp+0x68>
 800668a:	ea80 0401 	eor.w	r4, r0, r1
 800668e:	f014 0f07 	tst.w	r4, #7
 8006692:	d16a      	bne.n	800676a <strcmp+0x102>
 8006694:	f000 0407 	and.w	r4, r0, #7
 8006698:	f020 0007 	bic.w	r0, r0, #7
 800669c:	f004 0503 	and.w	r5, r4, #3
 80066a0:	f021 0107 	bic.w	r1, r1, #7
 80066a4:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 80066a8:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 80066ac:	f014 0f04 	tst.w	r4, #4
 80066b0:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 80066b4:	fa0c f405 	lsl.w	r4, ip, r5
 80066b8:	ea62 0204 	orn	r2, r2, r4
 80066bc:	ea66 0604 	orn	r6, r6, r4
 80066c0:	d00a      	beq.n	80066d8 <strcmp+0x70>
 80066c2:	ea63 0304 	orn	r3, r3, r4
 80066c6:	4662      	mov	r2, ip
 80066c8:	ea67 0704 	orn	r7, r7, r4
 80066cc:	4666      	mov	r6, ip
 80066ce:	e003      	b.n	80066d8 <strcmp+0x70>
 80066d0:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 80066d4:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 80066d8:	fa82 f54c 	uadd8	r5, r2, ip
 80066dc:	ea82 0406 	eor.w	r4, r2, r6
 80066e0:	faa4 f48c 	sel	r4, r4, ip
 80066e4:	bb6c      	cbnz	r4, 8006742 <strcmp+0xda>
 80066e6:	fa83 f54c 	uadd8	r5, r3, ip
 80066ea:	ea83 0507 	eor.w	r5, r3, r7
 80066ee:	faa5 f58c 	sel	r5, r5, ip
 80066f2:	b995      	cbnz	r5, 800671a <strcmp+0xb2>
 80066f4:	e950 2302 	ldrd	r2, r3, [r0, #-8]
 80066f8:	e951 6702 	ldrd	r6, r7, [r1, #-8]
 80066fc:	fa82 f54c 	uadd8	r5, r2, ip
 8006700:	ea82 0406 	eor.w	r4, r2, r6
 8006704:	faa4 f48c 	sel	r4, r4, ip
 8006708:	fa83 f54c 	uadd8	r5, r3, ip
 800670c:	ea83 0507 	eor.w	r5, r3, r7
 8006710:	faa5 f58c 	sel	r5, r5, ip
 8006714:	4325      	orrs	r5, r4
 8006716:	d0db      	beq.n	80066d0 <strcmp+0x68>
 8006718:	b99c      	cbnz	r4, 8006742 <strcmp+0xda>
 800671a:	ba2d      	rev	r5, r5
 800671c:	fab5 f485 	clz	r4, r5
 8006720:	f024 0407 	bic.w	r4, r4, #7
 8006724:	fa27 f104 	lsr.w	r1, r7, r4
 8006728:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800672c:	fa23 f304 	lsr.w	r3, r3, r4
 8006730:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8006734:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8006738:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 800673c:	eba0 0001 	sub.w	r0, r0, r1
 8006740:	4770      	bx	lr
 8006742:	ba24      	rev	r4, r4
 8006744:	fab4 f484 	clz	r4, r4
 8006748:	f024 0407 	bic.w	r4, r4, #7
 800674c:	fa26 f104 	lsr.w	r1, r6, r4
 8006750:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006754:	fa22 f204 	lsr.w	r2, r2, r4
 8006758:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 800675c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8006760:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8006764:	eba0 0001 	sub.w	r0, r0, r1
 8006768:	4770      	bx	lr
 800676a:	f014 0f03 	tst.w	r4, #3
 800676e:	d13c      	bne.n	80067ea <strcmp+0x182>
 8006770:	f010 0403 	ands.w	r4, r0, #3
 8006774:	d128      	bne.n	80067c8 <strcmp+0x160>
 8006776:	f850 2b08 	ldr.w	r2, [r0], #8
 800677a:	f851 3b08 	ldr.w	r3, [r1], #8
 800677e:	fa82 f54c 	uadd8	r5, r2, ip
 8006782:	ea82 0503 	eor.w	r5, r2, r3
 8006786:	faa5 f58c 	sel	r5, r5, ip
 800678a:	b95d      	cbnz	r5, 80067a4 <strcmp+0x13c>
 800678c:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8006790:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006794:	fa82 f54c 	uadd8	r5, r2, ip
 8006798:	ea82 0503 	eor.w	r5, r2, r3
 800679c:	faa5 f58c 	sel	r5, r5, ip
 80067a0:	2d00      	cmp	r5, #0
 80067a2:	d0e8      	beq.n	8006776 <strcmp+0x10e>
 80067a4:	ba2d      	rev	r5, r5
 80067a6:	fab5 f485 	clz	r4, r5
 80067aa:	f024 0407 	bic.w	r4, r4, #7
 80067ae:	fa23 f104 	lsr.w	r1, r3, r4
 80067b2:	fa22 f204 	lsr.w	r2, r2, r4
 80067b6:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 80067ba:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80067be:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 80067c2:	eba0 0001 	sub.w	r0, r0, r1
 80067c6:	4770      	bx	lr
 80067c8:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 80067cc:	f020 0003 	bic.w	r0, r0, #3
 80067d0:	f850 2b08 	ldr.w	r2, [r0], #8
 80067d4:	f021 0103 	bic.w	r1, r1, #3
 80067d8:	f851 3b08 	ldr.w	r3, [r1], #8
 80067dc:	fa0c f404 	lsl.w	r4, ip, r4
 80067e0:	ea62 0204 	orn	r2, r2, r4
 80067e4:	ea63 0304 	orn	r3, r3, r4
 80067e8:	e7c9      	b.n	800677e <strcmp+0x116>
 80067ea:	f010 0403 	ands.w	r4, r0, #3
 80067ee:	d01a      	beq.n	8006826 <strcmp+0x1be>
 80067f0:	eba1 0104 	sub.w	r1, r1, r4
 80067f4:	f020 0003 	bic.w	r0, r0, #3
 80067f8:	07e4      	lsls	r4, r4, #31
 80067fa:	f850 2b04 	ldr.w	r2, [r0], #4
 80067fe:	d006      	beq.n	800680e <strcmp+0x1a6>
 8006800:	d20f      	bcs.n	8006822 <strcmp+0x1ba>
 8006802:	788b      	ldrb	r3, [r1, #2]
 8006804:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
 8006808:	1ae4      	subs	r4, r4, r3
 800680a:	d106      	bne.n	800681a <strcmp+0x1b2>
 800680c:	b12b      	cbz	r3, 800681a <strcmp+0x1b2>
 800680e:	78cb      	ldrb	r3, [r1, #3]
 8006810:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
 8006814:	1ae4      	subs	r4, r4, r3
 8006816:	d100      	bne.n	800681a <strcmp+0x1b2>
 8006818:	b91b      	cbnz	r3, 8006822 <strcmp+0x1ba>
 800681a:	4620      	mov	r0, r4
 800681c:	f85d 4b10 	ldr.w	r4, [sp], #16
 8006820:	4770      	bx	lr
 8006822:	f101 0104 	add.w	r1, r1, #4
 8006826:	f850 2b04 	ldr.w	r2, [r0], #4
 800682a:	07cc      	lsls	r4, r1, #31
 800682c:	f021 0103 	bic.w	r1, r1, #3
 8006830:	f851 3b04 	ldr.w	r3, [r1], #4
 8006834:	d848      	bhi.n	80068c8 <strcmp+0x260>
 8006836:	d224      	bcs.n	8006882 <strcmp+0x21a>
 8006838:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
 800683c:	fa82 f54c 	uadd8	r5, r2, ip
 8006840:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
 8006844:	faa5 f58c 	sel	r5, r5, ip
 8006848:	d10a      	bne.n	8006860 <strcmp+0x1f8>
 800684a:	b965      	cbnz	r5, 8006866 <strcmp+0x1fe>
 800684c:	f851 3b04 	ldr.w	r3, [r1], #4
 8006850:	ea84 0402 	eor.w	r4, r4, r2
 8006854:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
 8006858:	d10e      	bne.n	8006878 <strcmp+0x210>
 800685a:	f850 2b04 	ldr.w	r2, [r0], #4
 800685e:	e7eb      	b.n	8006838 <strcmp+0x1d0>
 8006860:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8006864:	e055      	b.n	8006912 <strcmp+0x2aa>
 8006866:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
 800686a:	d14d      	bne.n	8006908 <strcmp+0x2a0>
 800686c:	7808      	ldrb	r0, [r1, #0]
 800686e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8006872:	f1c0 0000 	rsb	r0, r0, #0
 8006876:	4770      	bx	lr
 8006878:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800687c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8006880:	e047      	b.n	8006912 <strcmp+0x2aa>
 8006882:	ea02 441c 	and.w	r4, r2, ip, lsr #16
 8006886:	fa82 f54c 	uadd8	r5, r2, ip
 800688a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
 800688e:	faa5 f58c 	sel	r5, r5, ip
 8006892:	d10a      	bne.n	80068aa <strcmp+0x242>
 8006894:	b965      	cbnz	r5, 80068b0 <strcmp+0x248>
 8006896:	f851 3b04 	ldr.w	r3, [r1], #4
 800689a:	ea84 0402 	eor.w	r4, r4, r2
 800689e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
 80068a2:	d10c      	bne.n	80068be <strcmp+0x256>
 80068a4:	f850 2b04 	ldr.w	r2, [r0], #4
 80068a8:	e7eb      	b.n	8006882 <strcmp+0x21a>
 80068aa:	ea4f 4313 	mov.w	r3, r3, lsr #16
 80068ae:	e030      	b.n	8006912 <strcmp+0x2aa>
 80068b0:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
 80068b4:	d128      	bne.n	8006908 <strcmp+0x2a0>
 80068b6:	880b      	ldrh	r3, [r1, #0]
 80068b8:	ea4f 4212 	mov.w	r2, r2, lsr #16
 80068bc:	e029      	b.n	8006912 <strcmp+0x2aa>
 80068be:	ea4f 4212 	mov.w	r2, r2, lsr #16
 80068c2:	ea03 431c 	and.w	r3, r3, ip, lsr #16
 80068c6:	e024      	b.n	8006912 <strcmp+0x2aa>
 80068c8:	f002 04ff 	and.w	r4, r2, #255	; 0xff
 80068cc:	fa82 f54c 	uadd8	r5, r2, ip
 80068d0:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
 80068d4:	faa5 f58c 	sel	r5, r5, ip
 80068d8:	d10a      	bne.n	80068f0 <strcmp+0x288>
 80068da:	b965      	cbnz	r5, 80068f6 <strcmp+0x28e>
 80068dc:	f851 3b04 	ldr.w	r3, [r1], #4
 80068e0:	ea84 0402 	eor.w	r4, r4, r2
 80068e4:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
 80068e8:	d109      	bne.n	80068fe <strcmp+0x296>
 80068ea:	f850 2b04 	ldr.w	r2, [r0], #4
 80068ee:	e7eb      	b.n	80068c8 <strcmp+0x260>
 80068f0:	ea4f 6313 	mov.w	r3, r3, lsr #24
 80068f4:	e00d      	b.n	8006912 <strcmp+0x2aa>
 80068f6:	f015 0fff 	tst.w	r5, #255	; 0xff
 80068fa:	d105      	bne.n	8006908 <strcmp+0x2a0>
 80068fc:	680b      	ldr	r3, [r1, #0]
 80068fe:	ea4f 2212 	mov.w	r2, r2, lsr #8
 8006902:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006906:	e004      	b.n	8006912 <strcmp+0x2aa>
 8006908:	f04f 0000 	mov.w	r0, #0
 800690c:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8006910:	4770      	bx	lr
 8006912:	ba12      	rev	r2, r2
 8006914:	ba1b      	rev	r3, r3
 8006916:	fa82 f44c 	uadd8	r4, r2, ip
 800691a:	ea82 0403 	eor.w	r4, r2, r3
 800691e:	faa4 f58c 	sel	r5, r4, ip
 8006922:	fab5 f485 	clz	r4, r5
 8006926:	fa02 f204 	lsl.w	r2, r2, r4
 800692a:	fa03 f304 	lsl.w	r3, r3, r4
 800692e:	ea4f 6012 	mov.w	r0, r2, lsr #24
 8006932:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8006936:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
 800693a:	4770      	bx	lr

0800693c <_wcrtomb_r>:
 800693c:	b570      	push	{r4, r5, r6, lr}
 800693e:	4605      	mov	r5, r0
 8006940:	b084      	sub	sp, #16
 8006942:	461c      	mov	r4, r3
 8006944:	b139      	cbz	r1, 8006956 <_wcrtomb_r+0x1a>
 8006946:	4e0b      	ldr	r6, [pc, #44]	; (8006974 <_wcrtomb_r+0x38>)
 8006948:	f8d6 60e0 	ldr.w	r6, [r6, #224]	; 0xe0
 800694c:	47b0      	blx	r6
 800694e:	1c43      	adds	r3, r0, #1
 8006950:	d009      	beq.n	8006966 <_wcrtomb_r+0x2a>
 8006952:	b004      	add	sp, #16
 8006954:	bd70      	pop	{r4, r5, r6, pc}
 8006956:	460a      	mov	r2, r1
 8006958:	4906      	ldr	r1, [pc, #24]	; (8006974 <_wcrtomb_r+0x38>)
 800695a:	f8d1 60e0 	ldr.w	r6, [r1, #224]	; 0xe0
 800695e:	a901      	add	r1, sp, #4
 8006960:	47b0      	blx	r6
 8006962:	1c43      	adds	r3, r0, #1
 8006964:	d1f5      	bne.n	8006952 <_wcrtomb_r+0x16>
 8006966:	2200      	movs	r2, #0
 8006968:	238a      	movs	r3, #138	; 0x8a
 800696a:	6022      	str	r2, [r4, #0]
 800696c:	602b      	str	r3, [r5, #0]
 800696e:	b004      	add	sp, #16
 8006970:	bd70      	pop	{r4, r5, r6, pc}
 8006972:	bf00      	nop
 8006974:	20000848 	.word	0x20000848

08006978 <wcrtomb>:
 8006978:	b570      	push	{r4, r5, r6, lr}
 800697a:	4b10      	ldr	r3, [pc, #64]	; (80069bc <wcrtomb+0x44>)
 800697c:	b084      	sub	sp, #16
 800697e:	681d      	ldr	r5, [r3, #0]
 8006980:	4614      	mov	r4, r2
 8006982:	b158      	cbz	r0, 800699c <wcrtomb+0x24>
 8006984:	4b0e      	ldr	r3, [pc, #56]	; (80069c0 <wcrtomb+0x48>)
 8006986:	460a      	mov	r2, r1
 8006988:	f8d3 60e0 	ldr.w	r6, [r3, #224]	; 0xe0
 800698c:	4601      	mov	r1, r0
 800698e:	4623      	mov	r3, r4
 8006990:	4628      	mov	r0, r5
 8006992:	47b0      	blx	r6
 8006994:	1c43      	adds	r3, r0, #1
 8006996:	d00b      	beq.n	80069b0 <wcrtomb+0x38>
 8006998:	b004      	add	sp, #16
 800699a:	bd70      	pop	{r4, r5, r6, pc}
 800699c:	4a08      	ldr	r2, [pc, #32]	; (80069c0 <wcrtomb+0x48>)
 800699e:	4623      	mov	r3, r4
 80069a0:	f8d2 60e0 	ldr.w	r6, [r2, #224]	; 0xe0
 80069a4:	a901      	add	r1, sp, #4
 80069a6:	4602      	mov	r2, r0
 80069a8:	4628      	mov	r0, r5
 80069aa:	47b0      	blx	r6
 80069ac:	1c43      	adds	r3, r0, #1
 80069ae:	d1f3      	bne.n	8006998 <wcrtomb+0x20>
 80069b0:	2200      	movs	r2, #0
 80069b2:	238a      	movs	r3, #138	; 0x8a
 80069b4:	6022      	str	r2, [r4, #0]
 80069b6:	602b      	str	r3, [r5, #0]
 80069b8:	b004      	add	sp, #16
 80069ba:	bd70      	pop	{r4, r5, r6, pc}
 80069bc:	20000008 	.word	0x20000008
 80069c0:	20000848 	.word	0x20000848

080069c4 <_wctomb_r>:
 80069c4:	b410      	push	{r4}
 80069c6:	4c03      	ldr	r4, [pc, #12]	; (80069d4 <_wctomb_r+0x10>)
 80069c8:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 80069cc:	46a4      	mov	ip, r4
 80069ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80069d2:	4760      	bx	ip
 80069d4:	20000848 	.word	0x20000848

080069d8 <__ascii_wctomb>:
 80069d8:	b149      	cbz	r1, 80069ee <__ascii_wctomb+0x16>
 80069da:	2aff      	cmp	r2, #255	; 0xff
 80069dc:	d802      	bhi.n	80069e4 <__ascii_wctomb+0xc>
 80069de:	700a      	strb	r2, [r1, #0]
 80069e0:	2001      	movs	r0, #1
 80069e2:	4770      	bx	lr
 80069e4:	238a      	movs	r3, #138	; 0x8a
 80069e6:	6003      	str	r3, [r0, #0]
 80069e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80069ec:	4770      	bx	lr
 80069ee:	4608      	mov	r0, r1
 80069f0:	4770      	bx	lr
 80069f2:	bf00      	nop

080069f4 <abort>:
 80069f4:	b508      	push	{r3, lr}
 80069f6:	2006      	movs	r0, #6
 80069f8:	f000 f8a0 	bl	8006b3c <raise>
 80069fc:	2001      	movs	r0, #1
 80069fe:	f000 ff83 	bl	8007908 <_exit>
 8006a02:	bf00      	nop

08006a04 <_init_signal_r>:
 8006a04:	b538      	push	{r3, r4, r5, lr}
 8006a06:	f8d0 42dc 	ldr.w	r4, [r0, #732]	; 0x2dc
 8006a0a:	b10c      	cbz	r4, 8006a10 <_init_signal_r+0xc>
 8006a0c:	2000      	movs	r0, #0
 8006a0e:	bd38      	pop	{r3, r4, r5, pc}
 8006a10:	2180      	movs	r1, #128	; 0x80
 8006a12:	4605      	mov	r5, r0
 8006a14:	f7fd f944 	bl	8003ca0 <_malloc_r>
 8006a18:	4602      	mov	r2, r0
 8006a1a:	f8c5 02dc 	str.w	r0, [r5, #732]	; 0x2dc
 8006a1e:	b130      	cbz	r0, 8006a2e <_init_signal_r+0x2a>
 8006a20:	1f03      	subs	r3, r0, #4
 8006a22:	327c      	adds	r2, #124	; 0x7c
 8006a24:	f843 4f04 	str.w	r4, [r3, #4]!
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d1fb      	bne.n	8006a24 <_init_signal_r+0x20>
 8006a2c:	e7ee      	b.n	8006a0c <_init_signal_r+0x8>
 8006a2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a32:	bd38      	pop	{r3, r4, r5, pc}

08006a34 <_signal_r>:
 8006a34:	291f      	cmp	r1, #31
 8006a36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a38:	4605      	mov	r5, r0
 8006a3a:	d809      	bhi.n	8006a50 <_signal_r+0x1c>
 8006a3c:	f8d0 62dc 	ldr.w	r6, [r0, #732]	; 0x2dc
 8006a40:	460c      	mov	r4, r1
 8006a42:	4617      	mov	r7, r2
 8006a44:	b14e      	cbz	r6, 8006a5a <_signal_r+0x26>
 8006a46:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8006a4a:	f846 7024 	str.w	r7, [r6, r4, lsl #2]
 8006a4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a50:	2316      	movs	r3, #22
 8006a52:	6003      	str	r3, [r0, #0]
 8006a54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a5a:	2180      	movs	r1, #128	; 0x80
 8006a5c:	f7fd f920 	bl	8003ca0 <_malloc_r>
 8006a60:	4606      	mov	r6, r0
 8006a62:	f8c5 02dc 	str.w	r0, [r5, #732]	; 0x2dc
 8006a66:	b140      	cbz	r0, 8006a7a <_signal_r+0x46>
 8006a68:	1f03      	subs	r3, r0, #4
 8006a6a:	f100 057c 	add.w	r5, r0, #124	; 0x7c
 8006a6e:	2100      	movs	r1, #0
 8006a70:	f843 1f04 	str.w	r1, [r3, #4]!
 8006a74:	429d      	cmp	r5, r3
 8006a76:	d1fb      	bne.n	8006a70 <_signal_r+0x3c>
 8006a78:	e7e5      	b.n	8006a46 <_signal_r+0x12>
 8006a7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006a80 <_raise_r>:
 8006a80:	291f      	cmp	r1, #31
 8006a82:	b538      	push	{r3, r4, r5, lr}
 8006a84:	4605      	mov	r5, r0
 8006a86:	d821      	bhi.n	8006acc <_raise_r+0x4c>
 8006a88:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
 8006a8c:	460c      	mov	r4, r1
 8006a8e:	b16a      	cbz	r2, 8006aac <_raise_r+0x2c>
 8006a90:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006a94:	b153      	cbz	r3, 8006aac <_raise_r+0x2c>
 8006a96:	2b01      	cmp	r3, #1
 8006a98:	d016      	beq.n	8006ac8 <_raise_r+0x48>
 8006a9a:	1c59      	adds	r1, r3, #1
 8006a9c:	d010      	beq.n	8006ac0 <_raise_r+0x40>
 8006a9e:	2500      	movs	r5, #0
 8006aa0:	4620      	mov	r0, r4
 8006aa2:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
 8006aa6:	4798      	blx	r3
 8006aa8:	4628      	mov	r0, r5
 8006aaa:	bd38      	pop	{r3, r4, r5, pc}
 8006aac:	4628      	mov	r0, r5
 8006aae:	f000 f903 	bl	8006cb8 <_getpid_r>
 8006ab2:	4622      	mov	r2, r4
 8006ab4:	4601      	mov	r1, r0
 8006ab6:	4628      	mov	r0, r5
 8006ab8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006abc:	f000 b8e6 	b.w	8006c8c <_kill_r>
 8006ac0:	2316      	movs	r3, #22
 8006ac2:	6003      	str	r3, [r0, #0]
 8006ac4:	2001      	movs	r0, #1
 8006ac6:	bd38      	pop	{r3, r4, r5, pc}
 8006ac8:	2000      	movs	r0, #0
 8006aca:	bd38      	pop	{r3, r4, r5, pc}
 8006acc:	2316      	movs	r3, #22
 8006ace:	6003      	str	r3, [r0, #0]
 8006ad0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006ad4:	bd38      	pop	{r3, r4, r5, pc}
 8006ad6:	bf00      	nop

08006ad8 <__sigtramp_r>:
 8006ad8:	291f      	cmp	r1, #31
 8006ada:	d82c      	bhi.n	8006b36 <__sigtramp_r+0x5e>
 8006adc:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
 8006ae0:	b538      	push	{r3, r4, r5, lr}
 8006ae2:	460c      	mov	r4, r1
 8006ae4:	4605      	mov	r5, r0
 8006ae6:	b182      	cbz	r2, 8006b0a <__sigtramp_r+0x32>
 8006ae8:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
 8006aec:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8006af0:	b14b      	cbz	r3, 8006b06 <__sigtramp_r+0x2e>
 8006af2:	1c59      	adds	r1, r3, #1
 8006af4:	d01a      	beq.n	8006b2c <__sigtramp_r+0x54>
 8006af6:	2b01      	cmp	r3, #1
 8006af8:	d016      	beq.n	8006b28 <__sigtramp_r+0x50>
 8006afa:	2500      	movs	r5, #0
 8006afc:	4620      	mov	r0, r4
 8006afe:	6015      	str	r5, [r2, #0]
 8006b00:	4798      	blx	r3
 8006b02:	4628      	mov	r0, r5
 8006b04:	bd38      	pop	{r3, r4, r5, pc}
 8006b06:	2001      	movs	r0, #1
 8006b08:	bd38      	pop	{r3, r4, r5, pc}
 8006b0a:	2180      	movs	r1, #128	; 0x80
 8006b0c:	f7fd f8c8 	bl	8003ca0 <_malloc_r>
 8006b10:	4602      	mov	r2, r0
 8006b12:	f8c5 02dc 	str.w	r0, [r5, #732]	; 0x2dc
 8006b16:	b158      	cbz	r0, 8006b30 <__sigtramp_r+0x58>
 8006b18:	1f03      	subs	r3, r0, #4
 8006b1a:	2100      	movs	r1, #0
 8006b1c:	307c      	adds	r0, #124	; 0x7c
 8006b1e:	f843 1f04 	str.w	r1, [r3, #4]!
 8006b22:	4298      	cmp	r0, r3
 8006b24:	d1fb      	bne.n	8006b1e <__sigtramp_r+0x46>
 8006b26:	e7df      	b.n	8006ae8 <__sigtramp_r+0x10>
 8006b28:	2003      	movs	r0, #3
 8006b2a:	bd38      	pop	{r3, r4, r5, pc}
 8006b2c:	2002      	movs	r0, #2
 8006b2e:	bd38      	pop	{r3, r4, r5, pc}
 8006b30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b34:	bd38      	pop	{r3, r4, r5, pc}
 8006b36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b3a:	4770      	bx	lr

08006b3c <raise>:
 8006b3c:	b538      	push	{r3, r4, r5, lr}
 8006b3e:	4b15      	ldr	r3, [pc, #84]	; (8006b94 <raise+0x58>)
 8006b40:	281f      	cmp	r0, #31
 8006b42:	681d      	ldr	r5, [r3, #0]
 8006b44:	d820      	bhi.n	8006b88 <raise+0x4c>
 8006b46:	f8d5 22dc 	ldr.w	r2, [r5, #732]	; 0x2dc
 8006b4a:	4604      	mov	r4, r0
 8006b4c:	b162      	cbz	r2, 8006b68 <raise+0x2c>
 8006b4e:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
 8006b52:	b14b      	cbz	r3, 8006b68 <raise+0x2c>
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	d015      	beq.n	8006b84 <raise+0x48>
 8006b58:	1c59      	adds	r1, r3, #1
 8006b5a:	d00f      	beq.n	8006b7c <raise+0x40>
 8006b5c:	2500      	movs	r5, #0
 8006b5e:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
 8006b62:	4798      	blx	r3
 8006b64:	4628      	mov	r0, r5
 8006b66:	bd38      	pop	{r3, r4, r5, pc}
 8006b68:	4628      	mov	r0, r5
 8006b6a:	f000 f8a5 	bl	8006cb8 <_getpid_r>
 8006b6e:	4622      	mov	r2, r4
 8006b70:	4601      	mov	r1, r0
 8006b72:	4628      	mov	r0, r5
 8006b74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b78:	f000 b888 	b.w	8006c8c <_kill_r>
 8006b7c:	2316      	movs	r3, #22
 8006b7e:	602b      	str	r3, [r5, #0]
 8006b80:	2001      	movs	r0, #1
 8006b82:	bd38      	pop	{r3, r4, r5, pc}
 8006b84:	2000      	movs	r0, #0
 8006b86:	bd38      	pop	{r3, r4, r5, pc}
 8006b88:	2316      	movs	r3, #22
 8006b8a:	602b      	str	r3, [r5, #0]
 8006b8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b90:	bd38      	pop	{r3, r4, r5, pc}
 8006b92:	bf00      	nop
 8006b94:	20000008 	.word	0x20000008

08006b98 <signal>:
 8006b98:	4b13      	ldr	r3, [pc, #76]	; (8006be8 <signal+0x50>)
 8006b9a:	281f      	cmp	r0, #31
 8006b9c:	b570      	push	{r4, r5, r6, lr}
 8006b9e:	681e      	ldr	r6, [r3, #0]
 8006ba0:	d809      	bhi.n	8006bb6 <signal+0x1e>
 8006ba2:	460d      	mov	r5, r1
 8006ba4:	f8d6 12dc 	ldr.w	r1, [r6, #732]	; 0x2dc
 8006ba8:	4604      	mov	r4, r0
 8006baa:	b149      	cbz	r1, 8006bc0 <signal+0x28>
 8006bac:	f851 0024 	ldr.w	r0, [r1, r4, lsl #2]
 8006bb0:	f841 5024 	str.w	r5, [r1, r4, lsl #2]
 8006bb4:	bd70      	pop	{r4, r5, r6, pc}
 8006bb6:	2316      	movs	r3, #22
 8006bb8:	6033      	str	r3, [r6, #0]
 8006bba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006bbe:	bd70      	pop	{r4, r5, r6, pc}
 8006bc0:	2180      	movs	r1, #128	; 0x80
 8006bc2:	4630      	mov	r0, r6
 8006bc4:	f7fd f86c 	bl	8003ca0 <_malloc_r>
 8006bc8:	4601      	mov	r1, r0
 8006bca:	f8c6 02dc 	str.w	r0, [r6, #732]	; 0x2dc
 8006bce:	b140      	cbz	r0, 8006be2 <signal+0x4a>
 8006bd0:	1f03      	subs	r3, r0, #4
 8006bd2:	f100 0c7c 	add.w	ip, r0, #124	; 0x7c
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	f843 2f04 	str.w	r2, [r3, #4]!
 8006bdc:	4563      	cmp	r3, ip
 8006bde:	d1fb      	bne.n	8006bd8 <signal+0x40>
 8006be0:	e7e4      	b.n	8006bac <signal+0x14>
 8006be2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006be6:	bd70      	pop	{r4, r5, r6, pc}
 8006be8:	20000008 	.word	0x20000008

08006bec <_init_signal>:
 8006bec:	b538      	push	{r3, r4, r5, lr}
 8006bee:	4b0c      	ldr	r3, [pc, #48]	; (8006c20 <_init_signal+0x34>)
 8006bf0:	681d      	ldr	r5, [r3, #0]
 8006bf2:	f8d5 42dc 	ldr.w	r4, [r5, #732]	; 0x2dc
 8006bf6:	b10c      	cbz	r4, 8006bfc <_init_signal+0x10>
 8006bf8:	2000      	movs	r0, #0
 8006bfa:	bd38      	pop	{r3, r4, r5, pc}
 8006bfc:	2180      	movs	r1, #128	; 0x80
 8006bfe:	4628      	mov	r0, r5
 8006c00:	f7fd f84e 	bl	8003ca0 <_malloc_r>
 8006c04:	f8c5 02dc 	str.w	r0, [r5, #732]	; 0x2dc
 8006c08:	b138      	cbz	r0, 8006c1a <_init_signal+0x2e>
 8006c0a:	1f03      	subs	r3, r0, #4
 8006c0c:	f100 027c 	add.w	r2, r0, #124	; 0x7c
 8006c10:	f843 4f04 	str.w	r4, [r3, #4]!
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d1fb      	bne.n	8006c10 <_init_signal+0x24>
 8006c18:	e7ee      	b.n	8006bf8 <_init_signal+0xc>
 8006c1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c1e:	bd38      	pop	{r3, r4, r5, pc}
 8006c20:	20000008 	.word	0x20000008

08006c24 <__sigtramp>:
 8006c24:	b538      	push	{r3, r4, r5, lr}
 8006c26:	4b18      	ldr	r3, [pc, #96]	; (8006c88 <__sigtramp+0x64>)
 8006c28:	281f      	cmp	r0, #31
 8006c2a:	681d      	ldr	r5, [r3, #0]
 8006c2c:	d828      	bhi.n	8006c80 <__sigtramp+0x5c>
 8006c2e:	f8d5 22dc 	ldr.w	r2, [r5, #732]	; 0x2dc
 8006c32:	4604      	mov	r4, r0
 8006c34:	b182      	cbz	r2, 8006c58 <__sigtramp+0x34>
 8006c36:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
 8006c3a:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8006c3e:	b14b      	cbz	r3, 8006c54 <__sigtramp+0x30>
 8006c40:	1c59      	adds	r1, r3, #1
 8006c42:	d01b      	beq.n	8006c7c <__sigtramp+0x58>
 8006c44:	2b01      	cmp	r3, #1
 8006c46:	d017      	beq.n	8006c78 <__sigtramp+0x54>
 8006c48:	2500      	movs	r5, #0
 8006c4a:	4620      	mov	r0, r4
 8006c4c:	6015      	str	r5, [r2, #0]
 8006c4e:	4798      	blx	r3
 8006c50:	4628      	mov	r0, r5
 8006c52:	bd38      	pop	{r3, r4, r5, pc}
 8006c54:	2001      	movs	r0, #1
 8006c56:	bd38      	pop	{r3, r4, r5, pc}
 8006c58:	2180      	movs	r1, #128	; 0x80
 8006c5a:	4628      	mov	r0, r5
 8006c5c:	f7fd f820 	bl	8003ca0 <_malloc_r>
 8006c60:	4602      	mov	r2, r0
 8006c62:	f8c5 02dc 	str.w	r0, [r5, #732]	; 0x2dc
 8006c66:	b158      	cbz	r0, 8006c80 <__sigtramp+0x5c>
 8006c68:	1f03      	subs	r3, r0, #4
 8006c6a:	2100      	movs	r1, #0
 8006c6c:	307c      	adds	r0, #124	; 0x7c
 8006c6e:	f843 1f04 	str.w	r1, [r3, #4]!
 8006c72:	4283      	cmp	r3, r0
 8006c74:	d1fb      	bne.n	8006c6e <__sigtramp+0x4a>
 8006c76:	e7de      	b.n	8006c36 <__sigtramp+0x12>
 8006c78:	2003      	movs	r0, #3
 8006c7a:	bd38      	pop	{r3, r4, r5, pc}
 8006c7c:	2002      	movs	r0, #2
 8006c7e:	bd38      	pop	{r3, r4, r5, pc}
 8006c80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c84:	bd38      	pop	{r3, r4, r5, pc}
 8006c86:	bf00      	nop
 8006c88:	20000008 	.word	0x20000008

08006c8c <_kill_r>:
 8006c8c:	b570      	push	{r4, r5, r6, lr}
 8006c8e:	460c      	mov	r4, r1
 8006c90:	4d08      	ldr	r5, [pc, #32]	; (8006cb4 <_kill_r+0x28>)
 8006c92:	4603      	mov	r3, r0
 8006c94:	2600      	movs	r6, #0
 8006c96:	4620      	mov	r0, r4
 8006c98:	4611      	mov	r1, r2
 8006c9a:	461c      	mov	r4, r3
 8006c9c:	602e      	str	r6, [r5, #0]
 8006c9e:	f000 fe2b 	bl	80078f8 <_kill>
 8006ca2:	1c43      	adds	r3, r0, #1
 8006ca4:	d000      	beq.n	8006ca8 <_kill_r+0x1c>
 8006ca6:	bd70      	pop	{r4, r5, r6, pc}
 8006ca8:	682b      	ldr	r3, [r5, #0]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d0fb      	beq.n	8006ca6 <_kill_r+0x1a>
 8006cae:	6023      	str	r3, [r4, #0]
 8006cb0:	bd70      	pop	{r4, r5, r6, pc}
 8006cb2:	bf00      	nop
 8006cb4:	20000c74 	.word	0x20000c74

08006cb8 <_getpid_r>:
 8006cb8:	f000 be16 	b.w	80078e8 <_getpid>

08006cbc <__aeabi_drsub>:
 8006cbc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8006cc0:	e002      	b.n	8006cc8 <__adddf3>
 8006cc2:	bf00      	nop

08006cc4 <__aeabi_dsub>:
 8006cc4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08006cc8 <__adddf3>:
 8006cc8:	b530      	push	{r4, r5, lr}
 8006cca:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8006cce:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8006cd2:	ea94 0f05 	teq	r4, r5
 8006cd6:	bf08      	it	eq
 8006cd8:	ea90 0f02 	teqeq	r0, r2
 8006cdc:	bf1f      	itttt	ne
 8006cde:	ea54 0c00 	orrsne.w	ip, r4, r0
 8006ce2:	ea55 0c02 	orrsne.w	ip, r5, r2
 8006ce6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8006cea:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8006cee:	f000 80e2 	beq.w	8006eb6 <__adddf3+0x1ee>
 8006cf2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8006cf6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8006cfa:	bfb8      	it	lt
 8006cfc:	426d      	neglt	r5, r5
 8006cfe:	dd0c      	ble.n	8006d1a <__adddf3+0x52>
 8006d00:	442c      	add	r4, r5
 8006d02:	ea80 0202 	eor.w	r2, r0, r2
 8006d06:	ea81 0303 	eor.w	r3, r1, r3
 8006d0a:	ea82 0000 	eor.w	r0, r2, r0
 8006d0e:	ea83 0101 	eor.w	r1, r3, r1
 8006d12:	ea80 0202 	eor.w	r2, r0, r2
 8006d16:	ea81 0303 	eor.w	r3, r1, r3
 8006d1a:	2d36      	cmp	r5, #54	; 0x36
 8006d1c:	bf88      	it	hi
 8006d1e:	bd30      	pophi	{r4, r5, pc}
 8006d20:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8006d24:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8006d28:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8006d2c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8006d30:	d002      	beq.n	8006d38 <__adddf3+0x70>
 8006d32:	4240      	negs	r0, r0
 8006d34:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8006d38:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8006d3c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8006d40:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8006d44:	d002      	beq.n	8006d4c <__adddf3+0x84>
 8006d46:	4252      	negs	r2, r2
 8006d48:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8006d4c:	ea94 0f05 	teq	r4, r5
 8006d50:	f000 80a7 	beq.w	8006ea2 <__adddf3+0x1da>
 8006d54:	f1a4 0401 	sub.w	r4, r4, #1
 8006d58:	f1d5 0e20 	rsbs	lr, r5, #32
 8006d5c:	db0d      	blt.n	8006d7a <__adddf3+0xb2>
 8006d5e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8006d62:	fa22 f205 	lsr.w	r2, r2, r5
 8006d66:	1880      	adds	r0, r0, r2
 8006d68:	f141 0100 	adc.w	r1, r1, #0
 8006d6c:	fa03 f20e 	lsl.w	r2, r3, lr
 8006d70:	1880      	adds	r0, r0, r2
 8006d72:	fa43 f305 	asr.w	r3, r3, r5
 8006d76:	4159      	adcs	r1, r3
 8006d78:	e00e      	b.n	8006d98 <__adddf3+0xd0>
 8006d7a:	f1a5 0520 	sub.w	r5, r5, #32
 8006d7e:	f10e 0e20 	add.w	lr, lr, #32
 8006d82:	2a01      	cmp	r2, #1
 8006d84:	fa03 fc0e 	lsl.w	ip, r3, lr
 8006d88:	bf28      	it	cs
 8006d8a:	f04c 0c02 	orrcs.w	ip, ip, #2
 8006d8e:	fa43 f305 	asr.w	r3, r3, r5
 8006d92:	18c0      	adds	r0, r0, r3
 8006d94:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8006d98:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8006d9c:	d507      	bpl.n	8006dae <__adddf3+0xe6>
 8006d9e:	f04f 0e00 	mov.w	lr, #0
 8006da2:	f1dc 0c00 	rsbs	ip, ip, #0
 8006da6:	eb7e 0000 	sbcs.w	r0, lr, r0
 8006daa:	eb6e 0101 	sbc.w	r1, lr, r1
 8006dae:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8006db2:	d31b      	bcc.n	8006dec <__adddf3+0x124>
 8006db4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8006db8:	d30c      	bcc.n	8006dd4 <__adddf3+0x10c>
 8006dba:	0849      	lsrs	r1, r1, #1
 8006dbc:	ea5f 0030 	movs.w	r0, r0, rrx
 8006dc0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8006dc4:	f104 0401 	add.w	r4, r4, #1
 8006dc8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8006dcc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8006dd0:	f080 809a 	bcs.w	8006f08 <__adddf3+0x240>
 8006dd4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8006dd8:	bf08      	it	eq
 8006dda:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8006dde:	f150 0000 	adcs.w	r0, r0, #0
 8006de2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8006de6:	ea41 0105 	orr.w	r1, r1, r5
 8006dea:	bd30      	pop	{r4, r5, pc}
 8006dec:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8006df0:	4140      	adcs	r0, r0
 8006df2:	eb41 0101 	adc.w	r1, r1, r1
 8006df6:	3c01      	subs	r4, #1
 8006df8:	bf28      	it	cs
 8006dfa:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8006dfe:	d2e9      	bcs.n	8006dd4 <__adddf3+0x10c>
 8006e00:	f091 0f00 	teq	r1, #0
 8006e04:	bf04      	itt	eq
 8006e06:	4601      	moveq	r1, r0
 8006e08:	2000      	moveq	r0, #0
 8006e0a:	fab1 f381 	clz	r3, r1
 8006e0e:	bf08      	it	eq
 8006e10:	3320      	addeq	r3, #32
 8006e12:	f1a3 030b 	sub.w	r3, r3, #11
 8006e16:	f1b3 0220 	subs.w	r2, r3, #32
 8006e1a:	da0c      	bge.n	8006e36 <__adddf3+0x16e>
 8006e1c:	320c      	adds	r2, #12
 8006e1e:	dd08      	ble.n	8006e32 <__adddf3+0x16a>
 8006e20:	f102 0c14 	add.w	ip, r2, #20
 8006e24:	f1c2 020c 	rsb	r2, r2, #12
 8006e28:	fa01 f00c 	lsl.w	r0, r1, ip
 8006e2c:	fa21 f102 	lsr.w	r1, r1, r2
 8006e30:	e00c      	b.n	8006e4c <__adddf3+0x184>
 8006e32:	f102 0214 	add.w	r2, r2, #20
 8006e36:	bfd8      	it	le
 8006e38:	f1c2 0c20 	rsble	ip, r2, #32
 8006e3c:	fa01 f102 	lsl.w	r1, r1, r2
 8006e40:	fa20 fc0c 	lsr.w	ip, r0, ip
 8006e44:	bfdc      	itt	le
 8006e46:	ea41 010c 	orrle.w	r1, r1, ip
 8006e4a:	4090      	lslle	r0, r2
 8006e4c:	1ae4      	subs	r4, r4, r3
 8006e4e:	bfa2      	ittt	ge
 8006e50:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8006e54:	4329      	orrge	r1, r5
 8006e56:	bd30      	popge	{r4, r5, pc}
 8006e58:	ea6f 0404 	mvn.w	r4, r4
 8006e5c:	3c1f      	subs	r4, #31
 8006e5e:	da1c      	bge.n	8006e9a <__adddf3+0x1d2>
 8006e60:	340c      	adds	r4, #12
 8006e62:	dc0e      	bgt.n	8006e82 <__adddf3+0x1ba>
 8006e64:	f104 0414 	add.w	r4, r4, #20
 8006e68:	f1c4 0220 	rsb	r2, r4, #32
 8006e6c:	fa20 f004 	lsr.w	r0, r0, r4
 8006e70:	fa01 f302 	lsl.w	r3, r1, r2
 8006e74:	ea40 0003 	orr.w	r0, r0, r3
 8006e78:	fa21 f304 	lsr.w	r3, r1, r4
 8006e7c:	ea45 0103 	orr.w	r1, r5, r3
 8006e80:	bd30      	pop	{r4, r5, pc}
 8006e82:	f1c4 040c 	rsb	r4, r4, #12
 8006e86:	f1c4 0220 	rsb	r2, r4, #32
 8006e8a:	fa20 f002 	lsr.w	r0, r0, r2
 8006e8e:	fa01 f304 	lsl.w	r3, r1, r4
 8006e92:	ea40 0003 	orr.w	r0, r0, r3
 8006e96:	4629      	mov	r1, r5
 8006e98:	bd30      	pop	{r4, r5, pc}
 8006e9a:	fa21 f004 	lsr.w	r0, r1, r4
 8006e9e:	4629      	mov	r1, r5
 8006ea0:	bd30      	pop	{r4, r5, pc}
 8006ea2:	f094 0f00 	teq	r4, #0
 8006ea6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8006eaa:	bf06      	itte	eq
 8006eac:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8006eb0:	3401      	addeq	r4, #1
 8006eb2:	3d01      	subne	r5, #1
 8006eb4:	e74e      	b.n	8006d54 <__adddf3+0x8c>
 8006eb6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8006eba:	bf18      	it	ne
 8006ebc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8006ec0:	d029      	beq.n	8006f16 <__adddf3+0x24e>
 8006ec2:	ea94 0f05 	teq	r4, r5
 8006ec6:	bf08      	it	eq
 8006ec8:	ea90 0f02 	teqeq	r0, r2
 8006ecc:	d005      	beq.n	8006eda <__adddf3+0x212>
 8006ece:	ea54 0c00 	orrs.w	ip, r4, r0
 8006ed2:	bf04      	itt	eq
 8006ed4:	4619      	moveq	r1, r3
 8006ed6:	4610      	moveq	r0, r2
 8006ed8:	bd30      	pop	{r4, r5, pc}
 8006eda:	ea91 0f03 	teq	r1, r3
 8006ede:	bf1e      	ittt	ne
 8006ee0:	2100      	movne	r1, #0
 8006ee2:	2000      	movne	r0, #0
 8006ee4:	bd30      	popne	{r4, r5, pc}
 8006ee6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8006eea:	d105      	bne.n	8006ef8 <__adddf3+0x230>
 8006eec:	0040      	lsls	r0, r0, #1
 8006eee:	4149      	adcs	r1, r1
 8006ef0:	bf28      	it	cs
 8006ef2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8006ef6:	bd30      	pop	{r4, r5, pc}
 8006ef8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8006efc:	bf3c      	itt	cc
 8006efe:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8006f02:	bd30      	popcc	{r4, r5, pc}
 8006f04:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8006f08:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8006f0c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006f10:	f04f 0000 	mov.w	r0, #0
 8006f14:	bd30      	pop	{r4, r5, pc}
 8006f16:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8006f1a:	bf1a      	itte	ne
 8006f1c:	4619      	movne	r1, r3
 8006f1e:	4610      	movne	r0, r2
 8006f20:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8006f24:	bf1c      	itt	ne
 8006f26:	460b      	movne	r3, r1
 8006f28:	4602      	movne	r2, r0
 8006f2a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8006f2e:	bf06      	itte	eq
 8006f30:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8006f34:	ea91 0f03 	teqeq	r1, r3
 8006f38:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8006f3c:	bd30      	pop	{r4, r5, pc}
 8006f3e:	bf00      	nop

08006f40 <__aeabi_ui2d>:
 8006f40:	f090 0f00 	teq	r0, #0
 8006f44:	bf04      	itt	eq
 8006f46:	2100      	moveq	r1, #0
 8006f48:	4770      	bxeq	lr
 8006f4a:	b530      	push	{r4, r5, lr}
 8006f4c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8006f50:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8006f54:	f04f 0500 	mov.w	r5, #0
 8006f58:	f04f 0100 	mov.w	r1, #0
 8006f5c:	e750      	b.n	8006e00 <__adddf3+0x138>
 8006f5e:	bf00      	nop

08006f60 <__aeabi_i2d>:
 8006f60:	f090 0f00 	teq	r0, #0
 8006f64:	bf04      	itt	eq
 8006f66:	2100      	moveq	r1, #0
 8006f68:	4770      	bxeq	lr
 8006f6a:	b530      	push	{r4, r5, lr}
 8006f6c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8006f70:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8006f74:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8006f78:	bf48      	it	mi
 8006f7a:	4240      	negmi	r0, r0
 8006f7c:	f04f 0100 	mov.w	r1, #0
 8006f80:	e73e      	b.n	8006e00 <__adddf3+0x138>
 8006f82:	bf00      	nop

08006f84 <__aeabi_f2d>:
 8006f84:	0042      	lsls	r2, r0, #1
 8006f86:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8006f8a:	ea4f 0131 	mov.w	r1, r1, rrx
 8006f8e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8006f92:	bf1f      	itttt	ne
 8006f94:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8006f98:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8006f9c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8006fa0:	4770      	bxne	lr
 8006fa2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8006fa6:	bf08      	it	eq
 8006fa8:	4770      	bxeq	lr
 8006faa:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8006fae:	bf04      	itt	eq
 8006fb0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8006fb4:	4770      	bxeq	lr
 8006fb6:	b530      	push	{r4, r5, lr}
 8006fb8:	f44f 7460 	mov.w	r4, #896	; 0x380
 8006fbc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8006fc0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006fc4:	e71c      	b.n	8006e00 <__adddf3+0x138>
 8006fc6:	bf00      	nop

08006fc8 <__aeabi_ul2d>:
 8006fc8:	ea50 0201 	orrs.w	r2, r0, r1
 8006fcc:	bf08      	it	eq
 8006fce:	4770      	bxeq	lr
 8006fd0:	b530      	push	{r4, r5, lr}
 8006fd2:	f04f 0500 	mov.w	r5, #0
 8006fd6:	e00a      	b.n	8006fee <__aeabi_l2d+0x16>

08006fd8 <__aeabi_l2d>:
 8006fd8:	ea50 0201 	orrs.w	r2, r0, r1
 8006fdc:	bf08      	it	eq
 8006fde:	4770      	bxeq	lr
 8006fe0:	b530      	push	{r4, r5, lr}
 8006fe2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8006fe6:	d502      	bpl.n	8006fee <__aeabi_l2d+0x16>
 8006fe8:	4240      	negs	r0, r0
 8006fea:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8006fee:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8006ff2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8006ff6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8006ffa:	f43f aed8 	beq.w	8006dae <__adddf3+0xe6>
 8006ffe:	f04f 0203 	mov.w	r2, #3
 8007002:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8007006:	bf18      	it	ne
 8007008:	3203      	addne	r2, #3
 800700a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800700e:	bf18      	it	ne
 8007010:	3203      	addne	r2, #3
 8007012:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8007016:	f1c2 0320 	rsb	r3, r2, #32
 800701a:	fa00 fc03 	lsl.w	ip, r0, r3
 800701e:	fa20 f002 	lsr.w	r0, r0, r2
 8007022:	fa01 fe03 	lsl.w	lr, r1, r3
 8007026:	ea40 000e 	orr.w	r0, r0, lr
 800702a:	fa21 f102 	lsr.w	r1, r1, r2
 800702e:	4414      	add	r4, r2
 8007030:	e6bd      	b.n	8006dae <__adddf3+0xe6>
 8007032:	bf00      	nop

08007034 <__aeabi_dmul>:
 8007034:	b570      	push	{r4, r5, r6, lr}
 8007036:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800703a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800703e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8007042:	bf1d      	ittte	ne
 8007044:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8007048:	ea94 0f0c 	teqne	r4, ip
 800704c:	ea95 0f0c 	teqne	r5, ip
 8007050:	f000 f8de 	bleq	8007210 <__aeabi_dmul+0x1dc>
 8007054:	442c      	add	r4, r5
 8007056:	ea81 0603 	eor.w	r6, r1, r3
 800705a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800705e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8007062:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8007066:	bf18      	it	ne
 8007068:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800706c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8007070:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007074:	d038      	beq.n	80070e8 <__aeabi_dmul+0xb4>
 8007076:	fba0 ce02 	umull	ip, lr, r0, r2
 800707a:	f04f 0500 	mov.w	r5, #0
 800707e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8007082:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8007086:	fbe0 e503 	umlal	lr, r5, r0, r3
 800708a:	f04f 0600 	mov.w	r6, #0
 800708e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8007092:	f09c 0f00 	teq	ip, #0
 8007096:	bf18      	it	ne
 8007098:	f04e 0e01 	orrne.w	lr, lr, #1
 800709c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80070a0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80070a4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80070a8:	d204      	bcs.n	80070b4 <__aeabi_dmul+0x80>
 80070aa:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80070ae:	416d      	adcs	r5, r5
 80070b0:	eb46 0606 	adc.w	r6, r6, r6
 80070b4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80070b8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80070bc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80070c0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80070c4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80070c8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80070cc:	bf88      	it	hi
 80070ce:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80070d2:	d81e      	bhi.n	8007112 <__aeabi_dmul+0xde>
 80070d4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80070d8:	bf08      	it	eq
 80070da:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80070de:	f150 0000 	adcs.w	r0, r0, #0
 80070e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80070e6:	bd70      	pop	{r4, r5, r6, pc}
 80070e8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80070ec:	ea46 0101 	orr.w	r1, r6, r1
 80070f0:	ea40 0002 	orr.w	r0, r0, r2
 80070f4:	ea81 0103 	eor.w	r1, r1, r3
 80070f8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80070fc:	bfc2      	ittt	gt
 80070fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8007102:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8007106:	bd70      	popgt	{r4, r5, r6, pc}
 8007108:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800710c:	f04f 0e00 	mov.w	lr, #0
 8007110:	3c01      	subs	r4, #1
 8007112:	f300 80ab 	bgt.w	800726c <__aeabi_dmul+0x238>
 8007116:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800711a:	bfde      	ittt	le
 800711c:	2000      	movle	r0, #0
 800711e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8007122:	bd70      	pople	{r4, r5, r6, pc}
 8007124:	f1c4 0400 	rsb	r4, r4, #0
 8007128:	3c20      	subs	r4, #32
 800712a:	da35      	bge.n	8007198 <__aeabi_dmul+0x164>
 800712c:	340c      	adds	r4, #12
 800712e:	dc1b      	bgt.n	8007168 <__aeabi_dmul+0x134>
 8007130:	f104 0414 	add.w	r4, r4, #20
 8007134:	f1c4 0520 	rsb	r5, r4, #32
 8007138:	fa00 f305 	lsl.w	r3, r0, r5
 800713c:	fa20 f004 	lsr.w	r0, r0, r4
 8007140:	fa01 f205 	lsl.w	r2, r1, r5
 8007144:	ea40 0002 	orr.w	r0, r0, r2
 8007148:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800714c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007150:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8007154:	fa21 f604 	lsr.w	r6, r1, r4
 8007158:	eb42 0106 	adc.w	r1, r2, r6
 800715c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8007160:	bf08      	it	eq
 8007162:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8007166:	bd70      	pop	{r4, r5, r6, pc}
 8007168:	f1c4 040c 	rsb	r4, r4, #12
 800716c:	f1c4 0520 	rsb	r5, r4, #32
 8007170:	fa00 f304 	lsl.w	r3, r0, r4
 8007174:	fa20 f005 	lsr.w	r0, r0, r5
 8007178:	fa01 f204 	lsl.w	r2, r1, r4
 800717c:	ea40 0002 	orr.w	r0, r0, r2
 8007180:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8007184:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8007188:	f141 0100 	adc.w	r1, r1, #0
 800718c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8007190:	bf08      	it	eq
 8007192:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8007196:	bd70      	pop	{r4, r5, r6, pc}
 8007198:	f1c4 0520 	rsb	r5, r4, #32
 800719c:	fa00 f205 	lsl.w	r2, r0, r5
 80071a0:	ea4e 0e02 	orr.w	lr, lr, r2
 80071a4:	fa20 f304 	lsr.w	r3, r0, r4
 80071a8:	fa01 f205 	lsl.w	r2, r1, r5
 80071ac:	ea43 0302 	orr.w	r3, r3, r2
 80071b0:	fa21 f004 	lsr.w	r0, r1, r4
 80071b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80071b8:	fa21 f204 	lsr.w	r2, r1, r4
 80071bc:	ea20 0002 	bic.w	r0, r0, r2
 80071c0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80071c4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80071c8:	bf08      	it	eq
 80071ca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80071ce:	bd70      	pop	{r4, r5, r6, pc}
 80071d0:	f094 0f00 	teq	r4, #0
 80071d4:	d10f      	bne.n	80071f6 <__aeabi_dmul+0x1c2>
 80071d6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80071da:	0040      	lsls	r0, r0, #1
 80071dc:	eb41 0101 	adc.w	r1, r1, r1
 80071e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80071e4:	bf08      	it	eq
 80071e6:	3c01      	subeq	r4, #1
 80071e8:	d0f7      	beq.n	80071da <__aeabi_dmul+0x1a6>
 80071ea:	ea41 0106 	orr.w	r1, r1, r6
 80071ee:	f095 0f00 	teq	r5, #0
 80071f2:	bf18      	it	ne
 80071f4:	4770      	bxne	lr
 80071f6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80071fa:	0052      	lsls	r2, r2, #1
 80071fc:	eb43 0303 	adc.w	r3, r3, r3
 8007200:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8007204:	bf08      	it	eq
 8007206:	3d01      	subeq	r5, #1
 8007208:	d0f7      	beq.n	80071fa <__aeabi_dmul+0x1c6>
 800720a:	ea43 0306 	orr.w	r3, r3, r6
 800720e:	4770      	bx	lr
 8007210:	ea94 0f0c 	teq	r4, ip
 8007214:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8007218:	bf18      	it	ne
 800721a:	ea95 0f0c 	teqne	r5, ip
 800721e:	d00c      	beq.n	800723a <__aeabi_dmul+0x206>
 8007220:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8007224:	bf18      	it	ne
 8007226:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800722a:	d1d1      	bne.n	80071d0 <__aeabi_dmul+0x19c>
 800722c:	ea81 0103 	eor.w	r1, r1, r3
 8007230:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8007234:	f04f 0000 	mov.w	r0, #0
 8007238:	bd70      	pop	{r4, r5, r6, pc}
 800723a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800723e:	bf06      	itte	eq
 8007240:	4610      	moveq	r0, r2
 8007242:	4619      	moveq	r1, r3
 8007244:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8007248:	d019      	beq.n	800727e <__aeabi_dmul+0x24a>
 800724a:	ea94 0f0c 	teq	r4, ip
 800724e:	d102      	bne.n	8007256 <__aeabi_dmul+0x222>
 8007250:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8007254:	d113      	bne.n	800727e <__aeabi_dmul+0x24a>
 8007256:	ea95 0f0c 	teq	r5, ip
 800725a:	d105      	bne.n	8007268 <__aeabi_dmul+0x234>
 800725c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8007260:	bf1c      	itt	ne
 8007262:	4610      	movne	r0, r2
 8007264:	4619      	movne	r1, r3
 8007266:	d10a      	bne.n	800727e <__aeabi_dmul+0x24a>
 8007268:	ea81 0103 	eor.w	r1, r1, r3
 800726c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8007270:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8007274:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007278:	f04f 0000 	mov.w	r0, #0
 800727c:	bd70      	pop	{r4, r5, r6, pc}
 800727e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8007282:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8007286:	bd70      	pop	{r4, r5, r6, pc}

08007288 <__aeabi_ddiv>:
 8007288:	b570      	push	{r4, r5, r6, lr}
 800728a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800728e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8007292:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8007296:	bf1d      	ittte	ne
 8007298:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800729c:	ea94 0f0c 	teqne	r4, ip
 80072a0:	ea95 0f0c 	teqne	r5, ip
 80072a4:	f000 f8a7 	bleq	80073f6 <__aeabi_ddiv+0x16e>
 80072a8:	eba4 0405 	sub.w	r4, r4, r5
 80072ac:	ea81 0e03 	eor.w	lr, r1, r3
 80072b0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80072b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80072b8:	f000 8088 	beq.w	80073cc <__aeabi_ddiv+0x144>
 80072bc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80072c0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80072c4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80072c8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80072cc:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80072d0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80072d4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80072d8:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80072dc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80072e0:	429d      	cmp	r5, r3
 80072e2:	bf08      	it	eq
 80072e4:	4296      	cmpeq	r6, r2
 80072e6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80072ea:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80072ee:	d202      	bcs.n	80072f6 <__aeabi_ddiv+0x6e>
 80072f0:	085b      	lsrs	r3, r3, #1
 80072f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80072f6:	1ab6      	subs	r6, r6, r2
 80072f8:	eb65 0503 	sbc.w	r5, r5, r3
 80072fc:	085b      	lsrs	r3, r3, #1
 80072fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8007302:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8007306:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800730a:	ebb6 0e02 	subs.w	lr, r6, r2
 800730e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8007312:	bf22      	ittt	cs
 8007314:	1ab6      	subcs	r6, r6, r2
 8007316:	4675      	movcs	r5, lr
 8007318:	ea40 000c 	orrcs.w	r0, r0, ip
 800731c:	085b      	lsrs	r3, r3, #1
 800731e:	ea4f 0232 	mov.w	r2, r2, rrx
 8007322:	ebb6 0e02 	subs.w	lr, r6, r2
 8007326:	eb75 0e03 	sbcs.w	lr, r5, r3
 800732a:	bf22      	ittt	cs
 800732c:	1ab6      	subcs	r6, r6, r2
 800732e:	4675      	movcs	r5, lr
 8007330:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8007334:	085b      	lsrs	r3, r3, #1
 8007336:	ea4f 0232 	mov.w	r2, r2, rrx
 800733a:	ebb6 0e02 	subs.w	lr, r6, r2
 800733e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8007342:	bf22      	ittt	cs
 8007344:	1ab6      	subcs	r6, r6, r2
 8007346:	4675      	movcs	r5, lr
 8007348:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800734c:	085b      	lsrs	r3, r3, #1
 800734e:	ea4f 0232 	mov.w	r2, r2, rrx
 8007352:	ebb6 0e02 	subs.w	lr, r6, r2
 8007356:	eb75 0e03 	sbcs.w	lr, r5, r3
 800735a:	bf22      	ittt	cs
 800735c:	1ab6      	subcs	r6, r6, r2
 800735e:	4675      	movcs	r5, lr
 8007360:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8007364:	ea55 0e06 	orrs.w	lr, r5, r6
 8007368:	d018      	beq.n	800739c <__aeabi_ddiv+0x114>
 800736a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800736e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8007372:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8007376:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800737a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800737e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8007382:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8007386:	d1c0      	bne.n	800730a <__aeabi_ddiv+0x82>
 8007388:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800738c:	d10b      	bne.n	80073a6 <__aeabi_ddiv+0x11e>
 800738e:	ea41 0100 	orr.w	r1, r1, r0
 8007392:	f04f 0000 	mov.w	r0, #0
 8007396:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800739a:	e7b6      	b.n	800730a <__aeabi_ddiv+0x82>
 800739c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80073a0:	bf04      	itt	eq
 80073a2:	4301      	orreq	r1, r0
 80073a4:	2000      	moveq	r0, #0
 80073a6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80073aa:	bf88      	it	hi
 80073ac:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80073b0:	f63f aeaf 	bhi.w	8007112 <__aeabi_dmul+0xde>
 80073b4:	ebb5 0c03 	subs.w	ip, r5, r3
 80073b8:	bf04      	itt	eq
 80073ba:	ebb6 0c02 	subseq.w	ip, r6, r2
 80073be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80073c2:	f150 0000 	adcs.w	r0, r0, #0
 80073c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80073ca:	bd70      	pop	{r4, r5, r6, pc}
 80073cc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80073d0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80073d4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80073d8:	bfc2      	ittt	gt
 80073da:	ebd4 050c 	rsbsgt	r5, r4, ip
 80073de:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80073e2:	bd70      	popgt	{r4, r5, r6, pc}
 80073e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80073e8:	f04f 0e00 	mov.w	lr, #0
 80073ec:	3c01      	subs	r4, #1
 80073ee:	e690      	b.n	8007112 <__aeabi_dmul+0xde>
 80073f0:	ea45 0e06 	orr.w	lr, r5, r6
 80073f4:	e68d      	b.n	8007112 <__aeabi_dmul+0xde>
 80073f6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80073fa:	ea94 0f0c 	teq	r4, ip
 80073fe:	bf08      	it	eq
 8007400:	ea95 0f0c 	teqeq	r5, ip
 8007404:	f43f af3b 	beq.w	800727e <__aeabi_dmul+0x24a>
 8007408:	ea94 0f0c 	teq	r4, ip
 800740c:	d10a      	bne.n	8007424 <__aeabi_ddiv+0x19c>
 800740e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8007412:	f47f af34 	bne.w	800727e <__aeabi_dmul+0x24a>
 8007416:	ea95 0f0c 	teq	r5, ip
 800741a:	f47f af25 	bne.w	8007268 <__aeabi_dmul+0x234>
 800741e:	4610      	mov	r0, r2
 8007420:	4619      	mov	r1, r3
 8007422:	e72c      	b.n	800727e <__aeabi_dmul+0x24a>
 8007424:	ea95 0f0c 	teq	r5, ip
 8007428:	d106      	bne.n	8007438 <__aeabi_ddiv+0x1b0>
 800742a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800742e:	f43f aefd 	beq.w	800722c <__aeabi_dmul+0x1f8>
 8007432:	4610      	mov	r0, r2
 8007434:	4619      	mov	r1, r3
 8007436:	e722      	b.n	800727e <__aeabi_dmul+0x24a>
 8007438:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800743c:	bf18      	it	ne
 800743e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8007442:	f47f aec5 	bne.w	80071d0 <__aeabi_dmul+0x19c>
 8007446:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800744a:	f47f af0d 	bne.w	8007268 <__aeabi_dmul+0x234>
 800744e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8007452:	f47f aeeb 	bne.w	800722c <__aeabi_dmul+0x1f8>
 8007456:	e712      	b.n	800727e <__aeabi_dmul+0x24a>

08007458 <__gedf2>:
 8007458:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800745c:	e006      	b.n	800746c <__cmpdf2+0x4>
 800745e:	bf00      	nop

08007460 <__ledf2>:
 8007460:	f04f 0c01 	mov.w	ip, #1
 8007464:	e002      	b.n	800746c <__cmpdf2+0x4>
 8007466:	bf00      	nop

08007468 <__cmpdf2>:
 8007468:	f04f 0c01 	mov.w	ip, #1
 800746c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8007470:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8007474:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8007478:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800747c:	bf18      	it	ne
 800747e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8007482:	d01b      	beq.n	80074bc <__cmpdf2+0x54>
 8007484:	b001      	add	sp, #4
 8007486:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800748a:	bf0c      	ite	eq
 800748c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8007490:	ea91 0f03 	teqne	r1, r3
 8007494:	bf02      	ittt	eq
 8007496:	ea90 0f02 	teqeq	r0, r2
 800749a:	2000      	moveq	r0, #0
 800749c:	4770      	bxeq	lr
 800749e:	f110 0f00 	cmn.w	r0, #0
 80074a2:	ea91 0f03 	teq	r1, r3
 80074a6:	bf58      	it	pl
 80074a8:	4299      	cmppl	r1, r3
 80074aa:	bf08      	it	eq
 80074ac:	4290      	cmpeq	r0, r2
 80074ae:	bf2c      	ite	cs
 80074b0:	17d8      	asrcs	r0, r3, #31
 80074b2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80074b6:	f040 0001 	orr.w	r0, r0, #1
 80074ba:	4770      	bx	lr
 80074bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80074c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80074c4:	d102      	bne.n	80074cc <__cmpdf2+0x64>
 80074c6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80074ca:	d107      	bne.n	80074dc <__cmpdf2+0x74>
 80074cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80074d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80074d4:	d1d6      	bne.n	8007484 <__cmpdf2+0x1c>
 80074d6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80074da:	d0d3      	beq.n	8007484 <__cmpdf2+0x1c>
 80074dc:	f85d 0b04 	ldr.w	r0, [sp], #4
 80074e0:	4770      	bx	lr
 80074e2:	bf00      	nop

080074e4 <__aeabi_cdrcmple>:
 80074e4:	4684      	mov	ip, r0
 80074e6:	4610      	mov	r0, r2
 80074e8:	4662      	mov	r2, ip
 80074ea:	468c      	mov	ip, r1
 80074ec:	4619      	mov	r1, r3
 80074ee:	4663      	mov	r3, ip
 80074f0:	e000      	b.n	80074f4 <__aeabi_cdcmpeq>
 80074f2:	bf00      	nop

080074f4 <__aeabi_cdcmpeq>:
 80074f4:	b501      	push	{r0, lr}
 80074f6:	f7ff ffb7 	bl	8007468 <__cmpdf2>
 80074fa:	2800      	cmp	r0, #0
 80074fc:	bf48      	it	mi
 80074fe:	f110 0f00 	cmnmi.w	r0, #0
 8007502:	bd01      	pop	{r0, pc}

08007504 <__aeabi_dcmpeq>:
 8007504:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007508:	f7ff fff4 	bl	80074f4 <__aeabi_cdcmpeq>
 800750c:	bf0c      	ite	eq
 800750e:	2001      	moveq	r0, #1
 8007510:	2000      	movne	r0, #0
 8007512:	f85d fb08 	ldr.w	pc, [sp], #8
 8007516:	bf00      	nop

08007518 <__aeabi_dcmplt>:
 8007518:	f84d ed08 	str.w	lr, [sp, #-8]!
 800751c:	f7ff ffea 	bl	80074f4 <__aeabi_cdcmpeq>
 8007520:	bf34      	ite	cc
 8007522:	2001      	movcc	r0, #1
 8007524:	2000      	movcs	r0, #0
 8007526:	f85d fb08 	ldr.w	pc, [sp], #8
 800752a:	bf00      	nop

0800752c <__aeabi_dcmple>:
 800752c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007530:	f7ff ffe0 	bl	80074f4 <__aeabi_cdcmpeq>
 8007534:	bf94      	ite	ls
 8007536:	2001      	movls	r0, #1
 8007538:	2000      	movhi	r0, #0
 800753a:	f85d fb08 	ldr.w	pc, [sp], #8
 800753e:	bf00      	nop

08007540 <__aeabi_dcmpge>:
 8007540:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007544:	f7ff ffce 	bl	80074e4 <__aeabi_cdrcmple>
 8007548:	bf94      	ite	ls
 800754a:	2001      	movls	r0, #1
 800754c:	2000      	movhi	r0, #0
 800754e:	f85d fb08 	ldr.w	pc, [sp], #8
 8007552:	bf00      	nop

08007554 <__aeabi_dcmpgt>:
 8007554:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007558:	f7ff ffc4 	bl	80074e4 <__aeabi_cdrcmple>
 800755c:	bf34      	ite	cc
 800755e:	2001      	movcc	r0, #1
 8007560:	2000      	movcs	r0, #0
 8007562:	f85d fb08 	ldr.w	pc, [sp], #8
 8007566:	bf00      	nop

08007568 <__aeabi_dcmpun>:
 8007568:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800756c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8007570:	d102      	bne.n	8007578 <__aeabi_dcmpun+0x10>
 8007572:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8007576:	d10a      	bne.n	800758e <__aeabi_dcmpun+0x26>
 8007578:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800757c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8007580:	d102      	bne.n	8007588 <__aeabi_dcmpun+0x20>
 8007582:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8007586:	d102      	bne.n	800758e <__aeabi_dcmpun+0x26>
 8007588:	f04f 0000 	mov.w	r0, #0
 800758c:	4770      	bx	lr
 800758e:	f04f 0001 	mov.w	r0, #1
 8007592:	4770      	bx	lr

08007594 <__aeabi_d2iz>:
 8007594:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8007598:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800759c:	d215      	bcs.n	80075ca <__aeabi_d2iz+0x36>
 800759e:	d511      	bpl.n	80075c4 <__aeabi_d2iz+0x30>
 80075a0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80075a4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80075a8:	d912      	bls.n	80075d0 <__aeabi_d2iz+0x3c>
 80075aa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80075ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80075b2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80075b6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80075ba:	fa23 f002 	lsr.w	r0, r3, r2
 80075be:	bf18      	it	ne
 80075c0:	4240      	negne	r0, r0
 80075c2:	4770      	bx	lr
 80075c4:	f04f 0000 	mov.w	r0, #0
 80075c8:	4770      	bx	lr
 80075ca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80075ce:	d105      	bne.n	80075dc <__aeabi_d2iz+0x48>
 80075d0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80075d4:	bf08      	it	eq
 80075d6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80075da:	4770      	bx	lr
 80075dc:	f04f 0000 	mov.w	r0, #0
 80075e0:	4770      	bx	lr
 80075e2:	bf00      	nop

080075e4 <__aeabi_uldivmod>:
 80075e4:	b953      	cbnz	r3, 80075fc <__aeabi_uldivmod+0x18>
 80075e6:	b94a      	cbnz	r2, 80075fc <__aeabi_uldivmod+0x18>
 80075e8:	2900      	cmp	r1, #0
 80075ea:	bf08      	it	eq
 80075ec:	2800      	cmpeq	r0, #0
 80075ee:	bf1c      	itt	ne
 80075f0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80075f4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80075f8:	f000 b974 	b.w	80078e4 <__aeabi_idiv0>
 80075fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8007600:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8007604:	f000 f806 	bl	8007614 <__udivmoddi4>
 8007608:	f8dd e004 	ldr.w	lr, [sp, #4]
 800760c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007610:	b004      	add	sp, #16
 8007612:	4770      	bx	lr

08007614 <__udivmoddi4>:
 8007614:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007618:	9d08      	ldr	r5, [sp, #32]
 800761a:	4604      	mov	r4, r0
 800761c:	468e      	mov	lr, r1
 800761e:	2b00      	cmp	r3, #0
 8007620:	d14d      	bne.n	80076be <__udivmoddi4+0xaa>
 8007622:	428a      	cmp	r2, r1
 8007624:	4694      	mov	ip, r2
 8007626:	d969      	bls.n	80076fc <__udivmoddi4+0xe8>
 8007628:	fab2 f282 	clz	r2, r2
 800762c:	b152      	cbz	r2, 8007644 <__udivmoddi4+0x30>
 800762e:	fa01 f302 	lsl.w	r3, r1, r2
 8007632:	f1c2 0120 	rsb	r1, r2, #32
 8007636:	fa20 f101 	lsr.w	r1, r0, r1
 800763a:	fa0c fc02 	lsl.w	ip, ip, r2
 800763e:	ea41 0e03 	orr.w	lr, r1, r3
 8007642:	4094      	lsls	r4, r2
 8007644:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8007648:	0c21      	lsrs	r1, r4, #16
 800764a:	fbbe f6f8 	udiv	r6, lr, r8
 800764e:	fa1f f78c 	uxth.w	r7, ip
 8007652:	fb08 e316 	mls	r3, r8, r6, lr
 8007656:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800765a:	fb06 f107 	mul.w	r1, r6, r7
 800765e:	4299      	cmp	r1, r3
 8007660:	d90a      	bls.n	8007678 <__udivmoddi4+0x64>
 8007662:	eb1c 0303 	adds.w	r3, ip, r3
 8007666:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800766a:	f080 811f 	bcs.w	80078ac <__udivmoddi4+0x298>
 800766e:	4299      	cmp	r1, r3
 8007670:	f240 811c 	bls.w	80078ac <__udivmoddi4+0x298>
 8007674:	3e02      	subs	r6, #2
 8007676:	4463      	add	r3, ip
 8007678:	1a5b      	subs	r3, r3, r1
 800767a:	b2a4      	uxth	r4, r4
 800767c:	fbb3 f0f8 	udiv	r0, r3, r8
 8007680:	fb08 3310 	mls	r3, r8, r0, r3
 8007684:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8007688:	fb00 f707 	mul.w	r7, r0, r7
 800768c:	42a7      	cmp	r7, r4
 800768e:	d90a      	bls.n	80076a6 <__udivmoddi4+0x92>
 8007690:	eb1c 0404 	adds.w	r4, ip, r4
 8007694:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007698:	f080 810a 	bcs.w	80078b0 <__udivmoddi4+0x29c>
 800769c:	42a7      	cmp	r7, r4
 800769e:	f240 8107 	bls.w	80078b0 <__udivmoddi4+0x29c>
 80076a2:	4464      	add	r4, ip
 80076a4:	3802      	subs	r0, #2
 80076a6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80076aa:	1be4      	subs	r4, r4, r7
 80076ac:	2600      	movs	r6, #0
 80076ae:	b11d      	cbz	r5, 80076b8 <__udivmoddi4+0xa4>
 80076b0:	40d4      	lsrs	r4, r2
 80076b2:	2300      	movs	r3, #0
 80076b4:	e9c5 4300 	strd	r4, r3, [r5]
 80076b8:	4631      	mov	r1, r6
 80076ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076be:	428b      	cmp	r3, r1
 80076c0:	d909      	bls.n	80076d6 <__udivmoddi4+0xc2>
 80076c2:	2d00      	cmp	r5, #0
 80076c4:	f000 80ef 	beq.w	80078a6 <__udivmoddi4+0x292>
 80076c8:	2600      	movs	r6, #0
 80076ca:	e9c5 0100 	strd	r0, r1, [r5]
 80076ce:	4630      	mov	r0, r6
 80076d0:	4631      	mov	r1, r6
 80076d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076d6:	fab3 f683 	clz	r6, r3
 80076da:	2e00      	cmp	r6, #0
 80076dc:	d14a      	bne.n	8007774 <__udivmoddi4+0x160>
 80076de:	428b      	cmp	r3, r1
 80076e0:	d302      	bcc.n	80076e8 <__udivmoddi4+0xd4>
 80076e2:	4282      	cmp	r2, r0
 80076e4:	f200 80f9 	bhi.w	80078da <__udivmoddi4+0x2c6>
 80076e8:	1a84      	subs	r4, r0, r2
 80076ea:	eb61 0303 	sbc.w	r3, r1, r3
 80076ee:	2001      	movs	r0, #1
 80076f0:	469e      	mov	lr, r3
 80076f2:	2d00      	cmp	r5, #0
 80076f4:	d0e0      	beq.n	80076b8 <__udivmoddi4+0xa4>
 80076f6:	e9c5 4e00 	strd	r4, lr, [r5]
 80076fa:	e7dd      	b.n	80076b8 <__udivmoddi4+0xa4>
 80076fc:	b902      	cbnz	r2, 8007700 <__udivmoddi4+0xec>
 80076fe:	deff      	udf	#255	; 0xff
 8007700:	fab2 f282 	clz	r2, r2
 8007704:	2a00      	cmp	r2, #0
 8007706:	f040 8092 	bne.w	800782e <__udivmoddi4+0x21a>
 800770a:	eba1 010c 	sub.w	r1, r1, ip
 800770e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8007712:	fa1f fe8c 	uxth.w	lr, ip
 8007716:	2601      	movs	r6, #1
 8007718:	0c20      	lsrs	r0, r4, #16
 800771a:	fbb1 f3f7 	udiv	r3, r1, r7
 800771e:	fb07 1113 	mls	r1, r7, r3, r1
 8007722:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8007726:	fb0e f003 	mul.w	r0, lr, r3
 800772a:	4288      	cmp	r0, r1
 800772c:	d908      	bls.n	8007740 <__udivmoddi4+0x12c>
 800772e:	eb1c 0101 	adds.w	r1, ip, r1
 8007732:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8007736:	d202      	bcs.n	800773e <__udivmoddi4+0x12a>
 8007738:	4288      	cmp	r0, r1
 800773a:	f200 80cb 	bhi.w	80078d4 <__udivmoddi4+0x2c0>
 800773e:	4643      	mov	r3, r8
 8007740:	1a09      	subs	r1, r1, r0
 8007742:	b2a4      	uxth	r4, r4
 8007744:	fbb1 f0f7 	udiv	r0, r1, r7
 8007748:	fb07 1110 	mls	r1, r7, r0, r1
 800774c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8007750:	fb0e fe00 	mul.w	lr, lr, r0
 8007754:	45a6      	cmp	lr, r4
 8007756:	d908      	bls.n	800776a <__udivmoddi4+0x156>
 8007758:	eb1c 0404 	adds.w	r4, ip, r4
 800775c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8007760:	d202      	bcs.n	8007768 <__udivmoddi4+0x154>
 8007762:	45a6      	cmp	lr, r4
 8007764:	f200 80bb 	bhi.w	80078de <__udivmoddi4+0x2ca>
 8007768:	4608      	mov	r0, r1
 800776a:	eba4 040e 	sub.w	r4, r4, lr
 800776e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8007772:	e79c      	b.n	80076ae <__udivmoddi4+0x9a>
 8007774:	f1c6 0720 	rsb	r7, r6, #32
 8007778:	40b3      	lsls	r3, r6
 800777a:	fa22 fc07 	lsr.w	ip, r2, r7
 800777e:	ea4c 0c03 	orr.w	ip, ip, r3
 8007782:	fa20 f407 	lsr.w	r4, r0, r7
 8007786:	fa01 f306 	lsl.w	r3, r1, r6
 800778a:	431c      	orrs	r4, r3
 800778c:	40f9      	lsrs	r1, r7
 800778e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8007792:	fa00 f306 	lsl.w	r3, r0, r6
 8007796:	fbb1 f8f9 	udiv	r8, r1, r9
 800779a:	0c20      	lsrs	r0, r4, #16
 800779c:	fa1f fe8c 	uxth.w	lr, ip
 80077a0:	fb09 1118 	mls	r1, r9, r8, r1
 80077a4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80077a8:	fb08 f00e 	mul.w	r0, r8, lr
 80077ac:	4288      	cmp	r0, r1
 80077ae:	fa02 f206 	lsl.w	r2, r2, r6
 80077b2:	d90b      	bls.n	80077cc <__udivmoddi4+0x1b8>
 80077b4:	eb1c 0101 	adds.w	r1, ip, r1
 80077b8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80077bc:	f080 8088 	bcs.w	80078d0 <__udivmoddi4+0x2bc>
 80077c0:	4288      	cmp	r0, r1
 80077c2:	f240 8085 	bls.w	80078d0 <__udivmoddi4+0x2bc>
 80077c6:	f1a8 0802 	sub.w	r8, r8, #2
 80077ca:	4461      	add	r1, ip
 80077cc:	1a09      	subs	r1, r1, r0
 80077ce:	b2a4      	uxth	r4, r4
 80077d0:	fbb1 f0f9 	udiv	r0, r1, r9
 80077d4:	fb09 1110 	mls	r1, r9, r0, r1
 80077d8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80077dc:	fb00 fe0e 	mul.w	lr, r0, lr
 80077e0:	458e      	cmp	lr, r1
 80077e2:	d908      	bls.n	80077f6 <__udivmoddi4+0x1e2>
 80077e4:	eb1c 0101 	adds.w	r1, ip, r1
 80077e8:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80077ec:	d26c      	bcs.n	80078c8 <__udivmoddi4+0x2b4>
 80077ee:	458e      	cmp	lr, r1
 80077f0:	d96a      	bls.n	80078c8 <__udivmoddi4+0x2b4>
 80077f2:	3802      	subs	r0, #2
 80077f4:	4461      	add	r1, ip
 80077f6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80077fa:	fba0 9402 	umull	r9, r4, r0, r2
 80077fe:	eba1 010e 	sub.w	r1, r1, lr
 8007802:	42a1      	cmp	r1, r4
 8007804:	46c8      	mov	r8, r9
 8007806:	46a6      	mov	lr, r4
 8007808:	d356      	bcc.n	80078b8 <__udivmoddi4+0x2a4>
 800780a:	d053      	beq.n	80078b4 <__udivmoddi4+0x2a0>
 800780c:	b15d      	cbz	r5, 8007826 <__udivmoddi4+0x212>
 800780e:	ebb3 0208 	subs.w	r2, r3, r8
 8007812:	eb61 010e 	sbc.w	r1, r1, lr
 8007816:	fa01 f707 	lsl.w	r7, r1, r7
 800781a:	fa22 f306 	lsr.w	r3, r2, r6
 800781e:	40f1      	lsrs	r1, r6
 8007820:	431f      	orrs	r7, r3
 8007822:	e9c5 7100 	strd	r7, r1, [r5]
 8007826:	2600      	movs	r6, #0
 8007828:	4631      	mov	r1, r6
 800782a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800782e:	f1c2 0320 	rsb	r3, r2, #32
 8007832:	40d8      	lsrs	r0, r3
 8007834:	fa0c fc02 	lsl.w	ip, ip, r2
 8007838:	fa21 f303 	lsr.w	r3, r1, r3
 800783c:	4091      	lsls	r1, r2
 800783e:	4301      	orrs	r1, r0
 8007840:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8007844:	fa1f fe8c 	uxth.w	lr, ip
 8007848:	fbb3 f0f7 	udiv	r0, r3, r7
 800784c:	fb07 3610 	mls	r6, r7, r0, r3
 8007850:	0c0b      	lsrs	r3, r1, #16
 8007852:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8007856:	fb00 f60e 	mul.w	r6, r0, lr
 800785a:	429e      	cmp	r6, r3
 800785c:	fa04 f402 	lsl.w	r4, r4, r2
 8007860:	d908      	bls.n	8007874 <__udivmoddi4+0x260>
 8007862:	eb1c 0303 	adds.w	r3, ip, r3
 8007866:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800786a:	d22f      	bcs.n	80078cc <__udivmoddi4+0x2b8>
 800786c:	429e      	cmp	r6, r3
 800786e:	d92d      	bls.n	80078cc <__udivmoddi4+0x2b8>
 8007870:	3802      	subs	r0, #2
 8007872:	4463      	add	r3, ip
 8007874:	1b9b      	subs	r3, r3, r6
 8007876:	b289      	uxth	r1, r1
 8007878:	fbb3 f6f7 	udiv	r6, r3, r7
 800787c:	fb07 3316 	mls	r3, r7, r6, r3
 8007880:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8007884:	fb06 f30e 	mul.w	r3, r6, lr
 8007888:	428b      	cmp	r3, r1
 800788a:	d908      	bls.n	800789e <__udivmoddi4+0x28a>
 800788c:	eb1c 0101 	adds.w	r1, ip, r1
 8007890:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8007894:	d216      	bcs.n	80078c4 <__udivmoddi4+0x2b0>
 8007896:	428b      	cmp	r3, r1
 8007898:	d914      	bls.n	80078c4 <__udivmoddi4+0x2b0>
 800789a:	3e02      	subs	r6, #2
 800789c:	4461      	add	r1, ip
 800789e:	1ac9      	subs	r1, r1, r3
 80078a0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80078a4:	e738      	b.n	8007718 <__udivmoddi4+0x104>
 80078a6:	462e      	mov	r6, r5
 80078a8:	4628      	mov	r0, r5
 80078aa:	e705      	b.n	80076b8 <__udivmoddi4+0xa4>
 80078ac:	4606      	mov	r6, r0
 80078ae:	e6e3      	b.n	8007678 <__udivmoddi4+0x64>
 80078b0:	4618      	mov	r0, r3
 80078b2:	e6f8      	b.n	80076a6 <__udivmoddi4+0x92>
 80078b4:	454b      	cmp	r3, r9
 80078b6:	d2a9      	bcs.n	800780c <__udivmoddi4+0x1f8>
 80078b8:	ebb9 0802 	subs.w	r8, r9, r2
 80078bc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80078c0:	3801      	subs	r0, #1
 80078c2:	e7a3      	b.n	800780c <__udivmoddi4+0x1f8>
 80078c4:	4646      	mov	r6, r8
 80078c6:	e7ea      	b.n	800789e <__udivmoddi4+0x28a>
 80078c8:	4620      	mov	r0, r4
 80078ca:	e794      	b.n	80077f6 <__udivmoddi4+0x1e2>
 80078cc:	4640      	mov	r0, r8
 80078ce:	e7d1      	b.n	8007874 <__udivmoddi4+0x260>
 80078d0:	46d0      	mov	r8, sl
 80078d2:	e77b      	b.n	80077cc <__udivmoddi4+0x1b8>
 80078d4:	3b02      	subs	r3, #2
 80078d6:	4461      	add	r1, ip
 80078d8:	e732      	b.n	8007740 <__udivmoddi4+0x12c>
 80078da:	4630      	mov	r0, r6
 80078dc:	e709      	b.n	80076f2 <__udivmoddi4+0xde>
 80078de:	4464      	add	r4, ip
 80078e0:	3802      	subs	r0, #2
 80078e2:	e742      	b.n	800776a <__udivmoddi4+0x156>

080078e4 <__aeabi_idiv0>:
 80078e4:	4770      	bx	lr
 80078e6:	bf00      	nop

080078e8 <_getpid>:
 80078e8:	4b02      	ldr	r3, [pc, #8]	; (80078f4 <_getpid+0xc>)
 80078ea:	2258      	movs	r2, #88	; 0x58
 80078ec:	601a      	str	r2, [r3, #0]
 80078ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80078f2:	4770      	bx	lr
 80078f4:	20000c74 	.word	0x20000c74

080078f8 <_kill>:
 80078f8:	4b02      	ldr	r3, [pc, #8]	; (8007904 <_kill+0xc>)
 80078fa:	2258      	movs	r2, #88	; 0x58
 80078fc:	601a      	str	r2, [r3, #0]
 80078fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007902:	4770      	bx	lr
 8007904:	20000c74 	.word	0x20000c74

08007908 <_exit>:
 8007908:	e7fe      	b.n	8007908 <_exit>
 800790a:	bf00      	nop

0800790c <CmdLED>:
    HAL_IncTick();
    my_Tick();
}

void CmdLED(int mode)
{
 800790c:	b507      	push	{r0, r1, r2, lr}
  uint32_t led,val;
  int rc;
  if(mode != CMD_INTERACTIVE) {
 800790e:	b930      	cbnz	r0, 800791e <CmdLED+0x12>
    return;
  }

  rc = fetch_uint32_arg(&led);
 8007910:	4668      	mov	r0, sp
 8007912:	f000 fa73 	bl	8007dfc <fetch_uint32_arg>
  if(rc) {
 8007916:	b128      	cbz	r0, 8007924 <CmdLED+0x18>
    printf("Missing LED index\n");
 8007918:	480f      	ldr	r0, [pc, #60]	; (8007958 <CmdLED+0x4c>)
    return;
  }
    
  rc = fetch_uint32_arg(&val);
  if(rc) {
    printf("Missing state value, 0 for Off, 1 for On\n");
 800791a:	f7f8 fdcb 	bl	80004b4 <puts>
    BSP_LED_On(LEDs[led]);
  } else {
    BSP_LED_Off(LEDs[led]);
  }

} 
 800791e:	b003      	add	sp, #12
 8007920:	f85d fb04 	ldr.w	pc, [sp], #4
  rc = fetch_uint32_arg(&val);
 8007924:	a801      	add	r0, sp, #4
 8007926:	f000 fa69 	bl	8007dfc <fetch_uint32_arg>
  if(rc) {
 800792a:	b108      	cbz	r0, 8007930 <CmdLED+0x24>
    printf("Missing state value, 0 for Off, 1 for On\n");
 800792c:	480b      	ldr	r0, [pc, #44]	; (800795c <CmdLED+0x50>)
 800792e:	e7f4      	b.n	800791a <CmdLED+0xe>
  if((led < 3) || (led > 10)) {
 8007930:	9900      	ldr	r1, [sp, #0]
 8007932:	1ecb      	subs	r3, r1, #3
 8007934:	2b07      	cmp	r3, #7
 8007936:	d903      	bls.n	8007940 <CmdLED+0x34>
    printf("Led index of %u is out of the range (3..10)\n",
 8007938:	4809      	ldr	r0, [pc, #36]	; (8007960 <CmdLED+0x54>)
 800793a:	f7f8 fd67 	bl	800040c <printf>
    return;
 800793e:	e7ee      	b.n	800791e <CmdLED+0x12>
    BSP_LED_On(LEDs[led]);
 8007940:	4a08      	ldr	r2, [pc, #32]	; (8007964 <CmdLED+0x58>)
  led -= 3;
 8007942:	9300      	str	r3, [sp, #0]
    BSP_LED_On(LEDs[led]);
 8007944:	5cd0      	ldrb	r0, [r2, r3]
  if(val) {
 8007946:	9b01      	ldr	r3, [sp, #4]
 8007948:	b113      	cbz	r3, 8007950 <CmdLED+0x44>
    BSP_LED_On(LEDs[led]);
 800794a:	f004 f82d 	bl	800b9a8 <BSP_LED_On>
 800794e:	e7e6      	b.n	800791e <CmdLED+0x12>
    BSP_LED_Off(LEDs[led]);
 8007950:	f004 f838 	bl	800b9c4 <BSP_LED_Off>
 8007954:	e7e3      	b.n	800791e <CmdLED+0x12>
 8007956:	bf00      	nop
 8007958:	0800ce18 	.word	0x0800ce18
 800795c:	0800ce2a 	.word	0x0800ce2a
 8007960:	0800ce53 	.word	0x0800ce53
 8007964:	0800cfea 	.word	0x0800cfea

08007968 <CmdAccel>:

ADD_CMD("led",CmdLED,"<index> <state> Turn off/on LED")

void CmdAccel(int mode)
{
 8007968:	b507      	push	{r0, r1, r2, lr}
  int16_t xyz[3];

  if(mode != CMD_INTERACTIVE) {
 800796a:	b958      	cbnz	r0, 8007984 <CmdAccel+0x1c>
    return;
  }

  BSP_ACCELERO_GetXYZ(xyz);
 800796c:	4668      	mov	r0, sp
 800796e:	f004 f9b1 	bl	800bcd4 <BSP_ACCELERO_GetXYZ>

  printf("Accelerometer returns:\n"
 8007972:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8007976:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
 800797a:	f9bd 1000 	ldrsh.w	r1, [sp]
 800797e:	4803      	ldr	r0, [pc, #12]	; (800798c <CmdAccel+0x24>)
 8007980:	f7f8 fd44 	bl	800040c <printf>
	 "   Y: %d\n"
	 "   Z: %d\n",
	 xyz[0],xyz[1],xyz[2]);


}
 8007984:	b003      	add	sp, #12
 8007986:	f85d fb04 	ldr.w	pc, [sp], #4
 800798a:	bf00      	nop
 800798c:	0800ce80 	.word	0x0800ce80

08007990 <CmdGyro>:

ADD_CMD("accel", CmdAccel,"                Read Accelerometer");

void CmdGyro(int mode)
{
 8007990:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  float xyz[3];

  if(mode != CMD_INTERACTIVE) {
 8007992:	b9e8      	cbnz	r0, 80079d0 <CmdGyro+0x40>
    return;
  }

  BSP_GYRO_GetXYZ(xyz);
 8007994:	a801      	add	r0, sp, #4
 8007996:	f004 f9d9 	bl	800bd4c <BSP_GYRO_GetXYZ>

  printf("Gyroscope returns:\n"
 800799a:	eddd 7a03 	vldr	s15, [sp, #12]
 800799e:	480e      	ldr	r0, [pc, #56]	; (80079d8 <CmdGyro+0x48>)
 80079a0:	eeb0 7a67 	vmov.f32	s14, s15
 80079a4:	eebe 7acc 	vcvt.s32.f32	s14, s14, #8
 80079a8:	eddd 7a02 	vldr	s15, [sp, #8]
 80079ac:	ee17 3a10 	vmov	r3, s14
 80079b0:	eeb0 7a67 	vmov.f32	s14, s15
 80079b4:	eebe 7acc 	vcvt.s32.f32	s14, s14, #8
 80079b8:	eddd 7a01 	vldr	s15, [sp, #4]
 80079bc:	ee17 2a10 	vmov	r2, s14
 80079c0:	eeb0 7a67 	vmov.f32	s14, s15
 80079c4:	eebe 7acc 	vcvt.s32.f32	s14, s14, #8
 80079c8:	ee17 1a10 	vmov	r1, s14
 80079cc:	f7f8 fd1e 	bl	800040c <printf>
	 "   Y: %d\n"
	 "   Z: %d\n",
	 (int)(xyz[0]*256),
	 (int)(xyz[1]*256),
	 (int)(xyz[2]*256));
}
 80079d0:	b005      	add	sp, #20
 80079d2:	f85d fb04 	ldr.w	pc, [sp], #4
 80079d6:	bf00      	nop
 80079d8:	0800ceb3 	.word	0x0800ceb3

080079dc <CmdButton>:

ADD_CMD("gyro", CmdGyro,"                Read Gyroscope");

void CmdButton(int mode)
{
 80079dc:	b508      	push	{r3, lr}
  uint32_t button;

  if(mode != CMD_INTERACTIVE) {
 80079de:	b958      	cbnz	r0, 80079f8 <CmdButton+0x1c>
    return;
  }

  button = BSP_PB_GetState(BUTTON_USER);
 80079e0:	f004 f844 	bl	800ba6c <BSP_PB_GetState>
  
  printf("Button is currently: %s\n",
 80079e4:	4a05      	ldr	r2, [pc, #20]	; (80079fc <CmdButton+0x20>)
 80079e6:	4906      	ldr	r1, [pc, #24]	; (8007a00 <CmdButton+0x24>)
	 button ? "Pressed" : "Released");

  return;
}
 80079e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  printf("Button is currently: %s\n",
 80079ec:	2800      	cmp	r0, #0
 80079ee:	bf18      	it	ne
 80079f0:	4611      	movne	r1, r2
 80079f2:	4804      	ldr	r0, [pc, #16]	; (8007a04 <CmdButton+0x28>)
 80079f4:	f7f8 bd0a 	b.w	800040c <printf>
}
 80079f8:	bd08      	pop	{r3, pc}
 80079fa:	bf00      	nop
 80079fc:	0800cee2 	.word	0x0800cee2
 8007a00:	0800ceea 	.word	0x0800ceea
 8007a04:	0800cef3 	.word	0x0800cef3

08007a08 <Error_Handler>:
{
 8007a08:	b508      	push	{r3, lr}
  BSP_LED_On(LED6);
 8007a0a:	2003      	movs	r0, #3
 8007a0c:	f003 ffcc 	bl	800b9a8 <BSP_LED_On>
  while(1)
 8007a10:	e7fe      	b.n	8007a10 <Error_Handler+0x8>
	...

08007a14 <main>:
{
 8007a14:	b530      	push	{r4, r5, lr}
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007a16:	2301      	movs	r3, #1
{
 8007a18:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007a1a:	e9cd 3306 	strd	r3, r3, [sp, #24]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007a22:	2402      	movs	r4, #2
 8007a24:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007a28:	e9cd 430d 	strd	r4, r3, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct)!= HAL_OK)
 8007a2c:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8007a2e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8007a32:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct)!= HAL_OK)
 8007a34:	f000 ff32 	bl	800889c <HAL_RCC_OscConfig>
 8007a38:	b108      	cbz	r0, 8007a3e <main+0x2a>
    Error_Handler();
 8007a3a:	f7ff ffe5 	bl	8007a08 <Error_Handler>
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8007a3e:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007a40:	e9cd 3401 	strd	r3, r4, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;  
 8007a44:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007a48:	e9cd 3004 	strd	r3, r0, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007a4c:	9003      	str	r0, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2)!= HAL_OK)
 8007a4e:	4621      	mov	r1, r4
 8007a50:	a801      	add	r0, sp, #4
 8007a52:	f001 fa01 	bl	8008e58 <HAL_RCC_ClockConfig>
 8007a56:	4604      	mov	r4, r0
 8007a58:	2800      	cmp	r0, #0
 8007a5a:	d1ee      	bne.n	8007a3a <main+0x26>
  HAL_Init();
 8007a5c:	f001 fbbc 	bl	80091d8 <HAL_Init>
  TerminalInit();  /* Initialize UART and USB */
 8007a60:	f000 fafa 	bl	8008058 <TerminalInit>
  for(i=0; i<numLEDs; i++) {
 8007a64:	4d0f      	ldr	r5, [pc, #60]	; (8007aa4 <main+0x90>)
    BSP_LED_Init(LEDs[i]);
 8007a66:	f815 0b01 	ldrb.w	r0, [r5], #1
  for(i=0; i<numLEDs; i++) {
 8007a6a:	3401      	adds	r4, #1
    BSP_LED_Init(LEDs[i]);
 8007a6c:	f003 ff66 	bl	800b93c <BSP_LED_Init>
  for(i=0; i<numLEDs; i++) {
 8007a70:	2c08      	cmp	r4, #8
 8007a72:	d1f8      	bne.n	8007a66 <main+0x52>
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);
 8007a74:	2100      	movs	r1, #0
 8007a76:	4608      	mov	r0, r1
 8007a78:	f003 ffbe 	bl	800b9f8 <BSP_PB_Init>
  accelRc = BSP_ACCELERO_Init();
 8007a7c:	f004 f90a 	bl	800bc94 <BSP_ACCELERO_Init>
  if(accelRc != ACCELERO_OK) {
 8007a80:	b118      	cbz	r0, 8007a8a <main+0x76>
    printf("Failed to initialize acceleromter\n");
 8007a82:	4809      	ldr	r0, [pc, #36]	; (8007aa8 <main+0x94>)
 8007a84:	f7f8 fd16 	bl	80004b4 <puts>
 8007a88:	e7d7      	b.n	8007a3a <main+0x26>
  gyroRc = BSP_GYRO_Init();
 8007a8a:	f004 f92b 	bl	800bce4 <BSP_GYRO_Init>
  if(gyroRc != GYRO_OK) {
 8007a8e:	b108      	cbz	r0, 8007a94 <main+0x80>
    printf("Failed to initialize Gyroscope\n");
 8007a90:	4806      	ldr	r0, [pc, #24]	; (8007aac <main+0x98>)
 8007a92:	e7f7      	b.n	8007a84 <main+0x70>
  my_Init();
 8007a94:	f7f8 fbf0 	bl	8000278 <my_Init>
    TaskInput();
 8007a98:	f000 f912 	bl	8007cc0 <TaskInput>
    my_Loop();
 8007a9c:	f7f8 fbea 	bl	8000274 <my_Loop>
  while(1) {
 8007aa0:	e7fa      	b.n	8007a98 <main+0x84>
 8007aa2:	bf00      	nop
 8007aa4:	0800cfea 	.word	0x0800cfea
 8007aa8:	0800cf0c 	.word	0x0800cf0c
 8007aac:	0800cf2e 	.word	0x0800cf2e

08007ab0 <SysTick_Handler>:
{
 8007ab0:	b508      	push	{r3, lr}
    HAL_IncTick();
 8007ab2:	f001 fba3 	bl	80091fc <HAL_IncTick>
}
 8007ab6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    my_Tick();
 8007aba:	f7f8 bbd1 	b.w	8000260 <my_Tick>
	...

08007ac0 <CmdTest>:
int mytest( int x );

void CmdTest(int action)
{

  if(action==CMD_SHORT_HELP) return;
 8007ac0:	2801      	cmp	r0, #1
{
 8007ac2:	b508      	push	{r3, lr}
  if(action==CMD_SHORT_HELP) return;
 8007ac4:	d00f      	beq.n	8007ae6 <CmdTest+0x26>
  if(action==CMD_LONG_HELP) {
 8007ac6:	2802      	cmp	r0, #2
 8007ac8:	d104      	bne.n	8007ad4 <CmdTest+0x14>
	   );

    return;
  }
  printf("ret val = %d\n", mytest( 77  ) );
}
 8007aca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    printf("testasm\n\n"
 8007ace:	4806      	ldr	r0, [pc, #24]	; (8007ae8 <CmdTest+0x28>)
 8007ad0:	f7f8 bcf0 	b.w	80004b4 <puts>
  printf("ret val = %d\n", mytest( 77  ) );
 8007ad4:	204d      	movs	r0, #77	; 0x4d
 8007ad6:	f7f8 fbb7 	bl	8000248 <mytest>
}
 8007ada:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  printf("ret val = %d\n", mytest( 77  ) );
 8007ade:	4601      	mov	r1, r0
 8007ae0:	4802      	ldr	r0, [pc, #8]	; (8007aec <CmdTest+0x2c>)
 8007ae2:	f7f8 bc93 	b.w	800040c <printf>
}
 8007ae6:	bd08      	pop	{r3, pc}
 8007ae8:	0800cff2 	.word	0x0800cff2
 8007aec:	0800d02b 	.word	0x0800d02b

08007af0 <AddTest>:

int add_test(int x, int y);

void AddTest(int action)
{
    if(action==CMD_SHORT_HELP) return;
 8007af0:	2801      	cmp	r0, #1
{
 8007af2:	b507      	push	{r0, r1, r2, lr}
    if(action==CMD_SHORT_HELP) return;
 8007af4:	d01b      	beq.n	8007b2e <AddTest+0x3e>
    if(action==CMD_LONG_HELP) {
 8007af6:	2802      	cmp	r0, #2
 8007af8:	d105      	bne.n	8007b06 <AddTest+0x16>
        printf("Addition Test\n\n"
 8007afa:	480e      	ldr	r0, [pc, #56]	; (8007b34 <AddTest+0x44>)
    // When we call our function, pass the delay value.
    // printf(“<<< here is where we call add_test – can you add a third parameter? >>>”);
    // get inputs from the user

    printf("add_test returned: %d\n", add_test(x, delay) );
}
 8007afc:	b003      	add	sp, #12
 8007afe:	f85d eb04 	ldr.w	lr, [sp], #4
        printf("Addition Test\n\n"
 8007b02:	f7f8 bcd7 	b.w	80004b4 <puts>
    uint32_t x = 0;
 8007b06:	2300      	movs	r3, #0
    fetch_uint32_arg(&x);
 8007b08:	4668      	mov	r0, sp
    uint32_t x = 0;
 8007b0a:	9300      	str	r3, [sp, #0]
    fetch_uint32_arg(&x);
 8007b0c:	f000 f976 	bl	8007dfc <fetch_uint32_arg>
    fetch_status = fetch_uint32_arg(&delay);
 8007b10:	a801      	add	r0, sp, #4
 8007b12:	f000 f973 	bl	8007dfc <fetch_uint32_arg>
    if(fetch_status) {
 8007b16:	b110      	cbz	r0, 8007b1e <AddTest+0x2e>
    delay = 0xFFFFFF;
 8007b18:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8007b1c:	9301      	str	r3, [sp, #4]
    printf("add_test returned: %d\n", add_test(x, delay) );
 8007b1e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007b22:	f7f8 fbad 	bl	8000280 <add_test>
 8007b26:	4601      	mov	r1, r0
 8007b28:	4803      	ldr	r0, [pc, #12]	; (8007b38 <AddTest+0x48>)
 8007b2a:	f7f8 fc6f 	bl	800040c <printf>
}
 8007b2e:	b003      	add	sp, #12
 8007b30:	f85d fb04 	ldr.w	pc, [sp], #4
 8007b34:	0800d04f 	.word	0x0800d04f
 8007b38:	0800d087 	.word	0x0800d087

08007b3c <_pt_A2>:
* Parameters: an integer - int action
* Returns: void
*/
void _pt_A2(int action)
{
    if(action==CMD_SHORT_HELP) return;
 8007b3c:	2801      	cmp	r0, #1
{
 8007b3e:	b507      	push	{r0, r1, r2, lr}
    if(action==CMD_SHORT_HELP) return;
 8007b40:	d01c      	beq.n	8007b7c <_pt_A2+0x40>
    if(action==CMD_LONG_HELP) {
 8007b42:	2802      	cmp	r0, #2
 8007b44:	d105      	bne.n	8007b52 <_pt_A2+0x16>
        printf("Addition Test\n\n"
 8007b46:	480f      	ldr	r0, [pc, #60]	; (8007b84 <_pt_A2+0x48>)
    // When we call our function, pass the delay value.
    // printf(“<<< here is where we call add_test – can you add a third parameter? >>>”);
    // get inputs from the user

    printf("pt_led_demo_a2 returned: %d\n", pt_led_demo_a2(count, delay) );
}
 8007b48:	b003      	add	sp, #12
 8007b4a:	f85d eb04 	ldr.w	lr, [sp], #4
        printf("Addition Test\n\n"
 8007b4e:	f7f8 bcb1 	b.w	80004b4 <puts>
    fetch_status1 = fetch_uint32_arg(&count);
 8007b52:	4668      	mov	r0, sp
 8007b54:	f000 f952 	bl	8007dfc <fetch_uint32_arg>
    if(fetch_status1) {
 8007b58:	b108      	cbz	r0, 8007b5e <_pt_A2+0x22>
    count = 1;
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	9300      	str	r3, [sp, #0]
    fetch_status = fetch_uint32_arg(&delay);
 8007b5e:	a801      	add	r0, sp, #4
 8007b60:	f000 f94c 	bl	8007dfc <fetch_uint32_arg>
    if(fetch_status) {
 8007b64:	b110      	cbz	r0, 8007b6c <_pt_A2+0x30>
    delay = 0xFFFFFF;
 8007b66:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8007b6a:	9301      	str	r3, [sp, #4]
    printf("pt_led_demo_a2 returned: %d\n", pt_led_demo_a2(count, delay) );
 8007b6c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007b70:	f7f8 fba0 	bl	80002b4 <pt_led_demo_a2>
 8007b74:	4601      	mov	r1, r0
 8007b76:	4804      	ldr	r0, [pc, #16]	; (8007b88 <_pt_A2+0x4c>)
 8007b78:	f7f8 fc48 	bl	800040c <printf>
}
 8007b7c:	b003      	add	sp, #12
 8007b7e:	f85d fb04 	ldr.w	pc, [sp], #4
 8007b82:	bf00      	nop
 8007b84:	0800d04f 	.word	0x0800d04f
 8007b88:	0800d09e 	.word	0x0800d09e

08007b8c <CmdW>:
	 (unsigned int)(*((uint32_t *)addr)));
}


void CmdW(int mode)
{
 8007b8c:	b507      	push	{r0, r1, r2, lr}
  uint32_t addr,data;

  if(mode != CMD_INTERACTIVE) return;
 8007b8e:	b940      	cbnz	r0, 8007ba2 <CmdW+0x16>

  fetch_uint32_arg(&addr);
 8007b90:	4668      	mov	r0, sp
 8007b92:	f000 f933 	bl	8007dfc <fetch_uint32_arg>
  fetch_uint32_arg(&data);
 8007b96:	a801      	add	r0, sp, #4
 8007b98:	f000 f930 	bl	8007dfc <fetch_uint32_arg>

  *((uint32_t *)addr) = data;
 8007b9c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007ba0:	601a      	str	r2, [r3, #0]
}
 8007ba2:	b003      	add	sp, #12
 8007ba4:	f85d fb04 	ldr.w	pc, [sp], #4

08007ba8 <CmdR>:
{
 8007ba8:	b507      	push	{r0, r1, r2, lr}
  if(mode != CMD_INTERACTIVE) return;
 8007baa:	b938      	cbnz	r0, 8007bbc <CmdR+0x14>
  fetch_uint32_arg(&addr);
 8007bac:	a801      	add	r0, sp, #4
 8007bae:	f000 f925 	bl	8007dfc <fetch_uint32_arg>
  printf("0x%08X: 0x%08X\n",(unsigned int)addr, 
 8007bb2:	9901      	ldr	r1, [sp, #4]
 8007bb4:	4803      	ldr	r0, [pc, #12]	; (8007bc4 <CmdR+0x1c>)
 8007bb6:	680a      	ldr	r2, [r1, #0]
 8007bb8:	f7f8 fc28 	bl	800040c <printf>
}
 8007bbc:	b003      	add	sp, #12
 8007bbe:	f85d fb04 	ldr.w	pc, [sp], #4
 8007bc2:	bf00      	nop
 8007bc4:	0800d12b 	.word	0x0800d12b

08007bc8 <parse>:

#define SEPS " \t\n\v\f\r"

/* Parse the buffer and call commands */ 
int parse(char *buf, int len, const parse_table *table)
{
 8007bc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007bca:	4615      	mov	r5, r2
  char *p;
  int i,arg;
  const parse_table *t;
  
  /* Check for silly things */
  if(buf == NULL) {
 8007bcc:	b930      	cbnz	r0, 8007bdc <parse+0x14>
    printf("NULL buf pointer passed to %s()\n",__FUNCTION__);
 8007bce:	4931      	ldr	r1, [pc, #196]	; (8007c94 <parse+0xcc>)
 8007bd0:	4831      	ldr	r0, [pc, #196]	; (8007c98 <parse+0xd0>)
      t->func(arg);
      return 0;
    }
  }

  printf("Command `%s' not found. Type `help' for online help\n",p);
 8007bd2:	f7f8 fc1b 	bl	800040c <printf>
    return -1;
 8007bd6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007bda:	e032      	b.n	8007c42 <parse+0x7a>
  if(len==0) {
 8007bdc:	b911      	cbnz	r1, 8007be4 <parse+0x1c>
    printf("len == 0 in %s\n",__FUNCTION__);
 8007bde:	492d      	ldr	r1, [pc, #180]	; (8007c94 <parse+0xcc>)
 8007be0:	482e      	ldr	r0, [pc, #184]	; (8007c9c <parse+0xd4>)
 8007be2:	e7f6      	b.n	8007bd2 <parse+0xa>
  if(table == NULL) {
 8007be4:	b182      	cbz	r2, 8007c08 <parse+0x40>
 8007be6:	1e4c      	subs	r4, r1, #1
  while((i--) && (*buf != 0) && (isspace((uint32_t)*buf))) buf++;
 8007be8:	492d      	ldr	r1, [pc, #180]	; (8007ca0 <parse+0xd8>)
 8007bea:	4603      	mov	r3, r0
 8007bec:	1c66      	adds	r6, r4, #1
 8007bee:	4618      	mov	r0, r3
 8007bf0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007bf4:	d00d      	beq.n	8007c12 <parse+0x4a>
 8007bf6:	2a00      	cmp	r2, #0
 8007bf8:	d0ed      	beq.n	8007bd6 <parse+0xe>
 8007bfa:	5c52      	ldrb	r2, [r2, r1]
 8007bfc:	0712      	lsls	r2, r2, #28
 8007bfe:	f104 36ff 	add.w	r6, r4, #4294967295	; 0xffffffff
 8007c02:	d404      	bmi.n	8007c0e <parse+0x46>
  if((i==0) || (*buf==0)) {
 8007c04:	b934      	cbnz	r4, 8007c14 <parse+0x4c>
 8007c06:	e7e6      	b.n	8007bd6 <parse+0xe>
    printf("NULL table pointer passed to %s()\n",__FUNCTION__);
 8007c08:	4922      	ldr	r1, [pc, #136]	; (8007c94 <parse+0xcc>)
 8007c0a:	4826      	ldr	r0, [pc, #152]	; (8007ca4 <parse+0xdc>)
 8007c0c:	e7e1      	b.n	8007bd2 <parse+0xa>
 8007c0e:	4634      	mov	r4, r6
 8007c10:	e7ec      	b.n	8007bec <parse+0x24>
  if((i==0) || (*buf==0)) {
 8007c12:	b1b2      	cbz	r2, 8007c42 <parse+0x7a>
  p = strtok(buf,SEPS);
 8007c14:	4924      	ldr	r1, [pc, #144]	; (8007ca8 <parse+0xe0>)
 8007c16:	f7f8 fe01 	bl	800081c <strtok>
  if(p==NULL) {
 8007c1a:	4606      	mov	r6, r0
 8007c1c:	b910      	cbnz	r0, 8007c24 <parse+0x5c>
    printf("Unable to find a command in the buffer in %s()\n",__FUNCTION__);
 8007c1e:	491d      	ldr	r1, [pc, #116]	; (8007c94 <parse+0xcc>)
 8007c20:	4822      	ldr	r0, [pc, #136]	; (8007cac <parse+0xe4>)
 8007c22:	e7d6      	b.n	8007bd2 <parse+0xa>
  if(strcasecmp(p,"help") == 0) {
 8007c24:	4922      	ldr	r1, [pc, #136]	; (8007cb0 <parse+0xe8>)
 8007c26:	f7f8 fd07 	bl	8000638 <strcasecmp>
 8007c2a:	4604      	mov	r4, r0
 8007c2c:	b9c8      	cbnz	r0, 8007c62 <parse+0x9a>
    p = strtok(NULL,SEPS);
 8007c2e:	491e      	ldr	r1, [pc, #120]	; (8007ca8 <parse+0xe0>)
 8007c30:	f7f8 fdf4 	bl	800081c <strtok>
    if(p == NULL) {
 8007c34:	4606      	mov	r6, r0
 8007c36:	b9d0      	cbnz	r0, 8007c6e <parse+0xa6>
	  printf("%12s -- %s\n",t->cmdname,t->help);
 8007c38:	4e1e      	ldr	r6, [pc, #120]	; (8007cb4 <parse+0xec>)
 8007c3a:	350c      	adds	r5, #12
      for(t=table; t->cmdname!=NULL; t++) {
 8007c3c:	f855 1c0c 	ldr.w	r1, [r5, #-12]
 8007c40:	b911      	cbnz	r1, 8007c48 <parse+0x80>
  return -1;
}
 8007c42:	4620      	mov	r0, r4
 8007c44:	b003      	add	sp, #12
 8007c46:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(t->help != NULL) {
 8007c48:	f855 2c04 	ldr.w	r2, [r5, #-4]
 8007c4c:	b122      	cbz	r2, 8007c58 <parse+0x90>
	  printf("%12s -- %s\n",t->cmdname,t->help);
 8007c4e:	4630      	mov	r0, r6
 8007c50:	f7f8 fbdc 	bl	800040c <printf>
      for(t=table; t->cmdname!=NULL; t++) {
 8007c54:	350c      	adds	r5, #12
 8007c56:	e7f1      	b.n	8007c3c <parse+0x74>
	  t->func(CMD_SHORT_HELP);  /* Call the function for short help */
 8007c58:	f855 3c08 	ldr.w	r3, [r5, #-8]
 8007c5c:	2001      	movs	r0, #1
 8007c5e:	4798      	blx	r3
 8007c60:	e7f8      	b.n	8007c54 <parse+0x8c>
  arg = CMD_INTERACTIVE;  /* Default to calling action part of function */
 8007c62:	2700      	movs	r7, #0
  for(t=table; t->cmdname!=NULL; t++) {
 8007c64:	6829      	ldr	r1, [r5, #0]
 8007c66:	b921      	cbnz	r1, 8007c72 <parse+0xaa>
  printf("Command `%s' not found. Type `help' for online help\n",p);
 8007c68:	4813      	ldr	r0, [pc, #76]	; (8007cb8 <parse+0xf0>)
 8007c6a:	4631      	mov	r1, r6
 8007c6c:	e7b1      	b.n	8007bd2 <parse+0xa>
      arg = CMD_LONG_HELP;
 8007c6e:	2702      	movs	r7, #2
  for(t=table; t->cmdname!=NULL; t++) {
 8007c70:	e7f8      	b.n	8007c64 <parse+0x9c>
    if(strcasecmp(p,t->cmdname) == 0) {
 8007c72:	4630      	mov	r0, r6
 8007c74:	9101      	str	r1, [sp, #4]
 8007c76:	f7f8 fcdf 	bl	8000638 <strcasecmp>
 8007c7a:	9901      	ldr	r1, [sp, #4]
 8007c7c:	4604      	mov	r4, r0
 8007c7e:	b938      	cbnz	r0, 8007c90 <parse+0xc8>
      if(arg == CMD_LONG_HELP) {	
 8007c80:	b117      	cbz	r7, 8007c88 <parse+0xc0>
	printf("%s:\n",t->cmdname);
 8007c82:	480e      	ldr	r0, [pc, #56]	; (8007cbc <parse+0xf4>)
 8007c84:	f7f8 fbc2 	bl	800040c <printf>
      t->func(arg);
 8007c88:	686b      	ldr	r3, [r5, #4]
 8007c8a:	4638      	mov	r0, r7
 8007c8c:	4798      	blx	r3
      return 0;
 8007c8e:	e7d8      	b.n	8007c42 <parse+0x7a>
  for(t=table; t->cmdname!=NULL; t++) {
 8007c90:	350c      	adds	r5, #12
 8007c92:	e7e7      	b.n	8007c64 <parse+0x9c>
 8007c94:	0800d257 	.word	0x0800d257
 8007c98:	0800d176 	.word	0x0800d176
 8007c9c:	0800d197 	.word	0x0800d197
 8007ca0:	0800cba5 	.word	0x0800cba5
 8007ca4:	0800d1a7 	.word	0x0800d1a7
 8007ca8:	0800d1ca 	.word	0x0800d1ca
 8007cac:	0800d1d1 	.word	0x0800d1d1
 8007cb0:	0800d201 	.word	0x0800d201
 8007cb4:	0800d206 	.word	0x0800d206
 8007cb8:	0800d217 	.word	0x0800d217
 8007cbc:	0800d212 	.word	0x0800d212

08007cc0 <TaskInput>:
{
 8007cc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(printPrompt) {
 8007cc2:	4d43      	ldr	r5, [pc, #268]	; (8007dd0 <TaskInput+0x110>)
 8007cc4:	682b      	ldr	r3, [r5, #0]
 8007cc6:	b123      	cbz	r3, 8007cd2 <TaskInput+0x12>
    printf("ARMON>");
 8007cc8:	4842      	ldr	r0, [pc, #264]	; (8007dd4 <TaskInput+0x114>)
 8007cca:	f7f8 fb9f 	bl	800040c <printf>
    printPrompt = 0;
 8007cce:	2300      	movs	r3, #0
 8007cd0:	602b      	str	r3, [r5, #0]
  rc = TerminalReadAnyNonBlock(&c);
 8007cd2:	f10d 0007 	add.w	r0, sp, #7
 8007cd6:	f000 fa30 	bl	800813a <TerminalReadAnyNonBlock>
  if(rc) {
 8007cda:	b990      	cbnz	r0, 8007d02 <TaskInput+0x42>
  if(((c == 010) || (c == 0x7f)) && count) {
 8007cdc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007ce0:	2b08      	cmp	r3, #8
 8007ce2:	d001      	beq.n	8007ce8 <TaskInput+0x28>
 8007ce4:	2b7f      	cmp	r3, #127	; 0x7f
 8007ce6:	d10e      	bne.n	8007d06 <TaskInput+0x46>
 8007ce8:	4c3b      	ldr	r4, [pc, #236]	; (8007dd8 <TaskInput+0x118>)
 8007cea:	6822      	ldr	r2, [r4, #0]
 8007cec:	b15a      	cbz	r2, 8007d06 <TaskInput+0x46>
    printf("\010 \010"); /* Obliterate character */
 8007cee:	483b      	ldr	r0, [pc, #236]	; (8007ddc <TaskInput+0x11c>)
 8007cf0:	f7f8 fb8c 	bl	800040c <printf>
    buf--;     /* Then remove it from the buffer */
 8007cf4:	4a3a      	ldr	r2, [pc, #232]	; (8007de0 <TaskInput+0x120>)
 8007cf6:	6813      	ldr	r3, [r2, #0]
 8007cf8:	3b01      	subs	r3, #1
 8007cfa:	6013      	str	r3, [r2, #0]
    count--;   /* Then keep track of how many are left */
 8007cfc:	6823      	ldr	r3, [r4, #0]
 8007cfe:	3b01      	subs	r3, #1
 8007d00:	6023      	str	r3, [r4, #0]
}
 8007d02:	b003      	add	sp, #12
 8007d04:	bdf0      	pop	{r4, r5, r6, r7, pc}
  } else if(c == '!') { /* '!' repeats the last command */
 8007d06:	2b21      	cmp	r3, #33	; 0x21
 8007d08:	d139      	bne.n	8007d7e <TaskInput+0xbe>
    if(saved) {  /* But only if we have something saved */
 8007d0a:	4b36      	ldr	r3, [pc, #216]	; (8007de4 <TaskInput+0x124>)
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d0f7      	beq.n	8007d02 <TaskInput+0x42>
      strcpy(input,input_b);  /* Restore the command */
 8007d12:	4c35      	ldr	r4, [pc, #212]	; (8007de8 <TaskInput+0x128>)
 8007d14:	4935      	ldr	r1, [pc, #212]	; (8007dec <TaskInput+0x12c>)
 8007d16:	4620      	mov	r0, r4
 8007d18:	f7f8 fcb4 	bl	8000684 <strcpy>
      printf("%s",input);
 8007d1c:	4621      	mov	r1, r4
 8007d1e:	4834      	ldr	r0, [pc, #208]	; (8007df0 <TaskInput+0x130>)
 8007d20:	f7f8 fb74 	bl	800040c <printf>
      count = strlen(input);
 8007d24:	4620      	mov	r0, r4
 8007d26:	f7f8 fd0b 	bl	8000740 <strlen>
 8007d2a:	4b2b      	ldr	r3, [pc, #172]	; (8007dd8 <TaskInput+0x118>)
 8007d2c:	6018      	str	r0, [r3, #0]
      buf = input+count;
 8007d2e:	4b2c      	ldr	r3, [pc, #176]	; (8007de0 <TaskInput+0x120>)
 8007d30:	4404      	add	r4, r0
 8007d32:	601c      	str	r4, [r3, #0]
    for(i=count; i<BUFFER_LEN; i++) *buf++ = '\0';
 8007d34:	4e28      	ldr	r6, [pc, #160]	; (8007dd8 <TaskInput+0x118>)
 8007d36:	4c2a      	ldr	r4, [pc, #168]	; (8007de0 <TaskInput+0x120>)
    printf("\n");
 8007d38:	200a      	movs	r0, #10
 8007d3a:	f7f8 fb7f 	bl	800043c <putchar>
    for(i=count; i<BUFFER_LEN; i++) *buf++ = '\0';
 8007d3e:	6823      	ldr	r3, [r4, #0]
 8007d40:	6830      	ldr	r0, [r6, #0]
 8007d42:	2200      	movs	r2, #0
 8007d44:	4619      	mov	r1, r3
 8007d46:	eba0 0c03 	sub.w	ip, r0, r3
 8007d4a:	4696      	mov	lr, r2
 8007d4c:	eb01 070c 	add.w	r7, r1, ip
 8007d50:	2f4f      	cmp	r7, #79	; 0x4f
 8007d52:	d938      	bls.n	8007dc6 <TaskInput+0x106>
 8007d54:	2850      	cmp	r0, #80	; 0x50
 8007d56:	f1c0 0150 	rsb	r1, r0, #80	; 0x50
 8007d5a:	bf88      	it	hi
 8007d5c:	2100      	movhi	r1, #0
 8007d5e:	440b      	add	r3, r1
 8007d60:	b102      	cbz	r2, 8007d64 <TaskInput+0xa4>
 8007d62:	6023      	str	r3, [r4, #0]
    count = 0;
 8007d64:	2300      	movs	r3, #0
 8007d66:	6033      	str	r3, [r6, #0]
    parse(input, sizeof(input), Commands);
 8007d68:	4b22      	ldr	r3, [pc, #136]	; (8007df4 <TaskInput+0x134>)
 8007d6a:	4e1f      	ldr	r6, [pc, #124]	; (8007de8 <TaskInput+0x128>)
 8007d6c:	681a      	ldr	r2, [r3, #0]
 8007d6e:	2150      	movs	r1, #80	; 0x50
 8007d70:	4630      	mov	r0, r6
 8007d72:	f7ff ff29 	bl	8007bc8 <parse>
    printPrompt = 1;
 8007d76:	2301      	movs	r3, #1
    buf = input;
 8007d78:	6026      	str	r6, [r4, #0]
    printPrompt = 1;
 8007d7a:	602b      	str	r3, [r5, #0]
 8007d7c:	e7c1      	b.n	8007d02 <TaskInput+0x42>
  } else if(isprint((unsigned int)c)) {
 8007d7e:	4a1e      	ldr	r2, [pc, #120]	; (8007df8 <TaskInput+0x138>)
 8007d80:	5c9a      	ldrb	r2, [r3, r2]
 8007d82:	f012 0297 	ands.w	r2, r2, #151	; 0x97
 8007d86:	d011      	beq.n	8007dac <TaskInput+0xec>
    if(count >= sizeof(input)) {
 8007d88:	4913      	ldr	r1, [pc, #76]	; (8007dd8 <TaskInput+0x118>)
 8007d8a:	680a      	ldr	r2, [r1, #0]
 8007d8c:	2a4f      	cmp	r2, #79	; 0x4f
 8007d8e:	d903      	bls.n	8007d98 <TaskInput+0xd8>
      printf("\x07"); /* Beep */
 8007d90:	2007      	movs	r0, #7
      printf("%c",c);
 8007d92:	f7f8 fb53 	bl	800043c <putchar>
 8007d96:	e7b4      	b.n	8007d02 <TaskInput+0x42>
      *buf++ = c;
 8007d98:	4c11      	ldr	r4, [pc, #68]	; (8007de0 <TaskInput+0x120>)
 8007d9a:	6820      	ldr	r0, [r4, #0]
      count++;
 8007d9c:	3201      	adds	r2, #1
      *buf++ = c;
 8007d9e:	1c45      	adds	r5, r0, #1
 8007da0:	7003      	strb	r3, [r0, #0]
      printf("%c",c);
 8007da2:	f89d 0007 	ldrb.w	r0, [sp, #7]
      *buf++ = c;
 8007da6:	6025      	str	r5, [r4, #0]
      count++;
 8007da8:	600a      	str	r2, [r1, #0]
      printf("%c",c);
 8007daa:	e7f2      	b.n	8007d92 <TaskInput+0xd2>
  } else if(c == '\r') {
 8007dac:	2b0d      	cmp	r3, #13
 8007dae:	d1a8      	bne.n	8007d02 <TaskInput+0x42>
    *buf = '\0';
 8007db0:	4b0b      	ldr	r3, [pc, #44]	; (8007de0 <TaskInput+0x120>)
    strcpy(input_b,input);
 8007db2:	490d      	ldr	r1, [pc, #52]	; (8007de8 <TaskInput+0x128>)
    *buf = '\0';
 8007db4:	681b      	ldr	r3, [r3, #0]
    strcpy(input_b,input);
 8007db6:	480d      	ldr	r0, [pc, #52]	; (8007dec <TaskInput+0x12c>)
    *buf = '\0';
 8007db8:	701a      	strb	r2, [r3, #0]
    strcpy(input_b,input);
 8007dba:	f7f8 fc63 	bl	8000684 <strcpy>
    saved = 1;
 8007dbe:	4b09      	ldr	r3, [pc, #36]	; (8007de4 <TaskInput+0x124>)
 8007dc0:	2201      	movs	r2, #1
 8007dc2:	601a      	str	r2, [r3, #0]
 8007dc4:	e7b6      	b.n	8007d34 <TaskInput+0x74>
    for(i=count; i<BUFFER_LEN; i++) *buf++ = '\0';
 8007dc6:	f801 eb01 	strb.w	lr, [r1], #1
 8007dca:	2201      	movs	r2, #1
 8007dcc:	e7be      	b.n	8007d4c <TaskInput+0x8c>
 8007dce:	bf00      	nop
 8007dd0:	200009bc 	.word	0x200009bc
 8007dd4:	0800d24c 	.word	0x0800d24c
 8007dd8:	20000c78 	.word	0x20000c78
 8007ddc:	0800d253 	.word	0x0800d253
 8007de0:	200009b8 	.word	0x200009b8
 8007de4:	20000d1c 	.word	0x20000d1c
 8007de8:	20000c7c 	.word	0x20000c7c
 8007dec:	20000ccc 	.word	0x20000ccc
 8007df0:	0800d548 	.word	0x0800d548
 8007df4:	200009b4 	.word	0x200009b4
 8007df8:	0800cba5 	.word	0x0800cba5

08007dfc <fetch_uint32_arg>:
  return 0;
}     

/* Fetch an integer argument */
int fetch_uint32_arg(uint32_t *dest)
{
 8007dfc:	b510      	push	{r4, lr}
  char *p;
  p = strtok(NULL,SEPS);
 8007dfe:	4908      	ldr	r1, [pc, #32]	; (8007e20 <fetch_uint32_arg+0x24>)
{
 8007e00:	4604      	mov	r4, r0
  p = strtok(NULL,SEPS);
 8007e02:	2000      	movs	r0, #0
 8007e04:	f7f8 fd0a 	bl	800081c <strtok>
  if(p == NULL) {
 8007e08:	b130      	cbz	r0, 8007e18 <fetch_uint32_arg+0x1c>
    /* If we don't get any more tokens it's not an error, just the EOL */
    return -1;
  }
  
  *dest = (uint32_t)strtoul(p,NULL,0);
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	4611      	mov	r1, r2
 8007e0e:	f7f8 fdef 	bl	80009f0 <strtoul>
 8007e12:	6020      	str	r0, [r4, #0]
  return 0;
 8007e14:	2000      	movs	r0, #0
}     
 8007e16:	bd10      	pop	{r4, pc}
    return -1;
 8007e18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007e1c:	e7fb      	b.n	8007e16 <fetch_uint32_arg+0x1a>
 8007e1e:	bf00      	nop
 8007e20:	0800d1ca 	.word	0x0800d1ca

08007e24 <fetch_string_arg>:

/* Fetch a string argument */
int fetch_string_arg(char **dest)
{
 8007e24:	b510      	push	{r4, lr}
  char *p;
  p = strtok(NULL,SEPS);
 8007e26:	4906      	ldr	r1, [pc, #24]	; (8007e40 <fetch_string_arg+0x1c>)
{
 8007e28:	4604      	mov	r4, r0
  p = strtok(NULL,SEPS);
 8007e2a:	2000      	movs	r0, #0
 8007e2c:	f7f8 fcf6 	bl	800081c <strtok>
  if(p == NULL) {
 8007e30:	b110      	cbz	r0, 8007e38 <fetch_string_arg+0x14>
    /* If we don't get any more tokens it's not an error, just the EOL */
    return -1;
  }
  
  *dest = p;
 8007e32:	6020      	str	r0, [r4, #0]
  return 0;
 8007e34:	2000      	movs	r0, #0
}
 8007e36:	bd10      	pop	{r4, pc}
    return -1;
 8007e38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007e3c:	e7fb      	b.n	8007e36 <fetch_string_arg+0x12>
 8007e3e:	bf00      	nop
 8007e40:	0800d1ca 	.word	0x0800d1ca

08007e44 <DumpBuffer>:

#define BYTES_PER_LINE 16

/* Dump a buffer in HEX with the address as given */
void DumpBuffer(uint8_t *buffer, uint32_t count, uint32_t address)
{
 8007e44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e48:	b089      	sub	sp, #36	; 0x24
 8007e4a:	e9cd 0200 	strd	r0, r2, [sp]
  uint32_t i;
  uint8_t buf[BYTES_PER_LINE+1],*bufp;   /* Buffer to assemble printed chars */
  uint8_t *p,c;

  if(count == 0) return;
 8007e4e:	460c      	mov	r4, r1
 8007e50:	2900      	cmp	r1, #0
 8007e52:	d040      	beq.n	8007ed6 <DumpBuffer+0x92>

  p = buffer;
  bufp = buf;
 8007e54:	af03      	add	r7, sp, #12
  /* dump the requested number of bytes in hex. */
  for(i=0; i<count; i++) {
    if((i% BYTES_PER_LINE) == 0) {
      printf("%08x:",(unsigned int)address);
 8007e56:	f8df 9094 	ldr.w	r9, [pc, #148]	; 8007eec <DumpBuffer+0xa8>
      *bufp++ = c; /* Stick in the character */
    } else {
      *bufp++ = '.';
    }

    printf(" %02x",((unsigned int)c) & 0xff);
 8007e5a:	f8df a094 	ldr.w	sl, [pc, #148]	; 8007ef0 <DumpBuffer+0xac>
  for(i=0; i<count; i++) {
 8007e5e:	2500      	movs	r5, #0
 8007e60:	463e      	mov	r6, r7
 8007e62:	9b01      	ldr	r3, [sp, #4]
    if((i% BYTES_PER_LINE) == 0) {
 8007e64:	f015 0b0f 	ands.w	fp, r5, #15
 8007e68:	eb03 0105 	add.w	r1, r3, r5
 8007e6c:	d136      	bne.n	8007edc <DumpBuffer+0x98>
      printf("%08x:",(unsigned int)address);
 8007e6e:	4648      	mov	r0, r9
 8007e70:	f7f8 facc 	bl	800040c <printf>
      bufp = buf;
 8007e74:	46b0      	mov	r8, r6
    c = *p++;
 8007e76:	9b00      	ldr	r3, [sp, #0]
 8007e78:	5d58      	ldrb	r0, [r3, r5]
    if(isprint(c)) {
 8007e7a:	4b19      	ldr	r3, [pc, #100]	; (8007ee0 <DumpBuffer+0x9c>)
 8007e7c:	f810 c003 	ldrb.w	ip, [r0, r3]
      *bufp++ = c; /* Stick in the character */
 8007e80:	4647      	mov	r7, r8
      *bufp++ = '.';
 8007e82:	f01c 0f97 	tst.w	ip, #151	; 0x97
    if(isprint(c)) {
 8007e86:	4601      	mov	r1, r0
      *bufp++ = '.';
 8007e88:	bf08      	it	eq
 8007e8a:	202e      	moveq	r0, #46	; 0x2e
 8007e8c:	f807 0b01 	strb.w	r0, [r7], #1
    printf(" %02x",((unsigned int)c) & 0xff);
 8007e90:	4650      	mov	r0, sl
 8007e92:	f7f8 fabb 	bl	800040c <printf>
    
    /* At end of line ? */
    if((i % BYTES_PER_LINE) == (BYTES_PER_LINE-1)) {
 8007e96:	f1bb 0f0f 	cmp.w	fp, #15
 8007e9a:	d106      	bne.n	8007eaa <DumpBuffer+0x66>
      *bufp = '\0';  /* NULL terminate buffer */
 8007e9c:	2100      	movs	r1, #0
 8007e9e:	f888 1001 	strb.w	r1, [r8, #1]

      /* Yes, print buffer */
      printf("  %s\n",buf);
 8007ea2:	4810      	ldr	r0, [pc, #64]	; (8007ee4 <DumpBuffer+0xa0>)
 8007ea4:	4631      	mov	r1, r6
 8007ea6:	f7f8 fab1 	bl	800040c <printf>
  for(i=0; i<count; i++) {
 8007eaa:	3501      	adds	r5, #1
 8007eac:	42ac      	cmp	r4, r5
 8007eae:	d1d8      	bne.n	8007e62 <DumpBuffer+0x1e>
    }

  }

  /* dump out to EOL */
  *bufp='\0';
 8007eb0:	2500      	movs	r5, #0
  if(count % BYTES_PER_LINE) {
 8007eb2:	f014 040f 	ands.w	r4, r4, #15
  *bufp='\0';
 8007eb6:	f888 5001 	strb.w	r5, [r8, #1]
  if(count % BYTES_PER_LINE) {
 8007eba:	d00c      	beq.n	8007ed6 <DumpBuffer+0x92>
    for(i=0; i<(BYTES_PER_LINE - (count % BYTES_PER_LINE)); i++) {
      printf("   ");
 8007ebc:	4f0a      	ldr	r7, [pc, #40]	; (8007ee8 <DumpBuffer+0xa4>)
    for(i=0; i<(BYTES_PER_LINE - (count % BYTES_PER_LINE)); i++) {
 8007ebe:	f1c4 0410 	rsb	r4, r4, #16
      printf("   ");
 8007ec2:	4638      	mov	r0, r7
    for(i=0; i<(BYTES_PER_LINE - (count % BYTES_PER_LINE)); i++) {
 8007ec4:	3501      	adds	r5, #1
      printf("   ");
 8007ec6:	f7f8 faa1 	bl	800040c <printf>
    for(i=0; i<(BYTES_PER_LINE - (count % BYTES_PER_LINE)); i++) {
 8007eca:	42a5      	cmp	r5, r4
 8007ecc:	d3f9      	bcc.n	8007ec2 <DumpBuffer+0x7e>
    }
    /* Yes, print buffer */
    printf("  %s\n",buf);
 8007ece:	4805      	ldr	r0, [pc, #20]	; (8007ee4 <DumpBuffer+0xa0>)
 8007ed0:	4631      	mov	r1, r6
 8007ed2:	f7f8 fa9b 	bl	800040c <printf>
  }



}
 8007ed6:	b009      	add	sp, #36	; 0x24
 8007ed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007edc:	46b8      	mov	r8, r7
 8007ede:	e7ca      	b.n	8007e76 <DumpBuffer+0x32>
 8007ee0:	0800cba5 	.word	0x0800cba5
 8007ee4:	0800d269 	.word	0x0800d269
 8007ee8:	0800d26f 	.word	0x0800d26f
 8007eec:	0800d25d 	.word	0x0800d25d
 8007ef0:	0800d263 	.word	0x0800d263

08007ef4 <CmdDump>:
void CmdDump(int action)
{
  int rc;
  static uint32_t address=0, count=0x100;

  if(action==CMD_SHORT_HELP) return;
 8007ef4:	2801      	cmp	r0, #1
{
 8007ef6:	b538      	push	{r3, r4, r5, lr}
  if(action==CMD_SHORT_HELP) return;
 8007ef8:	d01d      	beq.n	8007f36 <CmdDump+0x42>
  if(action==CMD_LONG_HELP) {
 8007efa:	2802      	cmp	r0, #2
 8007efc:	4d0e      	ldr	r5, [pc, #56]	; (8007f38 <CmdDump+0x44>)
 8007efe:	4c0f      	ldr	r4, [pc, #60]	; (8007f3c <CmdDump+0x48>)
 8007f00:	d109      	bne.n	8007f16 <CmdDump+0x22>
    printf("dump {<address> {<count>}}\n\n"
 8007f02:	480f      	ldr	r0, [pc, #60]	; (8007f40 <CmdDump+0x4c>)
 8007f04:	f7f8 fad6 	bl	80004b4 <puts>
	   "\n"
	   "<count> is the number of bytes to dump to the terminal.\n"
	   "If the count is unspecified uses last count. The default\n"
	   "count is 0x100 bytes.\n\n");

    printf("Current address is 0x%08x, current count is 0x%x\n",
 8007f08:	682a      	ldr	r2, [r5, #0]
 8007f0a:	6821      	ldr	r1, [r4, #0]
 8007f0c:	480d      	ldr	r0, [pc, #52]	; (8007f44 <CmdDump+0x50>)
  }

  DumpBuffer((uint8_t *)address, count, address);
  /* Update parameters for next time */
  address = address+count;
}
 8007f0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    printf("Current address is 0x%08x, current count is 0x%x\n",
 8007f12:	f7f8 ba7b 	b.w	800040c <printf>
  rc = fetch_uint32_arg(&address);
 8007f16:	4620      	mov	r0, r4
 8007f18:	f7ff ff70 	bl	8007dfc <fetch_uint32_arg>
  if(rc == 0) {
 8007f1c:	b910      	cbnz	r0, 8007f24 <CmdDump+0x30>
    fetch_uint32_arg(&count);
 8007f1e:	4628      	mov	r0, r5
 8007f20:	f7ff ff6c 	bl	8007dfc <fetch_uint32_arg>
  DumpBuffer((uint8_t *)address, count, address);
 8007f24:	6822      	ldr	r2, [r4, #0]
 8007f26:	6829      	ldr	r1, [r5, #0]
 8007f28:	4610      	mov	r0, r2
 8007f2a:	f7ff ff8b 	bl	8007e44 <DumpBuffer>
  address = address+count;
 8007f2e:	6823      	ldr	r3, [r4, #0]
 8007f30:	682a      	ldr	r2, [r5, #0]
 8007f32:	4413      	add	r3, r2
 8007f34:	6023      	str	r3, [r4, #0]
}
 8007f36:	bd38      	pop	{r3, r4, r5, pc}
 8007f38:	200009c0 	.word	0x200009c0
 8007f3c:	20000d20 	.word	0x20000d20
 8007f40:	0800d273 	.word	0x0800d273
 8007f44:	0800d40b 	.word	0x0800d40b

08007f48 <_sbrk_r>:
#include <reent.h>

register char *stack_ptr asm("sp");

void *_sbrk_r(struct _reent *ptr, int incr)
{
 8007f48:	b508      	push	{r3, lr}
        extern char end asm("end");
        static char *heap_end;
        char *prev_heap_end;

        if (heap_end == 0)
 8007f4a:	4b09      	ldr	r3, [pc, #36]	; (8007f70 <_sbrk_r+0x28>)
 8007f4c:	681a      	ldr	r2, [r3, #0]
 8007f4e:	b90a      	cbnz	r2, 8007f54 <_sbrk_r+0xc>
                heap_end = &end;
 8007f50:	4a08      	ldr	r2, [pc, #32]	; (8007f74 <_sbrk_r+0x2c>)
 8007f52:	601a      	str	r2, [r3, #0]

        prev_heap_end = heap_end;
 8007f54:	6818      	ldr	r0, [r3, #0]
        if (heap_end + incr > stack_ptr)
 8007f56:	466a      	mov	r2, sp
 8007f58:	4401      	add	r1, r0
 8007f5a:	4291      	cmp	r1, r2
 8007f5c:	d906      	bls.n	8007f6c <_sbrk_r+0x24>
        {
//              write(1, "Heap and stack collision\n", 25);
//              abort();
                errno = ENOMEM;
 8007f5e:	f7f8 f9b3 	bl	80002c8 <__errno>
 8007f62:	230c      	movs	r3, #12
 8007f64:	6003      	str	r3, [r0, #0]
                return (caddr_t) -1;
 8007f66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        }

        heap_end += incr;

        return (caddr_t) prev_heap_end;
}
 8007f6a:	bd08      	pop	{r3, pc}
        heap_end += incr;
 8007f6c:	6019      	str	r1, [r3, #0]
        return (caddr_t) prev_heap_end;
 8007f6e:	e7fc      	b.n	8007f6a <_sbrk_r+0x22>
 8007f70:	20000d24 	.word	0x20000d24
 8007f74:	20001dd8 	.word	0x20001dd8

08007f78 <_close_r>:

int _close_r(struct _reent *ptr, int file)
{
        return -1;
}
 8007f78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007f7c:	4770      	bx	lr

08007f7e <_fstat_r>:

int _fstat_r(struct _reent *ptr, int file, struct stat *st)
{
        st->st_mode = S_IFCHR;
 8007f7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007f82:	6053      	str	r3, [r2, #4]
        return 0;
}
 8007f84:	2000      	movs	r0, #0
 8007f86:	4770      	bx	lr

08007f88 <_isatty_r>:
int _isatty_r(struct _reent *ptr, int file)
{
        return 1;
}
 8007f88:	2001      	movs	r0, #1
 8007f8a:	4770      	bx	lr

08007f8c <_lseek_r>:
_off_t _lseek_r(struct _reent *ptr, int i, off_t j, int p)
{
        return 0;
}
 8007f8c:	2000      	movs	r0, #0
 8007f8e:	4770      	bx	lr

08007f90 <USBD_CDC_DataIn>:
{
  uint8_t rc;
  uint32_t index=INDEX_USB, tail, count;

  /* Call the original function */
  rc = (*USBDDataIn)(pdev,epnum);
 8007f90:	4b1b      	ldr	r3, [pc, #108]	; (8008000 <USBD_CDC_DataIn+0x70>)
{
 8007f92:	b570      	push	{r4, r5, r6, lr}
  rc = (*USBDDataIn)(pdev,epnum);
 8007f94:	681b      	ldr	r3, [r3, #0]
{
 8007f96:	4604      	mov	r4, r0
  rc = (*USBDDataIn)(pdev,epnum);
 8007f98:	4798      	blx	r3

  if(pdev == &hUSBDDevice) {
 8007f9a:	4b1a      	ldr	r3, [pc, #104]	; (8008004 <USBD_CDC_DataIn+0x74>)
 8007f9c:	429c      	cmp	r4, r3
  rc = (*USBDDataIn)(pdev,epnum);
 8007f9e:	4606      	mov	r6, r0
  if(pdev == &hUSBDDevice) {
 8007fa0:	d12c      	bne.n	8007ffc <USBD_CDC_DataIn+0x6c>
    /* Update head and tail pointers, we just sent outSending bytes */
    tail = TerminalState[index].outTail;
 8007fa2:	4c19      	ldr	r4, [pc, #100]	; (8008008 <USBD_CDC_DataIn+0x78>)
 8007fa4:	f8b4 2108 	ldrh.w	r2, [r4, #264]	; 0x108
    count = TerminalState[index].outSending;
 8007fa8:	f8b4 310c 	ldrh.w	r3, [r4, #268]	; 0x10c
 8007fac:	b299      	uxth	r1, r3
    TerminalState[index].outTail = TERMINALINCRBY(tail,count);
 8007fae:	fa11 f282 	uxtah	r2, r1, r2
 8007fb2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007fb6:	f8a4 2108 	strh.w	r2, [r4, #264]	; 0x108
    TerminalState[index].outCount -= count;
 8007fba:	f8b4 310a 	ldrh.w	r3, [r4, #266]	; 0x10a
 8007fbe:	1a5b      	subs	r3, r3, r1
 8007fc0:	b29b      	uxth	r3, r3
 8007fc2:	f8a4 310a 	strh.w	r3, [r4, #266]	; 0x10a
    TerminalState[index].outSending = 0;
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	f8a4 310c 	strh.w	r3, [r4, #268]	; 0x10c

    /* Re - Trigger output from this buffer */
    tail = TerminalState[index].outTail;
 8007fcc:	f8b4 1108 	ldrh.w	r1, [r4, #264]	; 0x108
    count = TerminalState[index].outCount;
 8007fd0:	f8b4 210a 	ldrh.w	r2, [r4, #266]	; 0x10a
 8007fd4:	b292      	uxth	r2, r2
    tail = TerminalState[index].outTail;
 8007fd6:	b289      	uxth	r1, r1
    if(count != 0) {
 8007fd8:	b182      	cbz	r2, 8007ffc <USBD_CDC_DataIn+0x6c>
      /* Only allow a transfer to the end of the buffer */
      if((count + tail) >= TERMINALBUFFERSIZE) {
 8007fda:	188b      	adds	r3, r1, r2
 8007fdc:	2b7f      	cmp	r3, #127	; 0x7f
	count = TERMINALBUFFERSIZE - tail;
 8007fde:	bf88      	it	hi
 8007fe0:	f1c1 0280 	rsbhi	r2, r1, #128	; 0x80
      }
      USBD_CDC_SetTxBuffer(&hUSBDDevice,
 8007fe4:	b295      	uxth	r5, r2
			   (uint8_t*)&(TerminalState[index].outBuffer[tail]),
 8007fe6:	3186      	adds	r1, #134	; 0x86
      USBD_CDC_SetTxBuffer(&hUSBDDevice,
 8007fe8:	462a      	mov	r2, r5
 8007fea:	4421      	add	r1, r4
 8007fec:	4805      	ldr	r0, [pc, #20]	; (8008004 <USBD_CDC_DataIn+0x74>)
 8007fee:	f003 fa05 	bl	800b3fc <USBD_CDC_SetTxBuffer>
			   count);
      USBD_CDC_TransmitPacket(&hUSBDDevice);
 8007ff2:	4804      	ldr	r0, [pc, #16]	; (8008004 <USBD_CDC_DataIn+0x74>)
 8007ff4:	f003 fa10 	bl	800b418 <USBD_CDC_TransmitPacket>
      TerminalState[index].outSending = count;
 8007ff8:	f8a4 510c 	strh.w	r5, [r4, #268]	; 0x10c
    }
  }
    
  return rc;
}
 8007ffc:	4630      	mov	r0, r6
 8007ffe:	bd70      	pop	{r4, r5, r6, pc}
 8008000:	20000e4c 	.word	0x20000e4c
 8008004:	20000e50 	.word	0x20000e50
 8008008:	20000d28 	.word	0x20000d28

0800800c <CmdStats>:

#endif

/* Dump the terminal statistics */
void CmdStats(int mode)
{
 800800c:	e92d 41e0 	stmdb	sp!, {r5, r6, r7, r8, lr}
  uint32_t i;
  TerminalStats_t s[INDEX_MAX];

  if(mode != CMD_INTERACTIVE) return;
 8008010:	4601      	mov	r1, r0
{
 8008012:	b087      	sub	sp, #28
  if(mode != CMD_INTERACTIVE) return;
 8008014:	b9c0      	cbnz	r0, 8008048 <CmdStats+0x3c>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8008016:	b672      	cpsid	i

  /* Copy terminal stats to local storage, and reset counters atomincally */
  __disable_irq();
  for(i=0; i<INDEX_MAX; i++) {
    s[i] = TerminalState[i].stats;
 8008018:	480d      	ldr	r0, [pc, #52]	; (8008050 <CmdStats+0x44>)
    bzero(&TerminalState[i].stats, sizeof(TerminalState[i].stats));
 800801a:	9104      	str	r1, [sp, #16]
    s[i] = TerminalState[i].stats;
 800801c:	e9d0 5344 	ldrd	r5, r3, [r0, #272]	; 0x110
 8008020:	e9d0 6746 	ldrd	r6, r7, [r0, #280]	; 0x118
 8008024:	f8d0 8120 	ldr.w	r8, [r0, #288]	; 0x120
 8008028:	9305      	str	r3, [sp, #20]
    bzero(&TerminalState[i].stats, sizeof(TerminalState[i].stats));
 800802a:	2214      	movs	r2, #20
 800802c:	f500 7088 	add.w	r0, r0, #272	; 0x110
 8008030:	f7f8 f98a 	bl	8000348 <memset>
  __ASM volatile ("cpsie i" : : : "memory");
 8008034:	b662      	cpsie	i
  }
  __enable_irq();

  /* Display stats for the user */
  for(i=0; i<INDEX_MAX; i++) {
    printf("Terminal #%u:\n"
 8008036:	4807      	ldr	r0, [pc, #28]	; (8008054 <CmdStats+0x48>)
 8008038:	9b05      	ldr	r3, [sp, #20]
 800803a:	9904      	ldr	r1, [sp, #16]
 800803c:	9600      	str	r6, [sp, #0]
 800803e:	e9cd 7801 	strd	r7, r8, [sp, #4]
 8008042:	462a      	mov	r2, r5
 8008044:	f7f8 f9e2 	bl	800040c <printf>
	   (unsigned int)(s[i].written),
	   (unsigned int)(s[i].receiveTooBig),
	   (unsigned int)(s[i].received));
  }

}
 8008048:	b007      	add	sp, #28
 800804a:	e8bd 81e0 	ldmia.w	sp!, {r5, r6, r7, r8, pc}
 800804e:	bf00      	nop
 8008050:	20000d28 	.word	0x20000d28
 8008054:	0800d459 	.word	0x0800d459

08008058 <TerminalInit>:
{
 8008058:	b510      	push	{r4, lr}
  setvbuf(stdin, NULL, _IONBF, 0);
 800805a:	4c17      	ldr	r4, [pc, #92]	; (80080b8 <TerminalInit+0x60>)
 800805c:	6820      	ldr	r0, [r4, #0]
 800805e:	2300      	movs	r3, #0
 8008060:	4619      	mov	r1, r3
 8008062:	2202      	movs	r2, #2
 8008064:	6840      	ldr	r0, [r0, #4]
 8008066:	f7f8 fa2d 	bl	80004c4 <setvbuf>
  setvbuf(stdout, NULL, _IONBF, 0);
 800806a:	6820      	ldr	r0, [r4, #0]
 800806c:	2300      	movs	r3, #0
 800806e:	4619      	mov	r1, r3
 8008070:	2202      	movs	r2, #2
 8008072:	6880      	ldr	r0, [r0, #8]
 8008074:	f7f8 fa26 	bl	80004c4 <setvbuf>
  setvbuf(stderr, NULL, _IONBF, 0);
 8008078:	6820      	ldr	r0, [r4, #0]
  USBD_Init(&hUSBDDevice, &VCP_Desc, 0);
 800807a:	4c10      	ldr	r4, [pc, #64]	; (80080bc <TerminalInit+0x64>)
  setvbuf(stderr, NULL, _IONBF, 0);
 800807c:	68c0      	ldr	r0, [r0, #12]
 800807e:	2300      	movs	r3, #0
 8008080:	4619      	mov	r1, r3
 8008082:	2202      	movs	r2, #2
 8008084:	f7f8 fa1e 	bl	80004c4 <setvbuf>
  USBD_Init(&hUSBDDevice, &VCP_Desc, 0);
 8008088:	490d      	ldr	r1, [pc, #52]	; (80080c0 <TerminalInit+0x68>)
 800808a:	2200      	movs	r2, #0
 800808c:	4620      	mov	r0, r4
 800808e:	f002 fdeb 	bl	800ac68 <USBD_Init>
  USBDDataIn = USBD_CDC.DataIn;
 8008092:	490c      	ldr	r1, [pc, #48]	; (80080c4 <TerminalInit+0x6c>)
 8008094:	4b0c      	ldr	r3, [pc, #48]	; (80080c8 <TerminalInit+0x70>)
 8008096:	694a      	ldr	r2, [r1, #20]
 8008098:	601a      	str	r2, [r3, #0]
  USBD_RegisterClass(&hUSBDDevice, &USBD_CDC);
 800809a:	4620      	mov	r0, r4
  USBD_CDC.DataIn = USBD_CDC_DataIn;
 800809c:	4b0b      	ldr	r3, [pc, #44]	; (80080cc <TerminalInit+0x74>)
 800809e:	614b      	str	r3, [r1, #20]
  USBD_RegisterClass(&hUSBDDevice, &USBD_CDC);
 80080a0:	f002 fdf7 	bl	800ac92 <USBD_RegisterClass>
  USBD_CDC_RegisterInterface(&hUSBDDevice, &USBD_CDC_fops);
 80080a4:	4620      	mov	r0, r4
 80080a6:	490a      	ldr	r1, [pc, #40]	; (80080d0 <TerminalInit+0x78>)
 80080a8:	f003 f9a1 	bl	800b3ee <USBD_CDC_RegisterInterface>
  USBD_Start(&hUSBDDevice);
 80080ac:	4620      	mov	r0, r4
}
 80080ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_Start(&hUSBDDevice);
 80080b2:	f002 bdf5 	b.w	800aca0 <USBD_Start>
 80080b6:	bf00      	nop
 80080b8:	20000008 	.word	0x20000008
 80080bc:	20000e50 	.word	0x20000e50
 80080c0:	20000af4 	.word	0x20000af4
 80080c4:	200009c8 	.word	0x200009c8
 80080c8:	20000e4c 	.word	0x20000e4c
 80080cc:	08007f91 	.word	0x08007f91
 80080d0:	20000b18 	.word	0x20000b18

080080d4 <TerminalRead>:
{
 80080d4:	b530      	push	{r4, r5, lr}
 80080d6:	4603      	mov	r3, r0
  __ASM volatile ("cpsid i" : : : "memory");
 80080d8:	b672      	cpsid	i
  while(TerminalState[index].inCount && (count < len)) {
 80080da:	4c10      	ldr	r4, [pc, #64]	; (800811c <TerminalRead+0x48>)
 80080dc:	f44f 7592 	mov.w	r5, #292	; 0x124
  count = 0;
 80080e0:	2000      	movs	r0, #0
  while(TerminalState[index].inCount && (count < len)) {
 80080e2:	fb05 4303 	mla	r3, r5, r3, r4
 80080e6:	f8b3 4084 	ldrh.w	r4, [r3, #132]	; 0x84
 80080ea:	b2a4      	uxth	r4, r4
 80080ec:	b10c      	cbz	r4, 80080f2 <TerminalRead+0x1e>
 80080ee:	4290      	cmp	r0, r2
 80080f0:	d101      	bne.n	80080f6 <TerminalRead+0x22>
  __ASM volatile ("cpsie i" : : : "memory");
 80080f2:	b662      	cpsie	i
}
 80080f4:	bd30      	pop	{r4, r5, pc}
    tail   = TerminalState[index].inTail;
 80080f6:	f8b3 4082 	ldrh.w	r4, [r3, #130]	; 0x82
 80080fa:	b2a4      	uxth	r4, r4
    *ptr++ = TerminalState[index].inBuffer[tail];
 80080fc:	5d1d      	ldrb	r5, [r3, r4]
 80080fe:	540d      	strb	r5, [r1, r0]
    TerminalState[index].inTail = TERMINALINCR(tail);
 8008100:	3401      	adds	r4, #1
 8008102:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 8008106:	f8a3 4082 	strh.w	r4, [r3, #130]	; 0x82
    TerminalState[index].inCount--;
 800810a:	f8b3 4084 	ldrh.w	r4, [r3, #132]	; 0x84
 800810e:	3c01      	subs	r4, #1
 8008110:	b2a4      	uxth	r4, r4
 8008112:	f8a3 4084 	strh.w	r4, [r3, #132]	; 0x84
    count++;
 8008116:	3001      	adds	r0, #1
 8008118:	e7e5      	b.n	80080e6 <TerminalRead+0x12>
 800811a:	bf00      	nop
 800811c:	20000d28 	.word	0x20000d28

08008120 <_read_r>:
{
 8008120:	4611      	mov	r1, r2
  count = TerminalRead(0, (uint8_t *)ptr, len);
 8008122:	2000      	movs	r0, #0
 8008124:	461a      	mov	r2, r3
 8008126:	f7ff bfd5 	b.w	80080d4 <TerminalRead>

0800812a <TerminalReadNonBlock>:
{
 800812a:	b508      	push	{r3, lr}
  if(TerminalRead(index,(uint8_t*)c,1) == 0) {
 800812c:	2201      	movs	r2, #1
 800812e:	f7ff ffd1 	bl	80080d4 <TerminalRead>
}
 8008132:	fab0 f080 	clz	r0, r0
 8008136:	0940      	lsrs	r0, r0, #5
 8008138:	bd08      	pop	{r3, pc}

0800813a <TerminalReadAnyNonBlock>:
{
 800813a:	4601      	mov	r1, r0
 800813c:	b508      	push	{r3, lr}
    rc = TerminalReadNonBlock(i, c);
 800813e:	2000      	movs	r0, #0
 8008140:	f7ff fff3 	bl	800812a <TerminalReadNonBlock>
}
 8008144:	3800      	subs	r0, #0
 8008146:	bf18      	it	ne
 8008148:	2001      	movne	r0, #1
 800814a:	bd08      	pop	{r3, pc}

0800814c <TerminalOutputBufferWrite>:
{
 800814c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800814e:	4d37      	ldr	r5, [pc, #220]	; (800822c <TerminalOutputBufferWrite+0xe0>)
 8008150:	f44f 7392 	mov.w	r3, #292	; 0x124
  if(len >= TERMINALBUFFERSIZE) {
 8008154:	2a7f      	cmp	r2, #127	; 0x7f
    TerminalState[index].stats.writeTooBig++;
 8008156:	fb03 5300 	mla	r3, r3, r0, r5
  if(len >= TERMINALBUFFERSIZE) {
 800815a:	d906      	bls.n	800816a <TerminalOutputBufferWrite+0x1e>
    TerminalState[index].stats.writeTooBig++;
 800815c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8008160:	3201      	adds	r2, #1
 8008162:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    return 1;
 8008166:	2001      	movs	r0, #1
}
 8008168:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if((TerminalState[index].outCount+len) >= TERMINALBUFFERSIZE) {
 800816a:	f8b3 410a 	ldrh.w	r4, [r3, #266]	; 0x10a
 800816e:	fa12 f484 	uxtah	r4, r2, r4
 8008172:	2c7f      	cmp	r4, #127	; 0x7f
    TerminalState[index].stats.writeBlocked++;
 8008174:	bf82      	ittt	hi
 8008176:	f8d3 4114 	ldrhi.w	r4, [r3, #276]	; 0x114
 800817a:	3401      	addhi	r4, #1
 800817c:	f8c3 4114 	strhi.w	r4, [r3, #276]	; 0x114
  while((TerminalState[index].outCount+len) >= TERMINALBUFFERSIZE) {} 
 8008180:	f44f 7392 	mov.w	r3, #292	; 0x124
 8008184:	fb03 5300 	mla	r3, r3, r0, r5
 8008188:	f8b3 410a 	ldrh.w	r4, [r3, #266]	; 0x10a
 800818c:	fa12 f484 	uxtah	r4, r2, r4
 8008190:	2c7f      	cmp	r4, #127	; 0x7f
 8008192:	d8f9      	bhi.n	8008188 <TerminalOutputBufferWrite+0x3c>
  __ASM volatile ("cpsid i" : : : "memory");
 8008194:	b672      	cpsid	i
  TerminalState[index].stats.written += len;  /* gather statistics */
 8008196:	f8d3 4118 	ldr.w	r4, [r3, #280]	; 0x118
 800819a:	4414      	add	r4, r2
 800819c:	f8c3 4118 	str.w	r4, [r3, #280]	; 0x118
	&& (TerminalState[index].outCount<TERMINALBUFFERSIZE)) {
 80081a0:	f44f 7492 	mov.w	r4, #292	; 0x124
 80081a4:	440a      	add	r2, r1
 80081a6:	fb04 5400 	mla	r4, r4, r0, r5
  while((len != 0) 
 80081aa:	4291      	cmp	r1, r2
 80081ac:	d004      	beq.n	80081b8 <TerminalOutputBufferWrite+0x6c>
	&& (TerminalState[index].outCount<TERMINALBUFFERSIZE)) {
 80081ae:	f8b4 310a 	ldrh.w	r3, [r4, #266]	; 0x10a
 80081b2:	b29b      	uxth	r3, r3
 80081b4:	2b7f      	cmp	r3, #127	; 0x7f
 80081b6:	d925      	bls.n	8008204 <TerminalOutputBufferWrite+0xb8>
  tail = TerminalState[index].outTail;
 80081b8:	f44f 7292 	mov.w	r2, #292	; 0x124
 80081bc:	fb02 5200 	mla	r2, r2, r0, r5
 80081c0:	f8b2 3108 	ldrh.w	r3, [r2, #264]	; 0x108
  count = TerminalState[index].outCount;
 80081c4:	f8b2 210a 	ldrh.w	r2, [r2, #266]	; 0x10a
 80081c8:	b292      	uxth	r2, r2
  tail = TerminalState[index].outTail;
 80081ca:	b299      	uxth	r1, r3
  if((count + tail) >= TERMINALBUFFERSIZE) {
 80081cc:	fa12 f383 	uxtah	r3, r2, r3
 80081d0:	2b7f      	cmp	r3, #127	; 0x7f
    count = TERMINALBUFFERSIZE - tail;
 80081d2:	bf88      	it	hi
 80081d4:	f1c1 0280 	rsbhi	r2, r1, #128	; 0x80
  switch(index) {
 80081d8:	b988      	cbnz	r0, 80081fe <TerminalOutputBufferWrite+0xb2>
    if(hUSBDDevice.dev_state == USBD_STATE_CONFIGURED) {
 80081da:	4e15      	ldr	r6, [pc, #84]	; (8008230 <TerminalOutputBufferWrite+0xe4>)
 80081dc:	f896 31fc 	ldrb.w	r3, [r6, #508]	; 0x1fc
 80081e0:	2b03      	cmp	r3, #3
 80081e2:	d10c      	bne.n	80081fe <TerminalOutputBufferWrite+0xb2>
      USBD_CDC_SetTxBuffer(&hUSBDDevice,
 80081e4:	b294      	uxth	r4, r2
			   (uint8_t*)&(TerminalState[index].outBuffer[tail]),
 80081e6:	3186      	adds	r1, #134	; 0x86
      USBD_CDC_SetTxBuffer(&hUSBDDevice,
 80081e8:	4622      	mov	r2, r4
 80081ea:	4429      	add	r1, r5
 80081ec:	4630      	mov	r0, r6
 80081ee:	f003 f905 	bl	800b3fc <USBD_CDC_SetTxBuffer>
      cdcRc = USBD_CDC_TransmitPacket(&hUSBDDevice);
 80081f2:	4630      	mov	r0, r6
 80081f4:	f003 f910 	bl	800b418 <USBD_CDC_TransmitPacket>
      if(cdcRc == USBD_OK) {
 80081f8:	b908      	cbnz	r0, 80081fe <TerminalOutputBufferWrite+0xb2>
	TerminalState[index].outSending = count;
 80081fa:	f8a5 410c 	strh.w	r4, [r5, #268]	; 0x10c
  __ASM volatile ("cpsie i" : : : "memory");
 80081fe:	b662      	cpsie	i
 8008200:	2000      	movs	r0, #0
 8008202:	e7b1      	b.n	8008168 <TerminalOutputBufferWrite+0x1c>
    head = TerminalState[index].outHead;
 8008204:	f8b4 3106 	ldrh.w	r3, [r4, #262]	; 0x106
    TerminalState[index].outBuffer[head] = *p++;
 8008208:	f811 7b01 	ldrb.w	r7, [r1], #1
 800820c:	fa14 f683 	uxtah	r6, r4, r3
    TerminalState[index].outHead = TERMINALINCR(head);
 8008210:	3301      	adds	r3, #1
 8008212:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008216:	f8a4 3106 	strh.w	r3, [r4, #262]	; 0x106
    TerminalState[index].outCount++;
 800821a:	f8b4 310a 	ldrh.w	r3, [r4, #266]	; 0x10a
    TerminalState[index].outBuffer[head] = *p++;
 800821e:	f886 7086 	strb.w	r7, [r6, #134]	; 0x86
    TerminalState[index].outCount++;
 8008222:	3301      	adds	r3, #1
 8008224:	b29b      	uxth	r3, r3
 8008226:	f8a4 310a 	strh.w	r3, [r4, #266]	; 0x10a
    len--;
 800822a:	e7be      	b.n	80081aa <TerminalOutputBufferWrite+0x5e>
 800822c:	20000d28 	.word	0x20000d28
 8008230:	20000e50 	.word	0x20000e50

08008234 <_write_r>:
{
 8008234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      TerminalOutputBufferWrite(INDEX_USB,"\r",1);
 8008238:	f8df 8034 	ldr.w	r8, [pc, #52]	; 8008270 <_write_r+0x3c>
{
 800823c:	461d      	mov	r5, r3
 800823e:	4614      	mov	r4, r2
 8008240:	18d7      	adds	r7, r2, r3
  while(count != 0) {
 8008242:	42bc      	cmp	r4, r7
 8008244:	4626      	mov	r6, r4
 8008246:	d102      	bne.n	800824e <_write_r+0x1a>
}
 8008248:	4628      	mov	r0, r5
 800824a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(*ptr == '\n') {
 800824e:	7833      	ldrb	r3, [r6, #0]
 8008250:	2b0a      	cmp	r3, #10
 8008252:	f104 0401 	add.w	r4, r4, #1
 8008256:	d104      	bne.n	8008262 <_write_r+0x2e>
      TerminalOutputBufferWrite(INDEX_USB,"\r",1);
 8008258:	2201      	movs	r2, #1
 800825a:	4641      	mov	r1, r8
 800825c:	2000      	movs	r0, #0
 800825e:	f7ff ff75 	bl	800814c <TerminalOutputBufferWrite>
    TerminalOutputBufferWrite(INDEX_USB,ptr,1);
 8008262:	2201      	movs	r2, #1
 8008264:	4631      	mov	r1, r6
 8008266:	2000      	movs	r0, #0
 8008268:	f7ff ff70 	bl	800814c <TerminalOutputBufferWrite>
    count--;
 800826c:	e7e9      	b.n	8008242 <_write_r+0xe>
 800826e:	bf00      	nop
 8008270:	0800d1cf 	.word	0x0800d1cf

08008274 <TerminalInputBufferWrite>:
  if((TerminalState[index].inCount + len) >= TERMINALBUFFERSIZE) {
 8008274:	4b17      	ldr	r3, [pc, #92]	; (80082d4 <TerminalInputBufferWrite+0x60>)
{
 8008276:	b510      	push	{r4, lr}
  if((TerminalState[index].inCount + len) >= TERMINALBUFFERSIZE) {
 8008278:	f44f 7492 	mov.w	r4, #292	; 0x124
 800827c:	fb04 3000 	mla	r0, r4, r0, r3
 8008280:	f8b0 3084 	ldrh.w	r3, [r0, #132]	; 0x84
 8008284:	fa12 f383 	uxtah	r3, r2, r3
 8008288:	2b7f      	cmp	r3, #127	; 0x7f
 800828a:	d906      	bls.n	800829a <TerminalInputBufferWrite+0x26>
    TerminalState[index].stats.receiveTooBig++;
 800828c:	f8d0 311c 	ldr.w	r3, [r0, #284]	; 0x11c
 8008290:	3301      	adds	r3, #1
 8008292:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
    return 1;
 8008296:	2001      	movs	r0, #1
}
 8008298:	bd10      	pop	{r4, pc}
  TerminalState[index].stats.received += len;
 800829a:	f8d0 3120 	ldr.w	r3, [r0, #288]	; 0x120
 800829e:	4413      	add	r3, r2
 80082a0:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
  while(len != 0) {
 80082a4:	440a      	add	r2, r1
 80082a6:	4291      	cmp	r1, r2
 80082a8:	d101      	bne.n	80082ae <TerminalInputBufferWrite+0x3a>
  return 0;
 80082aa:	2000      	movs	r0, #0
 80082ac:	e7f4      	b.n	8008298 <TerminalInputBufferWrite+0x24>
    head = TerminalState[index].inHead;
 80082ae:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
    TerminalState[index].inBuffer[head] = *p++;
 80082b2:	f811 4b01 	ldrb.w	r4, [r1], #1
    head = TerminalState[index].inHead;
 80082b6:	b29b      	uxth	r3, r3
    TerminalState[index].inBuffer[head] = *p++;
 80082b8:	54c4      	strb	r4, [r0, r3]
    TerminalState[index].inHead = TERMINALINCR(head);
 80082ba:	3301      	adds	r3, #1
 80082bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80082c0:	f8a0 3080 	strh.w	r3, [r0, #128]	; 0x80
    TerminalState[index].inCount++;
 80082c4:	f8b0 3084 	ldrh.w	r3, [r0, #132]	; 0x84
 80082c8:	3301      	adds	r3, #1
 80082ca:	b29b      	uxth	r3, r3
 80082cc:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
    len--;
 80082d0:	e7e9      	b.n	80082a6 <TerminalInputBufferWrite+0x32>
 80082d2:	bf00      	nop
 80082d4:	20000d28 	.word	0x20000d28

080082d8 <USB_LP_CAN_RX0_IRQHandler>:
  HAL_PCD_IRQHandler(&hpcd);
 80082d8:	4801      	ldr	r0, [pc, #4]	; (80082e0 <USB_LP_CAN_RX0_IRQHandler+0x8>)
 80082da:	f001 bc8f 	b.w	8009bfc <HAL_PCD_IRQHandler>
 80082de:	bf00      	nop
 80082e0:	20001090 	.word	0x20001090

080082e4 <Uncompress>:

/* Uncompress a name, and return a pointer to a static buffer
   containging the name.
*/
static const char *Uncompress(char *str)
{
 80082e4:	b570      	push	{r4, r5, r6, lr}
  const char decoderRing[]="ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_";
 80082e6:	4a1c      	ldr	r2, [pc, #112]	; (8008358 <Uncompress+0x74>)
{
 80082e8:	b08a      	sub	sp, #40	; 0x28
 80082ea:	4603      	mov	r3, r0
  const char decoderRing[]="ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_";
 80082ec:	466c      	mov	r4, sp
 80082ee:	f102 0620 	add.w	r6, r2, #32
 80082f2:	6810      	ldr	r0, [r2, #0]
 80082f4:	6851      	ldr	r1, [r2, #4]
 80082f6:	4625      	mov	r5, r4
 80082f8:	c503      	stmia	r5!, {r0, r1}
 80082fa:	3208      	adds	r2, #8
 80082fc:	42b2      	cmp	r2, r6
 80082fe:	462c      	mov	r4, r5
 8008300:	d1f7      	bne.n	80082f2 <Uncompress+0xe>
 8008302:	6810      	ldr	r0, [r2, #0]
 8008304:	6028      	str	r0, [r5, #0]
 8008306:	8892      	ldrh	r2, [r2, #4]
 8008308:	80aa      	strh	r2, [r5, #4]
  char c;

  /* Prime the data pump */
  data = (uint8_t)(*str++);
  data <<= 8;
  data |= (uint8_t)(*str++);
 800830a:	4618      	mov	r0, r3
 800830c:	4d13      	ldr	r5, [pc, #76]	; (800835c <Uncompress+0x78>)
 800830e:	f830 3b02 	ldrh.w	r3, [r0], #2
  bits = 0;
 8008312:	2100      	movs	r1, #0
 8008314:	ba5b      	rev16	r3, r3
 8008316:	b29b      	uxth	r3, r3
  i = 0;
 8008318:	460c      	mov	r4, r1
 800831a:	462e      	mov	r6, r5
  //printf("bits: %u, data: %06x\n",(unsigned)bits, (unsigned)data);
  while((data & (0x3f << 10)) != 0) {
 800831c:	f413 427c 	ands.w	r2, r3, #64512	; 0xfc00
 8008320:	d103      	bne.n	800832a <Uncompress+0x46>
      data |= ((uint32_t)(*str++)) << bits; 
    }
  }
  buf[i]='\0';
  return buf;
}
 8008322:	480e      	ldr	r0, [pc, #56]	; (800835c <Uncompress+0x78>)
  buf[i]='\0';
 8008324:	5532      	strb	r2, [r6, r4]
}
 8008326:	b00a      	add	sp, #40	; 0x28
 8008328:	bd70      	pop	{r4, r5, r6, pc}
    data <<= 6;
 800832a:	019a      	lsls	r2, r3, #6
    data &= 0x3fffff;
 800832c:	f3c2 0315 	ubfx	r3, r2, #0, #22
    c = decoderRing[(data>>16)-1];
 8008330:	f3c2 4205 	ubfx	r2, r2, #16, #6
 8008334:	3228      	adds	r2, #40	; 0x28
 8008336:	446a      	add	r2, sp
    buf[i++] = c;
 8008338:	3401      	adds	r4, #1
 800833a:	f812 2c29 	ldrb.w	r2, [r2, #-41]
 800833e:	f805 2b01 	strb.w	r2, [r5], #1
    bits += 6;
 8008342:	1d8a      	adds	r2, r1, #6
    if(bits >= 8) {
 8008344:	2a07      	cmp	r2, #7
      bits -= 8;
 8008346:	bf81      	itttt	hi
 8008348:	1e8a      	subhi	r2, r1, #2
      data |= ((uint32_t)(*str++)) << bits; 
 800834a:	f810 1b01 	ldrbhi.w	r1, [r0], #1
 800834e:	4091      	lslhi	r1, r2
 8008350:	430b      	orrhi	r3, r1
 8008352:	4611      	mov	r1, r2
 8008354:	e7e2      	b.n	800831c <Uncompress+0x38>
 8008356:	bf00      	nop
 8008358:	0800d503 	.word	0x0800d503
 800835c:	20001074 	.word	0x20001074

08008360 <DecodeReadRegister>:


/* Read a specific register from memory */
uint32_t DecodeReadRegister(const Peripheral_t *p, const Register_t *r)
{
 8008360:	b538      	push	{r3, r4, r5, lr}
  uint32_t address, val;

  if(p == NULL) return 0;
 8008362:	4604      	mov	r4, r0
 8008364:	b1f0      	cbz	r0, 80083a4 <DecodeReadRegister+0x44>
  if(r == NULL) return 0;
 8008366:	b1f9      	cbz	r1, 80083a8 <DecodeReadRegister+0x48>
  
  /* Calculate effective address */
  address = p->base + r->offset;

  /* read register according to size */
  switch(r->size) {
 8008368:	798d      	ldrb	r5, [r1, #6]
  address = p->base + r->offset;
 800836a:	888a      	ldrh	r2, [r1, #4]
 800836c:	6843      	ldr	r3, [r0, #4]
  switch(r->size) {
 800836e:	2d10      	cmp	r5, #16
 8008370:	d005      	beq.n	800837e <DecodeReadRegister+0x1e>
 8008372:	2d20      	cmp	r5, #32
 8008374:	d005      	beq.n	8008382 <DecodeReadRegister+0x22>
 8008376:	2d08      	cmp	r5, #8
 8008378:	d105      	bne.n	8008386 <DecodeReadRegister+0x26>
  case 8:
    val = *(uint8_t *)address;
 800837a:	5cd0      	ldrb	r0, [r2, r3]
    printf(" in periphral %s!\n",
	   Uncompress(p->name));
    return 0;
  }
  return val;
}
 800837c:	bd38      	pop	{r3, r4, r5, pc}
    val = *(uint16_t *)address;
 800837e:	5ad0      	ldrh	r0, [r2, r3]
    break;  
 8008380:	e7fc      	b.n	800837c <DecodeReadRegister+0x1c>
    val = *(uint32_t *)address;
 8008382:	58d0      	ldr	r0, [r2, r3]
    break;
 8008384:	e7fa      	b.n	800837c <DecodeReadRegister+0x1c>
    printf("Invalid size 0x%x for register %s",
 8008386:	6808      	ldr	r0, [r1, #0]
 8008388:	f7ff ffac 	bl	80082e4 <Uncompress>
 800838c:	4629      	mov	r1, r5
 800838e:	4602      	mov	r2, r0
 8008390:	4806      	ldr	r0, [pc, #24]	; (80083ac <DecodeReadRegister+0x4c>)
 8008392:	f7f8 f83b 	bl	800040c <printf>
    printf(" in periphral %s!\n",
 8008396:	6820      	ldr	r0, [r4, #0]
 8008398:	f7ff ffa4 	bl	80082e4 <Uncompress>
 800839c:	4601      	mov	r1, r0
 800839e:	4804      	ldr	r0, [pc, #16]	; (80083b0 <DecodeReadRegister+0x50>)
 80083a0:	f7f8 f834 	bl	800040c <printf>
    return 0;
 80083a4:	2000      	movs	r0, #0
 80083a6:	e7e9      	b.n	800837c <DecodeReadRegister+0x1c>
  if(p == NULL) return 0;
 80083a8:	4608      	mov	r0, r1
 80083aa:	e7e7      	b.n	800837c <DecodeReadRegister+0x1c>
 80083ac:	0800d529 	.word	0x0800d529
 80083b0:	0800d54b 	.word	0x0800d54b

080083b4 <DecodeWriteRegister>:

/* Read a specific register from memory */
uint32_t DecodeWriteRegister(const Peripheral_t *p, const Register_t *r,
			     uint32_t val)
{
 80083b4:	b538      	push	{r3, r4, r5, lr}
  uint32_t address;

  if(p == NULL) return 1;
 80083b6:	4604      	mov	r4, r0
 80083b8:	b1f8      	cbz	r0, 80083fa <DecodeWriteRegister+0x46>
  if(r == NULL) return 1;
 80083ba:	b1f1      	cbz	r1, 80083fa <DecodeWriteRegister+0x46>
  
  /* Calculate effective address */
  address = p->base + r->offset;

  /* read register according to size */
  switch(r->size) {
 80083bc:	798d      	ldrb	r5, [r1, #6]
  address = p->base + r->offset;
 80083be:	8888      	ldrh	r0, [r1, #4]
 80083c0:	6863      	ldr	r3, [r4, #4]
  switch(r->size) {
 80083c2:	2d10      	cmp	r5, #16
 80083c4:	d006      	beq.n	80083d4 <DecodeWriteRegister+0x20>
 80083c6:	2d20      	cmp	r5, #32
 80083c8:	d006      	beq.n	80083d8 <DecodeWriteRegister+0x24>
 80083ca:	2d08      	cmp	r5, #8
 80083cc:	d106      	bne.n	80083dc <DecodeWriteRegister+0x28>
  case 8:
    *(uint8_t *)address = val;
 80083ce:	54c2      	strb	r2, [r0, r3]
	   Uncompress(r->name));
    printf(" in periphral %s!\n",
	   Uncompress(p->name));
    return 1;
  }
  return 0;
 80083d0:	2000      	movs	r0, #0
}
 80083d2:	bd38      	pop	{r3, r4, r5, pc}
    *(uint16_t *)address = val;
 80083d4:	52c2      	strh	r2, [r0, r3]
    break;  
 80083d6:	e7fb      	b.n	80083d0 <DecodeWriteRegister+0x1c>
    *(uint32_t *)address = val;
 80083d8:	50c2      	str	r2, [r0, r3]
 80083da:	e7f9      	b.n	80083d0 <DecodeWriteRegister+0x1c>
    printf("Invalid size 0x%x for register %s",
 80083dc:	6808      	ldr	r0, [r1, #0]
 80083de:	f7ff ff81 	bl	80082e4 <Uncompress>
 80083e2:	4629      	mov	r1, r5
 80083e4:	4602      	mov	r2, r0
 80083e6:	4806      	ldr	r0, [pc, #24]	; (8008400 <DecodeWriteRegister+0x4c>)
 80083e8:	f7f8 f810 	bl	800040c <printf>
    printf(" in periphral %s!\n",
 80083ec:	6820      	ldr	r0, [r4, #0]
 80083ee:	f7ff ff79 	bl	80082e4 <Uncompress>
 80083f2:	4601      	mov	r1, r0
 80083f4:	4803      	ldr	r0, [pc, #12]	; (8008404 <DecodeWriteRegister+0x50>)
 80083f6:	f7f8 f809 	bl	800040c <printf>
  if(p == NULL) return 1;
 80083fa:	2001      	movs	r0, #1
 80083fc:	e7e9      	b.n	80083d2 <DecodeWriteRegister+0x1e>
 80083fe:	bf00      	nop
 8008400:	0800d529 	.word	0x0800d529
 8008404:	0800d54b 	.word	0x0800d54b

08008408 <DecodeField>:

/* Decode a field */
void DecodeField(const Field_t *f, uint32_t val)
{
 8008408:	b530      	push	{r4, r5, lr}
  uint32_t v;
  if(f == NULL) return;
 800840a:	4604      	mov	r4, r0
{
 800840c:	b087      	sub	sp, #28
  if(f == NULL) return;
 800840e:	b1d0      	cbz	r0, 8008446 <DecodeField+0x3e>

  v = (val >> (f->offset)) & ((1<<f->width)-1);
 8008410:	7942      	ldrb	r2, [r0, #5]
 8008412:	2301      	movs	r3, #1
 8008414:	4093      	lsls	r3, r2
 8008416:	7902      	ldrb	r2, [r0, #4]
  printf("  %21s : 0x%-2x (%6u) %2u %s offset: %u\n",
 8008418:	6800      	ldr	r0, [r0, #0]
  v = (val >> (f->offset)) & ((1<<f->width)-1);
 800841a:	40d1      	lsrs	r1, r2
 800841c:	3b01      	subs	r3, #1
 800841e:	400b      	ands	r3, r1
 8008420:	9305      	str	r3, [sp, #20]
  printf("  %21s : 0x%-2x (%6u) %2u %s offset: %u\n",
 8008422:	f7ff ff5f 	bl	80082e4 <Uncompress>
	 Uncompress(f->name),  
	 (unsigned int)v,
	 (unsigned int)v,
	 (unsigned int)(f->width),
 8008426:	7965      	ldrb	r5, [r4, #5]
  printf("  %21s : 0x%-2x (%6u) %2u %s offset: %u\n",
 8008428:	4a08      	ldr	r2, [pc, #32]	; (800844c <DecodeField+0x44>)
 800842a:	9b05      	ldr	r3, [sp, #20]
 800842c:	4601      	mov	r1, r0
 800842e:	4808      	ldr	r0, [pc, #32]	; (8008450 <DecodeField+0x48>)
 8008430:	2d01      	cmp	r5, #1
 8008432:	bf98      	it	ls
 8008434:	4602      	movls	r2, r0
 8008436:	7920      	ldrb	r0, [r4, #4]
 8008438:	9500      	str	r5, [sp, #0]
 800843a:	e9cd 2001 	strd	r2, r0, [sp, #4]
 800843e:	4805      	ldr	r0, [pc, #20]	; (8008454 <DecodeField+0x4c>)
 8008440:	461a      	mov	r2, r3
 8008442:	f7f7 ffe3 	bl	800040c <printf>
	 (f->width > 1 ) ? "bits," : "bit, ",
	 (unsigned int)(f->offset));
}
 8008446:	b007      	add	sp, #28
 8008448:	bd30      	pop	{r4, r5, pc}
 800844a:	bf00      	nop
 800844c:	0800d55e 	.word	0x0800d55e
 8008450:	0800d564 	.word	0x0800d564
 8008454:	0800d56a 	.word	0x0800d56a

08008458 <DecodeRegister>:

/* Decode a register */
void DecodeRegister(const Register_t *r, uint32_t base, uint32_t val,
		    uint32_t decodeFields)
{
 8008458:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800845a:	460f      	mov	r7, r1
 800845c:	4615      	mov	r5, r2
 800845e:	461e      	mov	r6, r3
  Field_t const *f;
  uint32_t i;
  
  if(r == NULL) return;
 8008460:	4604      	mov	r4, r0
 8008462:	b180      	cbz	r0, 8008486 <DecodeRegister+0x2e>

  //  printf("\tRegister :\n");
  printf(" Register %-13s : 0x%08x (%10u) Size: %2u Address: 0x%08x\n",
 8008464:	6800      	ldr	r0, [r0, #0]
 8008466:	f7ff ff3d 	bl	80082e4 <Uncompress>
	 Uncompress(r->name),
	 (unsigned int)val,
	 (unsigned int)val,
	 (unsigned int)r->size,
	 (unsigned int)(base + r->offset)
 800846a:	88a2      	ldrh	r2, [r4, #4]
 800846c:	443a      	add	r2, r7
  printf(" Register %-13s : 0x%08x (%10u) Size: %2u Address: 0x%08x\n",
 800846e:	9201      	str	r2, [sp, #4]
 8008470:	79a3      	ldrb	r3, [r4, #6]
 8008472:	9300      	str	r3, [sp, #0]
 8008474:	4601      	mov	r1, r0
 8008476:	462b      	mov	r3, r5
 8008478:	480e      	ldr	r0, [pc, #56]	; (80084b4 <DecodeRegister+0x5c>)
 800847a:	462a      	mov	r2, r5
 800847c:	f7f7 ffc6 	bl	800040c <printf>
	 );

  /* Dump out fields */
  if(r->fields != NULL && decodeFields) {
 8008480:	68a7      	ldr	r7, [r4, #8]
 8008482:	b19f      	cbz	r7, 80084ac <DecodeRegister+0x54>
 8008484:	b986      	cbnz	r6, 80084a8 <DecodeRegister+0x50>
  }
  if(decodeFields) {
    printf("\n");
  }

}
 8008486:	b003      	add	sp, #12
 8008488:	bdf0      	pop	{r4, r5, r6, r7, pc}
      DecodeField(f,val);
 800848a:	4629      	mov	r1, r5
 800848c:	f7ff ffbc 	bl	8008408 <DecodeField>
    for(i=0; i<r->numFields; i++) {
 8008490:	3601      	adds	r6, #1
 8008492:	89a3      	ldrh	r3, [r4, #12]
 8008494:	429e      	cmp	r6, r3
 8008496:	eb07 00c6 	add.w	r0, r7, r6, lsl #3
 800849a:	d3f6      	bcc.n	800848a <DecodeRegister+0x32>
    printf("\n");
 800849c:	200a      	movs	r0, #10
}
 800849e:	b003      	add	sp, #12
 80084a0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    printf("\n");
 80084a4:	f7f7 bfca 	b.w	800043c <putchar>
    for(i=0; i<r->numFields; i++) {
 80084a8:	2600      	movs	r6, #0
 80084aa:	e7f2      	b.n	8008492 <DecodeRegister+0x3a>
  if(decodeFields) {
 80084ac:	2e00      	cmp	r6, #0
 80084ae:	d0ea      	beq.n	8008486 <DecodeRegister+0x2e>
 80084b0:	e7f4      	b.n	800849c <DecodeRegister+0x44>
 80084b2:	bf00      	nop
 80084b4:	0800d593 	.word	0x0800d593

080084b8 <DecodePeripheral>:

/* Decode a peripheral */
void DecodePeripheral(const Peripheral_t *p, uint32_t decodeFields)
{
 80084b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084bc:	460e      	mov	r6, r1
  Register_t const *r;
  uint32_t val;
  uint32_t i;

  if(p == NULL) return;
 80084be:	4604      	mov	r4, r0
 80084c0:	b160      	cbz	r0, 80084dc <DecodePeripheral+0x24>
  
  printf("Peripheral %-13s: Base address: 0x%08x\n",
 80084c2:	6800      	ldr	r0, [r0, #0]
 80084c4:	f7ff ff0e 	bl	80082e4 <Uncompress>
 80084c8:	6862      	ldr	r2, [r4, #4]
 80084ca:	4601      	mov	r1, r0
 80084cc:	480e      	ldr	r0, [pc, #56]	; (8008508 <DecodePeripheral+0x50>)
 80084ce:	f7f7 ff9d 	bl	800040c <printf>
	 Uncompress(p->name),  (unsigned int)p->base);

  /* Dump out registers */
  if(p->registers != NULL) {
 80084d2:	f8d4 8008 	ldr.w	r8, [r4, #8]
 80084d6:	f1b8 0f00 	cmp.w	r8, #0
 80084da:	d112      	bne.n	8008502 <DecodePeripheral+0x4a>
      /* Decode Register, but don't dump fields */
      DecodeRegister(r, p->base, val, decodeFields);
      r++;
    }
  }
}
 80084dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      val = DecodeReadRegister(p,r);
 80084e0:	4639      	mov	r1, r7
 80084e2:	4620      	mov	r0, r4
 80084e4:	f7ff ff3c 	bl	8008360 <DecodeReadRegister>
      DecodeRegister(r, p->base, val, decodeFields);
 80084e8:	6861      	ldr	r1, [r4, #4]
      val = DecodeReadRegister(p,r);
 80084ea:	4602      	mov	r2, r0
      DecodeRegister(r, p->base, val, decodeFields);
 80084ec:	4633      	mov	r3, r6
 80084ee:	4638      	mov	r0, r7
 80084f0:	f7ff ffb2 	bl	8008458 <DecodeRegister>
    for(i=0; i<p->numRegisters; i++) {
 80084f4:	3501      	adds	r5, #1
 80084f6:	89a3      	ldrh	r3, [r4, #12]
 80084f8:	429d      	cmp	r5, r3
 80084fa:	eb08 1705 	add.w	r7, r8, r5, lsl #4
 80084fe:	d3ef      	bcc.n	80084e0 <DecodePeripheral+0x28>
 8008500:	e7ec      	b.n	80084dc <DecodePeripheral+0x24>
 8008502:	2500      	movs	r5, #0
 8008504:	e7f7      	b.n	80084f6 <DecodePeripheral+0x3e>
 8008506:	bf00      	nop
 8008508:	0800d5ce 	.word	0x0800d5ce

0800850c <DecodePrintPeripherals>:

/* Pretty print the names of all the peripherals */
void DecodePrintPeripherals(const Peripheral_t *p)
{
 800850c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008510:	4604      	mov	r4, r0
  uint32_t col;
  col = 8;
  printf("\t");
 8008512:	2009      	movs	r0, #9
 8008514:	f7f7 ff92 	bl	800043c <putchar>
  for(; p->name != NULL; p++) {
    col += printf("%s",Uncompress(p->name));
 8008518:	4e0e      	ldr	r6, [pc, #56]	; (8008554 <DecodePrintPeripherals+0x48>)
    if((p+1)->name != NULL) {
      col += printf(", ");
 800851a:	4f0f      	ldr	r7, [pc, #60]	; (8008558 <DecodePrintPeripherals+0x4c>)
      if(col > 70) {
	col = 8;
	printf("\n\t");
 800851c:	f8df 803c 	ldr.w	r8, [pc, #60]	; 800855c <DecodePrintPeripherals+0x50>
  col = 8;
 8008520:	2508      	movs	r5, #8
  for(; p->name != NULL; p++) {
 8008522:	6820      	ldr	r0, [r4, #0]
 8008524:	b908      	cbnz	r0, 800852a <DecodePrintPeripherals+0x1e>
      }
    }
  }
}
 8008526:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    col += printf("%s",Uncompress(p->name));
 800852a:	f7ff fedb 	bl	80082e4 <Uncompress>
 800852e:	4601      	mov	r1, r0
 8008530:	4630      	mov	r0, r6
 8008532:	f7f7 ff6b 	bl	800040c <printf>
    if((p+1)->name != NULL) {
 8008536:	6923      	ldr	r3, [r4, #16]
    col += printf("%s",Uncompress(p->name));
 8008538:	4405      	add	r5, r0
    if((p+1)->name != NULL) {
 800853a:	b14b      	cbz	r3, 8008550 <DecodePrintPeripherals+0x44>
      col += printf(", ");
 800853c:	4638      	mov	r0, r7
 800853e:	f7f7 ff65 	bl	800040c <printf>
 8008542:	4405      	add	r5, r0
      if(col > 70) {
 8008544:	2d46      	cmp	r5, #70	; 0x46
 8008546:	d903      	bls.n	8008550 <DecodePrintPeripherals+0x44>
	printf("\n\t");
 8008548:	4640      	mov	r0, r8
 800854a:	f7f7 ff5f 	bl	800040c <printf>
	col = 8;
 800854e:	2508      	movs	r5, #8
  for(; p->name != NULL; p++) {
 8008550:	3410      	adds	r4, #16
 8008552:	e7e6      	b.n	8008522 <DecodePrintPeripherals+0x16>
 8008554:	0800d548 	.word	0x0800d548
 8008558:	0800d567 	.word	0x0800d567
 800855c:	0800d5f6 	.word	0x0800d5f6

08008560 <DecodePrintRegisters>:

void DecodePrintRegisters(const Register_t *r,uint32_t count) {
 8008560:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008564:	4606      	mov	r6, r0
  uint8_t col;
  col = 8;
  printf("\t");
 8008566:	2009      	movs	r0, #9
void DecodePrintRegisters(const Register_t *r,uint32_t count) {
 8008568:	460d      	mov	r5, r1
  printf("\t");
 800856a:	f7f7 ff67 	bl	800043c <putchar>
  while(count--) {
    col += printf("%s",Uncompress(r->name));
 800856e:	4f12      	ldr	r7, [pc, #72]	; (80085b8 <DecodePrintRegisters+0x58>)
    if(count) {
      col += printf(", ");
 8008570:	f8df 8048 	ldr.w	r8, [pc, #72]	; 80085bc <DecodePrintRegisters+0x5c>
      if(col > 70) {
	col = 8;
	printf("\n\t");
 8008574:	f8df 9048 	ldr.w	r9, [pc, #72]	; 80085c0 <DecodePrintRegisters+0x60>
 8008578:	3d01      	subs	r5, #1
 800857a:	3610      	adds	r6, #16
  col = 8;
 800857c:	2408      	movs	r4, #8
  while(count--) {
 800857e:	1c6b      	adds	r3, r5, #1
 8008580:	d101      	bne.n	8008586 <DecodePrintRegisters+0x26>
      }
    }
    r++;
  }
}
 8008582:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    col += printf("%s",Uncompress(r->name));
 8008586:	f856 0c10 	ldr.w	r0, [r6, #-16]
 800858a:	f7ff feab 	bl	80082e4 <Uncompress>
 800858e:	4601      	mov	r1, r0
 8008590:	4638      	mov	r0, r7
 8008592:	f7f7 ff3b 	bl	800040c <printf>
 8008596:	4420      	add	r0, r4
 8008598:	b2c4      	uxtb	r4, r0
    if(count) {
 800859a:	b155      	cbz	r5, 80085b2 <DecodePrintRegisters+0x52>
      col += printf(", ");
 800859c:	4640      	mov	r0, r8
 800859e:	f7f7 ff35 	bl	800040c <printf>
 80085a2:	4420      	add	r0, r4
 80085a4:	b2c4      	uxtb	r4, r0
      if(col > 70) {
 80085a6:	2c46      	cmp	r4, #70	; 0x46
 80085a8:	d903      	bls.n	80085b2 <DecodePrintRegisters+0x52>
	printf("\n\t");
 80085aa:	4648      	mov	r0, r9
 80085ac:	f7f7 ff2e 	bl	800040c <printf>
	col = 8;
 80085b0:	2408      	movs	r4, #8
    r++;
 80085b2:	3d01      	subs	r5, #1
 80085b4:	3610      	adds	r6, #16
 80085b6:	e7e2      	b.n	800857e <DecodePrintRegisters+0x1e>
 80085b8:	0800d548 	.word	0x0800d548
 80085bc:	0800d567 	.word	0x0800d567
 80085c0:	0800d5f6 	.word	0x0800d5f6

080085c4 <CmdDecode>:

void CmdDecode(int mode)
{
 80085c4:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t val,oval,t,m,i;
  Peripheral_t const *p;
  Register_t const *r;
  Field_t const *f;

  if(mode == CMD_LONG_HELP) {
 80085c6:	2802      	cmp	r0, #2
{
 80085c8:	b085      	sub	sp, #20
  if(mode == CMD_LONG_HELP) {
 80085ca:	d132      	bne.n	8008632 <CmdDecode+0x6e>
    /* Try to fetch a peripheral name, then just give general help */
    rc = fetch_string_arg(&n);
 80085cc:	a803      	add	r0, sp, #12
 80085ce:	f7ff fc29 	bl	8007e24 <fetch_string_arg>
    if(rc) {
 80085d2:	b148      	cbz	r0, 80085e8 <CmdDecode+0x24>
      /* nothing to fetch, general help */
      printf("decode {<periph> {<reg>}|full}\n"
 80085d4:	4886      	ldr	r0, [pc, #536]	; (80087f0 <CmdDecode+0x22c>)
 80085d6:	f7f7 ff6d 	bl	80004b4 <puts>
	     "The forms with <val> on the end allow you to set the\n"
	     "selected register/field value\n"
	     "\n"
	     "Valid peripherals are:\n"
	     "\n");
      DecodePrintPeripherals(Peripherals);
 80085da:	4886      	ldr	r0, [pc, #536]	; (80087f4 <CmdDecode+0x230>)
 80085dc:	f7ff ff96 	bl	800850c <DecodePrintPeripherals>
      printf("\n\n"
 80085e0:	4885      	ldr	r0, [pc, #532]	; (80087f8 <CmdDecode+0x234>)
      }
      printf("Valid registers for peripheral %s:\n"
	     "\n",
	     Uncompress(p->name));
      DecodePrintRegisters(p->registers,p->numRegisters);
      printf("\n\n");
 80085e2:	f7f7 ff67 	bl	80004b4 <puts>
 80085e6:	e016      	b.n	8008616 <CmdDecode+0x52>
      p = Peripherals;
 80085e8:	4c82      	ldr	r4, [pc, #520]	; (80087f4 <CmdDecode+0x230>)
 80085ea:	e008      	b.n	80085fe <CmdDecode+0x3a>
      while((p->name != NULL) && strcasecmp(n,Uncompress(p->name))) {
 80085ec:	9d03      	ldr	r5, [sp, #12]
 80085ee:	f7ff fe79 	bl	80082e4 <Uncompress>
 80085f2:	4601      	mov	r1, r0
 80085f4:	4628      	mov	r0, r5
 80085f6:	f7f8 f81f 	bl	8000638 <strcasecmp>
 80085fa:	b118      	cbz	r0, 8008604 <CmdDecode+0x40>
	p++;
 80085fc:	3410      	adds	r4, #16
      while((p->name != NULL) && strcasecmp(n,Uncompress(p->name))) {
 80085fe:	6820      	ldr	r0, [r4, #0]
 8008600:	2800      	cmp	r0, #0
 8008602:	d1f3      	bne.n	80085ec <CmdDecode+0x28>
      if(p->name == NULL) {
 8008604:	6820      	ldr	r0, [r4, #0]
 8008606:	b940      	cbnz	r0, 800861a <CmdDecode+0x56>
	printf("%s is not a valid peripheral name\n"
 8008608:	9903      	ldr	r1, [sp, #12]
 800860a:	487c      	ldr	r0, [pc, #496]	; (80087fc <CmdDecode+0x238>)
 800860c:	f7f7 fefe 	bl	800040c <printf>
	DecodePrintPeripherals(Peripherals);
 8008610:	4878      	ldr	r0, [pc, #480]	; (80087f4 <CmdDecode+0x230>)
 8008612:	f7ff ff7b 	bl	800850c <DecodePrintPeripherals>
  /* Read and dump the register, decode all fields */
  val = DecodeReadRegister(p,r);
  DecodeRegister(r,p->base, val,1);

  return;
}
 8008616:	b005      	add	sp, #20
 8008618:	bdf0      	pop	{r4, r5, r6, r7, pc}
      printf("Valid registers for peripheral %s:\n"
 800861a:	f7ff fe63 	bl	80082e4 <Uncompress>
 800861e:	4601      	mov	r1, r0
 8008620:	4877      	ldr	r0, [pc, #476]	; (8008800 <CmdDecode+0x23c>)
 8008622:	f7f7 fef3 	bl	800040c <printf>
      DecodePrintRegisters(p->registers,p->numRegisters);
 8008626:	89a1      	ldrh	r1, [r4, #12]
 8008628:	68a0      	ldr	r0, [r4, #8]
 800862a:	f7ff ff99 	bl	8008560 <DecodePrintRegisters>
      printf("\n\n");
 800862e:	4875      	ldr	r0, [pc, #468]	; (8008804 <CmdDecode+0x240>)
 8008630:	e7d7      	b.n	80085e2 <CmdDecode+0x1e>
  rc = fetch_string_arg(&pname);
 8008632:	4668      	mov	r0, sp
 8008634:	f7ff fbf6 	bl	8007e24 <fetch_string_arg>
  if(rc) {
 8008638:	b178      	cbz	r0, 800865a <CmdDecode+0x96>
    printf("Missing peripheral name, please chose one of:\n\n");
 800863a:	4873      	ldr	r0, [pc, #460]	; (8008808 <CmdDecode+0x244>)
 800863c:	f7f7 ff3a 	bl	80004b4 <puts>
    DecodePrintPeripherals(Peripherals);
 8008640:	486c      	ldr	r0, [pc, #432]	; (80087f4 <CmdDecode+0x230>)
 8008642:	f7ff ff63 	bl	800850c <DecodePrintPeripherals>
    printf("\n\n");
 8008646:	e7f2      	b.n	800862e <CmdDecode+0x6a>
    p++;
 8008648:	3410      	adds	r4, #16
  while((p->name != NULL) && strcasecmp(pname,Uncompress(p->name))) {
 800864a:	6820      	ldr	r0, [r4, #0]
 800864c:	9d00      	ldr	r5, [sp, #0]
 800864e:	b930      	cbnz	r0, 800865e <CmdDecode+0x9a>
    printf("'%s' is not a valid peripheral name, valid names for are:\n\n",
 8008650:	9900      	ldr	r1, [sp, #0]
 8008652:	486e      	ldr	r0, [pc, #440]	; (800880c <CmdDecode+0x248>)
 8008654:	f7f7 feda 	bl	800040c <printf>
 8008658:	e7f2      	b.n	8008640 <CmdDecode+0x7c>
  p = Peripherals;
 800865a:	4c66      	ldr	r4, [pc, #408]	; (80087f4 <CmdDecode+0x230>)
 800865c:	e7f5      	b.n	800864a <CmdDecode+0x86>
  while((p->name != NULL) && strcasecmp(pname,Uncompress(p->name))) {
 800865e:	f7ff fe41 	bl	80082e4 <Uncompress>
 8008662:	4601      	mov	r1, r0
 8008664:	4628      	mov	r0, r5
 8008666:	f7f7 ffe7 	bl	8000638 <strcasecmp>
 800866a:	4605      	mov	r5, r0
 800866c:	2800      	cmp	r0, #0
 800866e:	d1eb      	bne.n	8008648 <CmdDecode+0x84>
  if(p->name == NULL) {
 8008670:	6823      	ldr	r3, [r4, #0]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d0ec      	beq.n	8008650 <CmdDecode+0x8c>
  rc = fetch_string_arg(&rname);
 8008676:	a801      	add	r0, sp, #4
 8008678:	f7ff fbd4 	bl	8007e24 <fetch_string_arg>
  if(rc) {
 800867c:	b120      	cbz	r0, 8008688 <CmdDecode+0xc4>
    DecodePeripheral(p,0);
 800867e:	4629      	mov	r1, r5
      DecodePeripheral(p,1);
 8008680:	4620      	mov	r0, r4
 8008682:	f7ff ff19 	bl	80084b8 <DecodePeripheral>
      return;
 8008686:	e7c6      	b.n	8008616 <CmdDecode+0x52>
  r = p->registers;
 8008688:	68a5      	ldr	r5, [r4, #8]
  i = p->numRegisters;
 800868a:	89a7      	ldrh	r7, [r4, #12]
  while((i--) && strcasecmp(rname,Uncompress(r->name))) {
 800868c:	9e01      	ldr	r6, [sp, #4]
 800868e:	2f00      	cmp	r7, #0
 8008690:	f000 809e 	beq.w	80087d0 <CmdDecode+0x20c>
 8008694:	6828      	ldr	r0, [r5, #0]
 8008696:	f7ff fe25 	bl	80082e4 <Uncompress>
 800869a:	4601      	mov	r1, r0
 800869c:	4630      	mov	r0, r6
 800869e:	f7f7 ffcb 	bl	8000638 <strcasecmp>
 80086a2:	3f01      	subs	r7, #1
 80086a4:	b958      	cbnz	r0, 80086be <CmdDecode+0xfa>
  rc = fetch_string_arg(&fname);
 80086a6:	a802      	add	r0, sp, #8
 80086a8:	f7ff fbbc 	bl	8007e24 <fetch_string_arg>
  if(rc == 0) {
 80086ac:	b158      	cbz	r0, 80086c6 <CmdDecode+0x102>
  val = DecodeReadRegister(p,r);
 80086ae:	4629      	mov	r1, r5
 80086b0:	4620      	mov	r0, r4
 80086b2:	f7ff fe55 	bl	8008360 <DecodeReadRegister>
  DecodeRegister(r,p->base, val,1);
 80086b6:	2301      	movs	r3, #1
  val = DecodeReadRegister(p,r);
 80086b8:	4602      	mov	r2, r0
 80086ba:	9003      	str	r0, [sp, #12]
  DecodeRegister(r,p->base, val,1);
 80086bc:	e010      	b.n	80086e0 <CmdDecode+0x11c>
    r++;
 80086be:	3510      	adds	r5, #16
 80086c0:	e7e4      	b.n	800868c <CmdDecode+0xc8>
      DecodePeripheral(p,1);
 80086c2:	2101      	movs	r1, #1
 80086c4:	e7dc      	b.n	8008680 <CmdDecode+0xbc>
    if(strcasecmp(fname,"val") == 0) {
 80086c6:	4952      	ldr	r1, [pc, #328]	; (8008810 <CmdDecode+0x24c>)
 80086c8:	9802      	ldr	r0, [sp, #8]
 80086ca:	f7f7 ffb5 	bl	8000638 <strcasecmp>
 80086ce:	b960      	cbnz	r0, 80086ea <CmdDecode+0x126>
      rc = fetch_uint32_arg(&val);
 80086d0:	a803      	add	r0, sp, #12
 80086d2:	f7ff fb93 	bl	8007dfc <fetch_uint32_arg>
      if(rc) {
 80086d6:	b108      	cbz	r0, 80086dc <CmdDecode+0x118>
	printf("Missing value to use in decode\n");
 80086d8:	484e      	ldr	r0, [pc, #312]	; (8008814 <CmdDecode+0x250>)
 80086da:	e782      	b.n	80085e2 <CmdDecode+0x1e>
      DecodeRegister(r,p->base,val,1);
 80086dc:	9a03      	ldr	r2, [sp, #12]
 80086de:	2301      	movs	r3, #1
  DecodeRegister(r,p->base, val,1);
 80086e0:	6861      	ldr	r1, [r4, #4]
 80086e2:	4628      	mov	r0, r5
 80086e4:	f7ff feb8 	bl	8008458 <DecodeRegister>
  return;
 80086e8:	e795      	b.n	8008616 <CmdDecode+0x52>
    f = r->fields;
 80086ea:	68ae      	ldr	r6, [r5, #8]
    while((f->name != NULL) && strcasecmp(fname,Uncompress(f->name))) {
 80086ec:	6830      	ldr	r0, [r6, #0]
 80086ee:	2800      	cmp	r0, #0
 80086f0:	d049      	beq.n	8008786 <CmdDecode+0x1c2>
 80086f2:	9f02      	ldr	r7, [sp, #8]
 80086f4:	f7ff fdf6 	bl	80082e4 <Uncompress>
 80086f8:	4601      	mov	r1, r0
 80086fa:	4638      	mov	r0, r7
 80086fc:	f7f7 ff9c 	bl	8000638 <strcasecmp>
 8008700:	b970      	cbnz	r0, 8008720 <CmdDecode+0x15c>
    if(f->name != NULL) {
 8008702:	6833      	ldr	r3, [r6, #0]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d03e      	beq.n	8008786 <CmdDecode+0x1c2>
      rc = fetch_uint32_arg(&val);
 8008708:	a803      	add	r0, sp, #12
 800870a:	f7ff fb77 	bl	8007dfc <fetch_uint32_arg>
      if(rc) {
 800870e:	b148      	cbz	r0, 8008724 <CmdDecode+0x160>
	printf("Missing Value to program into register %s\n",
 8008710:	6828      	ldr	r0, [r5, #0]
 8008712:	f7ff fde7 	bl	80082e4 <Uncompress>
 8008716:	4601      	mov	r1, r0
 8008718:	483f      	ldr	r0, [pc, #252]	; (8008818 <CmdDecode+0x254>)
      printf("Invalid number '%s' entered.\n",
 800871a:	f7f7 fe77 	bl	800040c <printf>
      return;
 800871e:	e77a      	b.n	8008616 <CmdDecode+0x52>
      f++;
 8008720:	3608      	adds	r6, #8
 8008722:	e7e3      	b.n	80086ec <CmdDecode+0x128>
      t = DecodeReadRegister(p,r);
 8008724:	4629      	mov	r1, r5
 8008726:	4620      	mov	r0, r4
 8008728:	f7ff fe1a 	bl	8008360 <DecodeReadRegister>
      m = (1<<f->width)-1;
 800872c:	7972      	ldrb	r2, [r6, #5]
 800872e:	2301      	movs	r3, #1
 8008730:	4093      	lsls	r3, r2
      oval = (t >> f->offset) & m; /* Save old value */
 8008732:	7932      	ldrb	r2, [r6, #4]
      m = (1<<f->width)-1;
 8008734:	3b01      	subs	r3, #1
      t &= ~(m << f->offset);
 8008736:	fa03 f102 	lsl.w	r1, r3, r2
      oval = (t >> f->offset) & m; /* Save old value */
 800873a:	fa20 f702 	lsr.w	r7, r0, r2
      t &= ~(m << f->offset);
 800873e:	ea20 0001 	bic.w	r0, r0, r1
      t |= (val & m) << f->offset;
 8008742:	9903      	ldr	r1, [sp, #12]
      oval = (t >> f->offset) & m; /* Save old value */
 8008744:	401f      	ands	r7, r3
      t |= (val & m) << f->offset;
 8008746:	400b      	ands	r3, r1
 8008748:	fa03 f202 	lsl.w	r2, r3, r2
      DecodeWriteRegister(p,r,t);
 800874c:	4302      	orrs	r2, r0
 800874e:	4629      	mov	r1, r5
 8008750:	4620      	mov	r0, r4
 8008752:	f7ff fe2f 	bl	80083b4 <DecodeWriteRegister>
      printf("%s.",
 8008756:	6820      	ldr	r0, [r4, #0]
 8008758:	f7ff fdc4 	bl	80082e4 <Uncompress>
 800875c:	4601      	mov	r1, r0
 800875e:	482f      	ldr	r0, [pc, #188]	; (800881c <CmdDecode+0x258>)
 8008760:	f7f7 fe54 	bl	800040c <printf>
      printf("%s.",
 8008764:	6828      	ldr	r0, [r5, #0]
 8008766:	f7ff fdbd 	bl	80082e4 <Uncompress>
 800876a:	4601      	mov	r1, r0
 800876c:	482b      	ldr	r0, [pc, #172]	; (800881c <CmdDecode+0x258>)
 800876e:	f7f7 fe4d 	bl	800040c <printf>
      printf("%s (%d) -> (%d)\n",
 8008772:	6830      	ldr	r0, [r6, #0]
 8008774:	f7ff fdb6 	bl	80082e4 <Uncompress>
 8008778:	9b03      	ldr	r3, [sp, #12]
 800877a:	4601      	mov	r1, r0
 800877c:	463a      	mov	r2, r7
 800877e:	4828      	ldr	r0, [pc, #160]	; (8008820 <CmdDecode+0x25c>)
 8008780:	f7f7 fe44 	bl	800040c <printf>
      return;
 8008784:	e747      	b.n	8008616 <CmdDecode+0x52>
    errno = 0;
 8008786:	f7f7 fd9f 	bl	80002c8 <__errno>
 800878a:	2200      	movs	r2, #0
 800878c:	6002      	str	r2, [r0, #0]
    val = strtoul(fname,NULL,0);
 800878e:	4611      	mov	r1, r2
 8008790:	9802      	ldr	r0, [sp, #8]
 8008792:	f7f8 f92d 	bl	80009f0 <strtoul>
 8008796:	9003      	str	r0, [sp, #12]
    if(errno != 0) {
 8008798:	f7f7 fd96 	bl	80002c8 <__errno>
 800879c:	6803      	ldr	r3, [r0, #0]
 800879e:	b113      	cbz	r3, 80087a6 <CmdDecode+0x1e2>
      printf("Invalid number '%s' entered.\n",
 80087a0:	9902      	ldr	r1, [sp, #8]
 80087a2:	4820      	ldr	r0, [pc, #128]	; (8008824 <CmdDecode+0x260>)
 80087a4:	e7b9      	b.n	800871a <CmdDecode+0x156>
    DecodeWriteRegister(p,r,val);
 80087a6:	9a03      	ldr	r2, [sp, #12]
 80087a8:	4629      	mov	r1, r5
 80087aa:	4620      	mov	r0, r4
 80087ac:	f7ff fe02 	bl	80083b4 <DecodeWriteRegister>
    printf("%s.",
 80087b0:	6820      	ldr	r0, [r4, #0]
 80087b2:	f7ff fd97 	bl	80082e4 <Uncompress>
 80087b6:	4601      	mov	r1, r0
 80087b8:	4818      	ldr	r0, [pc, #96]	; (800881c <CmdDecode+0x258>)
 80087ba:	f7f7 fe27 	bl	800040c <printf>
    printf("%s = 0x%08x\n",
 80087be:	6828      	ldr	r0, [r5, #0]
 80087c0:	f7ff fd90 	bl	80082e4 <Uncompress>
 80087c4:	9a03      	ldr	r2, [sp, #12]
 80087c6:	4601      	mov	r1, r0
 80087c8:	4817      	ldr	r0, [pc, #92]	; (8008828 <CmdDecode+0x264>)
 80087ca:	f7f7 fe1f 	bl	800040c <printf>
    return;
 80087ce:	e722      	b.n	8008616 <CmdDecode+0x52>
    if(strcasecmp(rname,"full") == 0) {
 80087d0:	4916      	ldr	r1, [pc, #88]	; (800882c <CmdDecode+0x268>)
 80087d2:	4630      	mov	r0, r6
 80087d4:	f7f7 ff30 	bl	8000638 <strcasecmp>
 80087d8:	2800      	cmp	r0, #0
 80087da:	f43f af72 	beq.w	80086c2 <CmdDecode+0xfe>
    printf("'%s' is not a valid register name, valid names for %s are:\n\n",
 80087de:	6820      	ldr	r0, [r4, #0]
 80087e0:	f7ff fd80 	bl	80082e4 <Uncompress>
 80087e4:	4631      	mov	r1, r6
 80087e6:	4602      	mov	r2, r0
 80087e8:	4811      	ldr	r0, [pc, #68]	; (8008830 <CmdDecode+0x26c>)
 80087ea:	f7f7 fe0f 	bl	800040c <printf>
    DecodePrintRegisters(p->registers,p->numRegisters);
 80087ee:	e71a      	b.n	8008626 <CmdDecode+0x62>
 80087f0:	0800d5f9 	.word	0x0800d5f9
 80087f4:	08017eac 	.word	0x08017eac
 80087f8:	0800d80c 	.word	0x0800d80c
 80087fc:	0800d861 	.word	0x0800d861
 8008800:	0800d89c 	.word	0x0800d89c
 8008804:	0800d92a 	.word	0x0800d92a
 8008808:	0800d8c1 	.word	0x0800d8c1
 800880c:	0800d8f0 	.word	0x0800d8f0
 8008810:	0800d969 	.word	0x0800d969
 8008814:	0800d96d 	.word	0x0800d96d
 8008818:	0800d98c 	.word	0x0800d98c
 800881c:	0800d9b7 	.word	0x0800d9b7
 8008820:	0800d9bb 	.word	0x0800d9bb
 8008824:	0800d9cc 	.word	0x0800d9cc
 8008828:	0800d9ea 	.word	0x0800d9ea
 800882c:	0800d9f7 	.word	0x0800d9f7
 8008830:	0800d92c 	.word	0x0800d92c

08008834 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008834:	4915      	ldr	r1, [pc, #84]	; (800888c <SystemInit+0x58>)
 8008836:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800883a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800883e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8008842:	4b13      	ldr	r3, [pc, #76]	; (8008890 <SystemInit+0x5c>)
 8008844:	681a      	ldr	r2, [r3, #0]
 8008846:	f042 0201 	orr.w	r2, r2, #1
 800884a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 800884c:	6858      	ldr	r0, [r3, #4]
 800884e:	4a11      	ldr	r2, [pc, #68]	; (8008894 <SystemInit+0x60>)
 8008850:	4002      	ands	r2, r0
 8008852:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8008854:	681a      	ldr	r2, [r3, #0]
 8008856:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800885a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800885e:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8008860:	681a      	ldr	r2, [r3, #0]
 8008862:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008866:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8008868:	685a      	ldr	r2, [r3, #4]
 800886a:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800886e:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8008870:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008872:	f022 020f 	bic.w	r2, r2, #15
 8008876:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 8008878:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800887a:	4a07      	ldr	r2, [pc, #28]	; (8008898 <SystemInit+0x64>)
 800887c:	4002      	ands	r2, r0
 800887e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8008880:	2200      	movs	r2, #0
 8008882:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8008884:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008888:	608b      	str	r3, [r1, #8]
#endif
}
 800888a:	4770      	bx	lr
 800888c:	e000ed00 	.word	0xe000ed00
 8008890:	40021000 	.word	0x40021000
 8008894:	f87fc00c 	.word	0xf87fc00c
 8008898:	ff00fccc 	.word	0xff00fccc

0800889c <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800889c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80088a0:	6803      	ldr	r3, [r0, #0]
 80088a2:	07db      	lsls	r3, r3, #31
{
 80088a4:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80088a6:	d46c      	bmi.n	8008982 <HAL_RCC_OscConfig+0xe6>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80088a8:	6823      	ldr	r3, [r4, #0]
 80088aa:	079f      	lsls	r7, r3, #30
 80088ac:	f100 8128 	bmi.w	8008b00 <HAL_RCC_OscConfig+0x264>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80088b0:	6823      	ldr	r3, [r4, #0]
 80088b2:	0719      	lsls	r1, r3, #28
 80088b4:	f100 81b6 	bmi.w	8008c24 <HAL_RCC_OscConfig+0x388>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80088b8:	6823      	ldr	r3, [r4, #0]
 80088ba:	075a      	lsls	r2, r3, #29
 80088bc:	d55b      	bpl.n	8008976 <HAL_RCC_OscConfig+0xda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable Power Clock */
    __PWR_CLK_ENABLE();
 80088be:	4dae      	ldr	r5, [pc, #696]	; (8008b78 <HAL_RCC_OscConfig+0x2dc>)

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR, PWR_CR_DBP);
 80088c0:	4eae      	ldr	r6, [pc, #696]	; (8008b7c <HAL_RCC_OscConfig+0x2e0>)
    __PWR_CLK_ENABLE();
 80088c2:	69eb      	ldr	r3, [r5, #28]
 80088c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80088c8:	61eb      	str	r3, [r5, #28]
    SET_BIT(PWR->CR, PWR_CR_DBP);
 80088ca:	6833      	ldr	r3, [r6, #0]
 80088cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80088d0:	6033      	str	r3, [r6, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80088d2:	f000 fc9b 	bl	800920c <HAL_GetTick>
 80088d6:	4607      	mov	r7, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80088d8:	6833      	ldr	r3, [r6, #0]
 80088da:	05db      	lsls	r3, r3, #23
 80088dc:	f140 81ea 	bpl.w	8008cb4 <HAL_RCC_OscConfig+0x418>
        return HAL_TIMEOUT;
      }      
    }

    /* Reset LSEON and LSEBYP bits before configuring the LSE ----------------*/
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 80088e0:	6a2b      	ldr	r3, [r5, #32]
 80088e2:	f023 0305 	bic.w	r3, r3, #5
 80088e6:	622b      	str	r3, [r5, #32]
    
    /* Get timeout */
    tickstart = HAL_GetTick();
 80088e8:	f000 fc90 	bl	800920c <HAL_GetTick>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80088ec:	2602      	movs	r6, #2
 80088ee:	4607      	mov	r7, r0
      
    /* Wait till LSE is ready */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80088f0:	f04f 0801 	mov.w	r8, #1
 80088f4:	fa96 f3a6 	rbit	r3, r6
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80088f8:	fab3 f383 	clz	r3, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80088fc:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008900:	fab3 f383 	clz	r3, r3
 8008904:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8008908:	f033 0302 	bics.w	r3, r3, #2
 800890c:	bf0c      	ite	eq
 800890e:	6a2a      	ldreq	r2, [r5, #32]
 8008910:	6a6a      	ldrne	r2, [r5, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008912:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008916:	fab3 f383 	clz	r3, r3
 800891a:	f003 031f 	and.w	r3, r3, #31
 800891e:	fa08 f303 	lsl.w	r3, r8, r3
 8008922:	4213      	tst	r3, r2
 8008924:	f040 81cd 	bne.w	8008cc2 <HAL_RCC_OscConfig+0x426>
        return HAL_TIMEOUT;
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008928:	6a2b      	ldr	r3, [r5, #32]
 800892a:	68e6      	ldr	r6, [r4, #12]
 800892c:	f023 0305 	bic.w	r3, r3, #5
 8008930:	4333      	orrs	r3, r6
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8008932:	2e01      	cmp	r6, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008934:	622b      	str	r3, [r5, #32]
    if(RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8008936:	f040 81d7 	bne.w	8008ce8 <HAL_RCC_OscConfig+0x44c>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 800893a:	f000 fc67 	bl	800920c <HAL_GetTick>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800893e:	2702      	movs	r7, #2
 8008940:	4680      	mov	r8, r0
 8008942:	fa97 f3a7 	rbit	r3, r7
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008946:	fab3 f383 	clz	r3, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800894a:	fa97 f3a7 	rbit	r3, r7
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800894e:	fab3 f383 	clz	r3, r3
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008952:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8008956:	f033 0302 	bics.w	r3, r3, #2
 800895a:	bf0c      	ite	eq
 800895c:	6a2a      	ldreq	r2, [r5, #32]
 800895e:	6a6a      	ldrne	r2, [r5, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008960:	fa97 f3a7 	rbit	r3, r7
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008964:	fab3 f383 	clz	r3, r3
 8008968:	f003 031f 	and.w	r3, r3, #31
 800896c:	fa06 f303 	lsl.w	r3, r6, r3
 8008970:	4213      	tst	r3, r2
 8008972:	f000 81af 	beq.w	8008cd4 <HAL_RCC_OscConfig+0x438>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008976:	69e2      	ldr	r2, [r4, #28]
 8008978:	2a00      	cmp	r2, #0
 800897a:	f040 81dd 	bne.w	8008d38 <HAL_RCC_OscConfig+0x49c>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 800897e:	2000      	movs	r0, #0
 8008980:	e02c      	b.n	80089dc <HAL_RCC_OscConfig+0x140>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8008982:	4d7d      	ldr	r5, [pc, #500]	; (8008b78 <HAL_RCC_OscConfig+0x2dc>)
 8008984:	686b      	ldr	r3, [r5, #4]
 8008986:	f003 030c 	and.w	r3, r3, #12
 800898a:	2b04      	cmp	r3, #4
 800898c:	d007      	beq.n	800899e <HAL_RCC_OscConfig+0x102>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800898e:	686b      	ldr	r3, [r5, #4]
 8008990:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8008994:	2b08      	cmp	r3, #8
 8008996:	d129      	bne.n	80089ec <HAL_RCC_OscConfig+0x150>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8008998:	686b      	ldr	r3, [r5, #4]
 800899a:	03de      	lsls	r6, r3, #15
 800899c:	d526      	bpl.n	80089ec <HAL_RCC_OscConfig+0x150>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800899e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80089a2:	fa93 f2a3 	rbit	r2, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80089a6:	fab2 f282 	clz	r2, r2
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState != RCC_HSE_ON))
 80089aa:	f3c2 1242 	ubfx	r2, r2, #5, #3
 80089ae:	f032 0201 	bics.w	r2, r2, #1
 80089b2:	d115      	bne.n	80089e0 <HAL_RCC_OscConfig+0x144>
 80089b4:	6829      	ldr	r1, [r5, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80089b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80089ba:	fa93 f3a3 	rbit	r3, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80089be:	fab3 f383 	clz	r3, r3
 80089c2:	2201      	movs	r2, #1
 80089c4:	f003 031f 	and.w	r3, r3, #31
 80089c8:	fa02 f303 	lsl.w	r3, r2, r3
 80089cc:	420b      	tst	r3, r1
 80089ce:	f43f af6b 	beq.w	80088a8 <HAL_RCC_OscConfig+0xc>
 80089d2:	6863      	ldr	r3, [r4, #4]
 80089d4:	4293      	cmp	r3, r2
 80089d6:	f43f af67 	beq.w	80088a8 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80089da:	2001      	movs	r0, #1
}
 80089dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80089e0:	fa93 f3a3 	rbit	r3, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80089e4:	fab3 f383 	clz	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState != RCC_HSE_ON))
 80089e8:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80089ea:	e7e4      	b.n	80089b6 <HAL_RCC_OscConfig+0x11a>
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 80089ec:	2300      	movs	r3, #0
 80089ee:	70ab      	strb	r3, [r5, #2]
      tickstart = HAL_GetTick();
 80089f0:	f000 fc0c 	bl	800920c <HAL_GetTick>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80089f4:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 80089f8:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80089fa:	f04f 0801 	mov.w	r8, #1
        if((HAL_GetTick()-tickstart) > HSE_TIMEOUT_VALUE)
 80089fe:	f241 3988 	movw	r9, #5000	; 0x1388
 8008a02:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008a06:	fab3 f383 	clz	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008a0a:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8008a0e:	f033 0301 	bics.w	r3, r3, #1
 8008a12:	d13f      	bne.n	8008a94 <HAL_RCC_OscConfig+0x1f8>
 8008a14:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a16:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008a1a:	fab3 f383 	clz	r3, r3
 8008a1e:	f003 031f 	and.w	r3, r3, #31
 8008a22:	fa08 f303 	lsl.w	r3, r8, r3
 8008a26:	4213      	tst	r3, r2
 8008a28:	d12d      	bne.n	8008a86 <HAL_RCC_OscConfig+0x1ea>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008a2a:	7923      	ldrb	r3, [r4, #4]
 8008a2c:	70ab      	strb	r3, [r5, #2]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8008a2e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8008a30:	68a2      	ldr	r2, [r4, #8]
 8008a32:	f023 030f 	bic.w	r3, r3, #15
 8008a36:	4313      	orrs	r3, r2
 8008a38:	62eb      	str	r3, [r5, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState == RCC_HSE_ON)
 8008a3a:	6866      	ldr	r6, [r4, #4]
 8008a3c:	2e01      	cmp	r6, #1
 8008a3e:	d135      	bne.n	8008aac <HAL_RCC_OscConfig+0x210>
        tickstart = HAL_GetTick();
 8008a40:	f000 fbe4 	bl	800920c <HAL_GetTick>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a44:	f44f 3700 	mov.w	r7, #131072	; 0x20000
 8008a48:	4680      	mov	r8, r0
          if((HAL_GetTick()-tickstart) > HSE_TIMEOUT_VALUE)
 8008a4a:	f241 3988 	movw	r9, #5000	; 0x1388
 8008a4e:	fa97 f3a7 	rbit	r3, r7
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008a52:	fab3 f383 	clz	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008a56:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8008a5a:	f033 0301 	bics.w	r3, r3, #1
 8008a5e:	d11f      	bne.n	8008aa0 <HAL_RCC_OscConfig+0x204>
 8008a60:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a62:	fa97 f3a7 	rbit	r3, r7
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008a66:	fab3 f383 	clz	r3, r3
 8008a6a:	f003 031f 	and.w	r3, r3, #31
 8008a6e:	fa06 f303 	lsl.w	r3, r6, r3
 8008a72:	4213      	tst	r3, r2
 8008a74:	f47f af18 	bne.w	80088a8 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick()-tickstart) > HSE_TIMEOUT_VALUE)
 8008a78:	f000 fbc8 	bl	800920c <HAL_GetTick>
 8008a7c:	eba0 0008 	sub.w	r0, r0, r8
 8008a80:	4548      	cmp	r0, r9
 8008a82:	d9e4      	bls.n	8008a4e <HAL_RCC_OscConfig+0x1b2>
 8008a84:	e004      	b.n	8008a90 <HAL_RCC_OscConfig+0x1f4>
        if((HAL_GetTick()-tickstart) > HSE_TIMEOUT_VALUE)
 8008a86:	f000 fbc1 	bl	800920c <HAL_GetTick>
 8008a8a:	1bc0      	subs	r0, r0, r7
 8008a8c:	4548      	cmp	r0, r9
 8008a8e:	d9b8      	bls.n	8008a02 <HAL_RCC_OscConfig+0x166>
          return HAL_TIMEOUT;
 8008a90:	2003      	movs	r0, #3
 8008a92:	e7a3      	b.n	80089dc <HAL_RCC_OscConfig+0x140>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a94:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008a98:	fab3 f383 	clz	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008a9c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8008a9e:	e7ba      	b.n	8008a16 <HAL_RCC_OscConfig+0x17a>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008aa0:	fa97 f3a7 	rbit	r3, r7
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008aa4:	fab3 f383 	clz	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008aa8:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8008aaa:	e7da      	b.n	8008a62 <HAL_RCC_OscConfig+0x1c6>
        tickstart = HAL_GetTick();
 8008aac:	f000 fbae 	bl	800920c <HAL_GetTick>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ab0:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8008ab4:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008ab6:	f04f 0801 	mov.w	r8, #1
          if((HAL_GetTick()-tickstart) > HSE_TIMEOUT_VALUE)
 8008aba:	f241 3988 	movw	r9, #5000	; 0x1388
 8008abe:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008ac2:	fab3 f383 	clz	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008ac6:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8008aca:	f033 0301 	bics.w	r3, r3, #1
 8008ace:	d111      	bne.n	8008af4 <HAL_RCC_OscConfig+0x258>
 8008ad0:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ad2:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008ad6:	fab3 f383 	clz	r3, r3
 8008ada:	f003 031f 	and.w	r3, r3, #31
 8008ade:	fa08 f303 	lsl.w	r3, r8, r3
 8008ae2:	4213      	tst	r3, r2
 8008ae4:	f43f aee0 	beq.w	80088a8 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick()-tickstart) > HSE_TIMEOUT_VALUE)
 8008ae8:	f000 fb90 	bl	800920c <HAL_GetTick>
 8008aec:	1bc0      	subs	r0, r0, r7
 8008aee:	4548      	cmp	r0, r9
 8008af0:	d9e5      	bls.n	8008abe <HAL_RCC_OscConfig+0x222>
 8008af2:	e7cd      	b.n	8008a90 <HAL_RCC_OscConfig+0x1f4>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008af4:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008af8:	fab3 f383 	clz	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008afc:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8008afe:	e7e8      	b.n	8008ad2 <HAL_RCC_OscConfig+0x236>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8008b00:	4d1d      	ldr	r5, [pc, #116]	; (8008b78 <HAL_RCC_OscConfig+0x2dc>)
 8008b02:	686b      	ldr	r3, [r5, #4]
 8008b04:	f013 0f0c 	tst.w	r3, #12
 8008b08:	d007      	beq.n	8008b1a <HAL_RCC_OscConfig+0x27e>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8008b0a:	686b      	ldr	r3, [r5, #4]
 8008b0c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8008b10:	2b08      	cmp	r3, #8
 8008b12:	d135      	bne.n	8008b80 <HAL_RCC_OscConfig+0x2e4>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8008b14:	686b      	ldr	r3, [r5, #4]
 8008b16:	03d8      	lsls	r0, r3, #15
 8008b18:	d432      	bmi.n	8008b80 <HAL_RCC_OscConfig+0x2e4>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b1a:	2302      	movs	r3, #2
 8008b1c:	fa93 f2a3 	rbit	r2, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008b20:	fab2 f282 	clz	r2, r2
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008b24:	f3c2 1242 	ubfx	r2, r2, #5, #3
 8008b28:	f032 0201 	bics.w	r2, r2, #1
 8008b2c:	d11e      	bne.n	8008b6c <HAL_RCC_OscConfig+0x2d0>
 8008b2e:	6829      	ldr	r1, [r5, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b30:	2302      	movs	r3, #2
 8008b32:	fa93 f3a3 	rbit	r3, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008b36:	fab3 f383 	clz	r3, r3
 8008b3a:	2201      	movs	r2, #1
 8008b3c:	f003 031f 	and.w	r3, r3, #31
 8008b40:	fa02 f303 	lsl.w	r3, r2, r3
 8008b44:	420b      	tst	r3, r1
 8008b46:	d003      	beq.n	8008b50 <HAL_RCC_OscConfig+0x2b4>
 8008b48:	6923      	ldr	r3, [r4, #16]
 8008b4a:	4293      	cmp	r3, r2
 8008b4c:	f47f af45 	bne.w	80089da <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008b50:	6829      	ldr	r1, [r5, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b52:	23f8      	movs	r3, #248	; 0xf8
 8008b54:	fa93 f3a3 	rbit	r3, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008b58:	fab3 f383 	clz	r3, r3
 8008b5c:	6962      	ldr	r2, [r4, #20]
 8008b5e:	b2db      	uxtb	r3, r3
 8008b60:	409a      	lsls	r2, r3
 8008b62:	f021 03f8 	bic.w	r3, r1, #248	; 0xf8
 8008b66:	431a      	orrs	r2, r3
 8008b68:	602a      	str	r2, [r5, #0]
 8008b6a:	e6a1      	b.n	80088b0 <HAL_RCC_OscConfig+0x14>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b6c:	fa93 f3a3 	rbit	r3, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008b70:	fab3 f383 	clz	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008b74:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8008b76:	e7db      	b.n	8008b30 <HAL_RCC_OscConfig+0x294>
 8008b78:	40021000 	.word	0x40021000
 8008b7c:	40007000 	.word	0x40007000
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008b80:	6922      	ldr	r2, [r4, #16]
 8008b82:	4bb3      	ldr	r3, [pc, #716]	; (8008e50 <HAL_RCC_OscConfig+0x5b4>)
 8008b84:	b332      	cbz	r2, 8008bd4 <HAL_RCC_OscConfig+0x338>
        __HAL_RCC_HSI_ENABLE();
 8008b86:	2601      	movs	r6, #1
 8008b88:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8008b8a:	f000 fb3f 	bl	800920c <HAL_GetTick>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b8e:	2702      	movs	r7, #2
 8008b90:	4680      	mov	r8, r0
 8008b92:	fa97 f3a7 	rbit	r3, r7
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008b96:	fab3 f383 	clz	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008b9a:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8008b9e:	f033 0301 	bics.w	r3, r3, #1
 8008ba2:	d111      	bne.n	8008bc8 <HAL_RCC_OscConfig+0x32c>
 8008ba4:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ba6:	fa97 f3a7 	rbit	r3, r7
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008baa:	fab3 f383 	clz	r3, r3
 8008bae:	f003 031f 	and.w	r3, r3, #31
 8008bb2:	fa06 f303 	lsl.w	r3, r6, r3
 8008bb6:	4213      	tst	r3, r2
 8008bb8:	d1ca      	bne.n	8008b50 <HAL_RCC_OscConfig+0x2b4>
          if((HAL_GetTick()-tickstart) > HSI_TIMEOUT_VALUE)
 8008bba:	f000 fb27 	bl	800920c <HAL_GetTick>
 8008bbe:	eba0 0008 	sub.w	r0, r0, r8
 8008bc2:	2864      	cmp	r0, #100	; 0x64
 8008bc4:	d9e5      	bls.n	8008b92 <HAL_RCC_OscConfig+0x2f6>
 8008bc6:	e763      	b.n	8008a90 <HAL_RCC_OscConfig+0x1f4>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008bc8:	fa97 f3a7 	rbit	r3, r7
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008bcc:	fab3 f383 	clz	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008bd0:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8008bd2:	e7e8      	b.n	8008ba6 <HAL_RCC_OscConfig+0x30a>
        __HAL_RCC_HSI_DISABLE();
 8008bd4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8008bd6:	f000 fb19 	bl	800920c <HAL_GetTick>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008bda:	2602      	movs	r6, #2
 8008bdc:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008bde:	f04f 0801 	mov.w	r8, #1
 8008be2:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008be6:	fab3 f383 	clz	r3, r3
 8008bea:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8008bee:	f033 0301 	bics.w	r3, r3, #1
 8008bf2:	d111      	bne.n	8008c18 <HAL_RCC_OscConfig+0x37c>
 8008bf4:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008bf6:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008bfa:	fab3 f383 	clz	r3, r3
 8008bfe:	f003 031f 	and.w	r3, r3, #31
 8008c02:	fa08 f303 	lsl.w	r3, r8, r3
 8008c06:	4213      	tst	r3, r2
 8008c08:	f43f ae52 	beq.w	80088b0 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick()-tickstart) > HSI_TIMEOUT_VALUE)
 8008c0c:	f000 fafe 	bl	800920c <HAL_GetTick>
 8008c10:	1bc0      	subs	r0, r0, r7
 8008c12:	2864      	cmp	r0, #100	; 0x64
 8008c14:	d9e5      	bls.n	8008be2 <HAL_RCC_OscConfig+0x346>
 8008c16:	e73b      	b.n	8008a90 <HAL_RCC_OscConfig+0x1f4>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c18:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008c1c:	fab3 f383 	clz	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008c20:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8008c22:	e7e8      	b.n	8008bf6 <HAL_RCC_OscConfig+0x35a>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008c24:	69a2      	ldr	r2, [r4, #24]
 8008c26:	4d8b      	ldr	r5, [pc, #556]	; (8008e54 <HAL_RCC_OscConfig+0x5b8>)
 8008c28:	4b89      	ldr	r3, [pc, #548]	; (8008e50 <HAL_RCC_OscConfig+0x5b4>)
 8008c2a:	b30a      	cbz	r2, 8008c70 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_LSI_ENABLE();
 8008c2c:	2701      	movs	r7, #1
 8008c2e:	f8c3 7480 	str.w	r7, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8008c32:	f000 faeb 	bl	800920c <HAL_GetTick>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c36:	2602      	movs	r6, #2
 8008c38:	4680      	mov	r8, r0
 8008c3a:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008c3e:	fab3 f383 	clz	r3, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c42:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008c46:	fab3 f383 	clz	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008c4a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c4c:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008c50:	fab3 f383 	clz	r3, r3
 8008c54:	f003 031f 	and.w	r3, r3, #31
 8008c58:	fa07 f303 	lsl.w	r3, r7, r3
 8008c5c:	4213      	tst	r3, r2
 8008c5e:	f47f ae2b 	bne.w	80088b8 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick()-tickstart) > LSI_TIMEOUT_VALUE)
 8008c62:	f000 fad3 	bl	800920c <HAL_GetTick>
 8008c66:	eba0 0008 	sub.w	r0, r0, r8
 8008c6a:	2864      	cmp	r0, #100	; 0x64
 8008c6c:	d9e5      	bls.n	8008c3a <HAL_RCC_OscConfig+0x39e>
 8008c6e:	e70f      	b.n	8008a90 <HAL_RCC_OscConfig+0x1f4>
      __HAL_RCC_LSI_DISABLE();
 8008c70:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8008c74:	f000 faca 	bl	800920c <HAL_GetTick>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c78:	2602      	movs	r6, #2
 8008c7a:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008c7c:	f04f 0801 	mov.w	r8, #1
 8008c80:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008c84:	fab3 f383 	clz	r3, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c88:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008c8c:	fab3 f383 	clz	r3, r3
 8008c90:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c92:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008c96:	fab3 f383 	clz	r3, r3
 8008c9a:	f003 031f 	and.w	r3, r3, #31
 8008c9e:	fa08 f303 	lsl.w	r3, r8, r3
 8008ca2:	4213      	tst	r3, r2
 8008ca4:	f43f ae08 	beq.w	80088b8 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick()-tickstart) > LSI_TIMEOUT_VALUE)
 8008ca8:	f000 fab0 	bl	800920c <HAL_GetTick>
 8008cac:	1bc0      	subs	r0, r0, r7
 8008cae:	2864      	cmp	r0, #100	; 0x64
 8008cb0:	d9e6      	bls.n	8008c80 <HAL_RCC_OscConfig+0x3e4>
 8008cb2:	e6ed      	b.n	8008a90 <HAL_RCC_OscConfig+0x1f4>
      if((HAL_GetTick()-tickstart) > DBP_TIMEOUT_VALUE)
 8008cb4:	f000 faaa 	bl	800920c <HAL_GetTick>
 8008cb8:	1bc0      	subs	r0, r0, r7
 8008cba:	2864      	cmp	r0, #100	; 0x64
 8008cbc:	f67f ae0c 	bls.w	80088d8 <HAL_RCC_OscConfig+0x3c>
 8008cc0:	e6e6      	b.n	8008a90 <HAL_RCC_OscConfig+0x1f4>
      if((HAL_GetTick()-tickstart) > LSE_TIMEOUT_VALUE)
 8008cc2:	f000 faa3 	bl	800920c <HAL_GetTick>
 8008cc6:	f241 3388 	movw	r3, #5000	; 0x1388
 8008cca:	1bc0      	subs	r0, r0, r7
 8008ccc:	4298      	cmp	r0, r3
 8008cce:	f67f ae11 	bls.w	80088f4 <HAL_RCC_OscConfig+0x58>
 8008cd2:	e6dd      	b.n	8008a90 <HAL_RCC_OscConfig+0x1f4>
        if((HAL_GetTick()-tickstart) > LSE_TIMEOUT_VALUE)
 8008cd4:	f000 fa9a 	bl	800920c <HAL_GetTick>
 8008cd8:	f241 3388 	movw	r3, #5000	; 0x1388
 8008cdc:	eba0 0008 	sub.w	r0, r0, r8
 8008ce0:	4298      	cmp	r0, r3
 8008ce2:	f67f ae2e 	bls.w	8008942 <HAL_RCC_OscConfig+0xa6>
 8008ce6:	e6d3      	b.n	8008a90 <HAL_RCC_OscConfig+0x1f4>
      tickstart = HAL_GetTick();
 8008ce8:	f000 fa90 	bl	800920c <HAL_GetTick>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008cec:	2602      	movs	r6, #2
 8008cee:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008cf0:	f04f 0801 	mov.w	r8, #1
 8008cf4:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008cf8:	fab3 f383 	clz	r3, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008cfc:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008d00:	fab3 f383 	clz	r3, r3
 8008d04:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8008d08:	f033 0302 	bics.w	r3, r3, #2
 8008d0c:	bf0c      	ite	eq
 8008d0e:	6a2a      	ldreq	r2, [r5, #32]
 8008d10:	6a6a      	ldrne	r2, [r5, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d12:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008d16:	fab3 f383 	clz	r3, r3
 8008d1a:	f003 031f 	and.w	r3, r3, #31
 8008d1e:	fa08 f303 	lsl.w	r3, r8, r3
 8008d22:	4213      	tst	r3, r2
 8008d24:	f43f ae27 	beq.w	8008976 <HAL_RCC_OscConfig+0xda>
        if((HAL_GetTick()-tickstart) > LSE_TIMEOUT_VALUE)
 8008d28:	f000 fa70 	bl	800920c <HAL_GetTick>
 8008d2c:	f241 3388 	movw	r3, #5000	; 0x1388
 8008d30:	1bc0      	subs	r0, r0, r7
 8008d32:	4298      	cmp	r0, r3
 8008d34:	d9de      	bls.n	8008cf4 <HAL_RCC_OscConfig+0x458>
 8008d36:	e6ab      	b.n	8008a90 <HAL_RCC_OscConfig+0x1f4>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008d38:	4d46      	ldr	r5, [pc, #280]	; (8008e54 <HAL_RCC_OscConfig+0x5b8>)
 8008d3a:	686b      	ldr	r3, [r5, #4]
 8008d3c:	f003 030c 	and.w	r3, r3, #12
 8008d40:	2b08      	cmp	r3, #8
 8008d42:	f43f ae4a 	beq.w	80089da <HAL_RCC_OscConfig+0x13e>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008d46:	4b42      	ldr	r3, [pc, #264]	; (8008e50 <HAL_RCC_OscConfig+0x5b4>)
 8008d48:	2a02      	cmp	r2, #2
 8008d4a:	f04f 0200 	mov.w	r2, #0
        __HAL_RCC_PLL_DISABLE();
 8008d4e:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008d50:	d157      	bne.n	8008e02 <HAL_RCC_OscConfig+0x566>
        tickstart = HAL_GetTick();
 8008d52:	f000 fa5b 	bl	800920c <HAL_GetTick>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d56:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 8008d5a:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008d5c:	2601      	movs	r6, #1
 8008d5e:	fa97 f3a7 	rbit	r3, r7
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008d62:	fab3 f383 	clz	r3, r3
 8008d66:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8008d6a:	f033 0301 	bics.w	r3, r3, #1
 8008d6e:	d13c      	bne.n	8008dea <HAL_RCC_OscConfig+0x54e>
 8008d70:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d72:	fa97 f3a7 	rbit	r3, r7
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008d76:	fab3 f383 	clz	r3, r3
 8008d7a:	f003 031f 	and.w	r3, r3, #31
 8008d7e:	fa06 f303 	lsl.w	r3, r6, r3
 8008d82:	4213      	tst	r3, r2
 8008d84:	d12a      	bne.n	8008ddc <HAL_RCC_OscConfig+0x540>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008d86:	e9d4 1308 	ldrd	r1, r3, [r4, #32]
 8008d8a:	686a      	ldr	r2, [r5, #4]
 8008d8c:	430b      	orrs	r3, r1
 8008d8e:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8008d92:	4313      	orrs	r3, r2
 8008d94:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8008d96:	4b2e      	ldr	r3, [pc, #184]	; (8008e50 <HAL_RCC_OscConfig+0x5b4>)
 8008d98:	661e      	str	r6, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8008d9a:	f000 fa37 	bl	800920c <HAL_GetTick>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d9e:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8008da2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008da4:	2701      	movs	r7, #1
 8008da6:	fa94 f3a4 	rbit	r3, r4
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008daa:	fab3 f383 	clz	r3, r3
 8008dae:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8008db2:	f033 0301 	bics.w	r3, r3, #1
 8008db6:	d11e      	bne.n	8008df6 <HAL_RCC_OscConfig+0x55a>
 8008db8:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008dba:	fa94 f3a4 	rbit	r3, r4
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008dbe:	fab3 f383 	clz	r3, r3
 8008dc2:	f003 031f 	and.w	r3, r3, #31
 8008dc6:	fa07 f303 	lsl.w	r3, r7, r3
 8008dca:	4213      	tst	r3, r2
 8008dcc:	f47f add7 	bne.w	800897e <HAL_RCC_OscConfig+0xe2>
          if((HAL_GetTick()-tickstart) > PLL_TIMEOUT_VALUE)
 8008dd0:	f000 fa1c 	bl	800920c <HAL_GetTick>
 8008dd4:	1b80      	subs	r0, r0, r6
 8008dd6:	2864      	cmp	r0, #100	; 0x64
 8008dd8:	d9e5      	bls.n	8008da6 <HAL_RCC_OscConfig+0x50a>
 8008dda:	e659      	b.n	8008a90 <HAL_RCC_OscConfig+0x1f4>
          if((HAL_GetTick()-tickstart) > PLL_TIMEOUT_VALUE)
 8008ddc:	f000 fa16 	bl	800920c <HAL_GetTick>
 8008de0:	eba0 0008 	sub.w	r0, r0, r8
 8008de4:	2864      	cmp	r0, #100	; 0x64
 8008de6:	d9ba      	bls.n	8008d5e <HAL_RCC_OscConfig+0x4c2>
 8008de8:	e652      	b.n	8008a90 <HAL_RCC_OscConfig+0x1f4>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008dea:	fa97 f3a7 	rbit	r3, r7
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008dee:	fab3 f383 	clz	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008df2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8008df4:	e7bd      	b.n	8008d72 <HAL_RCC_OscConfig+0x4d6>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008df6:	fa94 f3a4 	rbit	r3, r4
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008dfa:	fab3 f383 	clz	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008dfe:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8008e00:	e7db      	b.n	8008dba <HAL_RCC_OscConfig+0x51e>
        tickstart = HAL_GetTick();
 8008e02:	f000 fa03 	bl	800920c <HAL_GetTick>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e06:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8008e0a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008e0c:	2701      	movs	r7, #1
 8008e0e:	fa94 f3a4 	rbit	r3, r4
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008e12:	fab3 f383 	clz	r3, r3
 8008e16:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8008e1a:	f033 0301 	bics.w	r3, r3, #1
 8008e1e:	d111      	bne.n	8008e44 <HAL_RCC_OscConfig+0x5a8>
 8008e20:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e22:	fa94 f3a4 	rbit	r3, r4
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008e26:	fab3 f383 	clz	r3, r3
 8008e2a:	f003 031f 	and.w	r3, r3, #31
 8008e2e:	fa07 f303 	lsl.w	r3, r7, r3
 8008e32:	4213      	tst	r3, r2
 8008e34:	f43f ada3 	beq.w	800897e <HAL_RCC_OscConfig+0xe2>
          if((HAL_GetTick()-tickstart) > PLL_TIMEOUT_VALUE)
 8008e38:	f000 f9e8 	bl	800920c <HAL_GetTick>
 8008e3c:	1b80      	subs	r0, r0, r6
 8008e3e:	2864      	cmp	r0, #100	; 0x64
 8008e40:	d9e5      	bls.n	8008e0e <HAL_RCC_OscConfig+0x572>
 8008e42:	e625      	b.n	8008a90 <HAL_RCC_OscConfig+0x1f4>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e44:	fa94 f3a4 	rbit	r3, r4
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008e48:	fab3 f383 	clz	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008e4c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8008e4e:	e7e8      	b.n	8008e22 <HAL_RCC_OscConfig+0x586>
 8008e50:	42420000 	.word	0x42420000
 8008e54:	40021000 	.word	0x40021000

08008e58 <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8008e58:	4aa9      	ldr	r2, [pc, #676]	; (8009100 <HAL_RCC_ClockConfig+0x2a8>)
 8008e5a:	6813      	ldr	r3, [r2, #0]
 8008e5c:	f003 0307 	and.w	r3, r3, #7
 8008e60:	428b      	cmp	r3, r1
{
 8008e62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e66:	4604      	mov	r4, r0
 8008e68:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8008e6a:	f080 80aa 	bcs.w	8008fc2 <HAL_RCC_ClockConfig+0x16a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008e6e:	6813      	ldr	r3, [r2, #0]
 8008e70:	f023 0307 	bic.w	r3, r3, #7
 8008e74:	430b      	orrs	r3, r1
 8008e76:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008e78:	6813      	ldr	r3, [r2, #0]
 8008e7a:	f003 0307 	and.w	r3, r3, #7
 8008e7e:	428b      	cmp	r3, r1
 8008e80:	d002      	beq.n	8008e88 <HAL_RCC_ClockConfig+0x30>
    {
      return HAL_ERROR;
 8008e82:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);

  return HAL_OK;
}
 8008e84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008e88:	6802      	ldr	r2, [r0, #0]
 8008e8a:	0796      	lsls	r6, r2, #30
 8008e8c:	d506      	bpl.n	8008e9c <HAL_RCC_ClockConfig+0x44>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008e8e:	499d      	ldr	r1, [pc, #628]	; (8009104 <HAL_RCC_ClockConfig+0x2ac>)
 8008e90:	6880      	ldr	r0, [r0, #8]
 8008e92:	684b      	ldr	r3, [r1, #4]
 8008e94:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008e98:	4303      	orrs	r3, r0
 8008e9a:	604b      	str	r3, [r1, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008e9c:	07d5      	lsls	r5, r2, #31
 8008e9e:	d412      	bmi.n	8008ec6 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008ea0:	6822      	ldr	r2, [r4, #0]
 8008ea2:	0750      	lsls	r0, r2, #29
 8008ea4:	f100 8124 	bmi.w	80090f0 <HAL_RCC_ClockConfig+0x298>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008ea8:	0713      	lsls	r3, r2, #28
 8008eaa:	d507      	bpl.n	8008ebc <HAL_RCC_ClockConfig+0x64>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008eac:	4a95      	ldr	r2, [pc, #596]	; (8009104 <HAL_RCC_ClockConfig+0x2ac>)
 8008eae:	6921      	ldr	r1, [r4, #16]
 8008eb0:	6853      	ldr	r3, [r2, #4]
 8008eb2:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8008eb6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8008eba:	6053      	str	r3, [r2, #4]
  HAL_InitTick (TICK_INT_PRIORITY);
 8008ebc:	200f      	movs	r0, #15
 8008ebe:	f000 f976 	bl	80091ae <HAL_InitTick>
  return HAL_OK;
 8008ec2:	2000      	movs	r0, #0
 8008ec4:	e7de      	b.n	8008e84 <HAL_RCC_ClockConfig+0x2c>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008ec6:	6862      	ldr	r2, [r4, #4]
 8008ec8:	4d8e      	ldr	r5, [pc, #568]	; (8009104 <HAL_RCC_ClockConfig+0x2ac>)
 8008eca:	2a01      	cmp	r2, #1
 8008ecc:	d137      	bne.n	8008f3e <HAL_RCC_ClockConfig+0xe6>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ece:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008ed2:	fa93 f1a3 	rbit	r1, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008ed6:	fab1 f181 	clz	r1, r1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008eda:	f3c1 1142 	ubfx	r1, r1, #5, #3
 8008ede:	f031 0101 	bics.w	r1, r1, #1
 8008ee2:	d126      	bne.n	8008f32 <HAL_RCC_ClockConfig+0xda>
 8008ee4:	6828      	ldr	r0, [r5, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ee6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008eea:	fa93 f3a3 	rbit	r3, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008eee:	fab3 f383 	clz	r3, r3
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008ef2:	2101      	movs	r1, #1
 8008ef4:	f003 031f 	and.w	r3, r3, #31
 8008ef8:	fa01 f303 	lsl.w	r3, r1, r3
 8008efc:	4203      	tst	r3, r0
 8008efe:	d0c0      	beq.n	8008e82 <HAL_RCC_ClockConfig+0x2a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008f00:	686b      	ldr	r3, [r5, #4]
 8008f02:	f023 0303 	bic.w	r3, r3, #3
 8008f06:	431a      	orrs	r2, r3
 8008f08:	606a      	str	r2, [r5, #4]
      tickstart = HAL_GetTick();
 8008f0a:	f000 f97f 	bl	800920c <HAL_GetTick>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008f0e:	6863      	ldr	r3, [r4, #4]
 8008f10:	2b01      	cmp	r3, #1
      tickstart = HAL_GetTick();
 8008f12:	4606      	mov	r6, r0
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008f14:	f241 3788 	movw	r7, #5000	; 0x1388
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008f18:	d13b      	bne.n	8008f92 <HAL_RCC_ClockConfig+0x13a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8008f1a:	686b      	ldr	r3, [r5, #4]
 8008f1c:	f003 030c 	and.w	r3, r3, #12
 8008f20:	2b04      	cmp	r3, #4
 8008f22:	d0bd      	beq.n	8008ea0 <HAL_RCC_ClockConfig+0x48>
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008f24:	f000 f972 	bl	800920c <HAL_GetTick>
 8008f28:	1b80      	subs	r0, r0, r6
 8008f2a:	42b8      	cmp	r0, r7
 8008f2c:	d9f5      	bls.n	8008f1a <HAL_RCC_ClockConfig+0xc2>
            return HAL_TIMEOUT;
 8008f2e:	2003      	movs	r0, #3
 8008f30:	e7a8      	b.n	8008e84 <HAL_RCC_ClockConfig+0x2c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f32:	fa93 f3a3 	rbit	r3, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008f36:	fab3 f383 	clz	r3, r3
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008f3a:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8008f3c:	e7d3      	b.n	8008ee6 <HAL_RCC_ClockConfig+0x8e>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008f3e:	2a02      	cmp	r2, #2
 8008f40:	d114      	bne.n	8008f6c <HAL_RCC_ClockConfig+0x114>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f42:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008f46:	fa93 f1a3 	rbit	r1, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008f4a:	fab1 f181 	clz	r1, r1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008f4e:	f3c1 1142 	ubfx	r1, r1, #5, #3
 8008f52:	f031 0101 	bics.w	r1, r1, #1
 8008f56:	d103      	bne.n	8008f60 <HAL_RCC_ClockConfig+0x108>
 8008f58:	6828      	ldr	r0, [r5, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008f5e:	e7c4      	b.n	8008eea <HAL_RCC_ClockConfig+0x92>
 8008f60:	fa93 f3a3 	rbit	r3, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008f64:	fab3 f383 	clz	r3, r3
 8008f68:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8008f6a:	e7f6      	b.n	8008f5a <HAL_RCC_ClockConfig+0x102>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f6c:	2302      	movs	r3, #2
 8008f6e:	fa93 f1a3 	rbit	r1, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008f72:	fab1 f181 	clz	r1, r1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008f76:	f3c1 1142 	ubfx	r1, r1, #5, #3
 8008f7a:	f031 0101 	bics.w	r1, r1, #1
 8008f7e:	d102      	bne.n	8008f86 <HAL_RCC_ClockConfig+0x12e>
 8008f80:	6828      	ldr	r0, [r5, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f82:	2302      	movs	r3, #2
 8008f84:	e7b1      	b.n	8008eea <HAL_RCC_ClockConfig+0x92>
 8008f86:	fa93 f3a3 	rbit	r3, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008f8a:	fab3 f383 	clz	r3, r3
 8008f8e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8008f90:	e7f7      	b.n	8008f82 <HAL_RCC_ClockConfig+0x12a>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008f92:	2b02      	cmp	r3, #2
 8008f94:	d110      	bne.n	8008fb8 <HAL_RCC_ClockConfig+0x160>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008f96:	686b      	ldr	r3, [r5, #4]
 8008f98:	f003 030c 	and.w	r3, r3, #12
 8008f9c:	2b08      	cmp	r3, #8
 8008f9e:	f43f af7f 	beq.w	8008ea0 <HAL_RCC_ClockConfig+0x48>
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008fa2:	f000 f933 	bl	800920c <HAL_GetTick>
 8008fa6:	1b80      	subs	r0, r0, r6
 8008fa8:	42b8      	cmp	r0, r7
 8008faa:	d9f4      	bls.n	8008f96 <HAL_RCC_ClockConfig+0x13e>
 8008fac:	e7bf      	b.n	8008f2e <HAL_RCC_ClockConfig+0xd6>
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008fae:	f000 f92d 	bl	800920c <HAL_GetTick>
 8008fb2:	1b80      	subs	r0, r0, r6
 8008fb4:	42b8      	cmp	r0, r7
 8008fb6:	d8ba      	bhi.n	8008f2e <HAL_RCC_ClockConfig+0xd6>
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8008fb8:	686b      	ldr	r3, [r5, #4]
 8008fba:	f013 0f0c 	tst.w	r3, #12
 8008fbe:	d1f6      	bne.n	8008fae <HAL_RCC_ClockConfig+0x156>
 8008fc0:	e76e      	b.n	8008ea0 <HAL_RCC_ClockConfig+0x48>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008fc2:	6802      	ldr	r2, [r0, #0]
 8008fc4:	0791      	lsls	r1, r2, #30
 8008fc6:	d506      	bpl.n	8008fd6 <HAL_RCC_ClockConfig+0x17e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008fc8:	494e      	ldr	r1, [pc, #312]	; (8009104 <HAL_RCC_ClockConfig+0x2ac>)
 8008fca:	6880      	ldr	r0, [r0, #8]
 8008fcc:	684b      	ldr	r3, [r1, #4]
 8008fce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008fd2:	4303      	orrs	r3, r0
 8008fd4:	604b      	str	r3, [r1, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008fd6:	07d2      	lsls	r2, r2, #31
 8008fd8:	d40c      	bmi.n	8008ff4 <HAL_RCC_ClockConfig+0x19c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008fda:	4a49      	ldr	r2, [pc, #292]	; (8009100 <HAL_RCC_ClockConfig+0x2a8>)
 8008fdc:	6813      	ldr	r3, [r2, #0]
 8008fde:	f023 0307 	bic.w	r3, r3, #7
 8008fe2:	4333      	orrs	r3, r6
 8008fe4:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008fe6:	6813      	ldr	r3, [r2, #0]
 8008fe8:	f003 0307 	and.w	r3, r3, #7
 8008fec:	42b3      	cmp	r3, r6
 8008fee:	f47f af48 	bne.w	8008e82 <HAL_RCC_ClockConfig+0x2a>
 8008ff2:	e755      	b.n	8008ea0 <HAL_RCC_ClockConfig+0x48>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008ff4:	6862      	ldr	r2, [r4, #4]
 8008ff6:	4d43      	ldr	r5, [pc, #268]	; (8009104 <HAL_RCC_ClockConfig+0x2ac>)
 8008ff8:	2a01      	cmp	r2, #1
 8008ffa:	d137      	bne.n	800906c <HAL_RCC_ClockConfig+0x214>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ffc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009000:	fa93 f1a3 	rbit	r1, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8009004:	fab1 f181 	clz	r1, r1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009008:	f3c1 1142 	ubfx	r1, r1, #5, #3
 800900c:	f031 0101 	bics.w	r1, r1, #1
 8009010:	d126      	bne.n	8009060 <HAL_RCC_ClockConfig+0x208>
 8009012:	6828      	ldr	r0, [r5, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009014:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009018:	fa93 f3a3 	rbit	r3, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800901c:	fab3 f383 	clz	r3, r3
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009020:	2101      	movs	r1, #1
 8009022:	f003 031f 	and.w	r3, r3, #31
 8009026:	fa01 f303 	lsl.w	r3, r1, r3
 800902a:	4203      	tst	r3, r0
 800902c:	f43f af29 	beq.w	8008e82 <HAL_RCC_ClockConfig+0x2a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009030:	686b      	ldr	r3, [r5, #4]
 8009032:	f023 0303 	bic.w	r3, r3, #3
 8009036:	431a      	orrs	r2, r3
 8009038:	606a      	str	r2, [r5, #4]
      tickstart = HAL_GetTick();
 800903a:	f000 f8e7 	bl	800920c <HAL_GetTick>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800903e:	6863      	ldr	r3, [r4, #4]
 8009040:	2b01      	cmp	r3, #1
      tickstart = HAL_GetTick();
 8009042:	4607      	mov	r7, r0
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009044:	f241 3888 	movw	r8, #5000	; 0x1388
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009048:	d13a      	bne.n	80090c0 <HAL_RCC_ClockConfig+0x268>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800904a:	686b      	ldr	r3, [r5, #4]
 800904c:	f003 030c 	and.w	r3, r3, #12
 8009050:	2b04      	cmp	r3, #4
 8009052:	d0c2      	beq.n	8008fda <HAL_RCC_ClockConfig+0x182>
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009054:	f000 f8da 	bl	800920c <HAL_GetTick>
 8009058:	1bc0      	subs	r0, r0, r7
 800905a:	4540      	cmp	r0, r8
 800905c:	d9f5      	bls.n	800904a <HAL_RCC_ClockConfig+0x1f2>
 800905e:	e766      	b.n	8008f2e <HAL_RCC_ClockConfig+0xd6>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009060:	fa93 f3a3 	rbit	r3, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8009064:	fab3 f383 	clz	r3, r3
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009068:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800906a:	e7d3      	b.n	8009014 <HAL_RCC_ClockConfig+0x1bc>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800906c:	2a02      	cmp	r2, #2
 800906e:	d114      	bne.n	800909a <HAL_RCC_ClockConfig+0x242>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009070:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009074:	fa93 f1a3 	rbit	r1, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8009078:	fab1 f181 	clz	r1, r1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800907c:	f3c1 1142 	ubfx	r1, r1, #5, #3
 8009080:	f031 0101 	bics.w	r1, r1, #1
 8009084:	d103      	bne.n	800908e <HAL_RCC_ClockConfig+0x236>
 8009086:	6828      	ldr	r0, [r5, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009088:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800908c:	e7c4      	b.n	8009018 <HAL_RCC_ClockConfig+0x1c0>
 800908e:	fa93 f3a3 	rbit	r3, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8009092:	fab3 f383 	clz	r3, r3
 8009096:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8009098:	e7f6      	b.n	8009088 <HAL_RCC_ClockConfig+0x230>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800909a:	2302      	movs	r3, #2
 800909c:	fa93 f1a3 	rbit	r1, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80090a0:	fab1 f181 	clz	r1, r1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80090a4:	f3c1 1142 	ubfx	r1, r1, #5, #3
 80090a8:	f031 0101 	bics.w	r1, r1, #1
 80090ac:	d102      	bne.n	80090b4 <HAL_RCC_ClockConfig+0x25c>
 80090ae:	6828      	ldr	r0, [r5, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80090b0:	2302      	movs	r3, #2
 80090b2:	e7b1      	b.n	8009018 <HAL_RCC_ClockConfig+0x1c0>
 80090b4:	fa93 f3a3 	rbit	r3, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80090b8:	fab3 f383 	clz	r3, r3
 80090bc:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80090be:	e7f7      	b.n	80090b0 <HAL_RCC_ClockConfig+0x258>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80090c0:	2b02      	cmp	r3, #2
 80090c2:	d110      	bne.n	80090e6 <HAL_RCC_ClockConfig+0x28e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80090c4:	686b      	ldr	r3, [r5, #4]
 80090c6:	f003 030c 	and.w	r3, r3, #12
 80090ca:	2b08      	cmp	r3, #8
 80090cc:	d085      	beq.n	8008fda <HAL_RCC_ClockConfig+0x182>
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80090ce:	f000 f89d 	bl	800920c <HAL_GetTick>
 80090d2:	1bc0      	subs	r0, r0, r7
 80090d4:	4540      	cmp	r0, r8
 80090d6:	d9f5      	bls.n	80090c4 <HAL_RCC_ClockConfig+0x26c>
 80090d8:	e729      	b.n	8008f2e <HAL_RCC_ClockConfig+0xd6>
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80090da:	f000 f897 	bl	800920c <HAL_GetTick>
 80090de:	1bc0      	subs	r0, r0, r7
 80090e0:	4540      	cmp	r0, r8
 80090e2:	f63f af24 	bhi.w	8008f2e <HAL_RCC_ClockConfig+0xd6>
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80090e6:	686b      	ldr	r3, [r5, #4]
 80090e8:	f013 0f0c 	tst.w	r3, #12
 80090ec:	d1f5      	bne.n	80090da <HAL_RCC_ClockConfig+0x282>
 80090ee:	e774      	b.n	8008fda <HAL_RCC_ClockConfig+0x182>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80090f0:	4904      	ldr	r1, [pc, #16]	; (8009104 <HAL_RCC_ClockConfig+0x2ac>)
 80090f2:	68e0      	ldr	r0, [r4, #12]
 80090f4:	684b      	ldr	r3, [r1, #4]
 80090f6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80090fa:	4303      	orrs	r3, r0
 80090fc:	604b      	str	r3, [r1, #4]
 80090fe:	e6d3      	b.n	8008ea8 <HAL_RCC_ClockConfig+0x50>
 8009100:	40022000 	.word	0x40022000
 8009104:	40021000 	.word	0x40021000

08009108 <HAL_RCC_GetSysClockFreq>:
  *
  * @param  None
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009108:	b510      	push	{r4, lr}
  uint32_t tmpreg = 0, prediv = 0, pllmul = 0, pllclk = 0;
  uint32_t sysclockfreq = 0;

  tmpreg = RCC->CFGR;
 800910a:	4c15      	ldr	r4, [pc, #84]	; (8009160 <HAL_RCC_GetSysClockFreq+0x58>)
 800910c:	6861      	ldr	r1, [r4, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800910e:	f001 030c 	and.w	r3, r1, #12
 8009112:	2b08      	cmp	r3, #8
 8009114:	d121      	bne.n	800915a <HAL_RCC_GetSysClockFreq+0x52>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009116:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 800911a:	fa93 f3a3 	rbit	r3, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800911e:	fab3 f383 	clz	r3, r3
  case RCC_SYSCLKSOURCE_STATUS_HSE:    /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
    break;

  case RCC_SYSCLKSOURCE_STATUS_PLLCLK: /* PLL used as system clock  source */
    pllmul = PLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8009122:	f401 1270 	and.w	r2, r1, #3932160	; 0x3c0000
 8009126:	b2db      	uxtb	r3, r3
 8009128:	fa22 f303 	lsr.w	r3, r2, r3
 800912c:	4a0d      	ldr	r2, [pc, #52]	; (8009164 <HAL_RCC_GetSysClockFreq+0x5c>)
 800912e:	5cd0      	ldrb	r0, [r2, r3]
    prediv = PredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8009130:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009132:	230f      	movs	r3, #15
 8009134:	fa93 f3a3 	rbit	r3, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8009138:	fab3 f383 	clz	r3, r3
 800913c:	f002 020f 	and.w	r2, r2, #15
 8009140:	b2db      	uxtb	r3, r3
 8009142:	fa22 f303 	lsr.w	r3, r2, r3
 8009146:	4a08      	ldr	r2, [pc, #32]	; (8009168 <HAL_RCC_GetSysClockFreq+0x60>)
 8009148:	5cd2      	ldrb	r2, [r2, r3]
    if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800914a:	03cb      	lsls	r3, r1, #15
    {
      /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
      pllclk = (HSE_VALUE/prediv) * pllmul;
 800914c:	bf4a      	itet	mi
 800914e:	4b07      	ldrmi	r3, [pc, #28]	; (800916c <HAL_RCC_GetSysClockFreq+0x64>)
    }
    else
    {
      /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
      pllclk = (HSI_VALUE >> 1) * pllmul;
 8009150:	4b07      	ldrpl	r3, [pc, #28]	; (8009170 <HAL_RCC_GetSysClockFreq+0x68>)
      pllclk = (HSE_VALUE/prediv) * pllmul;
 8009152:	fbb3 f3f2 	udivmi	r3, r3, r2
      pllclk = (HSI_VALUE >> 1) * pllmul;
 8009156:	4358      	muls	r0, r3
  default:
    sysclockfreq = HSI_VALUE;
    break;
  }
  return sysclockfreq;
}
 8009158:	bd10      	pop	{r4, pc}
    sysclockfreq = HSE_VALUE;
 800915a:	4804      	ldr	r0, [pc, #16]	; (800916c <HAL_RCC_GetSysClockFreq+0x64>)
  return sysclockfreq;
 800915c:	e7fc      	b.n	8009158 <HAL_RCC_GetSysClockFreq+0x50>
 800915e:	bf00      	nop
 8009160:	40021000 	.word	0x40021000
 8009164:	0801bfec 	.word	0x0801bfec
 8009168:	0801bffc 	.word	0x0801bffc
 800916c:	007a1200 	.word	0x007a1200
 8009170:	003d0900 	.word	0x003d0900

08009174 <HAL_RCC_GetHCLKFreq>:
  *                       
  * @param  None
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009174:	b508      	push	{r3, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8009176:	f7ff ffc7 	bl	8009108 <HAL_RCC_GetSysClockFreq>
 800917a:	4b09      	ldr	r3, [pc, #36]	; (80091a0 <HAL_RCC_GetHCLKFreq+0x2c>)
 800917c:	685a      	ldr	r2, [r3, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800917e:	23f0      	movs	r3, #240	; 0xf0
 8009180:	fa93 f3a3 	rbit	r3, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8009184:	fab3 f383 	clz	r3, r3
 8009188:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800918c:	b2db      	uxtb	r3, r3
 800918e:	fa22 f303 	lsr.w	r3, r2, r3
 8009192:	4a04      	ldr	r2, [pc, #16]	; (80091a4 <HAL_RCC_GetHCLKFreq+0x30>)
 8009194:	5cd3      	ldrb	r3, [r2, r3]
 8009196:	40d8      	lsrs	r0, r3
 8009198:	4b03      	ldr	r3, [pc, #12]	; (80091a8 <HAL_RCC_GetHCLKFreq+0x34>)
 800919a:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 800919c:	bd08      	pop	{r3, pc}
 800919e:	bf00      	nop
 80091a0:	40021000 	.word	0x40021000
 80091a4:	0801bfdc 	.word	0x0801bfdc
 80091a8:	200009c4 	.word	0x200009c4

080091ac <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80091ac:	4770      	bx	lr

080091ae <HAL_InitTick>:
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)

{
 80091ae:	b507      	push	{r0, r1, r2, lr}
 80091b0:	9001      	str	r0, [sp, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80091b2:	f7ff ffdf 	bl	8009174 <HAL_RCC_GetHCLKFreq>
 80091b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80091ba:	fbb0 f0f3 	udiv	r0, r0, r3
 80091be:	f000 f88b 	bl	80092d8 <HAL_SYSTICK_Config>
 
  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 80091c2:	9901      	ldr	r1, [sp, #4]
 80091c4:	2200      	movs	r2, #0
 80091c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80091ca:	f000 f845 	bl	8009258 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 80091ce:	2000      	movs	r0, #0
 80091d0:	b003      	add	sp, #12
 80091d2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080091d8 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80091d8:	4a07      	ldr	r2, [pc, #28]	; (80091f8 <HAL_Init+0x20>)
{
 80091da:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80091dc:	6813      	ldr	r3, [r2, #0]
 80091de:	f043 0310 	orr.w	r3, r3, #16
 80091e2:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80091e4:	2003      	movs	r0, #3
 80091e6:	f000 f825 	bl	8009234 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80091ea:	200f      	movs	r0, #15
 80091ec:	f7ff ffdf 	bl	80091ae <HAL_InitTick>
  HAL_MspInit();
 80091f0:	f7ff ffdc 	bl	80091ac <HAL_MspInit>
}
 80091f4:	2000      	movs	r0, #0
 80091f6:	bd08      	pop	{r3, pc}
 80091f8:	40022000 	.word	0x40022000

080091fc <HAL_IncTick>:
  * @param  None
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80091fc:	4a02      	ldr	r2, [pc, #8]	; (8009208 <HAL_IncTick+0xc>)
 80091fe:	6813      	ldr	r3, [r2, #0]
 8009200:	3301      	adds	r3, #1
 8009202:	6013      	str	r3, [r2, #0]
}
 8009204:	4770      	bx	lr
 8009206:	bf00      	nop
 8009208:	20001088 	.word	0x20001088

0800920c <HAL_GetTick>:
  * @param  None
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 800920c:	4b01      	ldr	r3, [pc, #4]	; (8009214 <HAL_GetTick+0x8>)
 800920e:	6818      	ldr	r0, [r3, #0]
}
 8009210:	4770      	bx	lr
 8009212:	bf00      	nop
 8009214:	20001088 	.word	0x20001088

08009218 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8009218:	b513      	push	{r0, r1, r4, lr}
 800921a:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 800921c:	f7ff fff6 	bl	800920c <HAL_GetTick>
 8009220:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8009222:	f7ff fff3 	bl	800920c <HAL_GetTick>
 8009226:	9a01      	ldr	r2, [sp, #4]
 8009228:	1b03      	subs	r3, r0, r4
 800922a:	4293      	cmp	r3, r2
 800922c:	d3f9      	bcc.n	8009222 <HAL_Delay+0xa>
  {
  }
}
 800922e:	b002      	add	sp, #8
 8009230:	bd10      	pop	{r4, pc}
	...

08009234 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009234:	4907      	ldr	r1, [pc, #28]	; (8009254 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8009236:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 8009238:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                 |
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
 800923c:	0203      	lsls	r3, r0, #8
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 800923e:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
 8009240:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 8009244:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
 8009246:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                 |
 8009248:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800924c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8009250:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8009252:	4770      	bx	lr
 8009254:	e000ed00 	.word	0xe000ed00

08009258 <HAL_NVIC_SetPriority>:

    \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos);   /* read priority grouping field */
 8009258:	4b17      	ldr	r3, [pc, #92]	; (80092b8 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800925a:	b570      	push	{r4, r5, r6, lr}
 800925c:	68dd      	ldr	r5, [r3, #12]
 800925e:	f3c5 2502 	ubfx	r5, r5, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);          /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
 8009262:	f1c5 0307 	rsb	r3, r5, #7
 8009266:	2b04      	cmp	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;
 8009268:	f105 0404 	add.w	r4, r5, #4
  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
 800926c:	bf28      	it	cs
 800926e:	2304      	movcs	r3, #4

  return (
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
 8009270:	2601      	movs	r6, #1
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;
 8009272:	2c06      	cmp	r4, #6
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
 8009274:	fa06 f403 	lsl.w	r4, r6, r3
 8009278:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;
 800927c:	bf8c      	ite	hi
 800927e:	3d03      	subhi	r5, #3
 8009280:	2500      	movls	r5, #0
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
 8009282:	4021      	ands	r1, r4
 8009284:	40a9      	lsls	r1, r5
           ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
 8009286:	fa06 f505 	lsl.w	r5, r6, r5
 800928a:	3d01      	subs	r5, #1
 800928c:	ea05 0302 	and.w	r3, r5, r2
  if(IRQn < 0) {
 8009290:	2800      	cmp	r0, #0
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
 8009292:	ea43 0301 	orr.w	r3, r3, r1
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8009296:	bfac      	ite	ge
 8009298:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 800929c:	4a07      	ldrlt	r2, [pc, #28]	; (80092bc <HAL_NVIC_SetPriority+0x64>)
 800929e:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80092a2:	bfb8      	it	lt
 80092a4:	f000 000f 	andlt.w	r0, r0, #15
 80092a8:	b2db      	uxtb	r3, r3
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 80092aa:	bfaa      	itet	ge
 80092ac:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80092b0:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 80092b2:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80092b6:	bd70      	pop	{r4, r5, r6, pc}
 80092b8:	e000ed00 	.word	0xe000ed00
 80092bc:	e000ed14 	.word	0xe000ed14

080092c0 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 80092c0:	0942      	lsrs	r2, r0, #5
 80092c2:	2301      	movs	r3, #1
 80092c4:	f000 001f 	and.w	r0, r0, #31
 80092c8:	fa03 f000 	lsl.w	r0, r3, r0
 80092cc:	4b01      	ldr	r3, [pc, #4]	; (80092d4 <HAL_NVIC_EnableIRQ+0x14>)
 80092ce:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80092d2:	4770      	bx	lr
 80092d4:	e000e100 	.word	0xe000e100

080092d8 <HAL_SYSTICK_Config>:
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 80092d8:	3801      	subs	r0, #1
 80092da:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80092de:	d20b      	bcs.n	80092f8 <HAL_SYSTICK_Config+0x20>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 80092e0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80092e4:	4a05      	ldr	r2, [pc, #20]	; (80092fc <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 80092e6:	6158      	str	r0, [r3, #20]
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80092e8:	21f0      	movs	r1, #240	; 0xf0
 80092ea:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 80092ee:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80092f0:	2207      	movs	r2, #7
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 80092f2:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80092f4:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 80092f6:	4770      	bx	lr
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 80092f8:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80092fa:	4770      	bx	lr
 80092fc:	e000ed00 	.word	0xe000ed00

08009300 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8009300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GET_GPIO_SOURCE(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009304:	4a5d      	ldr	r2, [pc, #372]	; (800947c <HAL_GPIO_Init+0x17c>)
        __SYSCFG_CLK_ENABLE();
 8009306:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8009484 <HAL_GPIO_Init+0x184>
  for (position = 0; position < GPIO_NUMBER; position++)
 800930a:	2300      	movs	r3, #0
    ioposition = ((uint32_t)0x01) << position;
 800930c:	f04f 0901 	mov.w	r9, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009310:	680c      	ldr	r4, [r1, #0]
    ioposition = ((uint32_t)0x01) << position;
 8009312:	fa09 fa03 	lsl.w	sl, r9, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009316:	ea0a 0504 	and.w	r5, sl, r4
    if (iocurrent == ioposition)
 800931a:	ea3a 0404 	bics.w	r4, sl, r4
 800931e:	f040 809c 	bne.w	800945a <HAL_GPIO_Init+0x15a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8009322:	684c      	ldr	r4, [r1, #4]
 8009324:	f024 0e10 	bic.w	lr, r4, #16
 8009328:	f1be 0f02 	cmp.w	lr, #2
 800932c:	d114      	bne.n	8009358 <HAL_GPIO_Init+0x58>
        temp = GPIOx->AFR[position >> 3];
 800932e:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 8009332:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8009336:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3];
 800933a:	f8dc 6020 	ldr.w	r6, [ip, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800933e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8009342:	270f      	movs	r7, #15
 8009344:	fa07 f70b 	lsl.w	r7, r7, fp
 8009348:	ea26 0707 	bic.w	r7, r6, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800934c:	690e      	ldr	r6, [r1, #16]
 800934e:	fa06 f60b 	lsl.w	r6, r6, fp
 8009352:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3] = temp;
 8009354:	f8cc 6020 	str.w	r6, [ip, #32]
      temp = GPIOx->MODER;
 8009358:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800935c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8009360:	2703      	movs	r7, #3
 8009362:	fa07 f70c 	lsl.w	r7, r7, ip
 8009366:	ea2b 0b07 	bic.w	fp, fp, r7
 800936a:	43fe      	mvns	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800936c:	f004 0703 	and.w	r7, r4, #3
 8009370:	fa07 f70c 	lsl.w	r7, r7, ip
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009374:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8009378:	ea47 070b 	orr.w	r7, r7, fp
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800937c:	f1be 0f01 	cmp.w	lr, #1
      GPIOx->MODER = temp;
 8009380:	6007      	str	r7, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009382:	d811      	bhi.n	80093a8 <HAL_GPIO_Init+0xa8>
        temp = GPIOx->OSPEEDR; 
 8009384:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8009386:	ea06 0e07 	and.w	lr, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2));
 800938a:	68cf      	ldr	r7, [r1, #12]
 800938c:	fa07 f70c 	lsl.w	r7, r7, ip
 8009390:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8009394:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8009396:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009398:	ea27 0a0a 	bic.w	sl, r7, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800939c:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80093a0:	409f      	lsls	r7, r3
 80093a2:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OTYPER = temp;
 80093a6:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80093a8:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80093aa:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80093ac:	688e      	ldr	r6, [r1, #8]
 80093ae:	fa06 f60c 	lsl.w	r6, r6, ip
 80093b2:	433e      	orrs	r6, r7
      GPIOx->PUPDR = temp;
 80093b4:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80093b6:	00e6      	lsls	r6, r4, #3
 80093b8:	d54f      	bpl.n	800945a <HAL_GPIO_Init+0x15a>
        __SYSCFG_CLK_ENABLE();
 80093ba:	f8d8 6018 	ldr.w	r6, [r8, #24]
 80093be:	f023 0703 	bic.w	r7, r3, #3
 80093c2:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80093c6:	f046 0601 	orr.w	r6, r6, #1
 80093ca:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 80093ce:	f8c8 6018 	str.w	r6, [r8, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80093d2:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2];
 80093d6:	68be      	ldr	r6, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80093d8:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80093dc:	f04f 0c0f 	mov.w	ip, #15
 80093e0:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= ((uint32_t)(GET_GPIO_SOURCE(GPIOx)) << (4 * (position & 0x03)));
 80093e4:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80093e8:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= ((uint32_t)(GET_GPIO_SOURCE(GPIOx)) << (4 * (position & 0x03)));
 80093ec:	d03b      	beq.n	8009466 <HAL_GPIO_Init+0x166>
 80093ee:	4e24      	ldr	r6, [pc, #144]	; (8009480 <HAL_GPIO_Init+0x180>)
 80093f0:	42b0      	cmp	r0, r6
 80093f2:	d03a      	beq.n	800946a <HAL_GPIO_Init+0x16a>
 80093f4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80093f8:	42b0      	cmp	r0, r6
 80093fa:	d038      	beq.n	800946e <HAL_GPIO_Init+0x16e>
 80093fc:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8009400:	42b0      	cmp	r0, r6
 8009402:	d036      	beq.n	8009472 <HAL_GPIO_Init+0x172>
 8009404:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8009408:	42b0      	cmp	r0, r6
 800940a:	d034      	beq.n	8009476 <HAL_GPIO_Init+0x176>
 800940c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8009410:	42b0      	cmp	r0, r6
 8009412:	bf0c      	ite	eq
 8009414:	2605      	moveq	r6, #5
 8009416:	2606      	movne	r6, #6
 8009418:	fa06 f60e 	lsl.w	r6, r6, lr
 800941c:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 8009420:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8009422:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8009424:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009426:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 800942a:	bf0c      	ite	eq
 800942c:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 800942e:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 8009430:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 8009432:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009434:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8009438:	bf0c      	ite	eq
 800943a:	403e      	andeq	r6, r7
        { 
          temp |= iocurrent;
 800943c:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 800943e:	6056      	str	r6, [r2, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8009440:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009442:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8009446:	bf0c      	ite	eq
 8009448:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 800944a:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 800944c:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 800944e:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009450:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8009452:	bf54      	ite	pl
 8009454:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 8009456:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 8009458:	60d6      	str	r6, [r2, #12]
  for (position = 0; position < GPIO_NUMBER; position++)
 800945a:	3301      	adds	r3, #1
 800945c:	2b10      	cmp	r3, #16
 800945e:	f47f af57 	bne.w	8009310 <HAL_GPIO_Init+0x10>
      }
    }
  } 
}
 8009462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GET_GPIO_SOURCE(GPIOx)) << (4 * (position & 0x03)));
 8009466:	2600      	movs	r6, #0
 8009468:	e7d6      	b.n	8009418 <HAL_GPIO_Init+0x118>
 800946a:	2601      	movs	r6, #1
 800946c:	e7d4      	b.n	8009418 <HAL_GPIO_Init+0x118>
 800946e:	2602      	movs	r6, #2
 8009470:	e7d2      	b.n	8009418 <HAL_GPIO_Init+0x118>
 8009472:	2603      	movs	r6, #3
 8009474:	e7d0      	b.n	8009418 <HAL_GPIO_Init+0x118>
 8009476:	2604      	movs	r6, #4
 8009478:	e7ce      	b.n	8009418 <HAL_GPIO_Init+0x118>
 800947a:	bf00      	nop
 800947c:	40010400 	.word	0x40010400
 8009480:	48000400 	.word	0x48000400
 8009484:	40021000 	.word	0x40021000

08009488 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009488:	6903      	ldr	r3, [r0, #16]
 800948a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
  }
 800948c:	bf14      	ite	ne
 800948e:	2001      	movne	r0, #1
 8009490:	2000      	moveq	r0, #0
 8009492:	4770      	bx	lr

08009494 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009494:	b10a      	cbz	r2, 800949a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRRL = GPIO_Pin;
 8009496:	8301      	strh	r1, [r0, #24]
 8009498:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 800949a:	8341      	strh	r1, [r0, #26]
  }
}
 800949c:	4770      	bx	lr

0800949e <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 800949e:	6943      	ldr	r3, [r0, #20]
 80094a0:	4059      	eors	r1, r3
 80094a2:	6141      	str	r1, [r0, #20]
}
 80094a4:	4770      	bx	lr

080094a6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{ 
 80094a6:	b538      	push	{r3, r4, r5, lr}
  uint32_t i = 0;

  uint32_t wInterrupt_Mask = 0;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 80094a8:	4604      	mov	r4, r0
 80094aa:	2800      	cmp	r0, #0
 80094ac:	d042      	beq.n	8009534 <HAL_PCD_Init+0x8e>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  hpcd->State = PCD_BUSY;
 80094ae:	2302      	movs	r3, #2
 80094b0:	f880 3141 	strb.w	r3, [r0, #321]	; 0x141
  
  /* Init the low level hardware : GPIO, CLOCK, NVIC... */
  HAL_PCD_MspInit(hpcd);
 80094b4:	f001 ffde 	bl	800b474 <HAL_PCD_MspInit>

 /* Init endpoints structures */
 for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 80094b8:	2100      	movs	r1, #0
 80094ba:	6860      	ldr	r0, [r4, #4]
 80094bc:	f104 0328 	add.w	r3, r4, #40	; 0x28
 80094c0:	460a      	mov	r2, r1
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1;
 80094c2:	2501      	movs	r5, #1
 for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 80094c4:	4288      	cmp	r0, r1
 80094c6:	f103 031c 	add.w	r3, r3, #28
 80094ca:	d11b      	bne.n	8009504 <HAL_PCD_Init+0x5e>
   hpcd->IN_ep[i].maxpacket =  0;
   hpcd->IN_ep[i].xfer_buff = 0;
   hpcd->IN_ep[i].xfer_len = 0;
 }
 
 for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 80094cc:	2000      	movs	r0, #0
 80094ce:	f104 02b4 	add.w	r2, r4, #180	; 0xb4
 80094d2:	4603      	mov	r3, r0
 80094d4:	4281      	cmp	r1, r0
 80094d6:	f102 021c 	add.w	r2, r2, #28
 80094da:	d11f      	bne.n	800951c <HAL_PCD_Init+0x76>
   hpcd->OUT_ep[i].xfer_len = 0;
 }
  
 /* Init Device */
 /*CNTR_FRES = 1*/
 hpcd->Instance->CNTR = USB_CNTR_FRES;
 80094dc:	6822      	ldr	r2, [r4, #0]
 80094de:	2101      	movs	r1, #1
 80094e0:	f8a2 1040 	strh.w	r1, [r2, #64]	; 0x40
  /*set wInterrupt_Mask global variable*/
  wInterrupt_Mask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
    | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /*Set interrupt mask*/
  hpcd->Instance->CNTR = wInterrupt_Mask;
 80094e4:	f44f 413d 	mov.w	r1, #48384	; 0xbd00
 hpcd->Instance->CNTR = 0;
 80094e8:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
  
  hpcd->USB_Address = 0;
  hpcd->State= PCD_READY;

 return HAL_OK;
 80094ec:	2000      	movs	r0, #0
 hpcd->Instance->ISTR = 0;
 80094ee:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
 hpcd->Instance->BTABLE = BTABLE_ADDRESS;
 80094f2:	f8a2 3050 	strh.w	r3, [r2, #80]	; 0x50
  hpcd->Instance->CNTR = wInterrupt_Mask;
 80094f6:	f8a2 1040 	strh.w	r1, [r2, #64]	; 0x40
  hpcd->USB_Address = 0;
 80094fa:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  hpcd->State= PCD_READY;
 80094fe:	f884 3141 	strb.w	r3, [r4, #321]	; 0x141
}
 8009502:	bd38      	pop	{r3, r4, r5, pc}
   hpcd->IN_ep[i].num = i;
 8009504:	f803 1c1c 	strb.w	r1, [r3, #-28]
   hpcd->IN_ep[i].xfer_buff = 0;
 8009508:	e943 2204 	strd	r2, r2, [r3, #-16]
   hpcd->IN_ep[i].is_in = 1;
 800950c:	f803 5c1b 	strb.w	r5, [r3, #-27]
   hpcd->IN_ep[i].type = PCD_EP_TYPE_CTRL;
 8009510:	f803 2c19 	strb.w	r2, [r3, #-25]
   hpcd->IN_ep[i].xfer_len = 0;
 8009514:	f843 2c08 	str.w	r2, [r3, #-8]
 for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 8009518:	3101      	adds	r1, #1
 800951a:	e7d3      	b.n	80094c4 <HAL_PCD_Init+0x1e>
   hpcd->OUT_ep[i].num = i;
 800951c:	f802 0c1c 	strb.w	r0, [r2, #-28]
   hpcd->OUT_ep[i].xfer_buff = 0;
 8009520:	e942 3304 	strd	r3, r3, [r2, #-16]
   hpcd->OUT_ep[i].is_in = 0;
 8009524:	f802 3c1b 	strb.w	r3, [r2, #-27]
   hpcd->OUT_ep[i].type = PCD_EP_TYPE_CTRL;
 8009528:	f802 3c19 	strb.w	r3, [r2, #-25]
   hpcd->OUT_ep[i].xfer_len = 0;
 800952c:	f842 3c08 	str.w	r3, [r2, #-8]
 for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 8009530:	3001      	adds	r0, #1
 8009532:	e7cf      	b.n	80094d4 <HAL_PCD_Init+0x2e>
    return HAL_ERROR;
 8009534:	2001      	movs	r0, #1
 8009536:	e7e4      	b.n	8009502 <HAL_PCD_Init+0x5c>

08009538 <HAL_PCD_Start>:
  * @brief  Start The USB OTG Device.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{ 
 8009538:	b508      	push	{r3, lr}
  /*  DP Pull-Down is external */
  HAL_PCDEx_SetConnectionState (hpcd, 1);
 800953a:	2101      	movs	r1, #1
 800953c:	f000 fe87 	bl	800a24e <HAL_PCDEx_SetConnectionState>
  
  return HAL_OK;
}
 8009540:	2000      	movs	r0, #0
 8009542:	bd08      	pop	{r3, pc}

08009544 <HAL_PCD_SetAddress>:
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
   __HAL_LOCK(hpcd); 
 8009544:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
 8009548:	2b01      	cmp	r3, #1
 800954a:	d00f      	beq.n	800956c <HAL_PCD_SetAddress+0x28>
 800954c:	2301      	movs	r3, #1
 800954e:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140

   if(address == 0) 
 8009552:	b941      	cbnz	r1, 8009566 <HAL_PCD_SetAddress+0x22>
   {
     /* set device address and enable function */
     hpcd->Instance->DADDR = USB_DADDR_EF;
 8009554:	6803      	ldr	r3, [r0, #0]
 8009556:	2280      	movs	r2, #128	; 0x80
 8009558:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
   else /* USB Address will be applied later */
   {
     hpcd->USB_Address = address;
   }

  __HAL_UNLOCK(hpcd);   
 800955c:	2300      	movs	r3, #0
 800955e:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
  return HAL_OK;
 8009562:	4618      	mov	r0, r3
 8009564:	4770      	bx	lr
     hpcd->USB_Address = address;
 8009566:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 800956a:	e7f7      	b.n	800955c <HAL_PCD_SetAddress+0x18>
   __HAL_LOCK(hpcd); 
 800956c:	2002      	movs	r0, #2
}
 800956e:	4770      	bx	lr

08009570 <HAL_PCD_EP_Open>:
  * @param  ep_mps: endpoint max packert size
  * @param  ep_type: endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8009570:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep;
  
  if ((ep_addr & 0x80) == 0x80)
 8009572:	b24d      	sxtb	r5, r1
 8009574:	241c      	movs	r4, #28
 8009576:	2d00      	cmp	r5, #0
 8009578:	f001 067f 	and.w	r6, r1, #127	; 0x7f
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800957c:	bfb3      	iteet	lt
 800957e:	fb04 0406 	mlalt	r4, r4, r6, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8009582:	fb04 0101 	mlage	r1, r4, r1, r0
 8009586:	f101 04b4 	addge.w	r4, r1, #180	; 0xb4
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800958a:	3428      	addlt	r4, #40	; 0x28
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
 800958c:	0fe9      	lsrs	r1, r5, #31
  ep->num   = ep_addr & 0x7F;
 800958e:	7026      	strb	r6, [r4, #0]
  ep->is_in = (0x80 & ep_addr) != 0;
 8009590:	7061      	strb	r1, [r4, #1]
  ep->maxpacket = ep_mps;
 8009592:	60e2      	str	r2, [r4, #12]
  ep->type = ep_type;
 8009594:	70e3      	strb	r3, [r4, #3]
  
  __HAL_LOCK(hpcd); 
 8009596:	f890 2140 	ldrb.w	r2, [r0, #320]	; 0x140
 800959a:	2a01      	cmp	r2, #1
 800959c:	f000 8156 	beq.w	800984c <HAL_PCD_EP_Open+0x2dc>
 80095a0:	2201      	movs	r2, #1
 80095a2:	f880 2140 	strb.w	r2, [r0, #320]	; 0x140

/* initialize Endpoint */
  switch (ep->type)
  {
  case PCD_EP_TYPE_CTRL:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_CONTROL);
 80095a6:	b231      	sxth	r1, r6
 80095a8:	6802      	ldr	r2, [r0, #0]
  switch (ep->type)
 80095aa:	2b03      	cmp	r3, #3
 80095ac:	d80f      	bhi.n	80095ce <HAL_PCD_EP_Open+0x5e>
 80095ae:	e8df f003 	tbb	[pc, r3]
 80095b2:	6502      	.short	0x6502
 80095b4:	5a51      	.short	0x5a51
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_CONTROL);
 80095b6:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80095ba:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80095be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095c2:	041b      	lsls	r3, r3, #16
 80095c4:	0c1b      	lsrs	r3, r3, #16
 80095c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    break;
  case PCD_EP_TYPE_INTR:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_INTERRUPT);
    break;
  case PCD_EP_TYPE_ISOC:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_ISOCHRONOUS);
 80095ca:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
    break;
  } 
  
  PCD_SET_EP_ADDRESS(hpcd->Instance, ep->num, ep->num);
 80095ce:	f832 7021 	ldrh.w	r7, [r2, r1, lsl #2]
 80095d2:	f640 730f 	movw	r3, #3855	; 0xf0f
 80095d6:	401f      	ands	r7, r3
 80095d8:	433e      	orrs	r6, r7
 80095da:	f248 0c80 	movw	ip, #32896	; 0x8080
 80095de:	ea4c 0606 	orr.w	r6, ip, r6
 80095e2:	f822 6021 	strh.w	r6, [r2, r1, lsl #2]
  
  if (ep->doublebuffer == 0) 
 80095e6:	7aa6      	ldrb	r6, [r4, #10]
  {
    if (ep->is_in)
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 80095e8:	ea4f 0ec1 	mov.w	lr, r1, lsl #3
 80095ec:	f502 6780 	add.w	r7, r2, #1024	; 0x400
  if (ep->doublebuffer == 0) 
 80095f0:	2e00      	cmp	r6, #0
 80095f2:	f040 808e 	bne.w	8009712 <HAL_PCD_EP_Open+0x1a2>
      PCD_SET_EP_TX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 80095f6:	88a6      	ldrh	r6, [r4, #4]
    if (ep->is_in)
 80095f8:	2d00      	cmp	r5, #0
      PCD_SET_EP_TX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 80095fa:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80095fe:	ea4f 0646 	mov.w	r6, r6, lsl #1
    if (ep->is_in)
 8009602:	da46      	bge.n	8009692 <HAL_PCD_EP_Open+0x122>
      PCD_SET_EP_TX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 8009604:	f8b2 5050 	ldrh.w	r5, [r2, #80]	; 0x50
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 8009608:	f832 4021 	ldrh.w	r4, [r2, r1, lsl #2]
      PCD_SET_EP_TX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 800960c:	fa1e fe85 	uxtah	lr, lr, r5
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 8009610:	0664      	lsls	r4, r4, #25
      PCD_SET_EP_TX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 8009612:	f847 601e 	str.w	r6, [r7, lr, lsl #1]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 8009616:	d508      	bpl.n	800962a <HAL_PCD_EP_Open+0xba>
 8009618:	f832 4021 	ldrh.w	r4, [r2, r1, lsl #2]
 800961c:	4023      	ands	r3, r4
 800961e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009622:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009626:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
      /* Configure NAK status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK); 
 800962a:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800962e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009632:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009636:	041b      	lsls	r3, r3, #16
 8009638:	0c1b      	lsrs	r3, r3, #16
 800963a:	f083 0320 	eor.w	r3, r3, #32
      PCD_SET_EP_RX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, ep->maxpacket);
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
 800963e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009642:	f043 0380 	orr.w	r3, r3, #128	; 0x80
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
      PCD_RX_DTOG(hpcd->Instance, ep->num);
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS);
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS);
 8009646:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
    }
  } 
  
  __HAL_UNLOCK(hpcd);   
 800964a:	2300      	movs	r3, #0
 800964c:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
  return ret;
 8009650:	4618      	mov	r0, r3
}
 8009652:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_BULK);
 8009654:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8009658:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800965c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009660:	041b      	lsls	r3, r3, #16
 8009662:	0c1b      	lsrs	r3, r3, #16
 8009664:	e7b1      	b.n	80095ca <HAL_PCD_EP_Open+0x5a>
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_INTERRUPT);
 8009666:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800966a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800966e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009672:	041b      	lsls	r3, r3, #16
 8009674:	0c1b      	lsrs	r3, r3, #16
 8009676:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800967a:	e7a6      	b.n	80095ca <HAL_PCD_EP_Open+0x5a>
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_ISOCHRONOUS);
 800967c:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8009680:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8009684:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009688:	041b      	lsls	r3, r3, #16
 800968a:	0c1b      	lsrs	r3, r3, #16
 800968c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009690:	e79b      	b.n	80095ca <HAL_PCD_EP_Open+0x5a>
      PCD_SET_EP_RX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 8009692:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
      PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, ep->maxpacket);
 8009696:	f8b2 5050 	ldrh.w	r5, [r2, #80]	; 0x50
      PCD_SET_EP_RX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 800969a:	fa1e f383 	uxtah	r3, lr, r3
 800969e:	3304      	adds	r3, #4
      PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, ep->maxpacket);
 80096a0:	fa1e f585 	uxtah	r5, lr, r5
      PCD_SET_EP_RX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 80096a4:	f847 6013 	str.w	r6, [r7, r3, lsl #1]
      PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, ep->maxpacket);
 80096a8:	68e4      	ldr	r4, [r4, #12]
 80096aa:	2c3e      	cmp	r4, #62	; 0x3e
 80096ac:	f105 0506 	add.w	r5, r5, #6
 80096b0:	d927      	bls.n	8009702 <HAL_PCD_EP_Open+0x192>
 80096b2:	f3c4 164f 	ubfx	r6, r4, #5, #16
 80096b6:	06e3      	lsls	r3, r4, #27
 80096b8:	bf04      	itt	eq
 80096ba:	f106 33ff 	addeq.w	r3, r6, #4294967295	; 0xffffffff
 80096be:	b29e      	uxtheq	r6, r3
 80096c0:	4b63      	ldr	r3, [pc, #396]	; (8009850 <HAL_PCD_EP_Open+0x2e0>)
 80096c2:	ea43 2386 	orr.w	r3, r3, r6, lsl #10
 80096c6:	b29b      	uxth	r3, r3
 80096c8:	f847 3015 	str.w	r3, [r7, r5, lsl #1]
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 80096cc:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80096d0:	045f      	lsls	r7, r3, #17
 80096d2:	d50b      	bpl.n	80096ec <HAL_PCD_EP_Open+0x17c>
 80096d4:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80096d8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80096dc:	051b      	lsls	r3, r3, #20
 80096de:	0d1b      	lsrs	r3, r3, #20
 80096e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80096e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096e8:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
 80096ec:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80096f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80096f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096f8:	041b      	lsls	r3, r3, #16
 80096fa:	0c1b      	lsrs	r3, r3, #16
 80096fc:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8009700:	e79d      	b.n	800963e <HAL_PCD_EP_Open+0xce>
      PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, ep->maxpacket);
 8009702:	f3c4 034f 	ubfx	r3, r4, #1, #16
 8009706:	07e4      	lsls	r4, r4, #31
 8009708:	bf44      	itt	mi
 800970a:	3301      	addmi	r3, #1
 800970c:	b29b      	uxthmi	r3, r3
 800970e:	029b      	lsls	r3, r3, #10
 8009710:	e7d9      	b.n	80096c6 <HAL_PCD_EP_Open+0x156>
    PCD_SET_EP_DBUF(hpcd->Instance, ep->num);
 8009712:	f832 6021 	ldrh.w	r6, [r2, r1, lsl #2]
 8009716:	b2b6      	uxth	r6, r6
 8009718:	f446 7680 	orr.w	r6, r6, #256	; 0x100
 800971c:	401e      	ands	r6, r3
 800971e:	ea4c 0606 	orr.w	r6, ip, r6
 8009722:	f822 6021 	strh.w	r6, [r2, r1, lsl #2]
    PCD_SET_EP_DBUF_ADDR(hpcd->Instance, ep->num,ep->pmaaddr0, ep->pmaaddr1);
 8009726:	f8b2 c050 	ldrh.w	ip, [r2, #80]	; 0x50
 800972a:	88e6      	ldrh	r6, [r4, #6]
 800972c:	8924      	ldrh	r4, [r4, #8]
 800972e:	fa1e fc8c 	uxtah	ip, lr, ip
 8009732:	0876      	lsrs	r6, r6, #1
 8009734:	0076      	lsls	r6, r6, #1
 8009736:	f847 601c 	str.w	r6, [r7, ip, lsl #1]
 800973a:	f8b2 6050 	ldrh.w	r6, [r2, #80]	; 0x50
 800973e:	fa1e fe86 	uxtah	lr, lr, r6
 8009742:	f10e 0e04 	add.w	lr, lr, #4
 8009746:	0864      	lsrs	r4, r4, #1
 8009748:	0064      	lsls	r4, r4, #1
    if (ep->is_in==0)
 800974a:	2d00      	cmp	r5, #0
    PCD_SET_EP_DBUF_ADDR(hpcd->Instance, ep->num,ep->pmaaddr0, ep->pmaaddr1);
 800974c:	f847 401e 	str.w	r4, [r7, lr, lsl #1]
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 8009750:	f832 4021 	ldrh.w	r4, [r2, r1, lsl #2]
    if (ep->is_in==0)
 8009754:	db3f      	blt.n	80097d6 <HAL_PCD_EP_Open+0x266>
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 8009756:	0466      	lsls	r6, r4, #17
 8009758:	d508      	bpl.n	800976c <HAL_PCD_EP_Open+0x1fc>
 800975a:	f832 4021 	ldrh.w	r4, [r2, r1, lsl #2]
 800975e:	4023      	ands	r3, r4
 8009760:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009764:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009768:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 800976c:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8009770:	065d      	lsls	r5, r3, #25
 8009772:	d50b      	bpl.n	800978c <HAL_PCD_EP_Open+0x21c>
 8009774:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8009778:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800977c:	051b      	lsls	r3, r3, #20
 800977e:	0d1b      	lsrs	r3, r3, #20
 8009780:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009784:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009788:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
      PCD_TX_DTOG(hpcd->Instance, ep->num);
 800978c:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8009790:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009794:	051b      	lsls	r3, r3, #20
 8009796:	0d1b      	lsrs	r3, r3, #20
 8009798:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800979c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80097a0:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
 80097a4:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80097a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80097ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097b0:	041b      	lsls	r3, r3, #16
 80097b2:	0c1b      	lsrs	r3, r3, #16
 80097b4:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80097b8:	f248 0480 	movw	r4, #32896	; 0x8080
 80097bc:	4323      	orrs	r3, r4
 80097be:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS);
 80097c2:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80097c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80097ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS);
 80097ce:	041b      	lsls	r3, r3, #16
 80097d0:	0c1b      	lsrs	r3, r3, #16
 80097d2:	4323      	orrs	r3, r4
 80097d4:	e737      	b.n	8009646 <HAL_PCD_EP_Open+0xd6>
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 80097d6:	0464      	lsls	r4, r4, #17
 80097d8:	d508      	bpl.n	80097ec <HAL_PCD_EP_Open+0x27c>
 80097da:	f832 4021 	ldrh.w	r4, [r2, r1, lsl #2]
 80097de:	4023      	ands	r3, r4
 80097e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80097e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097e8:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 80097ec:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80097f0:	065b      	lsls	r3, r3, #25
 80097f2:	d50b      	bpl.n	800980c <HAL_PCD_EP_Open+0x29c>
 80097f4:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80097f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80097fc:	051b      	lsls	r3, r3, #20
 80097fe:	0d1b      	lsrs	r3, r3, #20
 8009800:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009804:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009808:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
      PCD_RX_DTOG(hpcd->Instance, ep->num);
 800980c:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8009810:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009814:	051b      	lsls	r3, r3, #20
 8009816:	0d1b      	lsrs	r3, r3, #20
 8009818:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800981c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009820:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS);
 8009824:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8009828:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800982c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009830:	041b      	lsls	r3, r3, #16
 8009832:	0c1b      	lsrs	r3, r3, #16
 8009834:	f248 0480 	movw	r4, #32896	; 0x8080
 8009838:	4323      	orrs	r3, r4
 800983a:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS);
 800983e:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8009842:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009846:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800984a:	e7c0      	b.n	80097ce <HAL_PCD_EP_Open+0x25e>
  __HAL_LOCK(hpcd); 
 800984c:	2002      	movs	r0, #2
 800984e:	e700      	b.n	8009652 <HAL_PCD_EP_Open+0xe2>
 8009850:	ffff8000 	.word	0xffff8000

08009854 <HAL_PCD_EP_Close>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
 8009854:	b510      	push	{r4, lr}
  PCD_EPTypeDef *ep;
  
  if ((ep_addr & 0x80) == 0x80)
 8009856:	b24c      	sxtb	r4, r1
 8009858:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 800985c:	2c00      	cmp	r4, #0
 800985e:	f04f 021c 	mov.w	r2, #28
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8009862:	bfb5      	itete	lt
 8009864:	fb02 0103 	mlalt	r1, r2, r3, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8009868:	fb02 0101 	mlage	r1, r2, r1, r0
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800986c:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 800986e:	31b4      	addge	r1, #180	; 0xb4
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
 8009870:	0fe2      	lsrs	r2, r4, #31
  ep->num   = ep_addr & 0x7F;
 8009872:	700b      	strb	r3, [r1, #0]
  ep->is_in = (0x80 & ep_addr) != 0;
 8009874:	704a      	strb	r2, [r1, #1]
  
  __HAL_LOCK(hpcd); 
 8009876:	f890 2140 	ldrb.w	r2, [r0, #320]	; 0x140
 800987a:	2a01      	cmp	r2, #1
 800987c:	f000 80c4 	beq.w	8009a08 <HAL_PCD_EP_Close+0x1b4>
 8009880:	2201      	movs	r2, #1
 8009882:	f880 2140 	strb.w	r2, [r0, #320]	; 0x140

  if (ep->doublebuffer == 0) 
 8009886:	7a89      	ldrb	r1, [r1, #10]
 8009888:	6802      	ldr	r2, [r0, #0]
  {
    if (ep->is_in)
    {
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 800988a:	b21b      	sxth	r3, r3
  if (ep->doublebuffer == 0) 
 800988c:	bbc9      	cbnz	r1, 8009902 <HAL_PCD_EP_Close+0xae>
    if (ep->is_in)
 800988e:	2c00      	cmp	r4, #0
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 8009890:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
    if (ep->is_in)
 8009894:	da20      	bge.n	80098d8 <HAL_PCD_EP_Close+0x84>
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 8009896:	064c      	lsls	r4, r1, #25
 8009898:	d50b      	bpl.n	80098b2 <HAL_PCD_EP_Close+0x5e>
 800989a:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800989e:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 80098a2:	0509      	lsls	r1, r1, #20
 80098a4:	0d09      	lsrs	r1, r1, #20
 80098a6:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 80098aa:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 80098ae:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS); 
 80098b2:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80098b6:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 80098ba:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    }
    else
    {
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS);
 80098be:	0409      	lsls	r1, r1, #16
 80098c0:	0c09      	lsrs	r1, r1, #16
 80098c2:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 80098c6:	f041 0180 	orr.w	r1, r1, #128	; 0x80
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
      PCD_RX_DTOG(hpcd->Instance, ep->num);
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS);
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS);
 80098ca:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
    }
  } 
  
  __HAL_UNLOCK(hpcd);   
 80098ce:	2300      	movs	r3, #0
 80098d0:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
  return HAL_OK;
 80098d4:	4618      	mov	r0, r3
}
 80098d6:	bd10      	pop	{r4, pc}
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 80098d8:	0449      	lsls	r1, r1, #17
 80098da:	d50b      	bpl.n	80098f4 <HAL_PCD_EP_Close+0xa0>
 80098dc:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80098e0:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 80098e4:	0509      	lsls	r1, r1, #20
 80098e6:	0d09      	lsrs	r1, r1, #20
 80098e8:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 80098ec:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80098f0:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS);
 80098f4:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80098f8:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 80098fc:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8009900:	e7dd      	b.n	80098be <HAL_PCD_EP_Close+0x6a>
    if (ep->is_in==0)
 8009902:	2c00      	cmp	r4, #0
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 8009904:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
    if (ep->is_in==0)
 8009908:	db40      	blt.n	800998c <HAL_PCD_EP_Close+0x138>
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 800990a:	044c      	lsls	r4, r1, #17
 800990c:	d50b      	bpl.n	8009926 <HAL_PCD_EP_Close+0xd2>
 800990e:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8009912:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 8009916:	0509      	lsls	r1, r1, #20
 8009918:	0d09      	lsrs	r1, r1, #20
 800991a:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 800991e:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8009922:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 8009926:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800992a:	0649      	lsls	r1, r1, #25
 800992c:	d50b      	bpl.n	8009946 <HAL_PCD_EP_Close+0xf2>
 800992e:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8009932:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 8009936:	0509      	lsls	r1, r1, #20
 8009938:	0d09      	lsrs	r1, r1, #20
 800993a:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800993e:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 8009942:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
      PCD_TX_DTOG(hpcd->Instance, ep->num);
 8009946:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800994a:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 800994e:	0509      	lsls	r1, r1, #20
 8009950:	0d09      	lsrs	r1, r1, #20
 8009952:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8009956:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 800995a:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS);
 800995e:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8009962:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8009966:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800996a:	0409      	lsls	r1, r1, #16
 800996c:	0c09      	lsrs	r1, r1, #16
 800996e:	f248 0480 	movw	r4, #32896	; 0x8080
 8009972:	4321      	orrs	r1, r4
 8009974:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS);
 8009978:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800997c:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8009980:	f021 0140 	bic.w	r1, r1, #64	; 0x40
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS);
 8009984:	0409      	lsls	r1, r1, #16
 8009986:	0c09      	lsrs	r1, r1, #16
 8009988:	4321      	orrs	r1, r4
 800998a:	e79e      	b.n	80098ca <HAL_PCD_EP_Close+0x76>
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 800998c:	044c      	lsls	r4, r1, #17
 800998e:	d50b      	bpl.n	80099a8 <HAL_PCD_EP_Close+0x154>
 8009990:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8009994:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 8009998:	0509      	lsls	r1, r1, #20
 800999a:	0d09      	lsrs	r1, r1, #20
 800999c:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 80099a0:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80099a4:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 80099a8:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80099ac:	0649      	lsls	r1, r1, #25
 80099ae:	d50b      	bpl.n	80099c8 <HAL_PCD_EP_Close+0x174>
 80099b0:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80099b4:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 80099b8:	0509      	lsls	r1, r1, #20
 80099ba:	0d09      	lsrs	r1, r1, #20
 80099bc:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 80099c0:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 80099c4:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
      PCD_RX_DTOG(hpcd->Instance, ep->num);
 80099c8:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80099cc:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 80099d0:	0509      	lsls	r1, r1, #20
 80099d2:	0d09      	lsrs	r1, r1, #20
 80099d4:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 80099d8:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80099dc:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS);
 80099e0:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80099e4:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 80099e8:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 80099ec:	0409      	lsls	r1, r1, #16
 80099ee:	0c09      	lsrs	r1, r1, #16
 80099f0:	f248 0480 	movw	r4, #32896	; 0x8080
 80099f4:	4321      	orrs	r1, r4
 80099f6:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS);
 80099fa:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80099fe:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8009a02:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8009a06:	e7bd      	b.n	8009984 <HAL_PCD_EP_Close+0x130>
  __HAL_LOCK(hpcd); 
 8009a08:	2002      	movs	r0, #2
 8009a0a:	e764      	b.n	80098d6 <HAL_PCD_EP_Close+0x82>

08009a0c <HAL_PCD_EP_Receive>:
  * @param  pBuf: pointer to the reception buffer   
  * @param  len: amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a0e:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 PCD_EPTypeDef *ep;
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8009a12:	241c      	movs	r4, #28
 8009a14:	fb04 0401 	mla	r4, r4, r1, r0
  ep->xfer_len = len;
 8009a18:	e9c4 2331 	strd	r2, r3, [r4, #196]	; 0xc4
  ep->xfer_count = 0;
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	f8c4 20cc 	str.w	r2, [r4, #204]	; 0xcc
  ep->is_in = 0;
 8009a22:	f884 20b5 	strb.w	r2, [r4, #181]	; 0xb5
  ep->num = ep_addr & 0x7F;
 8009a26:	f884 10b4 	strb.w	r1, [r4, #180]	; 0xb4
   
  __HAL_LOCK(hpcd); 
 8009a2a:	f890 5140 	ldrb.w	r5, [r0, #320]	; 0x140
 8009a2e:	2d01      	cmp	r5, #1
 8009a30:	d04b      	beq.n	8009aca <HAL_PCD_EP_Receive+0xbe>
 8009a32:	2501      	movs	r5, #1
 8009a34:	f880 5140 	strb.w	r5, [r0, #320]	; 0x140
   
  /* Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
 8009a38:	f8d4 40c0 	ldr.w	r4, [r4, #192]	; 0xc0
 8009a3c:	271c      	movs	r7, #28
 8009a3e:	429c      	cmp	r4, r3
  {
    len=ep->maxpacket;
    ep->xfer_len-=len; 
 8009a40:	fb07 0701 	mla	r7, r7, r1, r0
 8009a44:	bf3c      	itt	cc
 8009a46:	1b1a      	subcc	r2, r3, r4
 8009a48:	4623      	movcc	r3, r4
  
  /* configure and validate Rx endpoint */
  if (ep->doublebuffer == 0) 
  {
    /*Set RX buffer count*/
    PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, len);
 8009a4a:	6804      	ldr	r4, [r0, #0]
 8009a4c:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
  }
  else
  {
    /*Set the Double buffer counter*/
    PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8009a50:	f8b4 5050 	ldrh.w	r5, [r4, #80]	; 0x50
    PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, len);
 8009a54:	00ca      	lsls	r2, r1, #3
    PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8009a56:	fa12 f585 	uxtah	r5, r2, r5
 8009a5a:	2b3e      	cmp	r3, #62	; 0x3e
 8009a5c:	f504 6680 	add.w	r6, r4, #1024	; 0x400
 8009a60:	f105 0506 	add.w	r5, r5, #6
 8009a64:	d926      	bls.n	8009ab4 <HAL_PCD_EP_Receive+0xa8>
 8009a66:	f3c3 124f 	ubfx	r2, r3, #5, #16
 8009a6a:	06df      	lsls	r7, r3, #27
 8009a6c:	bf04      	itt	eq
 8009a6e:	f102 33ff 	addeq.w	r3, r2, #4294967295	; 0xffffffff
 8009a72:	b29a      	uxtheq	r2, r3
 8009a74:	4b16      	ldr	r3, [pc, #88]	; (8009ad0 <HAL_PCD_EP_Receive+0xc4>)
 8009a76:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 8009a7a:	b29b      	uxth	r3, r3
 8009a7c:	f846 3015 	str.w	r3, [r6, r5, lsl #1]
  } 
  
  PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
 8009a80:	231c      	movs	r3, #28
 8009a82:	fb03 0101 	mla	r1, r3, r1, r0
 8009a86:	f891 20b4 	ldrb.w	r2, [r1, #180]	; 0xb4
 8009a8a:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8009a8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009a92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a96:	041b      	lsls	r3, r3, #16
 8009a98:	0c1b      	lsrs	r3, r3, #16
 8009a9a:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8009a9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009aa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009aa6:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
  
  __HAL_UNLOCK(hpcd); 
 8009aaa:	2300      	movs	r3, #0
 8009aac:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
  
  return HAL_OK;
 8009ab0:	4618      	mov	r0, r3
}
 8009ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8009ab4:	f3c3 024f 	ubfx	r2, r3, #1, #16
 8009ab8:	07db      	lsls	r3, r3, #31
 8009aba:	bf44      	itt	mi
 8009abc:	3201      	addmi	r2, #1
 8009abe:	b292      	uxthmi	r2, r2
 8009ac0:	0292      	lsls	r2, r2, #10
 8009ac2:	b292      	uxth	r2, r2
 8009ac4:	f846 2015 	str.w	r2, [r6, r5, lsl #1]
 8009ac8:	e7da      	b.n	8009a80 <HAL_PCD_EP_Receive+0x74>
  __HAL_LOCK(hpcd); 
 8009aca:	2002      	movs	r0, #2
 8009acc:	e7f1      	b.n	8009ab2 <HAL_PCD_EP_Receive+0xa6>
 8009ace:	bf00      	nop
 8009ad0:	ffff8000 	.word	0xffff8000

08009ad4 <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr: endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  return hpcd->OUT_ep[ep_addr & 0x7F].xfer_count;
 8009ad4:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8009ad8:	231c      	movs	r3, #28
 8009ada:	fb03 0001 	mla	r0, r3, r1, r0
}
 8009ade:	f8b0 00cc 	ldrh.w	r0, [r0, #204]	; 0xcc
 8009ae2:	4770      	bx	lr

08009ae4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf: pointer to the transmission buffer   
  * @param  len: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ae6:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8009aea:	461f      	mov	r7, r3
  uint16_t pmabuffer = 0;
    
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8009aec:	231c      	movs	r3, #28
 8009aee:	fb03 0305 	mla	r3, r3, r5, r0
  ep->xfer_len = len;
 8009af2:	e9c3 270e 	strd	r2, r7, [r3, #56]	; 0x38
{
 8009af6:	4604      	mov	r4, r0
 8009af8:	4694      	mov	ip, r2
  ep->xfer_count = 0;
 8009afa:	2000      	movs	r0, #0
  ep->is_in = 1;
 8009afc:	2201      	movs	r2, #1
  ep->xfer_count = 0;
 8009afe:	6418      	str	r0, [r3, #64]	; 0x40
  ep->is_in = 1;
 8009b00:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  ep->num = ep_addr & 0x7F;
 8009b04:	f883 5028 	strb.w	r5, [r3, #40]	; 0x28
  
  __HAL_LOCK(hpcd); 
 8009b08:	f894 1140 	ldrb.w	r1, [r4, #320]	; 0x140
 8009b0c:	4291      	cmp	r1, r2
 8009b0e:	d072      	beq.n	8009bf6 <HAL_PCD_EP_Transmit+0x112>
 8009b10:	f884 2140 	strb.w	r2, [r4, #320]	; 0x140
  
  /*Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
 8009b14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009b16:	261c      	movs	r6, #28
 8009b18:	fb06 4605 	mla	r6, r6, r5, r4
 8009b1c:	42ba      	cmp	r2, r7
  {
    len=ep->maxpacket;
    ep->xfer_len-=len; 
 8009b1e:	bf3c      	itt	cc
 8009b20:	1ab8      	subcc	r0, r7, r2
 8009b22:	4617      	movcc	r7, r2
    len=ep->xfer_len;
    ep->xfer_len =0;
  }
  
  /* configure and validate Tx endpoint */
  if (ep->doublebuffer == 0) 
 8009b24:	f896 2032 	ldrb.w	r2, [r6, #50]	; 0x32
 8009b28:	63f0      	str	r0, [r6, #60]	; 0x3c
  {
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, len);
 8009b2a:	b2bb      	uxth	r3, r7
 8009b2c:	6820      	ldr	r0, [r4, #0]
  if (ep->doublebuffer == 0) 
 8009b2e:	bb4a      	cbnz	r2, 8009b84 <HAL_PCD_EP_Transmit+0xa0>
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, len);
 8009b30:	8db2      	ldrh	r2, [r6, #44]	; 0x2c
 8009b32:	4661      	mov	r1, ip
 8009b34:	f000 fb6f 	bl	800a216 <PCD_WritePMA>
    PCD_SET_EP_TX_CNT(hpcd->Instance, ep->num, len);
 8009b38:	6822      	ldr	r2, [r4, #0]
 8009b3a:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 8009b3e:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8009b42:	b29b      	uxth	r3, r3
 8009b44:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8009b48:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8009b4c:	f8c3 7404 	str.w	r7, [r3, #1028]	; 0x404
    }
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, pmabuffer, len);
    PCD_FreeUserBuffer(hpcd->Instance, ep->num, ep->is_in);
  }

  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8009b50:	211c      	movs	r1, #28
 8009b52:	fb01 4505 	mla	r5, r1, r5, r4
 8009b56:	6822      	ldr	r2, [r4, #0]
 8009b58:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 8009b5c:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8009b60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b68:	041b      	lsls	r3, r3, #16
 8009b6a:	0c1b      	lsrs	r3, r3, #16
 8009b6c:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8009b70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  
  __HAL_UNLOCK(hpcd);
 8009b78:	2000      	movs	r0, #0
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8009b7a:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
  __HAL_UNLOCK(hpcd);
 8009b7e:	f884 0140 	strb.w	r0, [r4, #320]	; 0x140
     
  return HAL_OK;
}
 8009b82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8009b84:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8009b88:	b292      	uxth	r2, r2
 8009b8a:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 8009b8e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8009b92:	f8c2 740c 	str.w	r7, [r2, #1036]	; 0x40c
    if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_TX)
 8009b96:	f896 2028 	ldrb.w	r2, [r6, #40]	; 0x28
 8009b9a:	f830 2022 	ldrh.w	r2, [r0, r2, lsl #2]
 8009b9e:	0652      	lsls	r2, r2, #25
      pmabuffer = ep->pmaaddr1;
 8009ba0:	bf4c      	ite	mi
 8009ba2:	8e32      	ldrhmi	r2, [r6, #48]	; 0x30
      pmabuffer = ep->pmaaddr0;
 8009ba4:	8df2      	ldrhpl	r2, [r6, #46]	; 0x2e
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, pmabuffer, len);
 8009ba6:	261c      	movs	r6, #28
 8009ba8:	fb06 4605 	mla	r6, r6, r5, r4
 8009bac:	6bb1      	ldr	r1, [r6, #56]	; 0x38
 8009bae:	f000 fb32 	bl	800a216 <PCD_WritePMA>
    PCD_FreeUserBuffer(hpcd->Instance, ep->num, ep->is_in);
 8009bb2:	f896 3029 	ldrb.w	r3, [r6, #41]	; 0x29
 8009bb6:	6822      	ldr	r2, [r4, #0]
 8009bb8:	b973      	cbnz	r3, 8009bd8 <HAL_PCD_EP_Transmit+0xf4>
 8009bba:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 8009bbe:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8009bc2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009bc6:	051b      	lsls	r3, r3, #20
 8009bc8:	0d1b      	lsrs	r3, r3, #20
 8009bca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009bce:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009bd2:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8009bd6:	e7bb      	b.n	8009b50 <HAL_PCD_EP_Transmit+0x6c>
 8009bd8:	2b01      	cmp	r3, #1
 8009bda:	d1b9      	bne.n	8009b50 <HAL_PCD_EP_Transmit+0x6c>
 8009bdc:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 8009be0:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8009be4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009be8:	051b      	lsls	r3, r3, #20
 8009bea:	0d1b      	lsrs	r3, r3, #20
 8009bec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009bf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bf4:	e7ed      	b.n	8009bd2 <HAL_PCD_EP_Transmit+0xee>
  __HAL_LOCK(hpcd); 
 8009bf6:	2002      	movs	r0, #2
 8009bf8:	e7c3      	b.n	8009b82 <HAL_PCD_EP_Transmit+0x9e>
	...

08009bfc <HAL_PCD_IRQHandler>:
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 8009bfc:	6803      	ldr	r3, [r0, #0]
 8009bfe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
{
 8009c02:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8009c06:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 8009c08:	0418      	lsls	r0, r3, #16
 8009c0a:	d46e      	bmi.n	8009cea <HAL_PCD_IRQHandler+0xee>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
 8009c0c:	6823      	ldr	r3, [r4, #0]
 8009c0e:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8009c12:	0551      	lsls	r1, r2, #21
 8009c14:	d50a      	bpl.n	8009c2c <HAL_PCD_IRQHandler+0x30>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8009c16:	f64f 32ff 	movw	r2, #64511	; 0xfbff
    HAL_PCD_ResetCallback(hpcd);
 8009c1a:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8009c1c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8009c20:	f001 fc8f 	bl	800b542 <HAL_PCD_ResetCallback>
    HAL_PCD_SetAddress(hpcd, 0);
 8009c24:	2100      	movs	r1, #0
 8009c26:	4620      	mov	r0, r4
 8009c28:	f7ff fc8c 	bl	8009544 <HAL_PCD_SetAddress>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_PMAOVRM))
 8009c2c:	6823      	ldr	r3, [r4, #0]
 8009c2e:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8009c32:	0452      	lsls	r2, r2, #17
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVRM);    
 8009c34:	bf44      	itt	mi
 8009c36:	f64b 72ff 	movwmi	r2, #49151	; 0xbfff
 8009c3a:	f8a3 2044 	strhmi.w	r2, [r3, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ERR))
 8009c3e:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8009c42:	0497      	lsls	r7, r2, #18
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
 8009c44:	bf44      	itt	mi
 8009c46:	f64d 72ff 	movwmi	r2, #57343	; 0xdfff
 8009c4a:	f8a3 2044 	strhmi.w	r2, [r3, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
 8009c4e:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8009c52:	04d6      	lsls	r6, r2, #19
 8009c54:	d513      	bpl.n	8009c7e <HAL_PCD_IRQHandler+0x82>
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 8009c56:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8009c5a:	f022 0204 	bic.w	r2, r2, #4
 8009c5e:	0412      	lsls	r2, r2, #16
 8009c60:	0c12      	lsrs	r2, r2, #16
 8009c62:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR = wInterrupt_Mask;
 8009c66:	f44f 423d 	mov.w	r2, #48384	; 0xbd00
 8009c6a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8009c6e:	4620      	mov	r0, r4
 8009c70:	f001 fc75 	bl	800b55e <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);     
 8009c74:	6823      	ldr	r3, [r4, #0]
 8009c76:	f64e 72ff 	movw	r2, #61439	; 0xefff
 8009c7a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SUSP))
 8009c7e:	6823      	ldr	r3, [r4, #0]
 8009c80:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8009c84:	0515      	lsls	r5, r2, #20
 8009c86:	d518      	bpl.n	8009cba <HAL_PCD_IRQHandler+0xbe>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);  
 8009c88:	f24f 72ff 	movw	r2, #63487	; 0xf7ff
 8009c8c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8009c90:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8009c94:	b292      	uxth	r2, r2
 8009c96:	f042 0208 	orr.w	r2, r2, #8
 8009c9a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8009c9e:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8009ca2:	b292      	uxth	r2, r2
 8009ca4:	f042 0204 	orr.w	r2, r2, #4
 8009ca8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP) == 0)
 8009cac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009cb0:	04d8      	lsls	r0, r3, #19
 8009cb2:	d402      	bmi.n	8009cba <HAL_PCD_IRQHandler+0xbe>
      HAL_PCD_SuspendCallback(hpcd);
 8009cb4:	4620      	mov	r0, r4
 8009cb6:	f001 fc51 	bl	800b55c <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
 8009cba:	6823      	ldr	r3, [r4, #0]
 8009cbc:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8009cc0:	0591      	lsls	r1, r2, #22
 8009cc2:	d506      	bpl.n	8009cd2 <HAL_PCD_IRQHandler+0xd6>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 8009cc4:	f64f 52ff 	movw	r2, #65023	; 0xfdff
 8009cc8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8009ccc:	4620      	mov	r0, r4
 8009cce:	f001 fc34 	bl	800b53a <HAL_PCD_SOFCallback>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ESOF))
 8009cd2:	6823      	ldr	r3, [r4, #0]
 8009cd4:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8009cd8:	05d2      	lsls	r2, r2, #23
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF); 
 8009cda:	bf44      	itt	mi
 8009cdc:	f64f 62ff 	movwmi	r2, #65279	; 0xfeff
 8009ce0:	f8a3 2044 	strhmi.w	r2, [r3, #68]	; 0x44
}
 8009ce4:	b002      	add	sp, #8
 8009ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __IO uint16_t wEPVal = 0;
 8009cea:	2300      	movs	r3, #0
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, EPindex);
 8009cec:	4fc6      	ldr	r7, [pc, #792]	; (800a008 <HAL_PCD_IRQHandler+0x40c>)
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8009cee:	f8df 831c 	ldr.w	r8, [pc, #796]	; 800a00c <HAL_PCD_IRQHandler+0x410>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8009cf2:	f8df 931c 	ldr.w	r9, [pc, #796]	; 800a010 <HAL_PCD_IRQHandler+0x414>
  __IO uint16_t wEPVal = 0;
 8009cf6:	f8ad 3006 	strh.w	r3, [sp, #6]
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 8009cfa:	6820      	ldr	r0, [r4, #0]
 8009cfc:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8009d00:	b29b      	uxth	r3, r3
 8009d02:	0419      	lsls	r1, r3, #16
 8009d04:	f8ad 3004 	strh.w	r3, [sp, #4]
 8009d08:	d580      	bpl.n	8009c0c <HAL_PCD_IRQHandler+0x10>
    EPindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8009d0a:	f8bd 5004 	ldrh.w	r5, [sp, #4]
    if (EPindex == 0)
 8009d0e:	f015 050f 	ands.w	r5, r5, #15
 8009d12:	f040 80ab 	bne.w	8009e6c <HAL_PCD_IRQHandler+0x270>
      if ((wIstr & USB_ISTR_DIR) == 0)
 8009d16:	f8bd 1004 	ldrh.w	r1, [sp, #4]
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8009d1a:	8803      	ldrh	r3, [r0, #0]
      if ((wIstr & USB_ISTR_DIR) == 0)
 8009d1c:	f011 0110 	ands.w	r1, r1, #16
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8009d20:	b29b      	uxth	r3, r3
      if ((wIstr & USB_ISTR_DIR) == 0)
 8009d22:	d126      	bne.n	8009d72 <HAL_PCD_IRQHandler+0x176>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8009d24:	403b      	ands	r3, r7
 8009d26:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8009d28:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8009d2c:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8009d30:	b29b      	uxth	r3, r3
 8009d32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009d36:	eb00 0043 	add.w	r0, r0, r3, lsl #1
        ep->xfer_buff += ep->xfer_count;
 8009d3a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8009d3c:	f8d0 3404 	ldr.w	r3, [r0, #1028]	; 0x404
 8009d40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009d44:	6423      	str	r3, [r4, #64]	; 0x40
        ep->xfer_buff += ep->xfer_count;
 8009d46:	4413      	add	r3, r2
 8009d48:	63a3      	str	r3, [r4, #56]	; 0x38
        HAL_PCD_DataInStageCallback(hpcd, 0);
 8009d4a:	4620      	mov	r0, r4
 8009d4c:	f001 fbed 	bl	800b52a <HAL_PCD_DataInStageCallback>
        if((hpcd->USB_Address > 0)&& ( ep->xfer_len == 0))
 8009d50:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d0d0      	beq.n	8009cfa <HAL_PCD_IRQHandler+0xfe>
 8009d58:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8009d5a:	2a00      	cmp	r2, #0
 8009d5c:	d1cd      	bne.n	8009cfa <HAL_PCD_IRQHandler+0xfe>
          hpcd->Instance->DADDR = (hpcd->USB_Address | USB_DADDR_EF);
 8009d5e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8009d62:	6821      	ldr	r1, [r4, #0]
 8009d64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d68:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0;
 8009d6c:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 8009d70:	e7c3      	b.n	8009cfa <HAL_PCD_IRQHandler+0xfe>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8009d72:	f8ad 3006 	strh.w	r3, [sp, #6]
        if ((wEPVal & USB_EP_SETUP) != 0)
 8009d76:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8009d7a:	051a      	lsls	r2, r3, #20
 8009d7c:	d51f      	bpl.n	8009dbe <HAL_PCD_IRQHandler+0x1c2>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8009d7e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8009d82:	f894 20b4 	ldrb.w	r2, [r4, #180]	; 0xb4
 8009d86:	b29b      	uxth	r3, r3
 8009d88:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009d8c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
          PCD_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 8009d90:	f8b4 20b8 	ldrh.w	r2, [r4, #184]	; 0xb8
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8009d94:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8009d98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009d9c:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
          PCD_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 8009da0:	f504 71a2 	add.w	r1, r4, #324	; 0x144
 8009da4:	f000 fa45 	bl	800a232 <PCD_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 8009da8:	6822      	ldr	r2, [r4, #0]
 8009daa:	8813      	ldrh	r3, [r2, #0]
 8009dac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009db0:	051b      	lsls	r3, r3, #20
 8009db2:	0d1b      	lsrs	r3, r3, #20
 8009db4:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8009db6:	4620      	mov	r0, r4
 8009db8:	f001 fba8 	bl	800b50c <HAL_PCD_SetupStageCallback>
 8009dbc:	e79d      	b.n	8009cfa <HAL_PCD_IRQHandler+0xfe>
        else if ((wEPVal & USB_EP_CTR_RX) != 0)
 8009dbe:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8009dc2:	041b      	lsls	r3, r3, #16
 8009dc4:	d599      	bpl.n	8009cfa <HAL_PCD_IRQHandler+0xfe>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8009dc6:	8803      	ldrh	r3, [r0, #0]
 8009dc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009dcc:	051b      	lsls	r3, r3, #20
 8009dce:	0d1b      	lsrs	r3, r3, #20
 8009dd0:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8009dd2:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8009dd6:	f894 20b4 	ldrb.w	r2, [r4, #180]	; 0xb4
 8009dda:	b29b      	uxth	r3, r3
 8009ddc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009de0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8009de4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8009de8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009dec:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
          if (ep->xfer_count != 0)
 8009df0:	b163      	cbz	r3, 8009e0c <HAL_PCD_IRQHandler+0x210>
            PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8009df2:	f8b4 20b8 	ldrh.w	r2, [r4, #184]	; 0xb8
 8009df6:	f8d4 10c4 	ldr.w	r1, [r4, #196]	; 0xc4
 8009dfa:	f000 fa1a 	bl	800a232 <PCD_ReadPMA>
            ep->xfer_buff+=ep->xfer_count;
 8009dfe:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 8009e02:	f8d4 20cc 	ldr.w	r2, [r4, #204]	; 0xcc
 8009e06:	4413      	add	r3, r2
 8009e08:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
           HAL_PCD_DataOutStageCallback(hpcd, 0);
 8009e0c:	2100      	movs	r1, #0
 8009e0e:	4620      	mov	r0, r4
 8009e10:	f001 fb82 	bl	800b518 <HAL_PCD_DataOutStageCallback>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8009e14:	6822      	ldr	r2, [r4, #0]
 8009e16:	f8d4 50c0 	ldr.w	r5, [r4, #192]	; 0xc0
 8009e1a:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 8009e1e:	2d3e      	cmp	r5, #62	; 0x3e
 8009e20:	b289      	uxth	r1, r1
 8009e22:	f101 0106 	add.w	r1, r1, #6
 8009e26:	f502 6080 	add.w	r0, r2, #1024	; 0x400
 8009e2a:	d917      	bls.n	8009e5c <HAL_PCD_IRQHandler+0x260>
 8009e2c:	f3c5 134f 	ubfx	r3, r5, #5, #16
 8009e30:	06ee      	lsls	r6, r5, #27
 8009e32:	bf04      	itt	eq
 8009e34:	f103 33ff 	addeq.w	r3, r3, #4294967295	; 0xffffffff
 8009e38:	b29b      	uxtheq	r3, r3
 8009e3a:	ea49 2383 	orr.w	r3, r9, r3, lsl #10
 8009e3e:	b29b      	uxth	r3, r3
 8009e40:	f840 3011 	str.w	r3, [r0, r1, lsl #1]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8009e44:	8813      	ldrh	r3, [r2, #0]
 8009e46:	b29b      	uxth	r3, r3
 8009e48:	ea03 0308 	and.w	r3, r3, r8
 8009e4c:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8009e50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e58:	8013      	strh	r3, [r2, #0]
 8009e5a:	e74e      	b.n	8009cfa <HAL_PCD_IRQHandler+0xfe>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8009e5c:	f3c5 034f 	ubfx	r3, r5, #1, #16
 8009e60:	07ed      	lsls	r5, r5, #31
 8009e62:	bf44      	itt	mi
 8009e64:	3301      	addmi	r3, #1
 8009e66:	b29b      	uxthmi	r3, r3
 8009e68:	029b      	lsls	r3, r3, #10
 8009e6a:	e7e8      	b.n	8009e3e <HAL_PCD_IRQHandler+0x242>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, EPindex);
 8009e6c:	fa0f fa85 	sxth.w	sl, r5
 8009e70:	f830 302a 	ldrh.w	r3, [r0, sl, lsl #2]
 8009e74:	b29b      	uxth	r3, r3
 8009e76:	f8ad 3006 	strh.w	r3, [sp, #6]
      if ((wEPVal & USB_EP_CTR_RX) != 0)
 8009e7a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8009e7e:	041e      	lsls	r6, r3, #16
 8009e80:	d541      	bpl.n	8009f06 <HAL_PCD_IRQHandler+0x30a>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, EPindex);
 8009e82:	f830 302a 	ldrh.w	r3, [r0, sl, lsl #2]
 8009e86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e8a:	051b      	lsls	r3, r3, #20
 8009e8c:	0d1b      	lsrs	r3, r3, #20
        if (ep->doublebuffer == 0)
 8009e8e:	211c      	movs	r1, #28
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, EPindex);
 8009e90:	f820 302a 	strh.w	r3, [r0, sl, lsl #2]
        if (ep->doublebuffer == 0)
 8009e94:	fb01 4105 	mla	r1, r1, r5, r4
 8009e98:	f500 6280 	add.w	r2, r0, #1024	; 0x400
 8009e9c:	f891 30be 	ldrb.w	r3, [r1, #190]	; 0xbe
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d173      	bne.n	8009f8c <HAL_PCD_IRQHandler+0x390>
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8009ea4:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8009ea8:	f891 60b4 	ldrb.w	r6, [r1, #180]	; 0xb4
 8009eac:	b29b      	uxth	r3, r3
 8009eae:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009eb2:	3306      	adds	r3, #6
 8009eb4:	f852 6013 	ldr.w	r6, [r2, r3, lsl #1]
 8009eb8:	f3c6 0609 	ubfx	r6, r6, #0, #10
          if (count != 0)
 8009ebc:	b136      	cbz	r6, 8009ecc <HAL_PCD_IRQHandler+0x2d0>
            PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8009ebe:	f8b1 20b8 	ldrh.w	r2, [r1, #184]	; 0xb8
 8009ec2:	f8d1 10c4 	ldr.w	r1, [r1, #196]	; 0xc4
 8009ec6:	4633      	mov	r3, r6
 8009ec8:	f000 f9b3 	bl	800a232 <PCD_ReadPMA>
        ep->xfer_count+=count;
 8009ecc:	211c      	movs	r1, #28
 8009ece:	fb01 4105 	mla	r1, r1, r5, r4
 8009ed2:	f8d1 30cc 	ldr.w	r3, [r1, #204]	; 0xcc
        ep->xfer_buff+=count;
 8009ed6:	f8d1 20c4 	ldr.w	r2, [r1, #196]	; 0xc4
        ep->xfer_count+=count;
 8009eda:	4433      	add	r3, r6
 8009edc:	f8c1 30cc 	str.w	r3, [r1, #204]	; 0xcc
        if ((ep->xfer_len == 0) || (count < ep->maxpacket))
 8009ee0:	f8d1 30c8 	ldr.w	r3, [r1, #200]	; 0xc8
        ep->xfer_buff+=count;
 8009ee4:	4432      	add	r2, r6
 8009ee6:	f8c1 20c4 	str.w	r2, [r1, #196]	; 0xc4
        if ((ep->xfer_len == 0) || (count < ep->maxpacket))
 8009eea:	b123      	cbz	r3, 8009ef6 <HAL_PCD_IRQHandler+0x2fa>
 8009eec:	f8d1 00c0 	ldr.w	r0, [r1, #192]	; 0xc0
 8009ef0:	4286      	cmp	r6, r0
 8009ef2:	f080 8082 	bcs.w	8009ffa <HAL_PCD_IRQHandler+0x3fe>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8009ef6:	231c      	movs	r3, #28
 8009ef8:	fb03 4305 	mla	r3, r3, r5, r4
 8009efc:	4620      	mov	r0, r4
 8009efe:	f893 10b4 	ldrb.w	r1, [r3, #180]	; 0xb4
 8009f02:	f001 fb09 	bl	800b518 <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0)
 8009f06:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8009f0a:	0618      	lsls	r0, r3, #24
 8009f0c:	f57f aef5 	bpl.w	8009cfa <HAL_PCD_IRQHandler+0xfe>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, EPindex);
 8009f10:	6820      	ldr	r0, [r4, #0]
 8009f12:	f830 302a 	ldrh.w	r3, [r0, sl, lsl #2]
 8009f16:	b29b      	uxth	r3, r3
 8009f18:	403b      	ands	r3, r7
        if (ep->doublebuffer == 0)
 8009f1a:	211c      	movs	r1, #28
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, EPindex);
 8009f1c:	f820 302a 	strh.w	r3, [r0, sl, lsl #2]
        if (ep->doublebuffer == 0)
 8009f20:	fb01 4105 	mla	r1, r1, r5, r4
 8009f24:	f500 6280 	add.w	r2, r0, #1024	; 0x400
 8009f28:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d171      	bne.n	800a014 <HAL_PCD_IRQHandler+0x418>
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8009f30:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8009f34:	f891 6028 	ldrb.w	r6, [r1, #40]	; 0x28
 8009f38:	b29b      	uxth	r3, r3
 8009f3a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009f3e:	3302      	adds	r3, #2
 8009f40:	f852 3013 	ldr.w	r3, [r2, r3, lsl #1]
 8009f44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009f48:	640b      	str	r3, [r1, #64]	; 0x40
          if (ep->xfer_count != 0)
 8009f4a:	b11b      	cbz	r3, 8009f54 <HAL_PCD_IRQHandler+0x358>
            PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8009f4c:	8d8a      	ldrh	r2, [r1, #44]	; 0x2c
 8009f4e:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8009f50:	f000 f961 	bl	800a216 <PCD_WritePMA>
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8009f54:	6822      	ldr	r2, [r4, #0]
 8009f56:	211c      	movs	r1, #28
 8009f58:	fb01 4505 	mla	r5, r1, r5, r4
 8009f5c:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8009f60:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 8009f64:	b29b      	uxth	r3, r3
 8009f66:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8009f6a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8009f6e:	4620      	mov	r0, r4
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8009f70:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
        ep->xfer_buff+=ep->xfer_count;
 8009f74:	6bab      	ldr	r3, [r5, #56]	; 0x38
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8009f76:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8009f7a:	642a      	str	r2, [r5, #64]	; 0x40
        ep->xfer_buff+=ep->xfer_count;
 8009f7c:	441a      	add	r2, r3
        if (ep->xfer_len == 0)
 8009f7e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
        ep->xfer_buff+=ep->xfer_count;
 8009f80:	63aa      	str	r2, [r5, #56]	; 0x38
        if (ep->xfer_len == 0)
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d17a      	bne.n	800a07c <HAL_PCD_IRQHandler+0x480>
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8009f86:	f001 fad0 	bl	800b52a <HAL_PCD_DataInStageCallback>
 8009f8a:	e6b6      	b.n	8009cfa <HAL_PCD_IRQHandler+0xfe>
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 8009f8c:	f891 30b4 	ldrb.w	r3, [r1, #180]	; 0xb4
 8009f90:	f830 c023 	ldrh.w	ip, [r0, r3, lsl #2]
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8009f94:	00de      	lsls	r6, r3, #3
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8009f96:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 8009f9a:	f41c 4f80 	tst.w	ip, #16384	; 0x4000
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8009f9e:	fa16 f383 	uxtah	r3, r6, r3
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 8009fa2:	d01f      	beq.n	8009fe4 <HAL_PCD_IRQHandler+0x3e8>
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8009fa4:	3302      	adds	r3, #2
 8009fa6:	f852 6013 	ldr.w	r6, [r2, r3, lsl #1]
 8009faa:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0)
 8009fae:	b136      	cbz	r6, 8009fbe <HAL_PCD_IRQHandler+0x3c2>
              PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8009fb0:	f8b1 20ba 	ldrh.w	r2, [r1, #186]	; 0xba
 8009fb4:	4633      	mov	r3, r6
              PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8009fb6:	f8d1 10c4 	ldr.w	r1, [r1, #196]	; 0xc4
 8009fba:	f000 f93a 	bl	800a232 <PCD_ReadPMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
 8009fbe:	231c      	movs	r3, #28
 8009fc0:	fb03 4305 	mla	r3, r3, r5, r4
 8009fc4:	6822      	ldr	r2, [r4, #0]
 8009fc6:	f893 10b4 	ldrb.w	r1, [r3, #180]	; 0xb4
 8009fca:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8009fce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009fd2:	051b      	lsls	r3, r3, #20
 8009fd4:	0d1b      	lsrs	r3, r3, #20
 8009fd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009fda:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009fde:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8009fe2:	e773      	b.n	8009ecc <HAL_PCD_IRQHandler+0x2d0>
            count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8009fe4:	3306      	adds	r3, #6
 8009fe6:	f852 6013 	ldr.w	r6, [r2, r3, lsl #1]
 8009fea:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0)
 8009fee:	2e00      	cmp	r6, #0
 8009ff0:	d0e5      	beq.n	8009fbe <HAL_PCD_IRQHandler+0x3c2>
              PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8009ff2:	f8b1 20bc 	ldrh.w	r2, [r1, #188]	; 0xbc
 8009ff6:	4633      	mov	r3, r6
 8009ff8:	e7dd      	b.n	8009fb6 <HAL_PCD_IRQHandler+0x3ba>
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8009ffa:	f891 10b4 	ldrb.w	r1, [r1, #180]	; 0xb4
 8009ffe:	4620      	mov	r0, r4
 800a000:	f7ff fd04 	bl	8009a0c <HAL_PCD_EP_Receive>
 800a004:	e77f      	b.n	8009f06 <HAL_PCD_IRQHandler+0x30a>
 800a006:	bf00      	nop
 800a008:	ffff8f0f 	.word	0xffff8f0f
 800a00c:	ffffbf8f 	.word	0xffffbf8f
 800a010:	ffff8000 	.word	0xffff8000
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 800a014:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 800a018:	f830 c023 	ldrh.w	ip, [r0, r3, lsl #2]
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800a01c:	00de      	lsls	r6, r3, #3
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800a01e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 800a022:	f01c 0f40 	tst.w	ip, #64	; 0x40
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800a026:	fa16 f383 	uxtah	r3, r6, r3
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 800a02a:	d01d      	beq.n	800a068 <HAL_PCD_IRQHandler+0x46c>
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800a02c:	3302      	adds	r3, #2
 800a02e:	f852 3013 	ldr.w	r3, [r2, r3, lsl #1]
 800a032:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a036:	640b      	str	r3, [r1, #64]	; 0x40
            if (ep->xfer_count != 0)
 800a038:	b11b      	cbz	r3, 800a042 <HAL_PCD_IRQHandler+0x446>
              PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
 800a03a:	8dca      	ldrh	r2, [r1, #46]	; 0x2e
              PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 800a03c:	6b89      	ldr	r1, [r1, #56]	; 0x38
 800a03e:	f000 f8ea 	bl	800a216 <PCD_WritePMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
 800a042:	231c      	movs	r3, #28
 800a044:	fb03 4305 	mla	r3, r3, r5, r4
 800a048:	6822      	ldr	r2, [r4, #0]
 800a04a:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 800a04e:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800a052:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a056:	051b      	lsls	r3, r3, #20
 800a058:	0d1b      	lsrs	r3, r3, #20
 800a05a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a05e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a062:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 800a066:	e775      	b.n	8009f54 <HAL_PCD_IRQHandler+0x358>
            ep->xfer_count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800a068:	3306      	adds	r3, #6
 800a06a:	f852 3013 	ldr.w	r3, [r2, r3, lsl #1]
 800a06e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a072:	640b      	str	r3, [r1, #64]	; 0x40
            if (ep->xfer_count != 0)
 800a074:	2b00      	cmp	r3, #0
 800a076:	d0e4      	beq.n	800a042 <HAL_PCD_IRQHandler+0x446>
              PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 800a078:	8e0a      	ldrh	r2, [r1, #48]	; 0x30
 800a07a:	e7df      	b.n	800a03c <HAL_PCD_IRQHandler+0x440>
          HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800a07c:	f7ff fd32 	bl	8009ae4 <HAL_PCD_EP_Transmit>
 800a080:	e63b      	b.n	8009cfa <HAL_PCD_IRQHandler+0xfe>
 800a082:	bf00      	nop

0800a084 <HAL_PCD_EP_SetStall>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a084:	b510      	push	{r4, lr}
  PCD_EPTypeDef *ep;
   
  __HAL_LOCK(hpcd); 
 800a086:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
 800a08a:	2b01      	cmp	r3, #1
 800a08c:	d048      	beq.n	800a120 <HAL_PCD_EP_SetStall+0x9c>
   
  if ((0x80 & ep_addr) == 0x80)
 800a08e:	b24c      	sxtb	r4, r1
  __HAL_LOCK(hpcd); 
 800a090:	2301      	movs	r3, #1
 800a092:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
  if ((0x80 & ep_addr) == 0x80)
 800a096:	2c00      	cmp	r4, #0
 800a098:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 800a09c:	f04f 021c 	mov.w	r2, #28
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800a0a0:	bfb5      	itete	lt
 800a0a2:	fb02 0103 	mlalt	r1, r2, r3, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a0a6:	fb02 0101 	mlage	r1, r2, r1, r0
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800a0aa:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 800a0ac:	31b4      	addge	r1, #180	; 0xb4
  }
  
  ep->is_stall = 1;
 800a0ae:	2201      	movs	r2, #1
 800a0b0:	708a      	strb	r2, [r1, #2]
  ep->num   = ep_addr & 0x7F;
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 800a0b2:	0fe2      	lsrs	r2, r4, #31
  ep->num   = ep_addr & 0x7F;
 800a0b4:	700b      	strb	r3, [r1, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 800a0b6:	704a      	strb	r2, [r1, #1]
  
  if (ep->num == 0)
 800a0b8:	6802      	ldr	r2, [r0, #0]
 800a0ba:	b9a3      	cbnz	r3, 800a0e6 <HAL_PCD_EP_SetStall+0x62>
  {
    /* This macro sets STALL status for RX & TX*/ 
    PCD_SET_EP_TXRX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL); 
 800a0bc:	8813      	ldrh	r3, [r2, #0]
 800a0be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a0c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a0c6:	041b      	lsls	r3, r3, #16
 800a0c8:	0c1b      	lsrs	r3, r3, #16
 800a0ca:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a0ce:	f083 0310 	eor.w	r3, r3, #16
 800a0d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a0d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0da:	8013      	strh	r3, [r2, #0]
    else
    {
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num , USB_EP_RX_STALL);
    }
  }
  __HAL_UNLOCK(hpcd); 
 800a0dc:	2300      	movs	r3, #0
 800a0de:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
  
  return HAL_OK;
 800a0e2:	4618      	mov	r0, r3
}
 800a0e4:	bd10      	pop	{r4, pc}
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num , USB_EP_TX_STALL); 
 800a0e6:	b219      	sxth	r1, r3
    if (ep->is_in)
 800a0e8:	2c00      	cmp	r4, #0
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num , USB_EP_TX_STALL); 
 800a0ea:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
    if (ep->is_in)
 800a0ee:	da0e      	bge.n	800a10e <HAL_PCD_EP_SetStall+0x8a>
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num , USB_EP_TX_STALL); 
 800a0f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a0f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a0f8:	041b      	lsls	r3, r3, #16
 800a0fa:	0c1b      	lsrs	r3, r3, #16
 800a0fc:	f083 0310 	eor.w	r3, r3, #16
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num , USB_EP_RX_STALL);
 800a100:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a104:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a108:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 800a10c:	e7e6      	b.n	800a0dc <HAL_PCD_EP_SetStall+0x58>
 800a10e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a112:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a116:	041b      	lsls	r3, r3, #16
 800a118:	0c1b      	lsrs	r3, r3, #16
 800a11a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a11e:	e7ef      	b.n	800a100 <HAL_PCD_EP_SetStall+0x7c>
  __HAL_LOCK(hpcd); 
 800a120:	2002      	movs	r0, #2
 800a122:	e7df      	b.n	800a0e4 <HAL_PCD_EP_SetStall+0x60>

0800a124 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a124:	b510      	push	{r4, lr}
  PCD_EPTypeDef *ep;
  
  if ((0x80 & ep_addr) == 0x80)
 800a126:	b24c      	sxtb	r4, r1
 800a128:	f001 027f 	and.w	r2, r1, #127	; 0x7f
 800a12c:	2c00      	cmp	r4, #0
 800a12e:	f04f 031c 	mov.w	r3, #28
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800a132:	bfb5      	itete	lt
 800a134:	fb03 0102 	mlalt	r1, r3, r2, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a138:	fb03 0101 	mlage	r1, r3, r1, r0
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800a13c:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 800a13e:	31b4      	addge	r1, #180	; 0xb4
  }
  
  ep->is_stall = 0;
 800a140:	2300      	movs	r3, #0
 800a142:	708b      	strb	r3, [r1, #2]
  ep->num   = ep_addr & 0x7F;
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 800a144:	0fe3      	lsrs	r3, r4, #31
  ep->num   = ep_addr & 0x7F;
 800a146:	700a      	strb	r2, [r1, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 800a148:	704b      	strb	r3, [r1, #1]
  
  __HAL_LOCK(hpcd); 
 800a14a:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
 800a14e:	2b01      	cmp	r3, #1
 800a150:	d044      	beq.n	800a1dc <HAL_PCD_EP_ClrStall+0xb8>
 800a152:	2301      	movs	r3, #1
 800a154:	6801      	ldr	r1, [r0, #0]
 800a156:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
  
  if (ep->is_in)
  {
    PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 800a15a:	b212      	sxth	r2, r2
  if (ep->is_in)
 800a15c:	2c00      	cmp	r4, #0
    PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 800a15e:	f831 3022 	ldrh.w	r3, [r1, r2, lsl #2]
  if (ep->is_in)
 800a162:	da22      	bge.n	800a1aa <HAL_PCD_EP_ClrStall+0x86>
    PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 800a164:	065c      	lsls	r4, r3, #25
 800a166:	d50b      	bpl.n	800a180 <HAL_PCD_EP_ClrStall+0x5c>
 800a168:	f831 3022 	ldrh.w	r3, [r1, r2, lsl #2]
 800a16c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a170:	051b      	lsls	r3, r3, #20
 800a172:	0d1b      	lsrs	r3, r3, #20
 800a174:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a178:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a17c:	f821 3022 	strh.w	r3, [r1, r2, lsl #2]
    PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800a180:	f831 3022 	ldrh.w	r3, [r1, r2, lsl #2]
 800a184:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a188:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a18c:	041b      	lsls	r3, r3, #16
 800a18e:	0c1b      	lsrs	r3, r3, #16
 800a190:	f083 0330 	eor.w	r3, r3, #48	; 0x30
  }
  else
  {
    PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
    PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
 800a194:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a198:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a19c:	f821 3022 	strh.w	r3, [r1, r2, lsl #2]
  }
  __HAL_UNLOCK(hpcd); 
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
    
  return HAL_OK;
 800a1a6:	4618      	mov	r0, r3
}
 800a1a8:	bd10      	pop	{r4, pc}
    PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 800a1aa:	045b      	lsls	r3, r3, #17
 800a1ac:	d50b      	bpl.n	800a1c6 <HAL_PCD_EP_ClrStall+0xa2>
 800a1ae:	f831 3022 	ldrh.w	r3, [r1, r2, lsl #2]
 800a1b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a1b6:	051b      	lsls	r3, r3, #20
 800a1b8:	0d1b      	lsrs	r3, r3, #20
 800a1ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a1be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1c2:	f821 3022 	strh.w	r3, [r1, r2, lsl #2]
    PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
 800a1c6:	f831 3022 	ldrh.w	r3, [r1, r2, lsl #2]
 800a1ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a1ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1d2:	041b      	lsls	r3, r3, #16
 800a1d4:	0c1b      	lsrs	r3, r3, #16
 800a1d6:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800a1da:	e7db      	b.n	800a194 <HAL_PCD_EP_ClrStall+0x70>
  __HAL_LOCK(hpcd); 
 800a1dc:	2002      	movs	r0, #2
 800a1de:	e7e3      	b.n	800a1a8 <HAL_PCD_EP_ClrStall+0x84>

0800a1e0 <HAL_PCDEx_PMAConfig>:

{
  PCD_EPTypeDef *ep;
  
  /* initialize ep structure*/
  if ((0x80 & ep_addr) == 0x80)
 800a1e0:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800a1e4:	bf18      	it	ne
 800a1e6:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
{
 800a1ea:	b510      	push	{r4, lr}
 800a1ec:	f04f 041c 	mov.w	r4, #28
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800a1f0:	bf15      	itete	ne
 800a1f2:	fb04 0001 	mlane	r0, r4, r1, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a1f6:	fb04 0001 	mlaeq	r0, r4, r1, r0
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800a1fa:	3028      	addne	r0, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 800a1fc:	30b4      	addeq	r0, #180	; 0xb4
  if (ep_kind == PCD_SNG_BUF)
  {
    /*Single Buffer*/
    ep->doublebuffer = 0;
    /*Configure te PMA*/
    ep->pmaadress = (uint16_t)pmaadress;
 800a1fe:	b299      	uxth	r1, r3
  if (ep_kind == PCD_SNG_BUF)
 800a200:	b91a      	cbnz	r2, 800a20a <HAL_PCDEx_PMAConfig+0x2a>
    ep->doublebuffer = 0;
 800a202:	7282      	strb	r2, [r0, #10]
    ep->pmaadress = (uint16_t)pmaadress;
 800a204:	8081      	strh	r1, [r0, #4]
    ep->pmaaddr0 =  pmaadress & 0xFFFF;
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000) >> 16;
  }
  
  return HAL_OK; 
}
 800a206:	2000      	movs	r0, #0
 800a208:	bd10      	pop	{r4, pc}
    ep->doublebuffer = 1;
 800a20a:	2201      	movs	r2, #1
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000) >> 16;
 800a20c:	0c1b      	lsrs	r3, r3, #16
    ep->doublebuffer = 1;
 800a20e:	7282      	strb	r2, [r0, #10]
    ep->pmaaddr0 =  pmaadress & 0xFFFF;
 800a210:	80c1      	strh	r1, [r0, #6]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000) >> 16;
 800a212:	8103      	strh	r3, [r0, #8]
 800a214:	e7f7      	b.n	800a206 <HAL_PCDEx_PMAConfig+0x26>

0800a216 <PCD_WritePMA>:
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void PCD_WritePMA(USB_TypeDef  *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
 800a216:	3301      	adds	r3, #1
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 800a218:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
 800a21c:	105b      	asrs	r3, r3, #1
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 800a21e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (i = n; i != 0; i--)
 800a222:	b903      	cbnz	r3, 800a226 <PCD_WritePMA+0x10>
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
    *pdwVal++ = temp2;
    pdwVal++;
    pbUsrBuf++;
  }
}
 800a224:	4770      	bx	lr
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 800a226:	f831 0b02 	ldrh.w	r0, [r1], #2
    *pdwVal++ = temp2;
 800a22a:	f822 0b04 	strh.w	r0, [r2], #4
  for (i = n; i != 0; i--)
 800a22e:	3b01      	subs	r3, #1
 800a230:	e7f7      	b.n	800a222 <PCD_WritePMA+0xc>

0800a232 <PCD_ReadPMA>:
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void PCD_ReadPMA(USB_TypeDef  *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
 800a232:	3301      	adds	r3, #1
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 800a234:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
 800a238:	105b      	asrs	r3, r3, #1
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 800a23a:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (i = n; i != 0; i--)
 800a23e:	b903      	cbnz	r3, 800a242 <PCD_ReadPMA+0x10>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
    pbUsrBuf++;
  }
}
 800a240:	4770      	bx	lr
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 800a242:	f852 0b04 	ldr.w	r0, [r2], #4
 800a246:	f821 0b02 	strh.w	r0, [r1], #2
  for (i = n; i != 0; i--)
 800a24a:	3b01      	subs	r3, #1
 800a24c:	e7f7      	b.n	800a23e <PCD_ReadPMA+0xc>

0800a24e <HAL_PCDEx_SetConnectionState>:
 __weak void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PCDEx_SetConnectionState could be implenetd in the user file
   */ 
}
 800a24e:	4770      	bx	lr

0800a250 <I2C_TransferConfig>:
  *     @arg I2C_GENERATE_START_READ: Generate Restart for read request.
  *     @arg I2C_GENERATE_START_WRITE: Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800a250:	b530      	push	{r4, r5, lr}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));
    
  /* Get the CR2 register value */
  tmpreg = hi2c->Instance->CR2;
 800a252:	6804      	ldr	r4, [r0, #0]
  
  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
  
  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 800a254:	9d03      	ldr	r5, [sp, #12]
  tmpreg = hi2c->Instance->CR2;
 800a256:	6860      	ldr	r0, [r4, #4]
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 800a258:	f020 707f 	bic.w	r0, r0, #66846720	; 0x3fc0000
 800a25c:	f420 3059 	bic.w	r0, r0, #222208	; 0x36400
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 800a260:	432b      	orrs	r3, r5
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 800a262:	f420 707f 	bic.w	r0, r0, #1020	; 0x3fc
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 800a266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a26a:	f3c1 0109 	ubfx	r1, r1, #0, #10
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 800a26e:	f020 0003 	bic.w	r0, r0, #3
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 800a272:	430b      	orrs	r3, r1
 800a274:	4303      	orrs	r3, r0
            (uint32_t)Mode | (uint32_t)Request);
  
  /* update CR2 register */
  hi2c->Instance->CR2 = tmpreg;  
 800a276:	6063      	str	r3, [r4, #4]
}  
 800a278:	bd30      	pop	{r4, r5, pc}

0800a27a <I2C_IsAcknowledgeFailed>:
{
 800a27a:	b570      	push	{r4, r5, r6, lr}
 800a27c:	4604      	mov	r4, r0
 800a27e:	460d      	mov	r5, r1
  tickstart = HAL_GetTick();
 800a280:	f7fe ffc4 	bl	800920c <HAL_GetTick>
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a284:	6822      	ldr	r2, [r4, #0]
 800a286:	6993      	ldr	r3, [r2, #24]
 800a288:	f013 0310 	ands.w	r3, r3, #16
  tickstart = HAL_GetTick();
 800a28c:	4606      	mov	r6, r0
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a28e:	d03e      	beq.n	800a30e <I2C_IsAcknowledgeFailed+0x94>
    if((hi2c->State == HAL_I2C_STATE_MASTER_BUSY_TX) || (hi2c->State == HAL_I2C_STATE_MEM_BUSY_TX)
 800a290:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800a294:	2b12      	cmp	r3, #18
 800a296:	d007      	beq.n	800a2a8 <I2C_IsAcknowledgeFailed+0x2e>
 800a298:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800a29c:	2b52      	cmp	r3, #82	; 0x52
 800a29e:	d003      	beq.n	800a2a8 <I2C_IsAcknowledgeFailed+0x2e>
       || (hi2c->State == HAL_I2C_STATE_MEM_BUSY_RX))
 800a2a0:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800a2a4:	2b62      	cmp	r3, #98	; 0x62
 800a2a6:	d106      	bne.n	800a2b6 <I2C_IsAcknowledgeFailed+0x3c>
      if((hi2c->Instance->CR2 & I2C_AUTOEND_MODE) != I2C_AUTOEND_MODE)
 800a2a8:	6853      	ldr	r3, [r2, #4]
 800a2aa:	0198      	lsls	r0, r3, #6
 800a2ac:	d403      	bmi.n	800a2b6 <I2C_IsAcknowledgeFailed+0x3c>
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800a2ae:	6853      	ldr	r3, [r2, #4]
 800a2b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a2b4:	6053      	str	r3, [r2, #4]
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a2b6:	6823      	ldr	r3, [r4, #0]
 800a2b8:	699a      	ldr	r2, [r3, #24]
 800a2ba:	0692      	lsls	r2, r2, #26
 800a2bc:	d517      	bpl.n	800a2ee <I2C_IsAcknowledgeFailed+0x74>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a2be:	2210      	movs	r2, #16
 800a2c0:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a2c2:	2220      	movs	r2, #32
 800a2c4:	61da      	str	r2, [r3, #28]
    __HAL_I2C_RESET_CR2(hi2c);
 800a2c6:	685a      	ldr	r2, [r3, #4]
 800a2c8:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 800a2cc:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 800a2d0:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800a2d4:	f022 0201 	bic.w	r2, r2, #1
 800a2d8:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800a2da:	2304      	movs	r3, #4
 800a2dc:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
    hi2c->State= HAL_I2C_STATE_READY;
 800a2e0:	2001      	movs	r0, #1
    __HAL_UNLOCK(hi2c);
 800a2e2:	2300      	movs	r3, #0
    hi2c->State= HAL_I2C_STATE_READY;
 800a2e4:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    __HAL_UNLOCK(hi2c);
 800a2e8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 800a2ec:	e00e      	b.n	800a30c <I2C_IsAcknowledgeFailed+0x92>
      if(Timeout != HAL_MAX_DELAY)
 800a2ee:	1c69      	adds	r1, r5, #1
 800a2f0:	d0e2      	beq.n	800a2b8 <I2C_IsAcknowledgeFailed+0x3e>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800a2f2:	b125      	cbz	r5, 800a2fe <I2C_IsAcknowledgeFailed+0x84>
 800a2f4:	f7fe ff8a 	bl	800920c <HAL_GetTick>
 800a2f8:	1b80      	subs	r0, r0, r6
 800a2fa:	42a8      	cmp	r0, r5
 800a2fc:	d9db      	bls.n	800a2b6 <I2C_IsAcknowledgeFailed+0x3c>
          hi2c->State= HAL_I2C_STATE_READY;
 800a2fe:	2301      	movs	r3, #1
 800a300:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          __HAL_UNLOCK(hi2c);
 800a304:	2300      	movs	r3, #0
 800a306:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          return HAL_TIMEOUT;
 800a30a:	2003      	movs	r0, #3
}
 800a30c:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 800a30e:	4618      	mov	r0, r3
 800a310:	e7fc      	b.n	800a30c <I2C_IsAcknowledgeFailed+0x92>

0800a312 <I2C_WaitOnTXISFlagUntilTimeout>:
{  
 800a312:	b570      	push	{r4, r5, r6, lr}
 800a314:	4604      	mov	r4, r0
 800a316:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 800a318:	f7fe ff78 	bl	800920c <HAL_GetTick>
 800a31c:	4606      	mov	r6, r0
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a31e:	6823      	ldr	r3, [r4, #0]
 800a320:	699b      	ldr	r3, [r3, #24]
 800a322:	079b      	lsls	r3, r3, #30
 800a324:	d501      	bpl.n	800a32a <I2C_WaitOnTXISFlagUntilTimeout+0x18>
  return HAL_OK;      
 800a326:	2000      	movs	r0, #0
 800a328:	e014      	b.n	800a354 <I2C_WaitOnTXISFlagUntilTimeout+0x42>
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout) != HAL_OK)
 800a32a:	4629      	mov	r1, r5
 800a32c:	4620      	mov	r0, r4
 800a32e:	f7ff ffa4 	bl	800a27a <I2C_IsAcknowledgeFailed>
 800a332:	b9b0      	cbnz	r0, 800a362 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
    if(Timeout != HAL_MAX_DELAY)
 800a334:	1c6a      	adds	r2, r5, #1
 800a336:	d0f2      	beq.n	800a31e <I2C_WaitOnTXISFlagUntilTimeout+0xc>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800a338:	b96d      	cbnz	r5, 800a356 <I2C_WaitOnTXISFlagUntilTimeout+0x44>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a33a:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 800a33e:	f043 0320 	orr.w	r3, r3, #32
 800a342:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
        hi2c->State= HAL_I2C_STATE_READY;
 800a346:	2301      	movs	r3, #1
 800a348:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hi2c);
 800a34c:	2300      	movs	r3, #0
 800a34e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_TIMEOUT;
 800a352:	2003      	movs	r0, #3
}
 800a354:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800a356:	f7fe ff59 	bl	800920c <HAL_GetTick>
 800a35a:	1b80      	subs	r0, r0, r6
 800a35c:	42a8      	cmp	r0, r5
 800a35e:	d9de      	bls.n	800a31e <I2C_WaitOnTXISFlagUntilTimeout+0xc>
 800a360:	e7eb      	b.n	800a33a <I2C_WaitOnTXISFlagUntilTimeout+0x28>
      return HAL_ERROR;
 800a362:	2001      	movs	r0, #1
 800a364:	e7f6      	b.n	800a354 <I2C_WaitOnTXISFlagUntilTimeout+0x42>

0800a366 <I2C_WaitOnFlagUntilTimeout>:
{  
 800a366:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a36a:	4604      	mov	r4, r0
 800a36c:	460e      	mov	r6, r1
 800a36e:	4690      	mov	r8, r2
 800a370:	461d      	mov	r5, r3
  uint32_t tickstart = HAL_GetTick();
 800a372:	f7fe ff4b 	bl	800920c <HAL_GetTick>
 800a376:	4607      	mov	r7, r0
  if(Status == RESET)
 800a378:	f1b8 0f00 	cmp.w	r8, #0
 800a37c:	d01d      	beq.n	800a3ba <I2C_WaitOnFlagUntilTimeout+0x54>
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) != RESET)
 800a37e:	6822      	ldr	r2, [r4, #0]
 800a380:	6993      	ldr	r3, [r2, #24]
 800a382:	ea36 0303 	bics.w	r3, r6, r3
 800a386:	d11d      	bne.n	800a3c4 <I2C_WaitOnFlagUntilTimeout+0x5e>
      if(Timeout != HAL_MAX_DELAY)
 800a388:	1c6b      	adds	r3, r5, #1
 800a38a:	d0f9      	beq.n	800a380 <I2C_WaitOnFlagUntilTimeout+0x1a>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800a38c:	b16d      	cbz	r5, 800a3aa <I2C_WaitOnFlagUntilTimeout+0x44>
 800a38e:	f7fe ff3d 	bl	800920c <HAL_GetTick>
 800a392:	1bc0      	subs	r0, r0, r7
 800a394:	42a8      	cmp	r0, r5
 800a396:	d9f2      	bls.n	800a37e <I2C_WaitOnFlagUntilTimeout+0x18>
 800a398:	e007      	b.n	800a3aa <I2C_WaitOnFlagUntilTimeout+0x44>
      if(Timeout != HAL_MAX_DELAY)
 800a39a:	1c69      	adds	r1, r5, #1
 800a39c:	d00e      	beq.n	800a3bc <I2C_WaitOnFlagUntilTimeout+0x56>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800a39e:	b125      	cbz	r5, 800a3aa <I2C_WaitOnFlagUntilTimeout+0x44>
 800a3a0:	f7fe ff34 	bl	800920c <HAL_GetTick>
 800a3a4:	1bc0      	subs	r0, r0, r7
 800a3a6:	42a8      	cmp	r0, r5
 800a3a8:	d907      	bls.n	800a3ba <I2C_WaitOnFlagUntilTimeout+0x54>
          hi2c->State= HAL_I2C_STATE_READY;
 800a3aa:	2301      	movs	r3, #1
 800a3ac:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          __HAL_UNLOCK(hi2c);
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          return HAL_TIMEOUT;
 800a3b6:	2003      	movs	r0, #3
 800a3b8:	e005      	b.n	800a3c6 <I2C_WaitOnFlagUntilTimeout+0x60>
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a3ba:	6822      	ldr	r2, [r4, #0]
 800a3bc:	6993      	ldr	r3, [r2, #24]
 800a3be:	ea36 0303 	bics.w	r3, r6, r3
 800a3c2:	d1ea      	bne.n	800a39a <I2C_WaitOnFlagUntilTimeout+0x34>
  return HAL_OK;
 800a3c4:	2000      	movs	r0, #0
}
 800a3c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a3ca <I2C_RequestMemoryWrite>:
{
 800a3ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a3cc:	9f08      	ldr	r7, [sp, #32]
 800a3ce:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800a3d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
{
 800a3d4:	4604      	mov	r4, r0
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800a3d6:	9300      	str	r3, [sp, #0]
{
 800a3d8:	4615      	mov	r5, r2
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800a3da:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a3de:	b2f2      	uxtb	r2, r6
 800a3e0:	f7ff ff36 	bl	800a250 <I2C_TransferConfig>
  if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 800a3e4:	4639      	mov	r1, r7
 800a3e6:	4620      	mov	r0, r4
 800a3e8:	f7ff ff93 	bl	800a312 <I2C_WaitOnTXISFlagUntilTimeout>
 800a3ec:	b140      	cbz	r0, 800a400 <I2C_RequestMemoryWrite+0x36>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a3ee:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 800a3f2:	2b04      	cmp	r3, #4
 800a3f4:	d002      	beq.n	800a3fc <I2C_RequestMemoryWrite+0x32>
      return HAL_TIMEOUT;
 800a3f6:	2003      	movs	r0, #3
}
 800a3f8:	b003      	add	sp, #12
 800a3fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_ERROR;
 800a3fc:	2001      	movs	r0, #1
 800a3fe:	e7fb      	b.n	800a3f8 <I2C_RequestMemoryWrite+0x2e>
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a400:	2e01      	cmp	r6, #1
    hi2c->Instance->TXDR = __HAL_I2C_MEM_ADD_LSB(MemAddress);    
 800a402:	6823      	ldr	r3, [r4, #0]
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a404:	d10a      	bne.n	800a41c <I2C_RequestMemoryWrite+0x52>
    hi2c->Instance->TXDR = __HAL_I2C_MEM_ADD_LSB(MemAddress);  
 800a406:	b2ed      	uxtb	r5, r5
 800a408:	629d      	str	r5, [r3, #40]	; 0x28
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout) != HAL_OK)      
 800a40a:	2200      	movs	r2, #0
 800a40c:	463b      	mov	r3, r7
 800a40e:	2180      	movs	r1, #128	; 0x80
 800a410:	4620      	mov	r0, r4
 800a412:	f7ff ffa8 	bl	800a366 <I2C_WaitOnFlagUntilTimeout>
 800a416:	2800      	cmp	r0, #0
 800a418:	d0ee      	beq.n	800a3f8 <I2C_RequestMemoryWrite+0x2e>
 800a41a:	e7ec      	b.n	800a3f6 <I2C_RequestMemoryWrite+0x2c>
    hi2c->Instance->TXDR = __HAL_I2C_MEM_ADD_MSB(MemAddress); 
 800a41c:	0a2a      	lsrs	r2, r5, #8
 800a41e:	629a      	str	r2, [r3, #40]	; 0x28
    if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 800a420:	4639      	mov	r1, r7
 800a422:	4620      	mov	r0, r4
 800a424:	f7ff ff75 	bl	800a312 <I2C_WaitOnTXISFlagUntilTimeout>
 800a428:	2800      	cmp	r0, #0
 800a42a:	d1e0      	bne.n	800a3ee <I2C_RequestMemoryWrite+0x24>
    hi2c->Instance->TXDR = __HAL_I2C_MEM_ADD_LSB(MemAddress);  
 800a42c:	6823      	ldr	r3, [r4, #0]
 800a42e:	e7ea      	b.n	800a406 <I2C_RequestMemoryWrite+0x3c>

0800a430 <I2C_RequestMemoryRead>:
{
 800a430:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a432:	9f08      	ldr	r7, [sp, #32]
 800a434:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800a436:	f44f 5300 	mov.w	r3, #8192	; 0x2000
{
 800a43a:	4604      	mov	r4, r0
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800a43c:	9300      	str	r3, [sp, #0]
{
 800a43e:	4615      	mov	r5, r2
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800a440:	2300      	movs	r3, #0
 800a442:	b2f2      	uxtb	r2, r6
 800a444:	f7ff ff04 	bl	800a250 <I2C_TransferConfig>
  if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 800a448:	4639      	mov	r1, r7
 800a44a:	4620      	mov	r0, r4
 800a44c:	f7ff ff61 	bl	800a312 <I2C_WaitOnTXISFlagUntilTimeout>
 800a450:	b140      	cbz	r0, 800a464 <I2C_RequestMemoryRead+0x34>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a452:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 800a456:	2b04      	cmp	r3, #4
 800a458:	d002      	beq.n	800a460 <I2C_RequestMemoryRead+0x30>
      return HAL_TIMEOUT;
 800a45a:	2003      	movs	r0, #3
}
 800a45c:	b003      	add	sp, #12
 800a45e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_ERROR;
 800a460:	2001      	movs	r0, #1
 800a462:	e7fb      	b.n	800a45c <I2C_RequestMemoryRead+0x2c>
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a464:	2e01      	cmp	r6, #1
    hi2c->Instance->TXDR = __HAL_I2C_MEM_ADD_LSB(MemAddress);    
 800a466:	6823      	ldr	r3, [r4, #0]
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a468:	d10a      	bne.n	800a480 <I2C_RequestMemoryRead+0x50>
    hi2c->Instance->TXDR = __HAL_I2C_MEM_ADD_LSB(MemAddress);  
 800a46a:	b2ed      	uxtb	r5, r5
 800a46c:	629d      	str	r5, [r3, #40]	; 0x28
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout) != HAL_OK)      
 800a46e:	2200      	movs	r2, #0
 800a470:	463b      	mov	r3, r7
 800a472:	2140      	movs	r1, #64	; 0x40
 800a474:	4620      	mov	r0, r4
 800a476:	f7ff ff76 	bl	800a366 <I2C_WaitOnFlagUntilTimeout>
 800a47a:	2800      	cmp	r0, #0
 800a47c:	d0ee      	beq.n	800a45c <I2C_RequestMemoryRead+0x2c>
 800a47e:	e7ec      	b.n	800a45a <I2C_RequestMemoryRead+0x2a>
    hi2c->Instance->TXDR = __HAL_I2C_MEM_ADD_MSB(MemAddress); 
 800a480:	0a2a      	lsrs	r2, r5, #8
 800a482:	629a      	str	r2, [r3, #40]	; 0x28
    if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 800a484:	4639      	mov	r1, r7
 800a486:	4620      	mov	r0, r4
 800a488:	f7ff ff43 	bl	800a312 <I2C_WaitOnTXISFlagUntilTimeout>
 800a48c:	2800      	cmp	r0, #0
 800a48e:	d1e0      	bne.n	800a452 <I2C_RequestMemoryRead+0x22>
    hi2c->Instance->TXDR = __HAL_I2C_MEM_ADD_LSB(MemAddress);  
 800a490:	6823      	ldr	r3, [r4, #0]
 800a492:	e7ea      	b.n	800a46a <I2C_RequestMemoryRead+0x3a>

0800a494 <I2C_WaitOnSTOPFlagUntilTimeout>:
{  
 800a494:	b570      	push	{r4, r5, r6, lr}
 800a496:	4604      	mov	r4, r0
 800a498:	460d      	mov	r5, r1
  tickstart = HAL_GetTick();
 800a49a:	f7fe feb7 	bl	800920c <HAL_GetTick>
 800a49e:	4606      	mov	r6, r0
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a4a0:	6823      	ldr	r3, [r4, #0]
 800a4a2:	699b      	ldr	r3, [r3, #24]
 800a4a4:	069b      	lsls	r3, r3, #26
 800a4a6:	d501      	bpl.n	800a4ac <I2C_WaitOnSTOPFlagUntilTimeout+0x18>
  return HAL_OK;
 800a4a8:	2000      	movs	r0, #0
 800a4aa:	e012      	b.n	800a4d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x3e>
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout) != HAL_OK)
 800a4ac:	4629      	mov	r1, r5
 800a4ae:	4620      	mov	r0, r4
 800a4b0:	f7ff fee3 	bl	800a27a <I2C_IsAcknowledgeFailed>
 800a4b4:	b9a0      	cbnz	r0, 800a4e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800a4b6:	b96d      	cbnz	r5, 800a4d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x40>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a4b8:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 800a4bc:	f043 0320 	orr.w	r3, r3, #32
 800a4c0:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
      hi2c->State= HAL_I2C_STATE_READY;
 800a4c4:	2301      	movs	r3, #1
 800a4c6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_UNLOCK(hi2c);
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 800a4d0:	2003      	movs	r0, #3
}
 800a4d2:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800a4d4:	f7fe fe9a 	bl	800920c <HAL_GetTick>
 800a4d8:	1b80      	subs	r0, r0, r6
 800a4da:	42a8      	cmp	r0, r5
 800a4dc:	d9e0      	bls.n	800a4a0 <I2C_WaitOnSTOPFlagUntilTimeout+0xc>
 800a4de:	e7eb      	b.n	800a4b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x24>
      return HAL_ERROR;
 800a4e0:	2001      	movs	r0, #1
 800a4e2:	e7f6      	b.n	800a4d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x3e>

0800a4e4 <HAL_I2C_MspInit>:
}
 800a4e4:	4770      	bx	lr

0800a4e6 <HAL_I2C_Init>:
{ 
 800a4e6:	b510      	push	{r4, lr}
  if(hi2c == NULL)
 800a4e8:	4604      	mov	r4, r0
 800a4ea:	2800      	cmp	r0, #0
 800a4ec:	d041      	beq.n	800a572 <HAL_I2C_Init+0x8c>
  if(hi2c->State == HAL_I2C_STATE_RESET)
 800a4ee:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800a4f2:	b90b      	cbnz	r3, 800a4f8 <HAL_I2C_Init+0x12>
    HAL_I2C_MspInit(hi2c);
 800a4f4:	f7ff fff6 	bl	800a4e4 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800a4f8:	2302      	movs	r3, #2
 800a4fa:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_I2C_DISABLE(hi2c);
 800a4fe:	6823      	ldr	r3, [r4, #0]
 800a500:	681a      	ldr	r2, [r3, #0]
 800a502:	f022 0201 	bic.w	r2, r2, #1
 800a506:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a508:	6862      	ldr	r2, [r4, #4]
 800a50a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a50e:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a510:	689a      	ldr	r2, [r3, #8]
 800a512:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a516:	609a      	str	r2, [r3, #8]
    if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a518:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if(hi2c->Init.OwnAddress1 != 0)
 800a51c:	b31a      	cbz	r2, 800a566 <HAL_I2C_Init+0x80>
    if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a51e:	2901      	cmp	r1, #1
 800a520:	d11e      	bne.n	800a560 <HAL_I2C_Init+0x7a>
      hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a522:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a526:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a528:	685a      	ldr	r2, [r3, #4]
 800a52a:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800a52e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a532:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800a534:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 800a538:	430a      	orrs	r2, r1
 800a53a:	69a1      	ldr	r1, [r4, #24]
 800a53c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800a540:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a542:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 800a546:	430a      	orrs	r2, r1
 800a548:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800a54a:	681a      	ldr	r2, [r3, #0]
 800a54c:	f042 0201 	orr.w	r2, r2, #1
 800a550:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a552:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 800a554:	2301      	movs	r3, #1
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a556:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
  hi2c->State = HAL_I2C_STATE_READY;
 800a55a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 800a55e:	bd10      	pop	{r4, pc}
      hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a560:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800a564:	609a      	str	r2, [r3, #8]
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a566:	2902      	cmp	r1, #2
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800a568:	bf04      	itt	eq
 800a56a:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 800a56e:	605a      	streq	r2, [r3, #4]
 800a570:	e7da      	b.n	800a528 <HAL_I2C_Init+0x42>
    return HAL_ERROR;
 800a572:	2001      	movs	r0, #1
 800a574:	e7f3      	b.n	800a55e <HAL_I2C_Init+0x78>

0800a576 <HAL_I2C_MspDeInit>:
 800a576:	4770      	bx	lr

0800a578 <HAL_I2C_DeInit>:
{
 800a578:	b510      	push	{r4, lr}
  if(hi2c == NULL)
 800a57a:	4604      	mov	r4, r0
 800a57c:	b188      	cbz	r0, 800a5a2 <HAL_I2C_DeInit+0x2a>
  __HAL_I2C_DISABLE(hi2c);
 800a57e:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800a580:	2302      	movs	r3, #2
 800a582:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  __HAL_I2C_DISABLE(hi2c);
 800a586:	6813      	ldr	r3, [r2, #0]
 800a588:	f023 0301 	bic.w	r3, r3, #1
 800a58c:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 800a58e:	f7ff fff2 	bl	800a576 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a592:	2000      	movs	r0, #0
 800a594:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
  __HAL_UNLOCK(hi2c);
 800a598:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  hi2c->State = HAL_I2C_STATE_RESET;
 800a59c:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 800a5a0:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800a5a2:	2001      	movs	r0, #1
 800a5a4:	e7fc      	b.n	800a5a0 <HAL_I2C_DeInit+0x28>

0800a5a6 <HAL_I2C_Mem_Write>:
{
 800a5a6:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(hi2c->State == HAL_I2C_STATE_READY)
 800a5aa:	f890 6035 	ldrb.w	r6, [r0, #53]	; 0x35
{
 800a5ae:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 800a5b2:	f8bd 502c 	ldrh.w	r5, [sp, #44]	; 0x2c
 800a5b6:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
  if(hi2c->State == HAL_I2C_STATE_READY)
 800a5ba:	2e01      	cmp	r6, #1
{
 800a5bc:	4604      	mov	r4, r0
 800a5be:	4688      	mov	r8, r1
  if(hi2c->State == HAL_I2C_STATE_READY)
 800a5c0:	b2f7      	uxtb	r7, r6
 800a5c2:	d170      	bne.n	800a6a6 <HAL_I2C_Mem_Write+0x100>
    if((pData == NULL) || (Size == 0)) 
 800a5c4:	f1b9 0f00 	cmp.w	r9, #0
 800a5c8:	d01e      	beq.n	800a608 <HAL_I2C_Mem_Write+0x62>
 800a5ca:	b1ed      	cbz	r5, 800a608 <HAL_I2C_Mem_Write+0x62>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800a5cc:	6806      	ldr	r6, [r0, #0]
 800a5ce:	69b6      	ldr	r6, [r6, #24]
 800a5d0:	f416 4600 	ands.w	r6, r6, #32768	; 0x8000
 800a5d4:	d167      	bne.n	800a6a6 <HAL_I2C_Mem_Write+0x100>
    __HAL_LOCK(hi2c);
 800a5d6:	f890 c034 	ldrb.w	ip, [r0, #52]	; 0x34
 800a5da:	f1bc 0f01 	cmp.w	ip, #1
 800a5de:	d062      	beq.n	800a6a6 <HAL_I2C_Mem_Write+0x100>
    hi2c->State = HAL_I2C_STATE_MEM_BUSY_TX;
 800a5e0:	f04f 0c52 	mov.w	ip, #82	; 0x52
 800a5e4:	f880 c035 	strb.w	ip, [r0, #53]	; 0x35
    __HAL_LOCK(hi2c);
 800a5e8:	f880 7034 	strb.w	r7, [r0, #52]	; 0x34
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a5ec:	f880 6036 	strb.w	r6, [r0, #54]	; 0x36
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout) != HAL_OK)
 800a5f0:	f8cd a000 	str.w	sl, [sp]
 800a5f4:	f7ff fee9 	bl	800a3ca <I2C_RequestMemoryWrite>
 800a5f8:	b150      	cbz	r0, 800a610 <HAL_I2C_Mem_Write+0x6a>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a5fa:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
        __HAL_UNLOCK(hi2c);
 800a5fe:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a602:	2b04      	cmp	r3, #4
 800a604:	d000      	beq.n	800a608 <HAL_I2C_Mem_Write+0x62>
          return HAL_TIMEOUT;
 800a606:	2703      	movs	r7, #3
}
 800a608:	4638      	mov	r0, r7
 800a60a:	b002      	add	sp, #8
 800a60c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a610:	9000      	str	r0, [sp, #0]
        if(Size > 255)
 800a612:	2dff      	cmp	r5, #255	; 0xff
 800a614:	d908      	bls.n	800a628 <HAL_I2C_Mem_Write+0x82>
          I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a616:	22ff      	movs	r2, #255	; 0xff
 800a618:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a61c:	4641      	mov	r1, r8
 800a61e:	4620      	mov	r0, r4
 800a620:	f7ff fe16 	bl	800a250 <I2C_TransferConfig>
          Sizetmp = 255;
 800a624:	4616      	mov	r6, r2
 800a626:	e007      	b.n	800a638 <HAL_I2C_Mem_Write+0x92>
      I2C_TransferConfig(hi2c,DevAddress,Size, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a628:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a62c:	b2ea      	uxtb	r2, r5
 800a62e:	4641      	mov	r1, r8
 800a630:	4620      	mov	r0, r4
 800a632:	f7ff fe0d 	bl	800a250 <I2C_TransferConfig>
      Sizetmp = Size;
 800a636:	462e      	mov	r6, r5
      if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 800a638:	4651      	mov	r1, sl
 800a63a:	4620      	mov	r0, r4
 800a63c:	f7ff fe69 	bl	800a312 <I2C_WaitOnTXISFlagUntilTimeout>
 800a640:	b110      	cbz	r0, 800a648 <HAL_I2C_Mem_Write+0xa2>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a642:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 800a646:	e7dc      	b.n	800a602 <HAL_I2C_Mem_Write+0x5c>
      hi2c->Instance->TXDR = (*pData++);
 800a648:	6823      	ldr	r3, [r4, #0]
 800a64a:	f819 2b01 	ldrb.w	r2, [r9], #1
 800a64e:	629a      	str	r2, [r3, #40]	; 0x28
      Size--;
 800a650:	3d01      	subs	r5, #1
      if((Sizetmp == 0)&&(Size!=0))
 800a652:	3e01      	subs	r6, #1
      Size--;
 800a654:	b2ad      	uxth	r5, r5
      if((Sizetmp == 0)&&(Size!=0))
 800a656:	d10a      	bne.n	800a66e <HAL_I2C_Mem_Write+0xc8>
 800a658:	b15d      	cbz	r5, 800a672 <HAL_I2C_Mem_Write+0xcc>
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout) != HAL_OK)      
 800a65a:	4653      	mov	r3, sl
 800a65c:	4632      	mov	r2, r6
 800a65e:	2180      	movs	r1, #128	; 0x80
 800a660:	4620      	mov	r0, r4
 800a662:	f7ff fe80 	bl	800a366 <I2C_WaitOnFlagUntilTimeout>
 800a666:	2800      	cmp	r0, #0
 800a668:	d1cd      	bne.n	800a606 <HAL_I2C_Mem_Write+0x60>
          I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a66a:	9600      	str	r6, [sp, #0]
 800a66c:	e7d1      	b.n	800a612 <HAL_I2C_Mem_Write+0x6c>
    }while(Size > 0);
 800a66e:	2d00      	cmp	r5, #0
 800a670:	d1e2      	bne.n	800a638 <HAL_I2C_Mem_Write+0x92>
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, I2C_TIMEOUT_STOPF) != HAL_OK)
 800a672:	2119      	movs	r1, #25
 800a674:	4620      	mov	r0, r4
 800a676:	f7ff ff0d 	bl	800a494 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a67a:	2800      	cmp	r0, #0
 800a67c:	d1e1      	bne.n	800a642 <HAL_I2C_Mem_Write+0x9c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a67e:	6823      	ldr	r3, [r4, #0]
 800a680:	2220      	movs	r2, #32
 800a682:	61da      	str	r2, [r3, #28]
    __HAL_I2C_RESET_CR2(hi2c);
 800a684:	685a      	ldr	r2, [r3, #4]
 800a686:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 800a68a:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 800a68e:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800a692:	f022 0201 	bic.w	r2, r2, #1
 800a696:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY; 	  
 800a698:	2301      	movs	r3, #1
 800a69a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    __HAL_UNLOCK(hi2c);
 800a69e:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    return HAL_OK;
 800a6a2:	4607      	mov	r7, r0
 800a6a4:	e7b0      	b.n	800a608 <HAL_I2C_Mem_Write+0x62>
    return HAL_BUSY;
 800a6a6:	2702      	movs	r7, #2
 800a6a8:	e7ae      	b.n	800a608 <HAL_I2C_Mem_Write+0x62>

0800a6aa <HAL_I2C_Mem_Read>:
{
 800a6aa:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(hi2c->State == HAL_I2C_STATE_READY)
 800a6ae:	f890 6035 	ldrb.w	r6, [r0, #53]	; 0x35
{
 800a6b2:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 800a6b6:	f8bd 502c 	ldrh.w	r5, [sp, #44]	; 0x2c
 800a6ba:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
  if(hi2c->State == HAL_I2C_STATE_READY)
 800a6be:	2e01      	cmp	r6, #1
{
 800a6c0:	4604      	mov	r4, r0
 800a6c2:	4688      	mov	r8, r1
  if(hi2c->State == HAL_I2C_STATE_READY)
 800a6c4:	b2f7      	uxtb	r7, r6
 800a6c6:	d175      	bne.n	800a7b4 <HAL_I2C_Mem_Read+0x10a>
    if((pData == NULL) || (Size == 0)) 
 800a6c8:	f1b9 0f00 	cmp.w	r9, #0
 800a6cc:	d01e      	beq.n	800a70c <HAL_I2C_Mem_Read+0x62>
 800a6ce:	b1ed      	cbz	r5, 800a70c <HAL_I2C_Mem_Read+0x62>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800a6d0:	6806      	ldr	r6, [r0, #0]
 800a6d2:	69b6      	ldr	r6, [r6, #24]
 800a6d4:	f416 4600 	ands.w	r6, r6, #32768	; 0x8000
 800a6d8:	d16c      	bne.n	800a7b4 <HAL_I2C_Mem_Read+0x10a>
    __HAL_LOCK(hi2c);
 800a6da:	f890 c034 	ldrb.w	ip, [r0, #52]	; 0x34
 800a6de:	f1bc 0f01 	cmp.w	ip, #1
 800a6e2:	d067      	beq.n	800a7b4 <HAL_I2C_Mem_Read+0x10a>
    hi2c->State = HAL_I2C_STATE_MEM_BUSY_RX;
 800a6e4:	f04f 0c62 	mov.w	ip, #98	; 0x62
 800a6e8:	f880 c035 	strb.w	ip, [r0, #53]	; 0x35
    __HAL_LOCK(hi2c);
 800a6ec:	f880 7034 	strb.w	r7, [r0, #52]	; 0x34
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a6f0:	f880 6036 	strb.w	r6, [r0, #54]	; 0x36
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout) != HAL_OK)
 800a6f4:	f8cd a000 	str.w	sl, [sp]
 800a6f8:	f7ff fe9a 	bl	800a430 <I2C_RequestMemoryRead>
 800a6fc:	b150      	cbz	r0, 800a714 <HAL_I2C_Mem_Read+0x6a>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a6fe:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
        __HAL_UNLOCK(hi2c);
 800a702:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a706:	2b04      	cmp	r3, #4
 800a708:	d000      	beq.n	800a70c <HAL_I2C_Mem_Read+0x62>
        return HAL_TIMEOUT;
 800a70a:	2703      	movs	r7, #3
}
 800a70c:	4638      	mov	r0, r7
 800a70e:	b002      	add	sp, #8
 800a710:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(Size > 255)
 800a714:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 800a718:	2dff      	cmp	r5, #255	; 0xff
      I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800a71a:	9300      	str	r3, [sp, #0]
        if(Size > 255)
 800a71c:	d908      	bls.n	800a730 <HAL_I2C_Mem_Read+0x86>
          I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a71e:	22ff      	movs	r2, #255	; 0xff
 800a720:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a724:	4641      	mov	r1, r8
 800a726:	4620      	mov	r0, r4
 800a728:	f7ff fd92 	bl	800a250 <I2C_TransferConfig>
          Sizetmp = 255;
 800a72c:	4616      	mov	r6, r2
 800a72e:	e007      	b.n	800a740 <HAL_I2C_Mem_Read+0x96>
      I2C_TransferConfig(hi2c,DevAddress,Size, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800a730:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a734:	b2ea      	uxtb	r2, r5
 800a736:	4641      	mov	r1, r8
 800a738:	4620      	mov	r0, r4
 800a73a:	f7ff fd89 	bl	800a250 <I2C_TransferConfig>
      Sizetmp = Size;
 800a73e:	462e      	mov	r6, r5
      if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout) != HAL_OK)      
 800a740:	4653      	mov	r3, sl
 800a742:	2200      	movs	r2, #0
 800a744:	2104      	movs	r1, #4
 800a746:	4620      	mov	r0, r4
 800a748:	f7ff fe0d 	bl	800a366 <I2C_WaitOnFlagUntilTimeout>
 800a74c:	2800      	cmp	r0, #0
 800a74e:	d1dc      	bne.n	800a70a <HAL_I2C_Mem_Read+0x60>
      (*pData++) = hi2c->Instance->RXDR;
 800a750:	6823      	ldr	r3, [r4, #0]
      Size--;   
 800a752:	3d01      	subs	r5, #1
      (*pData++) = hi2c->Instance->RXDR;
 800a754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a756:	f809 3b01 	strb.w	r3, [r9], #1
      if((Sizetmp == 0)&&(Size!=0))
 800a75a:	3e01      	subs	r6, #1
      Size--;   
 800a75c:	b2ad      	uxth	r5, r5
      if((Sizetmp == 0)&&(Size!=0))
 800a75e:	d10b      	bne.n	800a778 <HAL_I2C_Mem_Read+0xce>
 800a760:	b165      	cbz	r5, 800a77c <HAL_I2C_Mem_Read+0xd2>
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout) != HAL_OK)      
 800a762:	4653      	mov	r3, sl
 800a764:	4632      	mov	r2, r6
 800a766:	2180      	movs	r1, #128	; 0x80
 800a768:	4620      	mov	r0, r4
 800a76a:	f7ff fdfc 	bl	800a366 <I2C_WaitOnFlagUntilTimeout>
 800a76e:	2800      	cmp	r0, #0
 800a770:	d1cb      	bne.n	800a70a <HAL_I2C_Mem_Read+0x60>
          I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a772:	9600      	str	r6, [sp, #0]
        if(Size > 255)
 800a774:	2dff      	cmp	r5, #255	; 0xff
 800a776:	e7d1      	b.n	800a71c <HAL_I2C_Mem_Read+0x72>
    }while(Size > 0);
 800a778:	2d00      	cmp	r5, #0
 800a77a:	d1e1      	bne.n	800a740 <HAL_I2C_Mem_Read+0x96>
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, I2C_TIMEOUT_STOPF) != HAL_OK)
 800a77c:	2119      	movs	r1, #25
 800a77e:	4620      	mov	r0, r4
 800a780:	f7ff fe88 	bl	800a494 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a784:	b110      	cbz	r0, 800a78c <HAL_I2C_Mem_Read+0xe2>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a786:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 800a78a:	e7bc      	b.n	800a706 <HAL_I2C_Mem_Read+0x5c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a78c:	6823      	ldr	r3, [r4, #0]
 800a78e:	2220      	movs	r2, #32
 800a790:	61da      	str	r2, [r3, #28]
    __HAL_I2C_RESET_CR2(hi2c);
 800a792:	685a      	ldr	r2, [r3, #4]
 800a794:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 800a798:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 800a79c:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800a7a0:	f022 0201 	bic.w	r2, r2, #1
 800a7a4:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800a7a6:	2301      	movs	r3, #1
 800a7a8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    __HAL_UNLOCK(hi2c);
 800a7ac:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    return HAL_OK;
 800a7b0:	4607      	mov	r7, r0
 800a7b2:	e7ab      	b.n	800a70c <HAL_I2C_Mem_Read+0x62>
    return HAL_BUSY;
 800a7b4:	2702      	movs	r7, #2
 800a7b6:	e7a9      	b.n	800a70c <HAL_I2C_Mem_Read+0x62>

0800a7b8 <HAL_I2C_GetState>:
  return hi2c->State;
 800a7b8:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
 800a7bc:	4770      	bx	lr

0800a7be <SPI_WaitFifoStateUntilTimeout>:
  * @param State: Fifo state to check
  * @param Timeout : Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout)
{
 800a7be:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800a7c2:	4604      	mov	r4, r0
 800a7c4:	460f      	mov	r7, r1
 800a7c6:	4616      	mov	r6, r2
 800a7c8:	461d      	mov	r5, r3
  __IO uint8_t tmpreg __attribute((unused));
  uint32_t tickstart = HAL_GetTick();
 800a7ca:	f7fe fd1f 	bl	800920c <HAL_GetTick>
 800a7ce:	4680      	mov	r8, r0

  while((hspi->Instance->SR & Flag) != State)
 800a7d0:	6822      	ldr	r2, [r4, #0]
 800a7d2:	6893      	ldr	r3, [r2, #8]
 800a7d4:	403b      	ands	r3, r7
 800a7d6:	42b3      	cmp	r3, r6
 800a7d8:	d101      	bne.n	800a7de <SPI_WaitFifoStateUntilTimeout+0x20>
        return HAL_TIMEOUT;
      }
    }
  }
  
  return HAL_OK;      
 800a7da:	2000      	movs	r0, #0
 800a7dc:	e02f      	b.n	800a83e <SPI_WaitFifoStateUntilTimeout+0x80>
    if((Flag == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800a7de:	f5b7 6fc0 	cmp.w	r7, #1536	; 0x600
 800a7e2:	d104      	bne.n	800a7ee <SPI_WaitFifoStateUntilTimeout+0x30>
 800a7e4:	b91e      	cbnz	r6, 800a7ee <SPI_WaitFifoStateUntilTimeout+0x30>
      tmpreg = *((__IO uint8_t*)&hspi->Instance->DR);
 800a7e6:	7b13      	ldrb	r3, [r2, #12]
 800a7e8:	b2db      	uxtb	r3, r3
 800a7ea:	f88d 3007 	strb.w	r3, [sp, #7]
    if(Timeout != HAL_MAX_DELAY)
 800a7ee:	1c6b      	adds	r3, r5, #1
 800a7f0:	d0ef      	beq.n	800a7d2 <SPI_WaitFifoStateUntilTimeout+0x14>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800a7f2:	bb3d      	cbnz	r5, 800a844 <SPI_WaitFifoStateUntilTimeout+0x86>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a7f4:	6823      	ldr	r3, [r4, #0]
 800a7f6:	685a      	ldr	r2, [r3, #4]
 800a7f8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a7fc:	605a      	str	r2, [r3, #4]
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a7fe:	6862      	ldr	r2, [r4, #4]
 800a800:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800a804:	d10a      	bne.n	800a81c <SPI_WaitFifoStateUntilTimeout+0x5e>
 800a806:	68a2      	ldr	r2, [r4, #8]
 800a808:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800a80c:	d002      	beq.n	800a814 <SPI_WaitFifoStateUntilTimeout+0x56>
 800a80e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800a812:	d103      	bne.n	800a81c <SPI_WaitFifoStateUntilTimeout+0x5e>
          __HAL_SPI_DISABLE(hspi);
 800a814:	681a      	ldr	r2, [r3, #0]
 800a816:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a81a:	601a      	str	r2, [r3, #0]
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED)
 800a81c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800a81e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800a822:	d107      	bne.n	800a834 <SPI_WaitFifoStateUntilTimeout+0x76>
          __HAL_SPI_RESET_CRC(hspi);
 800a824:	681a      	ldr	r2, [r3, #0]
 800a826:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a82a:	601a      	str	r2, [r3, #0]
 800a82c:	681a      	ldr	r2, [r3, #0]
 800a82e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a832:	601a      	str	r2, [r3, #0]
        __HAL_UNLOCK(hspi);
 800a834:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a838:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
        return HAL_TIMEOUT;
 800a83c:	2003      	movs	r0, #3
}
 800a83e:	b002      	add	sp, #8
 800a840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800a844:	f7fe fce2 	bl	800920c <HAL_GetTick>
 800a848:	eba0 0008 	sub.w	r0, r0, r8
 800a84c:	42a8      	cmp	r0, r5
 800a84e:	d9bf      	bls.n	800a7d0 <SPI_WaitFifoStateUntilTimeout+0x12>
 800a850:	e7d0      	b.n	800a7f4 <SPI_WaitFifoStateUntilTimeout+0x36>

0800a852 <SPI_WaitFlagStateUntilTimeout>:
{
 800a852:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a856:	4604      	mov	r4, r0
 800a858:	460f      	mov	r7, r1
 800a85a:	4616      	mov	r6, r2
 800a85c:	461d      	mov	r5, r3
  uint32_t tickstart = HAL_GetTick();
 800a85e:	f7fe fcd5 	bl	800920c <HAL_GetTick>
 800a862:	4680      	mov	r8, r0
  while((hspi->Instance->SR & Flag) != State)
 800a864:	6822      	ldr	r2, [r4, #0]
 800a866:	6893      	ldr	r3, [r2, #8]
 800a868:	403b      	ands	r3, r7
 800a86a:	42b3      	cmp	r3, r6
 800a86c:	d101      	bne.n	800a872 <SPI_WaitFlagStateUntilTimeout+0x20>
  return HAL_OK;      
 800a86e:	2000      	movs	r0, #0
 800a870:	e027      	b.n	800a8c2 <SPI_WaitFlagStateUntilTimeout+0x70>
    if(Timeout != HAL_MAX_DELAY)
 800a872:	1c6b      	adds	r3, r5, #1
 800a874:	d0f7      	beq.n	800a866 <SPI_WaitFlagStateUntilTimeout+0x14>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800a876:	bb35      	cbnz	r5, 800a8c6 <SPI_WaitFlagStateUntilTimeout+0x74>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a878:	6823      	ldr	r3, [r4, #0]
 800a87a:	685a      	ldr	r2, [r3, #4]
 800a87c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a880:	605a      	str	r2, [r3, #4]
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a882:	6862      	ldr	r2, [r4, #4]
 800a884:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800a888:	d10a      	bne.n	800a8a0 <SPI_WaitFlagStateUntilTimeout+0x4e>
 800a88a:	68a2      	ldr	r2, [r4, #8]
 800a88c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800a890:	d002      	beq.n	800a898 <SPI_WaitFlagStateUntilTimeout+0x46>
 800a892:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800a896:	d103      	bne.n	800a8a0 <SPI_WaitFlagStateUntilTimeout+0x4e>
          __HAL_SPI_DISABLE(hspi);
 800a898:	681a      	ldr	r2, [r3, #0]
 800a89a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a89e:	601a      	str	r2, [r3, #0]
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED)
 800a8a0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800a8a2:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800a8a6:	d107      	bne.n	800a8b8 <SPI_WaitFlagStateUntilTimeout+0x66>
          __HAL_SPI_RESET_CRC(hspi);
 800a8a8:	681a      	ldr	r2, [r3, #0]
 800a8aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a8ae:	601a      	str	r2, [r3, #0]
 800a8b0:	681a      	ldr	r2, [r3, #0]
 800a8b2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a8b6:	601a      	str	r2, [r3, #0]
        __HAL_UNLOCK(hspi);
 800a8b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a8bc:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 800a8c0:	2003      	movs	r0, #3
}
 800a8c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800a8c6:	f7fe fca1 	bl	800920c <HAL_GetTick>
 800a8ca:	eba0 0008 	sub.w	r0, r0, r8
 800a8ce:	42a8      	cmp	r0, r5
 800a8d0:	d9c8      	bls.n	800a864 <SPI_WaitFlagStateUntilTimeout+0x12>
 800a8d2:	e7d1      	b.n	800a878 <SPI_WaitFlagStateUntilTimeout+0x26>

0800a8d4 <SPI_EndRxTxTransaction>:
  * @brief This function handles the check of the RXTX or TX transaction complete.
  * @param hspi: SPI handle
  * @param Timeout : Timeout duration
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout)
{
 800a8d4:	b513      	push	{r0, r1, r4, lr}
 800a8d6:	460b      	mov	r3, r1
  /* Procedure to check the transaction complete */
  if(SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout) != HAL_OK)
 800a8d8:	9101      	str	r1, [sp, #4]
 800a8da:	2200      	movs	r2, #0
 800a8dc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
{
 800a8e0:	4604      	mov	r4, r0
  if(SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout) != HAL_OK)
 800a8e2:	f7ff ff6c 	bl	800a7be <SPI_WaitFifoStateUntilTimeout>
 800a8e6:	9b01      	ldr	r3, [sp, #4]
 800a8e8:	4602      	mov	r2, r0
 800a8ea:	b138      	cbz	r0, 800a8fc <SPI_EndRxTxTransaction+0x28>
    hspi->ErrorCode |= HAL_SPI_ERROR_FLAG;
    return HAL_TIMEOUT;
  }
  if(SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout) != HAL_OK)
  {
    hspi->ErrorCode |= HAL_SPI_ERROR_FLAG;
 800a8ec:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
 800a8f0:	f043 0320 	orr.w	r3, r3, #32
 800a8f4:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
    return HAL_TIMEOUT;
 800a8f8:	2003      	movs	r0, #3
 800a8fa:	e00f      	b.n	800a91c <SPI_EndRxTxTransaction+0x48>
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout) != HAL_OK)
 800a8fc:	2180      	movs	r1, #128	; 0x80
 800a8fe:	4620      	mov	r0, r4
 800a900:	9301      	str	r3, [sp, #4]
 800a902:	f7ff ffa6 	bl	800a852 <SPI_WaitFlagStateUntilTimeout>
 800a906:	9b01      	ldr	r3, [sp, #4]
 800a908:	4602      	mov	r2, r0
 800a90a:	2800      	cmp	r0, #0
 800a90c:	d1ee      	bne.n	800a8ec <SPI_EndRxTxTransaction+0x18>
  if(SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout) != HAL_OK)
 800a90e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800a912:	4620      	mov	r0, r4
 800a914:	f7ff ff53 	bl	800a7be <SPI_WaitFifoStateUntilTimeout>
 800a918:	2800      	cmp	r0, #0
 800a91a:	d1e7      	bne.n	800a8ec <SPI_EndRxTxTransaction+0x18>
  }
  return HAL_OK;
}
 800a91c:	b002      	add	sp, #8
 800a91e:	bd10      	pop	{r4, pc}

0800a920 <HAL_SPI_MspInit>:
}
 800a920:	4770      	bx	lr

0800a922 <HAL_SPI_Init>:
{
 800a922:	b570      	push	{r4, r5, r6, lr}
  if(hspi == NULL)
 800a924:	4604      	mov	r4, r0
 800a926:	2800      	cmp	r0, #0
 800a928:	d047      	beq.n	800a9ba <HAL_SPI_Init+0x98>
  hspi->State = HAL_SPI_STATE_BUSY;
 800a92a:	2302      	movs	r3, #2
 800a92c:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
  HAL_SPI_MspInit(hspi);
 800a930:	f7ff fff6 	bl	800a920 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 800a934:	6822      	ldr	r2, [r4, #0]
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a936:	68e5      	ldr	r5, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 800a938:	6813      	ldr	r3, [r2, #0]
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a93a:	f5b5 6fe0 	cmp.w	r5, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 800a93e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a942:	6013      	str	r3, [r2, #0]
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a944:	f04f 0300 	mov.w	r3, #0
 800a948:	d839      	bhi.n	800a9be <HAL_SPI_Init+0x9c>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a94a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  if(( hspi->Init.DataSize != SPI_DATASIZE_16BIT ) && ( hspi->Init.DataSize != SPI_DATASIZE_8BIT ))
 800a94e:	d000      	beq.n	800a952 <HAL_SPI_Init+0x30>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 800a950:	62a3      	str	r3, [r4, #40]	; 0x28
  if( hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800a952:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a954:	b92b      	cbnz	r3, 800a962 <HAL_SPI_Init+0x40>
    if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a956:	f5b5 6fe0 	cmp.w	r5, #1792	; 0x700
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800a95a:	bf8c      	ite	hi
 800a95c:	2302      	movhi	r3, #2
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800a95e:	2301      	movls	r3, #1
 800a960:	6323      	str	r3, [r4, #48]	; 0x30
                         hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation);
 800a962:	e9d4 3601 	ldrd	r3, r6, [r4, #4]
 800a966:	4333      	orrs	r3, r6
 800a968:	6926      	ldr	r6, [r4, #16]
                         hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
 800a96a:	69a0      	ldr	r0, [r4, #24]
                         hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation);
 800a96c:	4333      	orrs	r3, r6
 800a96e:	6966      	ldr	r6, [r4, #20]
 800a970:	4333      	orrs	r3, r6
 800a972:	69e6      	ldr	r6, [r4, #28]
 800a974:	4333      	orrs	r3, r6
 800a976:	6a26      	ldr	r6, [r4, #32]
 800a978:	4333      	orrs	r3, r6
 800a97a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a97c:	4333      	orrs	r3, r6
                         hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
 800a97e:	f400 7600 	and.w	r6, r0, #512	; 0x200
                         hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation);
 800a982:	4333      	orrs	r3, r6
  hspi->Instance->CR1 = (hspi->Init.Mode | hspi->Init.Direction | 
 800a984:	6013      	str	r3, [r2, #0]
  if( hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 800a986:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a988:	2b02      	cmp	r3, #2
    hspi->Instance->CR1|= SPI_CR1_CRCL;
 800a98a:	bf02      	ittt	eq
 800a98c:	6813      	ldreq	r3, [r2, #0]
 800a98e:	f443 6300 	orreq.w	r3, r3, #2048	; 0x800
 800a992:	6013      	streq	r3, [r2, #0]
  hspi->Instance->CR2 = (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode | hspi->Init.NSSPMode |
 800a994:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a996:	432b      	orrs	r3, r5
 800a998:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800a99a:	0c00      	lsrs	r0, r0, #16
 800a99c:	f000 0004 	and.w	r0, r0, #4
 800a9a0:	432b      	orrs	r3, r5
 800a9a2:	4303      	orrs	r3, r0
                         hspi->Init.DataSize ) | frxth;
 800a9a4:	430b      	orrs	r3, r1
  hspi->Instance->CR2 = (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode | hspi->Init.NSSPMode |
 800a9a6:	6053      	str	r3, [r2, #4]
  hspi->Instance->CRCPR = hspi->Init.CRCPolynomial;
 800a9a8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a9aa:	6113      	str	r3, [r2, #16]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a9ac:	2000      	movs	r0, #0
  hspi->State= HAL_SPI_STATE_READY;
 800a9ae:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a9b0:	f884 005e 	strb.w	r0, [r4, #94]	; 0x5e
  hspi->State= HAL_SPI_STATE_READY;
 800a9b4:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 800a9b8:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800a9ba:	2001      	movs	r0, #1
 800a9bc:	e7fc      	b.n	800a9b8 <HAL_SPI_Init+0x96>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a9be:	4619      	mov	r1, r3
  if(( hspi->Init.DataSize != SPI_DATASIZE_16BIT ) && ( hspi->Init.DataSize != SPI_DATASIZE_8BIT ))
 800a9c0:	f5b5 6f70 	cmp.w	r5, #3840	; 0xf00
 800a9c4:	e7c3      	b.n	800a94e <HAL_SPI_Init+0x2c>

0800a9c6 <HAL_SPI_MspDeInit>:
 800a9c6:	4770      	bx	lr

0800a9c8 <HAL_SPI_DeInit>:
{
 800a9c8:	b510      	push	{r4, lr}
  if(hspi == NULL)
 800a9ca:	4604      	mov	r4, r0
 800a9cc:	b178      	cbz	r0, 800a9ee <HAL_SPI_DeInit+0x26>
  __HAL_SPI_DISABLE(hspi);
 800a9ce:	6802      	ldr	r2, [r0, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 800a9d0:	2302      	movs	r3, #2
 800a9d2:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 800a9d6:	6813      	ldr	r3, [r2, #0]
 800a9d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a9dc:	6013      	str	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 800a9de:	f7ff fff2 	bl	800a9c6 <HAL_SPI_MspDeInit>
  __HAL_UNLOCK(hspi);
 800a9e2:	2000      	movs	r0, #0
 800a9e4:	f8a4 005c 	strh.w	r0, [r4, #92]	; 0x5c
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a9e8:	f884 005e 	strb.w	r0, [r4, #94]	; 0x5e
}
 800a9ec:	bd10      	pop	{r4, pc}
     return HAL_ERROR;
 800a9ee:	2001      	movs	r0, #1
 800a9f0:	e7fc      	b.n	800a9ec <HAL_SPI_DeInit+0x24>

0800a9f2 <HAL_SPI_TransmitReceive>:
{
 800a9f2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if(hspi->State != HAL_SPI_STATE_READY) 
 800a9f6:	f890 705d 	ldrb.w	r7, [r0, #93]	; 0x5d
{
 800a9fa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  __IO uint16_t tmpreg __attribute((unused)) = 0;
 800a9fc:	f04f 0b00 	mov.w	fp, #0
  if(hspi->State != HAL_SPI_STATE_READY) 
 800aa00:	2f01      	cmp	r7, #1
{
 800aa02:	4604      	mov	r4, r0
 800aa04:	4689      	mov	r9, r1
 800aa06:	4692      	mov	sl, r2
 800aa08:	461e      	mov	r6, r3
  __IO uint16_t tmpreg __attribute((unused)) = 0;
 800aa0a:	f8ad b006 	strh.w	fp, [sp, #6]
  if(hspi->State != HAL_SPI_STATE_READY) 
 800aa0e:	d004      	beq.n	800aa1a <HAL_SPI_TransmitReceive+0x28>
    return HAL_BUSY;
 800aa10:	2702      	movs	r7, #2
}
 800aa12:	4638      	mov	r0, r7
 800aa14:	b003      	add	sp, #12
 800aa16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0))
 800aa1a:	2900      	cmp	r1, #0
 800aa1c:	d0f9      	beq.n	800aa12 <HAL_SPI_TransmitReceive+0x20>
 800aa1e:	2a00      	cmp	r2, #0
 800aa20:	d0f7      	beq.n	800aa12 <HAL_SPI_TransmitReceive+0x20>
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d0f5      	beq.n	800aa12 <HAL_SPI_TransmitReceive+0x20>
  tickstart = HAL_GetTick();
 800aa26:	f7fe fbf1 	bl	800920c <HAL_GetTick>
  __HAL_LOCK(hspi); 
 800aa2a:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 800aa2e:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 800aa30:	4680      	mov	r8, r0
  __HAL_LOCK(hspi); 
 800aa32:	d0ed      	beq.n	800aa10 <HAL_SPI_TransmitReceive+0x1e>
 800aa34:	f240 5301 	movw	r3, #1281	; 0x501
 800aa38:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED)
 800aa3c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    __HAL_SPI_RESET_CRC(hspi);
 800aa3e:	6822      	ldr	r2, [r4, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800aa40:	f884 b05e 	strb.w	fp, [r4, #94]	; 0x5e
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED)
 800aa44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
  hspi->pRxBuffPtr  = pRxData;
 800aa48:	f8c4 a040 	str.w	sl, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 800aa4c:	f8a4 6046 	strh.w	r6, [r4, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800aa50:	f8a4 6044 	strh.w	r6, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = pTxData;
 800aa54:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 800aa58:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size; 
 800aa5a:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED)
 800aa5c:	d107      	bne.n	800aa6e <HAL_SPI_TransmitReceive+0x7c>
    __HAL_SPI_RESET_CRC(hspi);
 800aa5e:	6813      	ldr	r3, [r2, #0]
 800aa60:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800aa64:	6013      	str	r3, [r2, #0]
 800aa66:	6813      	ldr	r3, [r2, #0]
 800aa68:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800aa6c:	6013      	str	r3, [r2, #0]
  if((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1))
 800aa6e:	68e1      	ldr	r1, [r4, #12]
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800aa70:	6853      	ldr	r3, [r2, #4]
  if((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1))
 800aa72:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800aa76:	d801      	bhi.n	800aa7c <HAL_SPI_TransmitReceive+0x8a>
 800aa78:	2e01      	cmp	r6, #1
 800aa7a:	d014      	beq.n	800aaa6 <HAL_SPI_TransmitReceive+0xb4>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800aa7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800aa80:	6053      	str	r3, [r2, #4]
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 800aa82:	6813      	ldr	r3, [r2, #0]
 800aa84:	0658      	lsls	r0, r3, #25
    __HAL_SPI_ENABLE(hspi);
 800aa86:	bf5e      	ittt	pl
 800aa88:	6813      	ldrpl	r3, [r2, #0]
 800aa8a:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 800aa8e:	6013      	strpl	r3, [r2, #0]
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800aa90:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800aa94:	d83d      	bhi.n	800ab12 <HAL_SPI_TransmitReceive+0x120>
    while((hspi->TxXferCount > 0) || (hspi->RxXferCount > 0))
 800aa96:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800aa98:	2a00      	cmp	r2, #0
 800aa9a:	d175      	bne.n	800ab88 <HAL_SPI_TransmitReceive+0x196>
 800aa9c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d17e      	bne.n	800aba2 <HAL_SPI_TransmitReceive+0x1b0>
 800aaa4:	e03c      	b.n	800ab20 <HAL_SPI_TransmitReceive+0x12e>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800aaa6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800aaaa:	e7e9      	b.n	800aa80 <HAL_SPI_TransmitReceive+0x8e>
      if((hspi->TxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_TXE) == SPI_FLAG_TXE))
 800aaac:	6822      	ldr	r2, [r4, #0]
 800aaae:	6891      	ldr	r1, [r2, #8]
 800aab0:	0789      	lsls	r1, r1, #30
 800aab2:	d510      	bpl.n	800aad6 <HAL_SPI_TransmitReceive+0xe4>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800aab4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800aab6:	3b01      	subs	r3, #1
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800aab8:	f831 6b02 	ldrh.w	r6, [r1], #2
 800aabc:	60d6      	str	r6, [r2, #12]
        hspi->TxXferCount--;
 800aabe:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800aac0:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800aac2:	87e3      	strh	r3, [r4, #62]	; 0x3e
        if((hspi->TxXferCount == 0) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED))
 800aac4:	b93b      	cbnz	r3, 800aad6 <HAL_SPI_TransmitReceive+0xe4>
 800aac6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800aac8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800aacc:	bf02      	ittt	eq
 800aace:	6813      	ldreq	r3, [r2, #0]
 800aad0:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 800aad4:	6013      	streq	r3, [r2, #0]
      if((hspi->RxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_RXNE) == SPI_FLAG_RXNE))
 800aad6:	b168      	cbz	r0, 800aaf4 <HAL_SPI_TransmitReceive+0x102>
 800aad8:	6823      	ldr	r3, [r4, #0]
 800aada:	689a      	ldr	r2, [r3, #8]
 800aadc:	07d2      	lsls	r2, r2, #31
 800aade:	d509      	bpl.n	800aaf4 <HAL_SPI_TransmitReceive+0x102>
        *((uint16_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800aae0:	68da      	ldr	r2, [r3, #12]
 800aae2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800aae4:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800aae8:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 800aaea:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800aaee:	3b01      	subs	r3, #1
 800aaf0:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
      if(Timeout != HAL_MAX_DELAY)
 800aaf4:	1c6b      	adds	r3, r5, #1
 800aaf6:	d00c      	beq.n	800ab12 <HAL_SPI_TransmitReceive+0x120>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout)) 
 800aaf8:	b92d      	cbnz	r5, 800ab06 <HAL_SPI_TransmitReceive+0x114>
          __HAL_UNLOCK(hspi);
 800aafa:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aafe:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    return HAL_TIMEOUT;
 800ab02:	2703      	movs	r7, #3
 800ab04:	e785      	b.n	800aa12 <HAL_SPI_TransmitReceive+0x20>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout)) 
 800ab06:	f7fe fb81 	bl	800920c <HAL_GetTick>
 800ab0a:	eba0 0008 	sub.w	r0, r0, r8
 800ab0e:	42a8      	cmp	r0, r5
 800ab10:	d8f3      	bhi.n	800aafa <HAL_SPI_TransmitReceive+0x108>
    while ((hspi->TxXferCount > 0 ) || (hspi->RxXferCount > 0))
 800ab12:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      if((hspi->RxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_RXNE) == SPI_FLAG_RXNE))
 800ab14:	f8b4 0046 	ldrh.w	r0, [r4, #70]	; 0x46
    while ((hspi->TxXferCount > 0 ) || (hspi->RxXferCount > 0))
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d1c7      	bne.n	800aaac <HAL_SPI_TransmitReceive+0xba>
 800ab1c:	2800      	cmp	r0, #0
 800ab1e:	d1db      	bne.n	800aad8 <HAL_SPI_TransmitReceive+0xe6>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED)
 800ab20:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ab22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab26:	d115      	bne.n	800ab54 <HAL_SPI_TransmitReceive+0x162>
    if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SPI_FLAG_TXE, Timeout) != HAL_OK)
 800ab28:	2202      	movs	r2, #2
 800ab2a:	462b      	mov	r3, r5
 800ab2c:	4611      	mov	r1, r2
 800ab2e:	4620      	mov	r0, r4
 800ab30:	f7ff fe8f 	bl	800a852 <SPI_WaitFlagStateUntilTimeout>
 800ab34:	b128      	cbz	r0, 800ab42 <HAL_SPI_TransmitReceive+0x150>
      hspi->ErrorCode|= HAL_SPI_ERROR_CRC;
 800ab36:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
 800ab3a:	f043 0302 	orr.w	r3, r3, #2
 800ab3e:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
    if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800ab42:	68e2      	ldr	r2, [r4, #12]
      tmpreg = hspi->Instance->DR;
 800ab44:	6823      	ldr	r3, [r4, #0]
    if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800ab46:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
 800ab4a:	d16f      	bne.n	800ac2c <HAL_SPI_TransmitReceive+0x23a>
      tmpreg = hspi->Instance->DR;
 800ab4c:	68db      	ldr	r3, [r3, #12]
 800ab4e:	b29b      	uxth	r3, r3
        tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
 800ab50:	f8ad 3006 	strh.w	r3, [sp, #6]
  if(SPI_EndRxTxTransaction(hspi,Timeout) != HAL_OK)
 800ab54:	4629      	mov	r1, r5
 800ab56:	4620      	mov	r0, r4
 800ab58:	f7ff febc 	bl	800a8d4 <SPI_EndRxTxTransaction>
 800ab5c:	2800      	cmp	r0, #0
 800ab5e:	d1d0      	bne.n	800ab02 <HAL_SPI_TransmitReceive+0x110>
  hspi->State = HAL_SPI_STATE_READY;
 800ab60:	2301      	movs	r3, #1
  if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 800ab62:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_READY;
 800ab64:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 800ab68:	688a      	ldr	r2, [r1, #8]
    hspi->ErrorCode|= HAL_SPI_ERROR_CRC;
 800ab6a:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
  if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 800ab6e:	f012 0210 	ands.w	r2, r2, #16
 800ab72:	d070      	beq.n	800ac56 <HAL_SPI_TransmitReceive+0x264>
    hspi->ErrorCode|= HAL_SPI_ERROR_CRC;
 800ab74:	f043 0302 	orr.w	r3, r3, #2
 800ab78:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 800ab7c:	f06f 0310 	mvn.w	r3, #16
 800ab80:	608b      	str	r3, [r1, #8]
    __HAL_UNLOCK(hspi);
 800ab82:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
    return HAL_ERROR;
 800ab86:	e744      	b.n	800aa12 <HAL_SPI_TransmitReceive+0x20>
      if((hspi->TxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_TXE) == SPI_FLAG_TXE))
 800ab88:	6821      	ldr	r1, [r4, #0]
 800ab8a:	688b      	ldr	r3, [r1, #8]
 800ab8c:	079e      	lsls	r6, r3, #30
 800ab8e:	d508      	bpl.n	800aba2 <HAL_SPI_TransmitReceive+0x1b0>
        if(hspi->TxXferCount > 2)
 800ab90:	2a02      	cmp	r2, #2
          hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 800ab92:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        if(hspi->TxXferCount > 2)
 800ab94:	d92c      	bls.n	800abf0 <HAL_SPI_TransmitReceive+0x1fe>
          hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 800ab96:	f833 0b02 	ldrh.w	r0, [r3], #2
 800ab9a:	60c8      	str	r0, [r1, #12]
          hspi->TxXferCount -= 2;
 800ab9c:	3a02      	subs	r2, #2
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ab9e:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2;
 800aba0:	87e2      	strh	r2, [r4, #62]	; 0x3e
      if((hspi->RxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_RXNE) == SPI_FLAG_RXNE))
 800aba2:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 800aba6:	b1b1      	cbz	r1, 800abd6 <HAL_SPI_TransmitReceive+0x1e4>
 800aba8:	6822      	ldr	r2, [r4, #0]
 800abaa:	6893      	ldr	r3, [r2, #8]
 800abac:	07d8      	lsls	r0, r3, #31
 800abae:	d512      	bpl.n	800abd6 <HAL_SPI_TransmitReceive+0x1e4>
        if(hspi->RxXferCount > 1)
 800abb0:	2901      	cmp	r1, #1
          *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800abb2:	6c23      	ldr	r3, [r4, #64]	; 0x40
        if(hspi->RxXferCount > 1)
 800abb4:	d030      	beq.n	800ac18 <HAL_SPI_TransmitReceive+0x226>
          *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800abb6:	68d1      	ldr	r1, [r2, #12]
 800abb8:	f823 1b02 	strh.w	r1, [r3], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800abbc:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2;
 800abbe:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800abc2:	3b02      	subs	r3, #2
 800abc4:	b29b      	uxth	r3, r3
          if(hspi->RxXferCount <= 1)
 800abc6:	2b01      	cmp	r3, #1
          hspi->RxXferCount -= 2;
 800abc8:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
          if(hspi->RxXferCount <= 1)
 800abcc:	d803      	bhi.n	800abd6 <HAL_SPI_TransmitReceive+0x1e4>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800abce:	6853      	ldr	r3, [r2, #4]
 800abd0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800abd4:	6053      	str	r3, [r2, #4]
      if(Timeout != HAL_MAX_DELAY)
 800abd6:	1c6b      	adds	r3, r5, #1
 800abd8:	f43f af5d 	beq.w	800aa96 <HAL_SPI_TransmitReceive+0xa4>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800abdc:	2d00      	cmp	r5, #0
 800abde:	d08c      	beq.n	800aafa <HAL_SPI_TransmitReceive+0x108>
 800abe0:	f7fe fb14 	bl	800920c <HAL_GetTick>
 800abe4:	eba0 0008 	sub.w	r0, r0, r8
 800abe8:	42a8      	cmp	r0, r5
 800abea:	f67f af54 	bls.w	800aa96 <HAL_SPI_TransmitReceive+0xa4>
 800abee:	e784      	b.n	800aafa <HAL_SPI_TransmitReceive+0x108>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 800abf0:	1c5a      	adds	r2, r3, #1
 800abf2:	63a2      	str	r2, [r4, #56]	; 0x38
 800abf4:	781b      	ldrb	r3, [r3, #0]
 800abf6:	730b      	strb	r3, [r1, #12]
          hspi->TxXferCount--;
 800abf8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800abfa:	3b01      	subs	r3, #1
 800abfc:	b29b      	uxth	r3, r3
 800abfe:	87e3      	strh	r3, [r4, #62]	; 0x3e
        if((hspi->TxXferCount == 0) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED))
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d1ce      	bne.n	800aba2 <HAL_SPI_TransmitReceive+0x1b0>
 800ac04:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ac06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800ac0a:	bf01      	itttt	eq
 800ac0c:	6822      	ldreq	r2, [r4, #0]
 800ac0e:	6813      	ldreq	r3, [r2, #0]
 800ac10:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 800ac14:	6013      	streq	r3, [r2, #0]
 800ac16:	e7c4      	b.n	800aba2 <HAL_SPI_TransmitReceive+0x1b0>
          (*hspi->pRxBuffPtr++) =  *(__IO uint8_t *)&hspi->Instance->DR;
 800ac18:	1c59      	adds	r1, r3, #1
 800ac1a:	6421      	str	r1, [r4, #64]	; 0x40
 800ac1c:	7b12      	ldrb	r2, [r2, #12]
 800ac1e:	701a      	strb	r2, [r3, #0]
          hspi->RxXferCount--;
 800ac20:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800ac24:	3b01      	subs	r3, #1
 800ac26:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 800ac2a:	e7d4      	b.n	800abd6 <HAL_SPI_TransmitReceive+0x1e4>
      if(hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 800ac2c:	6b22      	ldr	r2, [r4, #48]	; 0x30
      tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
 800ac2e:	7b1b      	ldrb	r3, [r3, #12]
 800ac30:	f8ad 3006 	strh.w	r3, [sp, #6]
      if(hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 800ac34:	2a02      	cmp	r2, #2
 800ac36:	d18d      	bne.n	800ab54 <HAL_SPI_TransmitReceive+0x162>
        if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SPI_FLAG_TXE, Timeout) != HAL_OK) 
 800ac38:	462b      	mov	r3, r5
 800ac3a:	4611      	mov	r1, r2
 800ac3c:	4620      	mov	r0, r4
 800ac3e:	f7ff fe08 	bl	800a852 <SPI_WaitFlagStateUntilTimeout>
 800ac42:	b128      	cbz	r0, 800ac50 <HAL_SPI_TransmitReceive+0x25e>
          hspi->ErrorCode|= HAL_SPI_ERROR_CRC;
 800ac44:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
 800ac48:	f043 0302 	orr.w	r3, r3, #2
 800ac4c:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
        tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
 800ac50:	6823      	ldr	r3, [r4, #0]
 800ac52:	7b1b      	ldrb	r3, [r3, #12]
 800ac54:	e77c      	b.n	800ab50 <HAL_SPI_TransmitReceive+0x15e>
    return HAL_BUSY;
 800ac56:	1e1f      	subs	r7, r3, #0
  __HAL_UNLOCK(hspi);
 800ac58:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
    return HAL_BUSY;
 800ac5c:	bf18      	it	ne
 800ac5e:	2701      	movne	r7, #1
 800ac60:	e6d7      	b.n	800aa12 <HAL_SPI_TransmitReceive+0x20>

0800ac62 <HAL_SPI_GetState>:
  * @retval HAL state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
  return hspi->State;
}
 800ac62:	f890 005d 	ldrb.w	r0, [r0, #93]	; 0x5d
 800ac66:	4770      	bx	lr

0800ac68 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ac68:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800ac6a:	b180      	cbz	r0, 800ac8e <USBD_Init+0x26>
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800ac6c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800ac70:	b113      	cbz	r3, 800ac78 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 800ac72:	2300      	movs	r3, #0
 800ac74:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800ac78:	b109      	cbz	r1, 800ac7e <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 800ac7a:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800ac7e:	2301      	movs	r3, #1
 800ac80:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  pdev->id = id;
 800ac84:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800ac86:	f000 fc6b 	bl	800b560 <USBD_LL_Init>
  
  return USBD_OK; 
 800ac8a:	2000      	movs	r0, #0
}
 800ac8c:	bd08      	pop	{r3, pc}
    return USBD_FAIL; 
 800ac8e:	2002      	movs	r0, #2
 800ac90:	e7fc      	b.n	800ac8c <USBD_Init+0x24>

0800ac92 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 800ac92:	b119      	cbz	r1, 800ac9c <USBD_RegisterClass+0xa>
  {
    /* link the class tgo the USB Device handle */
    pdev->pClass = pclass;
 800ac94:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    status = USBD_OK;
 800ac98:	2000      	movs	r0, #0
 800ac9a:	4770      	bx	lr
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 800ac9c:	2002      	movs	r0, #2
  }
  
  return status;
}
 800ac9e:	4770      	bx	lr

0800aca0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800aca0:	b508      	push	{r3, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 800aca2:	f000 fc9b 	bl	800b5dc <USBD_LL_Start>
  
  return USBD_OK;  
}
 800aca6:	2000      	movs	r0, #0
 800aca8:	bd08      	pop	{r3, pc}

0800acaa <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800acaa:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 800acac:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800acb0:	b90b      	cbnz	r3, 800acb6 <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800acb2:	2002      	movs	r0, #2
    {
      ret = USBD_OK;
    }
  }
  return ret; 
}
 800acb4:	bd08      	pop	{r3, pc}
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	4798      	blx	r3
 800acba:	2800      	cmp	r0, #0
 800acbc:	d0fa      	beq.n	800acb4 <USBD_SetClassConfig+0xa>
 800acbe:	e7f8      	b.n	800acb2 <USBD_SetClassConfig+0x8>

0800acc0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800acc0:	b508      	push	{r3, lr}
  /* Clear configuration  and Deinitialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 800acc2:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800acc6:	685b      	ldr	r3, [r3, #4]
 800acc8:	4798      	blx	r3
  return USBD_OK;
}
 800acca:	2000      	movs	r0, #0
 800accc:	bd08      	pop	{r3, pc}

0800acce <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800acce:	b538      	push	{r3, r4, r5, lr}
 800acd0:	4604      	mov	r4, r0

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800acd2:	f500 7502 	add.w	r5, r0, #520	; 0x208
 800acd6:	4628      	mov	r0, r5
 800acd8:	f000 fa3f 	bl	800b15a <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 800acdc:	2301      	movs	r3, #1
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
 800acde:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
  pdev->ep0_state = USBD_EP0_SETUP;
 800ace2:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 800ace6:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 800acea:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  switch (pdev->request.bmRequest & 0x1F) 
 800acee:	f001 031f 	and.w	r3, r1, #31
 800acf2:	2b01      	cmp	r3, #1
 800acf4:	d008      	beq.n	800ad08 <USBD_LL_SetupStage+0x3a>
 800acf6:	2b02      	cmp	r3, #2
 800acf8:	d00b      	beq.n	800ad12 <USBD_LL_SetupStage+0x44>
 800acfa:	b97b      	cbnz	r3, 800ad1c <USBD_LL_SetupStage+0x4e>
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &pdev->request);
 800acfc:	4629      	mov	r1, r5
 800acfe:	4620      	mov	r0, r4
 800ad00:	f000 f8c2 	bl	800ae88 <USBD_StdDevReq>
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
    break;
  }  
  return USBD_OK;  
}
 800ad04:	2000      	movs	r0, #0
 800ad06:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 800ad08:	4629      	mov	r1, r5
 800ad0a:	4620      	mov	r0, r4
 800ad0c:	f000 f9b6 	bl	800b07c <USBD_StdItfReq>
    break;
 800ad10:	e7f8      	b.n	800ad04 <USBD_LL_SetupStage+0x36>
    USBD_StdEPReq(pdev, &pdev->request);   
 800ad12:	4629      	mov	r1, r5
 800ad14:	4620      	mov	r0, r4
 800ad16:	f000 f9c9 	bl	800b0ac <USBD_StdEPReq>
    break;
 800ad1a:	e7f3      	b.n	800ad04 <USBD_LL_SetupStage+0x36>
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 800ad1c:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800ad20:	4620      	mov	r0, r4
 800ad22:	f000 fc73 	bl	800b60c <USBD_LL_StallEP>
    break;
 800ad26:	e7ed      	b.n	800ad04 <USBD_LL_SetupStage+0x36>

0800ad28 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 800ad28:	b570      	push	{r4, r5, r6, lr}
 800ad2a:	4604      	mov	r4, r0
 800ad2c:	4616      	mov	r6, r2
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 800ad2e:	bb01      	cbnz	r1, 800ad72 <USBD_LL_DataOutStage+0x4a>
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ad30:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 800ad34:	2b03      	cmp	r3, #3
 800ad36:	d10d      	bne.n	800ad54 <USBD_LL_DataOutStage+0x2c>
    {
      if(pep->rem_length > pep->maxpacket)
 800ad38:	e9d0 5343 	ldrd	r5, r3, [r0, #268]	; 0x10c
 800ad3c:	429d      	cmp	r5, r3
 800ad3e:	d90b      	bls.n	800ad58 <USBD_LL_DataOutStage+0x30>
      {
        pep->rem_length -=  pep->maxpacket;
 800ad40:	1aed      	subs	r5, r5, r3
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 800ad42:	42ab      	cmp	r3, r5
 800ad44:	bf28      	it	cs
 800ad46:	462b      	movcs	r3, r5
        pep->rem_length -=  pep->maxpacket;
 800ad48:	f8c0 510c 	str.w	r5, [r0, #268]	; 0x10c
        USBD_CtlContinueRx (pdev, 
 800ad4c:	b29a      	uxth	r2, r3
 800ad4e:	4631      	mov	r1, r6
 800ad50:	f000 fa55 	bl	800b1fe <USBD_CtlContinueRx>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
  }  
  return USBD_OK;
}
 800ad54:	2000      	movs	r0, #0
 800ad56:	bd70      	pop	{r4, r5, r6, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800ad58:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800ad5c:	691b      	ldr	r3, [r3, #16]
 800ad5e:	b123      	cbz	r3, 800ad6a <USBD_LL_DataOutStage+0x42>
 800ad60:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800ad64:	2a03      	cmp	r2, #3
 800ad66:	d100      	bne.n	800ad6a <USBD_LL_DataOutStage+0x42>
          pdev->pClass->EP0_RxReady(pdev); 
 800ad68:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 800ad6a:	4620      	mov	r0, r4
 800ad6c:	f000 fa4f 	bl	800b20e <USBD_CtlSendStatus>
 800ad70:	e7f0      	b.n	800ad54 <USBD_LL_DataOutStage+0x2c>
  else if((pdev->pClass->DataOut != NULL)&&
 800ad72:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800ad76:	699b      	ldr	r3, [r3, #24]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d0eb      	beq.n	800ad54 <USBD_LL_DataOutStage+0x2c>
 800ad7c:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800ad80:	2a03      	cmp	r2, #3
 800ad82:	d1e7      	bne.n	800ad54 <USBD_LL_DataOutStage+0x2c>
    pdev->pClass->DataOut(pdev, epnum); 
 800ad84:	4798      	blx	r3
 800ad86:	e7e5      	b.n	800ad54 <USBD_LL_DataOutStage+0x2c>

0800ad88 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 800ad88:	b570      	push	{r4, r5, r6, lr}
 800ad8a:	4604      	mov	r4, r0
 800ad8c:	4616      	mov	r6, r2
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 800ad8e:	bbb1      	cbnz	r1, 800adfe <USBD_LL_DataInStage+0x76>
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800ad90:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 800ad94:	2b02      	cmp	r3, #2
 800ad96:	d109      	bne.n	800adac <USBD_LL_DataInStage+0x24>
    {
      if(pep->rem_length > pep->maxpacket)
 800ad98:	e9d0 5307 	ldrd	r5, r3, [r0, #28]
 800ad9c:	429d      	cmp	r5, r3
 800ad9e:	d90e      	bls.n	800adbe <USBD_LL_DataInStage+0x36>
      {
        pep->rem_length -=  pep->maxpacket;
 800ada0:	1aeb      	subs	r3, r5, r3
 800ada2:	61c3      	str	r3, [r0, #28]
        
        USBD_CtlContinueSendData (pdev, 
 800ada4:	b29a      	uxth	r2, r3
 800ada6:	4631      	mov	r1, r6
 800ada8:	f000 fa14 	bl	800b1d4 <USBD_CtlContinueSendData>
          }          
          USBD_CtlReceiveStatus(pdev);
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 800adac:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 800adb0:	2b01      	cmp	r3, #1
 800adb2:	d102      	bne.n	800adba <USBD_LL_DataInStage+0x32>
    {
      USBD_RunTestMode(pdev); 
      pdev->dev_test_mode = 0;
 800adb4:	2300      	movs	r3, #0
 800adb6:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
  }  
  return USBD_OK;
}
 800adba:	2000      	movs	r0, #0
 800adbc:	bd70      	pop	{r4, r5, r6, pc}
        if((pep->total_length % pep->maxpacket == 0) &&
 800adbe:	6982      	ldr	r2, [r0, #24]
 800adc0:	fbb2 f5f3 	udiv	r5, r2, r3
 800adc4:	fb03 2515 	mls	r5, r3, r5, r2
 800adc8:	b95d      	cbnz	r5, 800ade2 <USBD_LL_DataInStage+0x5a>
 800adca:	4293      	cmp	r3, r2
 800adcc:	d809      	bhi.n	800ade2 <USBD_LL_DataInStage+0x5a>
           (pep->total_length >= pep->maxpacket) &&
 800adce:	f8d0 31f8 	ldr.w	r3, [r0, #504]	; 0x1f8
 800add2:	429a      	cmp	r2, r3
 800add4:	d205      	bcs.n	800ade2 <USBD_LL_DataInStage+0x5a>
          USBD_CtlContinueSendData(pdev , NULL, 0);
 800add6:	462a      	mov	r2, r5
 800add8:	f000 f9fc 	bl	800b1d4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 800addc:	f8c4 51f8 	str.w	r5, [r4, #504]	; 0x1f8
 800ade0:	e7e4      	b.n	800adac <USBD_LL_DataInStage+0x24>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800ade2:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 800ade6:	68db      	ldr	r3, [r3, #12]
 800ade8:	b12b      	cbz	r3, 800adf6 <USBD_LL_DataInStage+0x6e>
 800adea:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
 800adee:	2a03      	cmp	r2, #3
 800adf0:	d101      	bne.n	800adf6 <USBD_LL_DataInStage+0x6e>
            pdev->pClass->EP0_TxSent(pdev); 
 800adf2:	4620      	mov	r0, r4
 800adf4:	4798      	blx	r3
          USBD_CtlReceiveStatus(pdev);
 800adf6:	4620      	mov	r0, r4
 800adf8:	f000 fa14 	bl	800b224 <USBD_CtlReceiveStatus>
 800adfc:	e7d6      	b.n	800adac <USBD_LL_DataInStage+0x24>
  else if((pdev->pClass->DataIn != NULL)&& 
 800adfe:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800ae02:	695b      	ldr	r3, [r3, #20]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d0d8      	beq.n	800adba <USBD_LL_DataInStage+0x32>
 800ae08:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800ae0c:	2a03      	cmp	r2, #3
 800ae0e:	d1d4      	bne.n	800adba <USBD_LL_DataInStage+0x32>
    pdev->pClass->DataIn(pdev, epnum); 
 800ae10:	4798      	blx	r3
 800ae12:	e7d2      	b.n	800adba <USBD_LL_DataInStage+0x32>

0800ae14 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800ae14:	b538      	push	{r3, r4, r5, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 800ae16:	2200      	movs	r2, #0
{
 800ae18:	4604      	mov	r4, r0
  USBD_LL_OpenEP(pdev,
 800ae1a:	4611      	mov	r1, r2
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ae1c:	2540      	movs	r5, #64	; 0x40
  USBD_LL_OpenEP(pdev,
 800ae1e:	2340      	movs	r3, #64	; 0x40
 800ae20:	f000 fbe3 	bl	800b5ea <USBD_LL_OpenEP>
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 800ae24:	462b      	mov	r3, r5
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ae26:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
  USBD_LL_OpenEP(pdev,
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	2180      	movs	r1, #128	; 0x80
 800ae2e:	4620      	mov	r0, r4
 800ae30:	f000 fbdb 	bl	800b5ea <USBD_LL_OpenEP>
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call usr call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ae34:	2301      	movs	r3, #1
 800ae36:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 800ae3a:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ae3e:	6225      	str	r5, [r4, #32]
  if (pdev->pClassData) 
 800ae40:	b12b      	cbz	r3, 800ae4e <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 800ae42:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 800ae46:	7921      	ldrb	r1, [r4, #4]
 800ae48:	685b      	ldr	r3, [r3, #4]
 800ae4a:	4620      	mov	r0, r4
 800ae4c:	4798      	blx	r3
 
  
  return USBD_OK;
}
 800ae4e:	2000      	movs	r0, #0
 800ae50:	bd38      	pop	{r3, r4, r5, pc}

0800ae52 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800ae52:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 800ae54:	2000      	movs	r0, #0
 800ae56:	4770      	bx	lr

0800ae58 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800ae58:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae5a:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800ae5e:	2a03      	cmp	r2, #3
 800ae60:	d104      	bne.n	800ae6c <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 800ae62:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800ae66:	69db      	ldr	r3, [r3, #28]
 800ae68:	b103      	cbz	r3, 800ae6c <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 800ae6a:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 800ae6c:	2000      	movs	r0, #0
 800ae6e:	bd08      	pop	{r3, pc}

0800ae70 <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 800ae70:	b510      	push	{r4, lr}
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80);
 800ae72:	2180      	movs	r1, #128	; 0x80
void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 800ae74:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80);
 800ae76:	f000 fbc9 	bl	800b60c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 800ae7a:	4620      	mov	r0, r4
 800ae7c:	2100      	movs	r1, #0
}
 800ae7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0);
 800ae82:	f000 bbc3 	b.w	800b60c <USBD_LL_StallEP>
	...

0800ae88 <USBD_StdDevReq>:
{
 800ae88:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bRequest) 
 800ae8a:	784b      	ldrb	r3, [r1, #1]
{
 800ae8c:	4604      	mov	r4, r0
 800ae8e:	460d      	mov	r5, r1
  switch (req->bRequest) 
 800ae90:	2b09      	cmp	r3, #9
 800ae92:	d876      	bhi.n	800af82 <USBD_StdDevReq+0xfa>
 800ae94:	e8df f013 	tbh	[pc, r3, lsl #1]
 800ae98:	00e500c9 	.word	0x00e500c9
 800ae9c:	00d90075 	.word	0x00d90075
 800aea0:	006d0075 	.word	0x006d0075
 800aea4:	0075000a 	.word	0x0075000a
 800aea8:	008d00b9 	.word	0x008d00b9
  switch (req->wValue >> 8)
 800aeac:	884b      	ldrh	r3, [r1, #2]
 800aeae:	0a1a      	lsrs	r2, r3, #8
 800aeb0:	3a01      	subs	r2, #1
 800aeb2:	2a06      	cmp	r2, #6
 800aeb4:	d865      	bhi.n	800af82 <USBD_StdDevReq+0xfa>
 800aeb6:	e8df f002 	tbb	[pc, r2]
 800aeba:	1c04      	.short	0x1c04
 800aebc:	49646429 	.word	0x49646429
 800aec0:	52          	.byte	0x52
 800aec1:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800aec2:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800aec6:	681b      	ldr	r3, [r3, #0]
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 800aec8:	7c20      	ldrb	r0, [r4, #16]
 800aeca:	f10d 0106 	add.w	r1, sp, #6
 800aece:	4798      	blx	r3
  if((len != 0)&& (req->wLength != 0))
 800aed0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800aed4:	2a00      	cmp	r2, #0
 800aed6:	d067      	beq.n	800afa8 <USBD_StdDevReq+0x120>
 800aed8:	88eb      	ldrh	r3, [r5, #6]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d064      	beq.n	800afa8 <USBD_StdDevReq+0x120>
    len = MIN(len , req->wLength);
 800aede:	429a      	cmp	r2, r3
 800aee0:	bf28      	it	cs
 800aee2:	461a      	movcs	r2, r3
 800aee4:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, 
 800aee8:	4601      	mov	r1, r0
    USBD_CtlSendData (pdev, 
 800aeea:	4620      	mov	r0, r4
 800aeec:	f000 f965 	bl	800b1ba <USBD_CtlSendData>
    break;
 800aef0:	e05a      	b.n	800afa8 <USBD_StdDevReq+0x120>
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 800aef2:	7c02      	ldrb	r2, [r0, #16]
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800aef4:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 800aef8:	b932      	cbnz	r2, 800af08 <USBD_StdDevReq+0x80>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800aefa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800aefc:	f10d 0006 	add.w	r0, sp, #6
 800af00:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800af02:	2302      	movs	r3, #2
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800af04:	7043      	strb	r3, [r0, #1]
      break; 
 800af06:	e7e3      	b.n	800aed0 <USBD_StdDevReq+0x48>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800af08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af0a:	e7f7      	b.n	800aefc <USBD_StdDevReq+0x74>
    switch ((uint8_t)(req->wValue))
 800af0c:	b2db      	uxtb	r3, r3
 800af0e:	2b05      	cmp	r3, #5
 800af10:	d837      	bhi.n	800af82 <USBD_StdDevReq+0xfa>
 800af12:	e8df f003 	tbb	[pc, r3]
 800af16:	0703      	.short	0x0703
 800af18:	17130f0b 	.word	0x17130f0b
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 800af1c:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800af20:	685b      	ldr	r3, [r3, #4]
 800af22:	e7d1      	b.n	800aec8 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800af24:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800af28:	689b      	ldr	r3, [r3, #8]
 800af2a:	e7cd      	b.n	800aec8 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800af2c:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800af30:	68db      	ldr	r3, [r3, #12]
 800af32:	e7c9      	b.n	800aec8 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800af34:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800af38:	691b      	ldr	r3, [r3, #16]
 800af3a:	e7c5      	b.n	800aec8 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800af3c:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800af40:	695b      	ldr	r3, [r3, #20]
 800af42:	e7c1      	b.n	800aec8 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800af44:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800af48:	699b      	ldr	r3, [r3, #24]
 800af4a:	e7bd      	b.n	800aec8 <USBD_StdDevReq+0x40>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 800af4c:	7c03      	ldrb	r3, [r0, #16]
 800af4e:	b9c3      	cbnz	r3, 800af82 <USBD_StdDevReq+0xfa>
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800af50:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800af54:	f10d 0006 	add.w	r0, sp, #6
 800af58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af5a:	4798      	blx	r3
      break;
 800af5c:	e7b8      	b.n	800aed0 <USBD_StdDevReq+0x48>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 800af5e:	7c03      	ldrb	r3, [r0, #16]
 800af60:	b97b      	cbnz	r3, 800af82 <USBD_StdDevReq+0xfa>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800af62:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800af66:	f10d 0006 	add.w	r0, sp, #6
 800af6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af6c:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800af6e:	2307      	movs	r3, #7
 800af70:	e7c8      	b.n	800af04 <USBD_StdDevReq+0x7c>
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 800af72:	888b      	ldrh	r3, [r1, #4]
 800af74:	b92b      	cbnz	r3, 800af82 <USBD_StdDevReq+0xfa>
 800af76:	88cb      	ldrh	r3, [r1, #6]
 800af78:	b91b      	cbnz	r3, 800af82 <USBD_StdDevReq+0xfa>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800af7a:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800af7e:	2b03      	cmp	r3, #3
 800af80:	d103      	bne.n	800af8a <USBD_StdDevReq+0x102>
       USBD_CtlError(pdev , req);                     
 800af82:	4620      	mov	r0, r4
 800af84:	f7ff ff74 	bl	800ae70 <USBD_CtlError.constprop.0>
      break;
 800af88:	e00e      	b.n	800afa8 <USBD_StdDevReq+0x120>
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 800af8a:	884d      	ldrh	r5, [r1, #2]
 800af8c:	f005 057f 	and.w	r5, r5, #127	; 0x7f
      pdev->dev_address = dev_addr;
 800af90:	f880 51fe 	strb.w	r5, [r0, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 800af94:	4629      	mov	r1, r5
 800af96:	f000 fb5a 	bl	800b64e <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 800af9a:	4620      	mov	r0, r4
 800af9c:	f000 f937 	bl	800b20e <USBD_CtlSendStatus>
      if (dev_addr != 0) 
 800afa0:	b12d      	cbz	r5, 800afae <USBD_StdDevReq+0x126>
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 800afa2:	2302      	movs	r3, #2
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 800afa4:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
}
 800afa8:	2000      	movs	r0, #0
 800afaa:	b003      	add	sp, #12
 800afac:	bd30      	pop	{r4, r5, pc}
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 800afae:	2301      	movs	r3, #1
 800afb0:	e7f8      	b.n	800afa4 <USBD_StdDevReq+0x11c>
  cfgidx = (uint8_t)(req->wValue);                 
 800afb2:	7889      	ldrb	r1, [r1, #2]
 800afb4:	4d30      	ldr	r5, [pc, #192]	; (800b078 <USBD_StdDevReq+0x1f0>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 800afb6:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);                 
 800afb8:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 800afba:	d8e2      	bhi.n	800af82 <USBD_StdDevReq+0xfa>
    switch (pdev->dev_state) 
 800afbc:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800afc0:	2b02      	cmp	r3, #2
 800afc2:	d00c      	beq.n	800afde <USBD_StdDevReq+0x156>
 800afc4:	2b03      	cmp	r3, #3
 800afc6:	d1dc      	bne.n	800af82 <USBD_StdDevReq+0xfa>
      if (cfgidx == 0) 
 800afc8:	b9b1      	cbnz	r1, 800aff8 <USBD_StdDevReq+0x170>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800afca:	2302      	movs	r3, #2
 800afcc:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 800afd0:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 800afd2:	f7ff fe75 	bl	800acc0 <USBD_ClrClassConfig>
      USBD_CtlSendStatus(pdev);
 800afd6:	4620      	mov	r0, r4
 800afd8:	f000 f919 	bl	800b20e <USBD_CtlSendStatus>
 800afdc:	e7e4      	b.n	800afa8 <USBD_StdDevReq+0x120>
      if (cfgidx) 
 800afde:	2900      	cmp	r1, #0
 800afe0:	d0f9      	beq.n	800afd6 <USBD_StdDevReq+0x14e>
        pdev->dev_config = cfgidx;
 800afe2:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800afe4:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 800afe6:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800afe8:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 800afec:	4620      	mov	r0, r4
 800afee:	f7ff fe5c 	bl	800acaa <USBD_SetClassConfig>
 800aff2:	2802      	cmp	r0, #2
 800aff4:	d1ef      	bne.n	800afd6 <USBD_StdDevReq+0x14e>
 800aff6:	e7c4      	b.n	800af82 <USBD_StdDevReq+0xfa>
      else  if (cfgidx != pdev->dev_config) 
 800aff8:	6841      	ldr	r1, [r0, #4]
 800affa:	2901      	cmp	r1, #1
 800affc:	d0eb      	beq.n	800afd6 <USBD_StdDevReq+0x14e>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 800affe:	b2c9      	uxtb	r1, r1
 800b000:	f7ff fe5e 	bl	800acc0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b004:	7829      	ldrb	r1, [r5, #0]
 800b006:	6061      	str	r1, [r4, #4]
 800b008:	e7f0      	b.n	800afec <USBD_StdDevReq+0x164>
  if (req->wLength != 1) 
 800b00a:	88ca      	ldrh	r2, [r1, #6]
 800b00c:	2a01      	cmp	r2, #1
 800b00e:	d1b8      	bne.n	800af82 <USBD_StdDevReq+0xfa>
    switch (pdev->dev_state )  
 800b010:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800b014:	2b02      	cmp	r3, #2
 800b016:	d003      	beq.n	800b020 <USBD_StdDevReq+0x198>
 800b018:	2b03      	cmp	r3, #3
 800b01a:	d1b2      	bne.n	800af82 <USBD_StdDevReq+0xfa>
      USBD_CtlSendData (pdev, 
 800b01c:	1d01      	adds	r1, r0, #4
 800b01e:	e764      	b.n	800aeea <USBD_StdDevReq+0x62>
      pdev->dev_default_config = 0;
 800b020:	4601      	mov	r1, r0
 800b022:	2300      	movs	r3, #0
 800b024:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData (pdev, 
 800b028:	e75f      	b.n	800aeea <USBD_StdDevReq+0x62>
  switch (pdev->dev_state) 
 800b02a:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800b02e:	3b02      	subs	r3, #2
 800b030:	2b01      	cmp	r3, #1
 800b032:	d8a6      	bhi.n	800af82 <USBD_StdDevReq+0xfa>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 800b034:	2301      	movs	r3, #1
 800b036:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup) 
 800b038:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 800b03c:	b10b      	cbz	r3, 800b042 <USBD_StdDevReq+0x1ba>
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 800b03e:	2303      	movs	r3, #3
 800b040:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, 
 800b042:	2202      	movs	r2, #2
 800b044:	f104 010c 	add.w	r1, r4, #12
 800b048:	e74f      	b.n	800aeea <USBD_StdDevReq+0x62>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b04a:	884b      	ldrh	r3, [r1, #2]
 800b04c:	2b01      	cmp	r3, #1
 800b04e:	d1ab      	bne.n	800afa8 <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 800b050:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 800b054:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 800b058:	4629      	mov	r1, r5
 800b05a:	689b      	ldr	r3, [r3, #8]
 800b05c:	4620      	mov	r0, r4
 800b05e:	4798      	blx	r3
 800b060:	e7b9      	b.n	800afd6 <USBD_StdDevReq+0x14e>
  switch (pdev->dev_state)
 800b062:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800b066:	3b02      	subs	r3, #2
 800b068:	2b01      	cmp	r3, #1
 800b06a:	d88a      	bhi.n	800af82 <USBD_StdDevReq+0xfa>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 800b06c:	884b      	ldrh	r3, [r1, #2]
 800b06e:	2b01      	cmp	r3, #1
 800b070:	d19a      	bne.n	800afa8 <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 800b072:	2300      	movs	r3, #0
 800b074:	e7ec      	b.n	800b050 <USBD_StdDevReq+0x1c8>
 800b076:	bf00      	nop
 800b078:	2000108c 	.word	0x2000108c

0800b07c <USBD_StdItfReq>:
{
 800b07c:	b538      	push	{r3, r4, r5, lr}
  switch (pdev->dev_state) 
 800b07e:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800b082:	2b03      	cmp	r3, #3
{
 800b084:	4604      	mov	r4, r0
 800b086:	460d      	mov	r5, r1
  switch (pdev->dev_state) 
 800b088:	d10d      	bne.n	800b0a6 <USBD_StdItfReq+0x2a>
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 800b08a:	790b      	ldrb	r3, [r1, #4]
 800b08c:	2b01      	cmp	r3, #1
 800b08e:	d80a      	bhi.n	800b0a6 <USBD_StdItfReq+0x2a>
      pdev->pClass->Setup (pdev, req); 
 800b090:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800b094:	689b      	ldr	r3, [r3, #8]
 800b096:	4798      	blx	r3
      if((req->wLength == 0)&& (ret == USBD_OK))
 800b098:	88eb      	ldrh	r3, [r5, #6]
 800b09a:	b913      	cbnz	r3, 800b0a2 <USBD_StdItfReq+0x26>
         USBD_CtlSendStatus(pdev);
 800b09c:	4620      	mov	r0, r4
 800b09e:	f000 f8b6 	bl	800b20e <USBD_CtlSendStatus>
}
 800b0a2:	2000      	movs	r0, #0
 800b0a4:	bd38      	pop	{r3, r4, r5, pc}
     USBD_CtlError(pdev , req);
 800b0a6:	f7ff fee3 	bl	800ae70 <USBD_CtlError.constprop.0>
    break;
 800b0aa:	e7fa      	b.n	800b0a2 <USBD_StdItfReq+0x26>

0800b0ac <USBD_StdEPReq>:
{
 800b0ac:	b538      	push	{r3, r4, r5, lr}
 800b0ae:	460d      	mov	r5, r1
  ep_addr  = LOBYTE(req->wIndex);   
 800b0b0:	888a      	ldrh	r2, [r1, #4]
  switch (req->bRequest) 
 800b0b2:	786b      	ldrb	r3, [r5, #1]
  ep_addr  = LOBYTE(req->wIndex);   
 800b0b4:	7909      	ldrb	r1, [r1, #4]
  switch (req->bRequest) 
 800b0b6:	2b01      	cmp	r3, #1
{
 800b0b8:	4604      	mov	r4, r0
  switch (req->bRequest) 
 800b0ba:	d03b      	beq.n	800b134 <USBD_StdEPReq+0x88>
 800b0bc:	2b03      	cmp	r3, #3
 800b0be:	d01e      	beq.n	800b0fe <USBD_StdEPReq+0x52>
 800b0c0:	bb33      	cbnz	r3, 800b110 <USBD_StdEPReq+0x64>
    switch (pdev->dev_state) 
 800b0c2:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800b0c6:	2b02      	cmp	r3, #2
 800b0c8:	d042      	beq.n	800b150 <USBD_StdEPReq+0xa4>
 800b0ca:	2b03      	cmp	r3, #3
 800b0cc:	d11d      	bne.n	800b10a <USBD_StdEPReq+0x5e>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800b0ce:	f001 037f 	and.w	r3, r1, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 800b0d2:	f012 0f80 	tst.w	r2, #128	; 0x80
 800b0d6:	bf14      	ite	ne
 800b0d8:	3301      	addne	r3, #1
 800b0da:	3310      	addeq	r3, #16
 800b0dc:	2204      	movs	r2, #4
 800b0de:	2510      	movs	r5, #16
 800b0e0:	fb15 2503 	smlabb	r5, r5, r3, r2
 800b0e4:	4405      	add	r5, r0
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 800b0e6:	f000 fa9f 	bl	800b628 <USBD_LL_IsStallEP>
 800b0ea:	3800      	subs	r0, #0
 800b0ec:	bf18      	it	ne
 800b0ee:	2001      	movne	r0, #1
 800b0f0:	6028      	str	r0, [r5, #0]
      USBD_CtlSendData (pdev,
 800b0f2:	2202      	movs	r2, #2
 800b0f4:	4629      	mov	r1, r5
 800b0f6:	4620      	mov	r0, r4
 800b0f8:	f000 f85f 	bl	800b1ba <USBD_CtlSendData>
      break;
 800b0fc:	e008      	b.n	800b110 <USBD_StdEPReq+0x64>
    switch (pdev->dev_state) 
 800b0fe:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800b102:	2b02      	cmp	r3, #2
 800b104:	d024      	beq.n	800b150 <USBD_StdEPReq+0xa4>
 800b106:	2b03      	cmp	r3, #3
 800b108:	d004      	beq.n	800b114 <USBD_StdEPReq+0x68>
      USBD_CtlError(pdev , req);
 800b10a:	4620      	mov	r0, r4
 800b10c:	f7ff feb0 	bl	800ae70 <USBD_CtlError.constprop.0>
}
 800b110:	2000      	movs	r0, #0
 800b112:	bd38      	pop	{r3, r4, r5, pc}
      if (req->wValue == USB_FEATURE_EP_HALT)
 800b114:	886b      	ldrh	r3, [r5, #2]
 800b116:	b91b      	cbnz	r3, 800b120 <USBD_StdEPReq+0x74>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800b118:	064b      	lsls	r3, r1, #25
 800b11a:	d001      	beq.n	800b120 <USBD_StdEPReq+0x74>
          USBD_LL_StallEP(pdev , ep_addr);
 800b11c:	f000 fa76 	bl	800b60c <USBD_LL_StallEP>
          pdev->pClass->Setup (pdev, req);
 800b120:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 800b124:	4629      	mov	r1, r5
 800b126:	689b      	ldr	r3, [r3, #8]
 800b128:	4620      	mov	r0, r4
 800b12a:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 800b12c:	4620      	mov	r0, r4
 800b12e:	f000 f86e 	bl	800b20e <USBD_CtlSendStatus>
 800b132:	e7ed      	b.n	800b110 <USBD_StdEPReq+0x64>
    switch (pdev->dev_state) 
 800b134:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800b138:	2b02      	cmp	r3, #2
 800b13a:	d009      	beq.n	800b150 <USBD_StdEPReq+0xa4>
 800b13c:	2b03      	cmp	r3, #3
 800b13e:	d1e4      	bne.n	800b10a <USBD_StdEPReq+0x5e>
      if (req->wValue == USB_FEATURE_EP_HALT)
 800b140:	886b      	ldrh	r3, [r5, #2]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d1e4      	bne.n	800b110 <USBD_StdEPReq+0x64>
        if ((ep_addr & 0x7F) != 0x00) 
 800b146:	064a      	lsls	r2, r1, #25
 800b148:	d0f0      	beq.n	800b12c <USBD_StdEPReq+0x80>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 800b14a:	f000 fa66 	bl	800b61a <USBD_LL_ClearStallEP>
 800b14e:	e7e7      	b.n	800b120 <USBD_StdEPReq+0x74>
      if ((ep_addr & 0x7F) != 0x00) 
 800b150:	064b      	lsls	r3, r1, #25
 800b152:	d0dd      	beq.n	800b110 <USBD_StdEPReq+0x64>
        USBD_LL_StallEP(pdev , ep_addr);
 800b154:	f000 fa5a 	bl	800b60c <USBD_LL_StallEP>
 800b158:	e7da      	b.n	800b110 <USBD_StdEPReq+0x64>

0800b15a <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 800b15a:	780b      	ldrb	r3, [r1, #0]
 800b15c:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800b15e:	784b      	ldrb	r3, [r1, #1]
 800b160:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800b162:	78ca      	ldrb	r2, [r1, #3]
 800b164:	788b      	ldrb	r3, [r1, #2]
 800b166:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800b16a:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800b16c:	794a      	ldrb	r2, [r1, #5]
 800b16e:	790b      	ldrb	r3, [r1, #4]
 800b170:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800b174:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800b176:	79ca      	ldrb	r2, [r1, #7]
 800b178:	798b      	ldrb	r3, [r1, #6]
 800b17a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800b17e:	80c3      	strh	r3, [r0, #6]
}
 800b180:	4770      	bx	lr

0800b182 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b182:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0;
  
  if (desc != NULL) 
 800b184:	b188      	cbz	r0, 800b1aa <USBD_GetString+0x28>
 800b186:	2400      	movs	r4, #0
 800b188:	3801      	subs	r0, #1
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != '\0') 
 800b18a:	4623      	mov	r3, r4
 800b18c:	3401      	adds	r4, #1
 800b18e:	5d05      	ldrb	r5, [r0, r4]
 800b190:	2d00      	cmp	r5, #0
 800b192:	d1fa      	bne.n	800b18a <USBD_GetString+0x8>
    *len =  USBD_GetLen(desc) * 2 + 2;    
 800b194:	b2db      	uxtb	r3, r3
 800b196:	3301      	adds	r3, #1
 800b198:	005b      	lsls	r3, r3, #1
 800b19a:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *len;
 800b19c:	700b      	strb	r3, [r1, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 800b19e:	2303      	movs	r3, #3
 800b1a0:	704b      	strb	r3, [r1, #1]
 800b1a2:	2302      	movs	r3, #2
    while (*desc != '\0') 
 800b1a4:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 800b1a8:	b904      	cbnz	r4, 800b1ac <USBD_GetString+0x2a>
}
 800b1aa:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 800b1ac:	1c5a      	adds	r2, r3, #1
 800b1ae:	b2d2      	uxtb	r2, r2
 800b1b0:	54cc      	strb	r4, [r1, r3]
      unicode[idx++] =  0x00;
 800b1b2:	3302      	adds	r3, #2
 800b1b4:	548d      	strb	r5, [r1, r2]
 800b1b6:	b2db      	uxtb	r3, r3
 800b1b8:	e7f4      	b.n	800b1a4 <USBD_GetString+0x22>

0800b1ba <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 800b1ba:	b510      	push	{r4, lr}
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 800b1bc:	2402      	movs	r4, #2
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 800b1be:	4613      	mov	r3, r2
  pdev->ep_in[0].rem_length   = len;
 800b1c0:	e9c0 2206 	strd	r2, r2, [r0, #24]
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 800b1c4:	f8c0 41f4 	str.w	r4, [r0, #500]	; 0x1f4
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 800b1c8:	460a      	mov	r2, r1
 800b1ca:	2100      	movs	r1, #0
 800b1cc:	f000 fa46 	bl	800b65c <USBD_LL_Transmit>
  
  return USBD_OK;
}
 800b1d0:	2000      	movs	r0, #0
 800b1d2:	bd10      	pop	{r4, pc}

0800b1d4 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 800b1d4:	b508      	push	{r3, lr}
 800b1d6:	4613      	mov	r3, r2
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 800b1d8:	460a      	mov	r2, r1
 800b1da:	2100      	movs	r1, #0
 800b1dc:	f000 fa3e 	bl	800b65c <USBD_LL_Transmit>
  
  return USBD_OK;
}
 800b1e0:	2000      	movs	r0, #0
 800b1e2:	bd08      	pop	{r3, pc}

0800b1e4 <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 800b1e4:	b510      	push	{r4, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 800b1e6:	2403      	movs	r4, #3
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length   = len;
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 800b1e8:	4613      	mov	r3, r2
  pdev->ep_out[0].rem_length   = len;
 800b1ea:	e9c0 2242 	strd	r2, r2, [r0, #264]	; 0x108
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 800b1ee:	f8c0 41f4 	str.w	r4, [r0, #500]	; 0x1f4
  USBD_LL_PrepareReceive (pdev,
 800b1f2:	460a      	mov	r2, r1
 800b1f4:	2100      	movs	r1, #0
 800b1f6:	f000 fa38 	bl	800b66a <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
}
 800b1fa:	2000      	movs	r0, #0
 800b1fc:	bd10      	pop	{r4, pc}

0800b1fe <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 800b1fe:	b508      	push	{r3, lr}
 800b200:	4613      	mov	r3, r2

  USBD_LL_PrepareReceive (pdev,
 800b202:	460a      	mov	r2, r1
 800b204:	2100      	movs	r1, #0
 800b206:	f000 fa30 	bl	800b66a <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 800b20a:	2000      	movs	r0, #0
 800b20c:	bd08      	pop	{r3, pc}

0800b20e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 800b20e:	b508      	push	{r3, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b210:	2304      	movs	r3, #4
 800b212:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 800b216:	2300      	movs	r3, #0
 800b218:	461a      	mov	r2, r3
 800b21a:	4619      	mov	r1, r3
 800b21c:	f000 fa1e 	bl	800b65c <USBD_LL_Transmit>
  
  return USBD_OK;
}
 800b220:	2000      	movs	r0, #0
 800b222:	bd08      	pop	{r3, pc}

0800b224 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 800b224:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 800b226:	2305      	movs	r3, #5
 800b228:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 800b22c:	2300      	movs	r3, #0
 800b22e:	461a      	mov	r2, r3
 800b230:	4619      	mov	r1, r3
 800b232:	f000 fa1a 	bl	800b66a <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 800b236:	2000      	movs	r0, #0
 800b238:	bd08      	pop	{r3, pc}

0800b23a <USBD_CDC_DataIn>:
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 800b23a:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  if(pdev->pClassData != NULL)
 800b23e:	b11b      	cbz	r3, 800b248 <USBD_CDC_DataIn+0xe>
  {
    
    hcdc->TxState = 0;
 800b240:	2000      	movs	r0, #0
 800b242:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214

    return USBD_OK;
 800b246:	4770      	bx	lr
  }
  else
  {
    return USBD_FAIL;
 800b248:	2002      	movs	r0, #2
  }
}
 800b24a:	4770      	bx	lr

0800b24c <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 800b24c:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
{ 
 800b250:	b510      	push	{r4, lr}
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 800b252:	b16b      	cbz	r3, 800b270 <USBD_CDC_EP0_RxReady+0x24>
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 800b254:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 800b258:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 800b25c:	28ff      	cmp	r0, #255	; 0xff
 800b25e:	d007      	beq.n	800b270 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b260:	689b      	ldr	r3, [r3, #8]
 800b262:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 800b266:	4621      	mov	r1, r4
 800b268:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFF; 
 800b26a:	23ff      	movs	r3, #255	; 0xff
 800b26c:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
      
  }
  return USBD_OK;
}
 800b270:	2000      	movs	r0, #0
 800b272:	bd10      	pop	{r4, pc}

0800b274 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgFSDesc);
 800b274:	2343      	movs	r3, #67	; 0x43
 800b276:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 800b278:	4800      	ldr	r0, [pc, #0]	; (800b27c <USBD_CDC_GetFSCfgDesc+0x8>)
 800b27a:	4770      	bx	lr
 800b27c:	20000a00 	.word	0x20000a00

0800b280 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgHSDesc);
 800b280:	2343      	movs	r3, #67	; 0x43
 800b282:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 800b284:	4800      	ldr	r0, [pc, #0]	; (800b288 <USBD_CDC_GetHSCfgDesc+0x8>)
 800b286:	4770      	bx	lr
 800b288:	20000a44 	.word	0x20000a44

0800b28c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 800b28c:	2343      	movs	r3, #67	; 0x43
 800b28e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 800b290:	4800      	ldr	r0, [pc, #0]	; (800b294 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 800b292:	4770      	bx	lr
 800b294:	20000a94 	.word	0x20000a94

0800b298 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 800b298:	230a      	movs	r3, #10
 800b29a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 800b29c:	4800      	ldr	r0, [pc, #0]	; (800b2a0 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 800b29e:	4770      	bx	lr
 800b2a0:	20000a88 	.word	0x20000a88

0800b2a4 <USBD_CDC_DataOut>:
{      
 800b2a4:	b538      	push	{r3, r4, r5, lr}
 800b2a6:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 800b2a8:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800b2ac:	f000 f9e4 	bl	800b678 <USBD_LL_GetRxDataSize>
  if(pdev->pClassData != NULL)
 800b2b0:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800b2b4:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  if(pdev->pClassData != NULL)
 800b2b8:	b14b      	cbz	r3, 800b2ce <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b2ba:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 800b2be:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 800b2c2:	68db      	ldr	r3, [r3, #12]
 800b2c4:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 800b2c8:	4798      	blx	r3
    return USBD_OK;
 800b2ca:	2000      	movs	r0, #0
}
 800b2cc:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 800b2ce:	2002      	movs	r0, #2
 800b2d0:	e7fc      	b.n	800b2cc <USBD_CDC_DataOut+0x28>

0800b2d2 <USBD_CDC_Setup>:
{
 800b2d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b2d4:	780e      	ldrb	r6, [r1, #0]
 800b2d6:	f006 0360 	and.w	r3, r6, #96	; 0x60
 800b2da:	2b20      	cmp	r3, #32
{
 800b2dc:	4604      	mov	r4, r0
 800b2de:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b2e0:	d111      	bne.n	800b306 <USBD_CDC_Setup+0x34>
    if (req->wLength)
 800b2e2:	88ca      	ldrh	r2, [r1, #6]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b2e4:	784b      	ldrb	r3, [r1, #1]
    if (req->wLength)
 800b2e6:	b1c2      	cbz	r2, 800b31a <USBD_CDC_Setup+0x48>
      if (req->bmRequest & 0x80)
 800b2e8:	0636      	lsls	r6, r6, #24
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 800b2ea:	f8d0 1218 	ldr.w	r1, [r0, #536]	; 0x218
      if (req->bmRequest & 0x80)
 800b2ee:	d50d      	bpl.n	800b30c <USBD_CDC_Setup+0x3a>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b2f0:	f8d0 021c 	ldr.w	r0, [r0, #540]	; 0x21c
 800b2f4:	9101      	str	r1, [sp, #4]
 800b2f6:	6886      	ldr	r6, [r0, #8]
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	47b0      	blx	r6
          USBD_CtlSendData (pdev, 
 800b2fc:	88ea      	ldrh	r2, [r5, #6]
 800b2fe:	9901      	ldr	r1, [sp, #4]
 800b300:	4620      	mov	r0, r4
 800b302:	f7ff ff5a 	bl	800b1ba <USBD_CtlSendData>
}
 800b306:	2000      	movs	r0, #0
 800b308:	b002      	add	sp, #8
 800b30a:	bd70      	pop	{r4, r5, r6, pc}
        hcdc->CmdOpCode = req->bRequest;
 800b30c:	f881 3200 	strb.w	r3, [r1, #512]	; 0x200
        hcdc->CmdLength = req->wLength;
 800b310:	f881 2201 	strb.w	r2, [r1, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, 
 800b314:	f7ff ff66 	bl	800b1e4 <USBD_CtlPrepareRx>
 800b318:	e7f5      	b.n	800b306 <USBD_CDC_Setup+0x34>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b31a:	f8d0 121c 	ldr.w	r1, [r0, #540]	; 0x21c
 800b31e:	4618      	mov	r0, r3
 800b320:	688c      	ldr	r4, [r1, #8]
 800b322:	4611      	mov	r1, r2
 800b324:	47a0      	blx	r4
 800b326:	e7ee      	b.n	800b306 <USBD_CDC_Setup+0x34>

0800b328 <USBD_CDC_DeInit>:
{
 800b328:	b510      	push	{r4, lr}
  USBD_LL_CloseEP(pdev,
 800b32a:	2181      	movs	r1, #129	; 0x81
{
 800b32c:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev,
 800b32e:	f000 f966 	bl	800b5fe <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 800b332:	2101      	movs	r1, #1
 800b334:	4620      	mov	r0, r4
 800b336:	f000 f962 	bl	800b5fe <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 800b33a:	2182      	movs	r1, #130	; 0x82
 800b33c:	4620      	mov	r0, r4
 800b33e:	f000 f95e 	bl	800b5fe <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 800b342:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 800b346:	b153      	cbz	r3, 800b35e <USBD_CDC_DeInit+0x36>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b348:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 800b34c:	685b      	ldr	r3, [r3, #4]
 800b34e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800b350:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 800b354:	f000 f99a 	bl	800b68c <USBD_static_free>
    pdev->pClassData = NULL;
 800b358:	2300      	movs	r3, #0
 800b35a:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
}
 800b35e:	2000      	movs	r0, #0
 800b360:	bd10      	pop	{r4, pc}

0800b362 <USBD_CDC_Init>:
{
 800b362:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800b364:	7c03      	ldrb	r3, [r0, #16]
{
 800b366:	4604      	mov	r4, r0
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800b368:	bb7b      	cbnz	r3, 800b3ca <USBD_CDC_Init+0x68>
    USBD_LL_OpenEP(pdev,
 800b36a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b36e:	2202      	movs	r2, #2
 800b370:	2181      	movs	r1, #129	; 0x81
 800b372:	f000 f93a 	bl	800b5ea <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 800b376:	f44f 7300 	mov.w	r3, #512	; 0x200
    USBD_LL_OpenEP(pdev,
 800b37a:	2202      	movs	r2, #2
 800b37c:	2101      	movs	r1, #1
 800b37e:	4620      	mov	r0, r4
 800b380:	f000 f933 	bl	800b5ea <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev,
 800b384:	2308      	movs	r3, #8
 800b386:	2203      	movs	r2, #3
 800b388:	2182      	movs	r1, #130	; 0x82
 800b38a:	4620      	mov	r0, r4
 800b38c:	f000 f92d 	bl	800b5ea <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 800b390:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800b394:	f000 f976 	bl	800b684 <USBD_static_malloc>
 800b398:	4605      	mov	r5, r0
 800b39a:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
  if(pdev->pClassData == NULL)
 800b39e:	b320      	cbz	r0, 800b3ea <USBD_CDC_Init+0x88>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800b3a0:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
    hcdc->TxState =0;
 800b3a4:	2700      	movs	r7, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	4798      	blx	r3
    hcdc->TxState =0;
 800b3aa:	f8c5 7214 	str.w	r7, [r5, #532]	; 0x214
    hcdc->RxState =0;
 800b3ae:	f8c5 7218 	str.w	r7, [r5, #536]	; 0x218
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800b3b2:	7c26      	ldrb	r6, [r4, #16]
 800b3b4:	b986      	cbnz	r6, 800b3d8 <USBD_CDC_Init+0x76>
      USBD_LL_PrepareReceive(pdev,
 800b3b6:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 800b3ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b3be:	2101      	movs	r1, #1
 800b3c0:	4620      	mov	r0, r4
 800b3c2:	f000 f952 	bl	800b66a <USBD_LL_PrepareReceive>
}
 800b3c6:	4630      	mov	r0, r6
 800b3c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    USBD_LL_OpenEP(pdev,
 800b3ca:	2340      	movs	r3, #64	; 0x40
 800b3cc:	2202      	movs	r2, #2
 800b3ce:	2181      	movs	r1, #129	; 0x81
 800b3d0:	f000 f90b 	bl	800b5ea <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 800b3d4:	2340      	movs	r3, #64	; 0x40
 800b3d6:	e7d0      	b.n	800b37a <USBD_CDC_Init+0x18>
      USBD_LL_PrepareReceive(pdev,
 800b3d8:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 800b3dc:	2340      	movs	r3, #64	; 0x40
 800b3de:	2101      	movs	r1, #1
 800b3e0:	4620      	mov	r0, r4
 800b3e2:	f000 f942 	bl	800b66a <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 800b3e6:	463e      	mov	r6, r7
 800b3e8:	e7ed      	b.n	800b3c6 <USBD_CDC_Init+0x64>
    ret = 1; 
 800b3ea:	2601      	movs	r6, #1
 800b3ec:	e7eb      	b.n	800b3c6 <USBD_CDC_Init+0x64>

0800b3ee <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;
  
  if(fops != NULL)
 800b3ee:	b119      	cbz	r1, 800b3f8 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData= fops;
 800b3f0:	f8c0 121c 	str.w	r1, [r0, #540]	; 0x21c
    ret = USBD_OK;    
 800b3f4:	2000      	movs	r0, #0
 800b3f6:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 800b3f8:	2002      	movs	r0, #2
  }
  
  return ret;
}
 800b3fa:	4770      	bx	lr

0800b3fc <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 800b3fc:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;  
  
  return USBD_OK;  
}
 800b400:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 800b402:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;  
 800b406:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 800b40a:	4770      	bx	lr

0800b40c <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
  
  hcdc->RxBuffer = pbuff;
 800b40c:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  return USBD_OK;
}
 800b410:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 800b412:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 800b416:	4770      	bx	lr

0800b418 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{      
 800b418:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 800b41a:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
  
  if(pdev->pClassData != NULL)
 800b41e:	b175      	cbz	r5, 800b43e <USBD_CDC_TransmitPacket+0x26>
  {
    if(hcdc->TxState == 0)
 800b420:	f8d5 4214 	ldr.w	r4, [r5, #532]	; 0x214
 800b424:	b96c      	cbnz	r4, 800b442 <USBD_CDC_TransmitPacket+0x2a>
    {
      
      /* Transmit next packet */
      USBD_LL_Transmit(pdev,
 800b426:	f8b5 3210 	ldrh.w	r3, [r5, #528]	; 0x210
 800b42a:	f8d5 2208 	ldr.w	r2, [r5, #520]	; 0x208
 800b42e:	2181      	movs	r1, #129	; 0x81
 800b430:	f000 f914 	bl	800b65c <USBD_LL_Transmit>
                       CDC_IN_EP,
                       hcdc->TxBuffer,
                       hcdc->TxLength);
      
      /* Tx Transfer in progress */
      hcdc->TxState = 1;
 800b434:	2301      	movs	r3, #1
 800b436:	f8c5 3214 	str.w	r3, [r5, #532]	; 0x214
      return USBD_OK;
 800b43a:	4620      	mov	r0, r4
  }
  else
  {
    return USBD_FAIL;
  }
}
 800b43c:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 800b43e:	2002      	movs	r0, #2
 800b440:	e7fc      	b.n	800b43c <USBD_CDC_TransmitPacket+0x24>
      return USBD_BUSY;
 800b442:	2001      	movs	r0, #1
 800b444:	e7fa      	b.n	800b43c <USBD_CDC_TransmitPacket+0x24>

0800b446 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 800b446:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
{      
 800b44a:	b510      	push	{r4, lr}
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800b44c:	b182      	cbz	r2, 800b470 <USBD_CDC_ReceivePacket+0x2a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800b44e:	7c04      	ldrb	r4, [r0, #16]
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b450:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800b454:	b934      	cbnz	r4, 800b464 <USBD_CDC_ReceivePacket+0x1e>
      USBD_LL_PrepareReceive(pdev,
 800b456:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b45a:	2101      	movs	r1, #1
 800b45c:	f000 f905 	bl	800b66a <USBD_LL_PrepareReceive>
  }
  else
  {
    return USBD_FAIL;
  }
}
 800b460:	4620      	mov	r0, r4
 800b462:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 800b464:	2340      	movs	r3, #64	; 0x40
 800b466:	2101      	movs	r1, #1
 800b468:	f000 f8ff 	bl	800b66a <USBD_LL_PrepareReceive>
    return USBD_OK;
 800b46c:	2400      	movs	r4, #0
 800b46e:	e7f7      	b.n	800b460 <USBD_CDC_ReceivePacket+0x1a>
    return USBD_FAIL;
 800b470:	2402      	movs	r4, #2
 800b472:	e7f5      	b.n	800b460 <USBD_CDC_ReceivePacket+0x1a>

0800b474 <HAL_PCD_MspInit>:
  * @brief  Initializes the PCD MSP.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef *hpcd)
{
 800b474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIOA clock for USB DataLines */
  __GPIOA_CLK_ENABLE();
 800b478:	4c23      	ldr	r4, [pc, #140]	; (800b508 <HAL_PCD_MspInit+0x94>)
 800b47a:	6963      	ldr	r3, [r4, #20]
 800b47c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b480:	6163      	str	r3, [r4, #20]
  
  /* Enable the GPIOB clock for USB external Pull-Up */
  __GPIOB_CLK_ENABLE();
 800b482:	6963      	ldr	r3, [r4, #20]
{
 800b484:	b086      	sub	sp, #24
  __GPIOB_CLK_ENABLE();
 800b486:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b48a:	6163      	str	r3, [r4, #20]

  /* Create a USB Disconnect signal for 1ms */
  GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800b48c:	f44f 56c0 	mov.w	r6, #6144	; 0x1800
 800b490:	2311      	movs	r3, #17
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800b492:	2500      	movs	r5, #0
 800b494:	f04f 0803 	mov.w	r8, #3
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800b498:	270e      	movs	r7, #14
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 800b49a:	a901      	add	r1, sp, #4
 800b49c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800b4a0:	e9cd 6301 	strd	r6, r3, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800b4a4:	e9cd 5803 	strd	r5, r8, [sp, #12]
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800b4a8:	9705      	str	r7, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 800b4aa:	f7fd ff29 	bl	8009300 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOA,(GPIO_PIN_11 | GPIO_PIN_12),0);
 800b4ae:	462a      	mov	r2, r5
 800b4b0:	4631      	mov	r1, r6
 800b4b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b4b6:	f7fd ffed 	bl	8009494 <HAL_GPIO_WritePin>
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBD_LL_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);
 800b4ba:	2001      	movs	r0, #1
 800b4bc:	f7fd feac 	bl	8009218 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA,(GPIO_PIN_11 | GPIO_PIN_12),1);
 800b4c0:	2201      	movs	r2, #1
 800b4c2:	4631      	mov	r1, r6
 800b4c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b4c8:	f7fd ffe4 	bl	8009494 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b4cc:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 800b4ce:	a901      	add	r1, sp, #4
 800b4d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b4d4:	e9cd 3502 	strd	r3, r5, [sp, #8]
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800b4d8:	e9cd 8704 	strd	r8, r7, [sp, #16]
  GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
 800b4dc:	9601      	str	r6, [sp, #4]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 800b4de:	f7fd ff0f 	bl	8009300 <HAL_GPIO_Init>
  __USB_CLK_ENABLE();
 800b4e2:	69e3      	ldr	r3, [r4, #28]
 800b4e4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b4e8:	61e3      	str	r3, [r4, #28]
  __SYSCFG_CLK_ENABLE();
 800b4ea:	69a3      	ldr	r3, [r4, #24]
 800b4ec:	f043 0301 	orr.w	r3, r3, #1
 800b4f0:	61a3      	str	r3, [r4, #24]
  HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 5, 0);
 800b4f2:	462a      	mov	r2, r5
 800b4f4:	2105      	movs	r1, #5
 800b4f6:	2014      	movs	r0, #20
 800b4f8:	f7fd feae 	bl	8009258 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn); 
 800b4fc:	2014      	movs	r0, #20
 800b4fe:	f7fd fedf 	bl	80092c0 <HAL_NVIC_EnableIRQ>
}
 800b502:	b006      	add	sp, #24
 800b504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b508:	40021000 	.word	0x40021000

0800b50c <HAL_PCD_SetupStageCallback>:
  USBD_LL_SetupStage(hpcd->pData, (uint8_t *)hpcd->Setup);
 800b50c:	f500 71a2 	add.w	r1, r0, #324	; 0x144
 800b510:	f8d0 0174 	ldr.w	r0, [r0, #372]	; 0x174
 800b514:	f7ff bbdb 	b.w	800acce <USBD_LL_SetupStage>

0800b518 <HAL_PCD_DataOutStageCallback>:
  USBD_LL_DataOutStage(hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b518:	231c      	movs	r3, #28
 800b51a:	fb03 0301 	mla	r3, r3, r1, r0
 800b51e:	f8d0 0174 	ldr.w	r0, [r0, #372]	; 0x174
 800b522:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800b526:	f7ff bbff 	b.w	800ad28 <USBD_LL_DataOutStage>

0800b52a <HAL_PCD_DataInStageCallback>:
  USBD_LL_DataInStage(hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b52a:	231c      	movs	r3, #28
 800b52c:	fb03 0301 	mla	r3, r3, r1, r0
 800b530:	f8d0 0174 	ldr.w	r0, [r0, #372]	; 0x174
 800b534:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b536:	f7ff bc27 	b.w	800ad88 <USBD_LL_DataInStage>

0800b53a <HAL_PCD_SOFCallback>:
  USBD_LL_SOF(hpcd->pData);
 800b53a:	f8d0 0174 	ldr.w	r0, [r0, #372]	; 0x174
 800b53e:	f7ff bc8b 	b.w	800ae58 <USBD_LL_SOF>

0800b542 <HAL_PCD_ResetCallback>:
{   
 800b542:	b510      	push	{r4, lr}
 800b544:	4604      	mov	r4, r0
  USBD_LL_SetSpeed(hpcd->pData, USBD_SPEED_FULL);
 800b546:	2101      	movs	r1, #1
 800b548:	f8d0 0174 	ldr.w	r0, [r0, #372]	; 0x174
 800b54c:	f7ff fc81 	bl	800ae52 <USBD_LL_SetSpeed>
  USBD_LL_Reset(hpcd->pData);
 800b550:	f8d4 0174 	ldr.w	r0, [r4, #372]	; 0x174
}
 800b554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset(hpcd->pData);
 800b558:	f7ff bc5c 	b.w	800ae14 <USBD_LL_Reset>

0800b55c <HAL_PCD_SuspendCallback>:
}
 800b55c:	4770      	bx	lr

0800b55e <HAL_PCD_ResumeCallback>:
 800b55e:	4770      	bx	lr

0800b560 <USBD_LL_Init>:
{    
 800b560:	b538      	push	{r3, r4, r5, lr}
  hpcd.Init.dev_endpoints = 8;
 800b562:	4a1c      	ldr	r2, [pc, #112]	; (800b5d4 <USBD_LL_Init+0x74>)
{    
 800b564:	4604      	mov	r4, r0
  hpcd.Instance = USB;
 800b566:	481c      	ldr	r0, [pc, #112]	; (800b5d8 <USBD_LL_Init+0x78>)
  pdev->pData = &hpcd;
 800b568:	f8c4 0220 	str.w	r0, [r4, #544]	; 0x220
  hpcd.Init.dev_endpoints = 8;
 800b56c:	2308      	movs	r3, #8
  hpcd.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b56e:	2500      	movs	r5, #0
  hpcd.Init.dev_endpoints = 8;
 800b570:	e9c0 2300 	strd	r2, r3, [r0]
  hpcd.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b574:	2302      	movs	r3, #2
 800b576:	e9c0 5303 	strd	r5, r3, [r0, #12]
  hpcd.Init.speed = PCD_SPEED_FULL;
 800b57a:	6083      	str	r3, [r0, #8]
  hpcd.pData = pdev;
 800b57c:	f8c0 4174 	str.w	r4, [r0, #372]	; 0x174
  HAL_PCD_Init(pdev->pData);
 800b580:	f7fd ff91 	bl	80094a6 <HAL_PCD_Init>
  HAL_PCDEx_PMAConfig(pdev->pData , 0x00 , PCD_SNG_BUF, 0x40);
 800b584:	462a      	mov	r2, r5
 800b586:	4629      	mov	r1, r5
 800b588:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 800b58c:	2340      	movs	r3, #64	; 0x40
 800b58e:	f7fe fe27 	bl	800a1e0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig(pdev->pData , 0x80 , PCD_SNG_BUF, 0x80);
 800b592:	2380      	movs	r3, #128	; 0x80
 800b594:	462a      	mov	r2, r5
 800b596:	4619      	mov	r1, r3
 800b598:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 800b59c:	f7fe fe20 	bl	800a1e0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig(pdev->pData , CDC_IN_EP , PCD_SNG_BUF, 0xC0);  
 800b5a0:	462a      	mov	r2, r5
 800b5a2:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 800b5a6:	23c0      	movs	r3, #192	; 0xc0
 800b5a8:	2181      	movs	r1, #129	; 0x81
 800b5aa:	f7fe fe19 	bl	800a1e0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig(pdev->pData , CDC_OUT_EP , PCD_SNG_BUF, 0x110);
 800b5ae:	462a      	mov	r2, r5
 800b5b0:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 800b5b4:	f44f 7388 	mov.w	r3, #272	; 0x110
 800b5b8:	2101      	movs	r1, #1
 800b5ba:	f7fe fe11 	bl	800a1e0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig(pdev->pData , CDC_CMD_EP , PCD_SNG_BUF, 0x100); 
 800b5be:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 800b5c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b5c6:	462a      	mov	r2, r5
 800b5c8:	2182      	movs	r1, #130	; 0x82
 800b5ca:	f7fe fe09 	bl	800a1e0 <HAL_PCDEx_PMAConfig>
}
 800b5ce:	4628      	mov	r0, r5
 800b5d0:	bd38      	pop	{r3, r4, r5, pc}
 800b5d2:	bf00      	nop
 800b5d4:	40005c00 	.word	0x40005c00
 800b5d8:	20001090 	.word	0x20001090

0800b5dc <USBD_LL_Start>:
{
 800b5dc:	b508      	push	{r3, lr}
  HAL_PCD_Start(pdev->pData);
 800b5de:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800b5e2:	f7fd ffa9 	bl	8009538 <HAL_PCD_Start>
}
 800b5e6:	2000      	movs	r0, #0
 800b5e8:	bd08      	pop	{r3, pc}

0800b5ea <USBD_LL_OpenEP>:
{
 800b5ea:	b510      	push	{r4, lr}
 800b5ec:	4614      	mov	r4, r2
  HAL_PCD_EP_Open(pdev->pData,
 800b5ee:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
{
 800b5f2:	461a      	mov	r2, r3
  HAL_PCD_EP_Open(pdev->pData,
 800b5f4:	4623      	mov	r3, r4
 800b5f6:	f7fd ffbb 	bl	8009570 <HAL_PCD_EP_Open>
}
 800b5fa:	2000      	movs	r0, #0
 800b5fc:	bd10      	pop	{r4, pc}

0800b5fe <USBD_LL_CloseEP>:
{
 800b5fe:	b508      	push	{r3, lr}
  HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b600:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800b604:	f7fe f926 	bl	8009854 <HAL_PCD_EP_Close>
}
 800b608:	2000      	movs	r0, #0
 800b60a:	bd08      	pop	{r3, pc}

0800b60c <USBD_LL_StallEP>:
{
 800b60c:	b508      	push	{r3, lr}
  HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b60e:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800b612:	f7fe fd37 	bl	800a084 <HAL_PCD_EP_SetStall>
}
 800b616:	2000      	movs	r0, #0
 800b618:	bd08      	pop	{r3, pc}

0800b61a <USBD_LL_ClearStallEP>:
{
 800b61a:	b508      	push	{r3, lr}
  HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b61c:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800b620:	f7fe fd80 	bl	800a124 <HAL_PCD_EP_ClrStall>
}
 800b624:	2000      	movs	r0, #0
 800b626:	bd08      	pop	{r3, pc}

0800b628 <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 800b628:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b62c:	f8d0 3220 	ldr.w	r3, [r0, #544]	; 0x220
  if((ep_addr & 0x80) == 0x80)
 800b630:	f04f 021c 	mov.w	r2, #28
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b634:	bf1b      	ittet	ne
 800b636:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 800b63a:	fb02 3101 	mlane	r1, r2, r1, r3
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b63e:	fb02 3101 	mlaeq	r1, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b642:	f891 002a 	ldrbne.w	r0, [r1, #42]	; 0x2a
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b646:	bf08      	it	eq
 800b648:	f891 00b6 	ldrbeq.w	r0, [r1, #182]	; 0xb6
}
 800b64c:	4770      	bx	lr

0800b64e <USBD_LL_SetUSBAddress>:
{
 800b64e:	b508      	push	{r3, lr}
  HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b650:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800b654:	f7fd ff76 	bl	8009544 <HAL_PCD_SetAddress>
}
 800b658:	2000      	movs	r0, #0
 800b65a:	bd08      	pop	{r3, pc}

0800b65c <USBD_LL_Transmit>:
{
 800b65c:	b508      	push	{r3, lr}
  HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b65e:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800b662:	f7fe fa3f 	bl	8009ae4 <HAL_PCD_EP_Transmit>
}
 800b666:	2000      	movs	r0, #0
 800b668:	bd08      	pop	{r3, pc}

0800b66a <USBD_LL_PrepareReceive>:
{
 800b66a:	b508      	push	{r3, lr}
  HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b66c:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800b670:	f7fe f9cc 	bl	8009a0c <HAL_PCD_EP_Receive>
}
 800b674:	2000      	movs	r0, #0
 800b676:	bd08      	pop	{r3, pc}

0800b678 <USBD_LL_GetRxDataSize>:
{
 800b678:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount(pdev->pData, ep_addr);
 800b67a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800b67e:	f7fe fa29 	bl	8009ad4 <HAL_PCD_EP_GetRxCount>
}
 800b682:	bd08      	pop	{r3, pc}

0800b684 <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[MAX_STATIC_ALLOC_SIZE];
  return mem;
}
 800b684:	4800      	ldr	r0, [pc, #0]	; (800b688 <USBD_static_malloc+0x4>)
 800b686:	4770      	bx	lr
 800b688:	20001208 	.word	0x20001208

0800b68c <USBD_static_free>:
 800b68c:	4770      	bx	lr
	...

0800b690 <USBD_VCP_DeviceDescriptor>:
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(hUSBDDeviceDesc);
 800b690:	2312      	movs	r3, #18
  return (uint8_t*)hUSBDDeviceDesc;
}
 800b692:	4801      	ldr	r0, [pc, #4]	; (800b698 <USBD_VCP_DeviceDescriptor+0x8>)
  *length = sizeof(hUSBDDeviceDesc);
 800b694:	800b      	strh	r3, [r1, #0]
}
 800b696:	4770      	bx	lr
 800b698:	0801c05d 	.word	0x0801c05d

0800b69c <USBD_VCP_LangIDStrDescriptor>:
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);  
 800b69c:	2304      	movs	r3, #4
  return (uint8_t*)USBD_LangIDDesc;
}
 800b69e:	4801      	ldr	r0, [pc, #4]	; (800b6a4 <USBD_VCP_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);  
 800b6a0:	800b      	strh	r3, [r1, #0]
}
 800b6a2:	4770      	bx	lr
 800b6a4:	0801c059 	.word	0x0801c059

0800b6a8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
 800b6a8:	2300      	movs	r3, #0
 800b6aa:	b570      	push	{r4, r5, r6, lr}
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 800b6ac:	1c4d      	adds	r5, r1, #1
 800b6ae:	461e      	mov	r6, r3
      pbuf[ 2* idx] = (value >> 28) + '0';
 800b6b0:	0f04      	lsrs	r4, r0, #28
    if( ((value >> 28)) < 0xA )
 800b6b2:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
      pbuf[ 2* idx] = (value >> 28) + '0';
 800b6b6:	bf34      	ite	cc
 800b6b8:	3430      	addcc	r4, #48	; 0x30
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 800b6ba:	3437      	addcs	r4, #55	; 0x37
 800b6bc:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[ 2* idx + 1] = 0;
 800b6c0:	f805 6013 	strb.w	r6, [r5, r3, lsl #1]
  for( idx = 0 ; idx < len ; idx ++)
 800b6c4:	3301      	adds	r3, #1
 800b6c6:	b2dc      	uxtb	r4, r3
 800b6c8:	42a2      	cmp	r2, r4
    value = value << 4;
 800b6ca:	ea4f 1000 	mov.w	r0, r0, lsl #4
  for( idx = 0 ; idx < len ; idx ++)
 800b6ce:	d8ef      	bhi.n	800b6b0 <IntToUnicode+0x8>
  }
}
 800b6d0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b6d4 <USBD_VCP_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 800b6d4:	231a      	movs	r3, #26
{
 800b6d6:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 800b6d8:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t*)DEVICE_ID1;
 800b6da:	4b0a      	ldr	r3, [pc, #40]	; (800b704 <USBD_VCP_SerialStrDescriptor+0x30>)
 800b6dc:	f8d3 07ac 	ldr.w	r0, [r3, #1964]	; 0x7ac
  deviceserial0 += deviceserial2;
 800b6e0:	f8d3 27b4 	ldr.w	r2, [r3, #1972]	; 0x7b4
  if (deviceserial0 != 0)
 800b6e4:	1880      	adds	r0, r0, r2
 800b6e6:	d00a      	beq.n	800b6fe <USBD_VCP_SerialStrDescriptor+0x2a>
  deviceserial1 = *(uint32_t*)DEVICE_ID2;
 800b6e8:	f8d3 47b0 	ldr.w	r4, [r3, #1968]	; 0x7b0
    IntToUnicode (deviceserial0, &USBD_StringSerial[2] ,8);
 800b6ec:	4906      	ldr	r1, [pc, #24]	; (800b708 <USBD_VCP_SerialStrDescriptor+0x34>)
 800b6ee:	2208      	movs	r2, #8
 800b6f0:	f7ff ffda 	bl	800b6a8 <IntToUnicode>
    IntToUnicode (deviceserial1, &USBD_StringSerial[18] ,4);
 800b6f4:	2204      	movs	r2, #4
 800b6f6:	3110      	adds	r1, #16
 800b6f8:	4620      	mov	r0, r4
 800b6fa:	f7ff ffd5 	bl	800b6a8 <IntToUnicode>
}
 800b6fe:	4803      	ldr	r0, [pc, #12]	; (800b70c <USBD_VCP_SerialStrDescriptor+0x38>)
 800b700:	bd10      	pop	{r4, pc}
 800b702:	bf00      	nop
 800b704:	1ffff000 	.word	0x1ffff000
 800b708:	20000ad9 	.word	0x20000ad9
 800b70c:	20000ad7 	.word	0x20000ad7

0800b710 <USBD_VCP_ProductStrDescriptor>:
{
 800b710:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);    
 800b712:	4c04      	ldr	r4, [pc, #16]	; (800b724 <USBD_VCP_ProductStrDescriptor+0x14>)
 800b714:	4804      	ldr	r0, [pc, #16]	; (800b728 <USBD_VCP_ProductStrDescriptor+0x18>)
{
 800b716:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);    
 800b718:	4621      	mov	r1, r4
 800b71a:	f7ff fd32 	bl	800b182 <USBD_GetString>
}
 800b71e:	4620      	mov	r0, r4
 800b720:	bd10      	pop	{r4, pc}
 800b722:	bf00      	nop
 800b724:	20001438 	.word	0x20001438
 800b728:	0801c00c 	.word	0x0801c00c

0800b72c <USBD_VCP_ManufacturerStrDescriptor>:
{
 800b72c:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b72e:	4c04      	ldr	r4, [pc, #16]	; (800b740 <USBD_VCP_ManufacturerStrDescriptor+0x14>)
 800b730:	4804      	ldr	r0, [pc, #16]	; (800b744 <USBD_VCP_ManufacturerStrDescriptor+0x18>)
{
 800b732:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b734:	4621      	mov	r1, r4
 800b736:	f7ff fd24 	bl	800b182 <USBD_GetString>
}
 800b73a:	4620      	mov	r0, r4
 800b73c:	bd10      	pop	{r4, pc}
 800b73e:	bf00      	nop
 800b740:	20001438 	.word	0x20001438
 800b744:	0801c02d 	.word	0x0801c02d

0800b748 <USBD_VCP_ConfigStrDescriptor>:
{
 800b748:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length); 
 800b74a:	4c04      	ldr	r4, [pc, #16]	; (800b75c <USBD_VCP_ConfigStrDescriptor+0x14>)
 800b74c:	4804      	ldr	r0, [pc, #16]	; (800b760 <USBD_VCP_ConfigStrDescriptor+0x18>)
{
 800b74e:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length); 
 800b750:	4621      	mov	r1, r4
 800b752:	f7ff fd16 	bl	800b182 <USBD_GetString>
}
 800b756:	4620      	mov	r0, r4
 800b758:	bd10      	pop	{r4, pc}
 800b75a:	bf00      	nop
 800b75c:	20001438 	.word	0x20001438
 800b760:	0801c040 	.word	0x0801c040

0800b764 <USBD_VCP_InterfaceStrDescriptor>:
{
 800b764:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 800b766:	4c04      	ldr	r4, [pc, #16]	; (800b778 <USBD_VCP_InterfaceStrDescriptor+0x14>)
 800b768:	4804      	ldr	r0, [pc, #16]	; (800b77c <USBD_VCP_InterfaceStrDescriptor+0x18>)
{
 800b76a:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 800b76c:	4621      	mov	r1, r4
 800b76e:	f7ff fd08 	bl	800b182 <USBD_GetString>
}
 800b772:	4620      	mov	r0, r4
 800b774:	bd10      	pop	{r4, pc}
 800b776:	bf00      	nop
 800b778:	20001438 	.word	0x20001438
 800b77c:	0801c04b 	.word	0x0801c04b

0800b780 <CDC_Itf_DeInit>:
  */
static int8_t CDC_Itf_DeInit(void)
{

  return (USBD_OK);
}
 800b780:	2000      	movs	r0, #0
 800b782:	4770      	bx	lr

0800b784 <CDC_Itf_Control>:
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the opeartion: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Itf_Control (uint8_t cmd, uint8_t* pbuf, uint16_t length)
{ 
  switch (cmd)
 800b784:	2820      	cmp	r0, #32
 800b786:	d003      	beq.n	800b790 <CDC_Itf_Control+0xc>
 800b788:	2821      	cmp	r0, #33	; 0x21
 800b78a:	d00b      	beq.n	800b7a4 <CDC_Itf_Control+0x20>
  default:
    break;
  }
  
  return (USBD_OK);
}
 800b78c:	2000      	movs	r0, #0
 800b78e:	4770      	bx	lr
    LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 800b790:	4b0d      	ldr	r3, [pc, #52]	; (800b7c8 <CDC_Itf_Control+0x44>)
 800b792:	680a      	ldr	r2, [r1, #0]
 800b794:	601a      	str	r2, [r3, #0]
    LineCoding.format     = pbuf[4];
 800b796:	790a      	ldrb	r2, [r1, #4]
 800b798:	711a      	strb	r2, [r3, #4]
    LineCoding.paritytype = pbuf[5];
 800b79a:	794a      	ldrb	r2, [r1, #5]
 800b79c:	715a      	strb	r2, [r3, #5]
    LineCoding.datatype   = pbuf[6];
 800b79e:	798a      	ldrb	r2, [r1, #6]
 800b7a0:	719a      	strb	r2, [r3, #6]
    break;
 800b7a2:	e7f3      	b.n	800b78c <CDC_Itf_Control+0x8>
    pbuf[0] = (uint8_t)(LineCoding.bitrate);
 800b7a4:	4b08      	ldr	r3, [pc, #32]	; (800b7c8 <CDC_Itf_Control+0x44>)
 800b7a6:	681a      	ldr	r2, [r3, #0]
 800b7a8:	700a      	strb	r2, [r1, #0]
    pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 800b7aa:	681a      	ldr	r2, [r3, #0]
 800b7ac:	0a12      	lsrs	r2, r2, #8
 800b7ae:	704a      	strb	r2, [r1, #1]
    pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 800b7b0:	885a      	ldrh	r2, [r3, #2]
 800b7b2:	708a      	strb	r2, [r1, #2]
    pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 800b7b4:	78da      	ldrb	r2, [r3, #3]
 800b7b6:	70ca      	strb	r2, [r1, #3]
    pbuf[4] = LineCoding.format;
 800b7b8:	791a      	ldrb	r2, [r3, #4]
 800b7ba:	710a      	strb	r2, [r1, #4]
    pbuf[5] = LineCoding.paritytype;
 800b7bc:	795a      	ldrb	r2, [r3, #5]
 800b7be:	714a      	strb	r2, [r1, #5]
    pbuf[6] = LineCoding.datatype;     
 800b7c0:	799b      	ldrb	r3, [r3, #6]
 800b7c2:	718b      	strb	r3, [r1, #6]
    break;
 800b7c4:	e7e2      	b.n	800b78c <CDC_Itf_Control+0x8>
 800b7c6:	bf00      	nop
 800b7c8:	20000b10 	.word	0x20000b10

0800b7cc <CDC_Itf_Receive>:
  * @param  Buf: Buffer of data to be transmitted
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the opeartion: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Itf_Receive(uint8_t* Buf, uint32_t *Len)
{
 800b7cc:	b508      	push	{r3, lr}
  /* Write data into Terminal Rx buffer */
  TerminalInputBufferWrite(INDEX_USB, (char *)Buf, *Len);
 800b7ce:	680a      	ldr	r2, [r1, #0]
 800b7d0:	4601      	mov	r1, r0
 800b7d2:	2000      	movs	r0, #0
 800b7d4:	f7fc fd4e 	bl	8008274 <TerminalInputBufferWrite>
  USBD_CDC_ReceivePacket(&hUSBDDevice);  /* Reset for next packet */
 800b7d8:	4802      	ldr	r0, [pc, #8]	; (800b7e4 <CDC_Itf_Receive+0x18>)
 800b7da:	f7ff fe34 	bl	800b446 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
}
 800b7de:	2000      	movs	r0, #0
 800b7e0:	bd08      	pop	{r3, pc}
 800b7e2:	bf00      	nop
 800b7e4:	20000e50 	.word	0x20000e50

0800b7e8 <CDC_Itf_Init>:
{
 800b7e8:	b508      	push	{r3, lr}
  USBD_CDC_SetRxBuffer(&hUSBDDevice, UserRxBuffer);
 800b7ea:	4903      	ldr	r1, [pc, #12]	; (800b7f8 <CDC_Itf_Init+0x10>)
 800b7ec:	4803      	ldr	r0, [pc, #12]	; (800b7fc <CDC_Itf_Init+0x14>)
 800b7ee:	f7ff fe0d 	bl	800b40c <USBD_CDC_SetRxBuffer>
}
 800b7f2:	2000      	movs	r0, #0
 800b7f4:	bd08      	pop	{r3, pc}
 800b7f6:	bf00      	nop
 800b7f8:	20001538 	.word	0x20001538
 800b7fc:	20000e50 	.word	0x20000e50

0800b800 <SPIx_Init>:
  * @brief SPIx Bus initialization
  * @param None
  * @retval None
  */
static void SPIx_Init(void)
{
 800b800:	b510      	push	{r4, lr}
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 800b802:	4c1e      	ldr	r4, [pc, #120]	; (800b87c <SPIx_Init+0x7c>)
{
 800b804:	b086      	sub	sp, #24
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 800b806:	4620      	mov	r0, r4
 800b808:	f7ff fa2b 	bl	800ac62 <HAL_SPI_GetState>
 800b80c:	2800      	cmp	r0, #0
 800b80e:	d133      	bne.n	800b878 <SPIx_Init+0x78>
  {
    /* SPI Config */
    SpiHandle.Instance = DISCOVERY_SPIx;
 800b810:	4b1b      	ldr	r3, [pc, #108]	; (800b880 <SPIx_Init+0x80>)
 800b812:	6023      	str	r3, [r4, #0]
      to verify these constraints:
      ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
      l3gd20 SPI interface max baudrate is 10MHz for write/read
      PCLK2 frequency is set to 90 MHz 
  */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800b814:	2318      	movs	r3, #24
 800b816:	61e3      	str	r3, [r4, #28]
    SpiHandle.Init.Direction = SPI_DIRECTION_2LINES; 
    SpiHandle.Init.CLKPhase = SPI_PHASE_1EDGE;
    SpiHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
    SpiHandle.Init.CRCPolynomial = 7;
 800b818:	2307      	movs	r3, #7
 800b81a:	62e3      	str	r3, [r4, #44]	; 0x2c
    SpiHandle.Init.DataSize = SPI_DATASIZE_8BIT;
 800b81c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800b820:	60e3      	str	r3, [r4, #12]
    SpiHandle.Init.FirstBit = SPI_FIRSTBIT_MSB;
    SpiHandle.Init.NSS = SPI_NSS_SOFT;
 800b822:	f44f 7300 	mov.w	r3, #512	; 0x200
    SpiHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
 800b826:	e9c4 0004 	strd	r0, r0, [r4, #16]
    SpiHandle.Init.NSS = SPI_NSS_SOFT;
 800b82a:	61a3      	str	r3, [r4, #24]
    SpiHandle.Init.TIMode = SPI_TIMODE_DISABLED;
    SpiHandle.Init.Mode = SPI_MODE_MASTER;
 800b82c:	f44f 7382 	mov.w	r3, #260	; 0x104
 800b830:	6063      	str	r3, [r4, #4]
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI1 clock  */
  DISCOVERY_SPIx_CLK_ENABLE();
 800b832:	4b14      	ldr	r3, [pc, #80]	; (800b884 <SPIx_Init+0x84>)
    SpiHandle.Init.Direction = SPI_DIRECTION_2LINES; 
 800b834:	60a0      	str	r0, [r4, #8]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 800b836:	62a0      	str	r0, [r4, #40]	; 0x28
    SpiHandle.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800b838:	6220      	str	r0, [r4, #32]
    SpiHandle.Init.TIMode = SPI_TIMODE_DISABLED;
 800b83a:	6260      	str	r0, [r4, #36]	; 0x24
  DISCOVERY_SPIx_CLK_ENABLE();
 800b83c:	699a      	ldr	r2, [r3, #24]
 800b83e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b842:	619a      	str	r2, [r3, #24]

  /* enable SPI1 gpio clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 800b844:	695a      	ldr	r2, [r3, #20]
 800b846:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800b84a:	615a      	str	r2, [r3, #20]

  /* configure SPI1 SCK, MOSI and MISO */
  GPIO_InitStructure.Pin = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 800b84c:	f04f 0ce0 	mov.w	ip, #224	; 0xe0
 800b850:	2302      	movs	r3, #2
 800b852:	e9cd c301 	strd	ip, r3, [sp, #4]
  GPIO_InitStructure.Pull  = GPIO_NOPULL; /* or GPIO_PULLDOWN */
 800b856:	9003      	str	r0, [sp, #12]
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 800b858:	f04f 0e03 	mov.w	lr, #3
 800b85c:	2305      	movs	r3, #5
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 800b85e:	a901      	add	r1, sp, #4
 800b860:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 800b864:	e9cd e304 	strd	lr, r3, [sp, #16]
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 800b868:	f7fd fd4a 	bl	8009300 <HAL_GPIO_Init>
    HAL_SPI_Init(&SpiHandle);
 800b86c:	4620      	mov	r0, r4
}
 800b86e:	b006      	add	sp, #24
 800b870:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_SPI_Init(&SpiHandle);
 800b874:	f7ff b855 	b.w	800a922 <HAL_SPI_Init>
}
 800b878:	b006      	add	sp, #24
 800b87a:	bd10      	pop	{r4, pc}
 800b87c:	20001d70 	.word	0x20001d70
 800b880:	40013000 	.word	0x40013000
 800b884:	40021000 	.word	0x40021000

0800b888 <SPIx_WriteRead>:
{
 800b888:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t receivedbyte = 0;
 800b88a:	2300      	movs	r3, #0
 800b88c:	f88d 3017 	strb.w	r3, [sp, #23]
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 800b890:	4b0b      	ldr	r3, [pc, #44]	; (800b8c0 <SPIx_WriteRead+0x38>)
{
 800b892:	f88d 000f 	strb.w	r0, [sp, #15]
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	9300      	str	r3, [sp, #0]
 800b89a:	480a      	ldr	r0, [pc, #40]	; (800b8c4 <SPIx_WriteRead+0x3c>)
 800b89c:	2301      	movs	r3, #1
 800b89e:	f10d 0217 	add.w	r2, sp, #23
 800b8a2:	f10d 010f 	add.w	r1, sp, #15
 800b8a6:	f7ff f8a4 	bl	800a9f2 <HAL_SPI_TransmitReceive>
 800b8aa:	b120      	cbz	r0, 800b8b6 <SPIx_WriteRead+0x2e>
  HAL_SPI_DeInit(&SpiHandle);
 800b8ac:	4805      	ldr	r0, [pc, #20]	; (800b8c4 <SPIx_WriteRead+0x3c>)
 800b8ae:	f7ff f88b 	bl	800a9c8 <HAL_SPI_DeInit>
  SPIx_Init();
 800b8b2:	f7ff ffa5 	bl	800b800 <SPIx_Init>
}
 800b8b6:	f89d 0017 	ldrb.w	r0, [sp, #23]
 800b8ba:	b007      	add	sp, #28
 800b8bc:	f85d fb04 	ldr.w	pc, [sp], #4
 800b8c0:	20000b50 	.word	0x20000b50
 800b8c4:	20001d70 	.word	0x20001d70

0800b8c8 <I2Cx_Init>:
{
 800b8c8:	b530      	push	{r4, r5, lr}
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 800b8ca:	4c18      	ldr	r4, [pc, #96]	; (800b92c <I2Cx_Init+0x64>)
{
 800b8cc:	b087      	sub	sp, #28
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 800b8ce:	4620      	mov	r0, r4
 800b8d0:	f7fe ff72 	bl	800a7b8 <HAL_I2C_GetState>
 800b8d4:	bb38      	cbnz	r0, 800b926 <I2Cx_Init+0x5e>
    I2cHandle.Instance = DISCOVERY_I2Cx;
 800b8d6:	4b16      	ldr	r3, [pc, #88]	; (800b930 <I2Cx_Init+0x68>)
 800b8d8:	6023      	str	r3, [r4, #0]
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800b8da:	2132      	movs	r1, #50	; 0x32
 800b8dc:	2301      	movs	r3, #1
 800b8de:	e9c4 1302 	strd	r1, r3, [r4, #8]
    I2cHandle.Init.OwnAddress2 = 0;
 800b8e2:	e9c4 0004 	strd	r0, r0, [r4, #16]
    I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;	
 800b8e6:	e9c4 0007 	strd	r0, r0, [r4, #28]
  DISCOVERY_I2Cx_GPIO_CLK_ENABLE();
 800b8ea:	4d12      	ldr	r5, [pc, #72]	; (800b934 <I2Cx_Init+0x6c>)
 800b8ec:	696b      	ldr	r3, [r5, #20]
 800b8ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b8f2:	616b      	str	r3, [r5, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 800b8f4:	20c0      	movs	r0, #192	; 0xc0
 800b8f6:	2302      	movs	r3, #2
 800b8f8:	e9cd 0301 	strd	r0, r3, [sp, #4]
  GPIO_InitStructure.Pull = GPIO_PULLDOWN;
 800b8fc:	9303      	str	r3, [sp, #12]
  GPIO_InitStructure.Alternate = DISCOVERY_I2Cx_AF;
 800b8fe:	2304      	movs	r3, #4
 800b900:	f04f 0c03 	mov.w	ip, #3
  HAL_GPIO_Init(DISCOVERY_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 800b904:	eb0d 0103 	add.w	r1, sp, r3
 800b908:	480b      	ldr	r0, [pc, #44]	; (800b938 <I2Cx_Init+0x70>)
  GPIO_InitStructure.Alternate = DISCOVERY_I2Cx_AF;
 800b90a:	e9cd c304 	strd	ip, r3, [sp, #16]
  HAL_GPIO_Init(DISCOVERY_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 800b90e:	f7fd fcf7 	bl	8009300 <HAL_GPIO_Init>
  DISCOVERY_I2Cx_CLK_ENABLE();
 800b912:	69eb      	ldr	r3, [r5, #28]
    HAL_I2C_Init(&I2cHandle);
 800b914:	4620      	mov	r0, r4
  DISCOVERY_I2Cx_CLK_ENABLE();
 800b916:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b91a:	61eb      	str	r3, [r5, #28]
}
 800b91c:	b007      	add	sp, #28
 800b91e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    HAL_I2C_Init(&I2cHandle);
 800b922:	f7fe bde0 	b.w	800a4e6 <HAL_I2C_Init>
}
 800b926:	b007      	add	sp, #28
 800b928:	bd30      	pop	{r4, r5, pc}
 800b92a:	bf00      	nop
 800b92c:	20001d38 	.word	0x20001d38
 800b930:	40005400 	.word	0x40005400
 800b934:	40021000 	.word	0x40021000
 800b938:	48000400 	.word	0x48000400

0800b93c <BSP_LED_Init>:
{
 800b93c:	b570      	push	{r4, r5, r6, lr}
  LEDx_GPIO_CLK_ENABLE(Led);
 800b93e:	4604      	mov	r4, r0
{
 800b940:	b086      	sub	sp, #24
  LEDx_GPIO_CLK_ENABLE(Led);
 800b942:	b928      	cbnz	r0, 800b950 <BSP_LED_Init+0x14>
 800b944:	4a15      	ldr	r2, [pc, #84]	; (800b99c <BSP_LED_Init+0x60>)
 800b946:	6953      	ldr	r3, [r2, #20]
 800b948:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b94c:	6153      	str	r3, [r2, #20]
 800b94e:	e00d      	b.n	800b96c <BSP_LED_Init+0x30>
 800b950:	2801      	cmp	r0, #1
 800b952:	d0f7      	beq.n	800b944 <BSP_LED_Init+0x8>
 800b954:	2802      	cmp	r0, #2
 800b956:	d0f5      	beq.n	800b944 <BSP_LED_Init+0x8>
 800b958:	2803      	cmp	r0, #3
 800b95a:	d0f3      	beq.n	800b944 <BSP_LED_Init+0x8>
 800b95c:	2804      	cmp	r0, #4
 800b95e:	d0f1      	beq.n	800b944 <BSP_LED_Init+0x8>
 800b960:	2805      	cmp	r0, #5
 800b962:	d0ef      	beq.n	800b944 <BSP_LED_Init+0x8>
 800b964:	2806      	cmp	r0, #6
 800b966:	d0ed      	beq.n	800b944 <BSP_LED_Init+0x8>
 800b968:	2807      	cmp	r0, #7
 800b96a:	d0eb      	beq.n	800b944 <BSP_LED_Init+0x8>
  GPIO_InitStruct.Pin = LED_PIN[Led];
 800b96c:	4b0c      	ldr	r3, [pc, #48]	; (800b9a0 <BSP_LED_Init+0x64>)
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 800b96e:	4d0d      	ldr	r5, [pc, #52]	; (800b9a4 <BSP_LED_Init+0x68>)
  GPIO_InitStruct.Pin = LED_PIN[Led];
 800b970:	f833 6014 	ldrh.w	r6, [r3, r4, lsl #1]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 800b974:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
  GPIO_InitStruct.Pin = LED_PIN[Led];
 800b978:	9601      	str	r6, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b97a:	2301      	movs	r3, #1
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b97c:	e9cd 3302 	strd	r3, r3, [sp, #8]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 800b980:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800b982:	2303      	movs	r3, #3
 800b984:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 800b986:	f7fd fcbb 	bl	8009300 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 800b98a:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 800b98e:	2200      	movs	r2, #0
 800b990:	4631      	mov	r1, r6
 800b992:	f7fd fd7f 	bl	8009494 <HAL_GPIO_WritePin>
}
 800b996:	b006      	add	sp, #24
 800b998:	bd70      	pop	{r4, r5, r6, pc}
 800b99a:	bf00      	nop
 800b99c:	40021000 	.word	0x40021000
 800b9a0:	0801c070 	.word	0x0801c070
 800b9a4:	20000b30 	.word	0x20000b30

0800b9a8 <BSP_LED_On>:
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET); 
 800b9a8:	4b04      	ldr	r3, [pc, #16]	; (800b9bc <BSP_LED_On+0x14>)
 800b9aa:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 800b9ae:	4b04      	ldr	r3, [pc, #16]	; (800b9c0 <BSP_LED_On+0x18>)
 800b9b0:	2201      	movs	r2, #1
 800b9b2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800b9b6:	f7fd bd6d 	b.w	8009494 <HAL_GPIO_WritePin>
 800b9ba:	bf00      	nop
 800b9bc:	0801c070 	.word	0x0801c070
 800b9c0:	20000b30 	.word	0x20000b30

0800b9c4 <BSP_LED_Off>:
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET); 
 800b9c4:	4b04      	ldr	r3, [pc, #16]	; (800b9d8 <BSP_LED_Off+0x14>)
 800b9c6:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 800b9ca:	4b04      	ldr	r3, [pc, #16]	; (800b9dc <BSP_LED_Off+0x18>)
 800b9cc:	2200      	movs	r2, #0
 800b9ce:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800b9d2:	f7fd bd5f 	b.w	8009494 <HAL_GPIO_WritePin>
 800b9d6:	bf00      	nop
 800b9d8:	0801c070 	.word	0x0801c070
 800b9dc:	20000b30 	.word	0x20000b30

0800b9e0 <BSP_LED_Toggle>:
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 800b9e0:	4b03      	ldr	r3, [pc, #12]	; (800b9f0 <BSP_LED_Toggle+0x10>)
 800b9e2:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 800b9e6:	4b03      	ldr	r3, [pc, #12]	; (800b9f4 <BSP_LED_Toggle+0x14>)
 800b9e8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800b9ec:	f7fd bd57 	b.w	800949e <HAL_GPIO_TogglePin>
 800b9f0:	0801c070 	.word	0x0801c070
 800b9f4:	20000b30 	.word	0x20000b30

0800b9f8 <BSP_PB_Init>:
{
 800b9f8:	b510      	push	{r4, lr}
 800b9fa:	4b19      	ldr	r3, [pc, #100]	; (800ba60 <BSP_PB_Init+0x68>)
 800b9fc:	b086      	sub	sp, #24
  BUTTONx_GPIO_CLK_ENABLE(Button);
 800b9fe:	b918      	cbnz	r0, 800ba08 <BSP_PB_Init+0x10>
 800ba00:	695a      	ldr	r2, [r3, #20]
 800ba02:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800ba06:	615a      	str	r2, [r3, #20]
  __SYSCFG_CLK_ENABLE();
 800ba08:	699a      	ldr	r2, [r3, #24]
 800ba0a:	f042 0201 	orr.w	r2, r2, #1
 800ba0e:	619a      	str	r2, [r3, #24]
  if (ButtonMode == BUTTON_MODE_GPIO)
 800ba10:	b971      	cbnz	r1, 800ba30 <BSP_PB_Init+0x38>
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 800ba12:	2301      	movs	r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ba14:	e9cd 3101 	strd	r3, r1, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800ba18:	2202      	movs	r2, #2
 800ba1a:	2303      	movs	r3, #3
 800ba1c:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800ba20:	4b10      	ldr	r3, [pc, #64]	; (800ba64 <BSP_PB_Init+0x6c>)
 800ba22:	a901      	add	r1, sp, #4
 800ba24:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800ba28:	f7fd fc6a 	bl	8009300 <HAL_GPIO_Init>
}
 800ba2c:	b006      	add	sp, #24
 800ba2e:	bd10      	pop	{r4, pc}
  if (ButtonMode == BUTTON_MODE_EXTI)
 800ba30:	2901      	cmp	r1, #1
 800ba32:	d1fb      	bne.n	800ba2c <BSP_PB_Init+0x34>
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800ba34:	2400      	movs	r4, #0
 800ba36:	2303      	movs	r3, #3
 800ba38:	e9cd 4303 	strd	r4, r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING; 
 800ba3c:	4b0a      	ldr	r3, [pc, #40]	; (800ba68 <BSP_PB_Init+0x70>)
 800ba3e:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800ba40:	4b08      	ldr	r3, [pc, #32]	; (800ba64 <BSP_PB_Init+0x6c>)
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 800ba42:	9101      	str	r1, [sp, #4]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800ba44:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800ba48:	a901      	add	r1, sp, #4
 800ba4a:	f7fd fc59 	bl	8009300 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 800ba4e:	4622      	mov	r2, r4
 800ba50:	210f      	movs	r1, #15
 800ba52:	2006      	movs	r0, #6
 800ba54:	f7fd fc00 	bl	8009258 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 800ba58:	2006      	movs	r0, #6
 800ba5a:	f7fd fc31 	bl	80092c0 <HAL_NVIC_EnableIRQ>
}
 800ba5e:	e7e5      	b.n	800ba2c <BSP_PB_Init+0x34>
 800ba60:	40021000 	.word	0x40021000
 800ba64:	20000b28 	.word	0x20000b28
 800ba68:	10110000 	.word	0x10110000

0800ba6c <BSP_PB_GetState>:
{
 800ba6c:	b508      	push	{r3, lr}
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 800ba6e:	4b03      	ldr	r3, [pc, #12]	; (800ba7c <BSP_PB_GetState+0x10>)
 800ba70:	2101      	movs	r1, #1
 800ba72:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800ba76:	f7fd fd07 	bl	8009488 <HAL_GPIO_ReadPin>
}
 800ba7a:	bd08      	pop	{r3, pc}
 800ba7c:	20000b28 	.word	0x20000b28

0800ba80 <GYRO_IO_Init>:
  * @brief  Configures the GYROSCOPE SPI interface.
  * @param  None
  * @retval None
  */
void GYRO_IO_Init(void)
{
 800ba80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------------*/
  /* Enable CS GPIO clock and  Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
 800ba84:	4c14      	ldr	r4, [pc, #80]	; (800bad8 <GYRO_IO_Init+0x58>)
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 800ba86:	4815      	ldr	r0, [pc, #84]	; (800badc <GYRO_IO_Init+0x5c>)
  GYRO_CS_GPIO_CLK_ENABLE();  
 800ba88:	6963      	ldr	r3, [r4, #20]
{
 800ba8a:	b086      	sub	sp, #24
  GYRO_CS_GPIO_CLK_ENABLE();  
 800ba8c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ba90:	6163      	str	r3, [r4, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 800ba92:	2500      	movs	r5, #0
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 800ba94:	2708      	movs	r7, #8
 800ba96:	f04f 0801 	mov.w	r8, #1
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 800ba9a:	2603      	movs	r6, #3
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 800ba9c:	a901      	add	r1, sp, #4
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 800ba9e:	e9cd 7801 	strd	r7, r8, [sp, #4]
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 800baa2:	e9cd 5603 	strd	r5, r6, [sp, #12]
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 800baa6:	f7fd fc2b 	bl	8009300 <HAL_GPIO_Init>

  /* Deselect : Chip Select high */
  GYRO_CS_HIGH();
 800baaa:	4642      	mov	r2, r8
 800baac:	4639      	mov	r1, r7
 800baae:	480b      	ldr	r0, [pc, #44]	; (800badc <GYRO_IO_Init+0x5c>)
 800bab0:	f7fd fcf0 	bl	8009494 <HAL_GPIO_WritePin>

  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT_GPIO_CLK_ENABLE();
 800bab4:	6963      	ldr	r3, [r4, #20]
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  GPIO_InitStructure.Pull= GPIO_NOPULL;
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 800bab6:	4809      	ldr	r0, [pc, #36]	; (800badc <GYRO_IO_Init+0x5c>)
  GYRO_INT_GPIO_CLK_ENABLE();
 800bab8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800babc:	6163      	str	r3, [r4, #20]
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 800babe:	a901      	add	r1, sp, #4
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
 800bac0:	2306      	movs	r3, #6
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 800bac2:	e9cd 3501 	strd	r3, r5, [sp, #4]
  GPIO_InitStructure.Pull= GPIO_NOPULL;
 800bac6:	e9cd 5603 	strd	r5, r6, [sp, #12]
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 800baca:	f7fd fc19 	bl	8009300 <HAL_GPIO_Init>
  
  SPIx_Init();
 800bace:	f7ff fe97 	bl	800b800 <SPIx_Init>
}
 800bad2:	b006      	add	sp, #24
 800bad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bad8:	40021000 	.word	0x40021000
 800badc:	48001000 	.word	0x48001000

0800bae0 <GYRO_IO_Write>:
{
  /* Configure the MS bit: 
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 800bae0:	2a01      	cmp	r2, #1
{
 800bae2:	b570      	push	{r4, r5, r6, lr}
 800bae4:	460e      	mov	r6, r1
 800bae6:	4605      	mov	r5, r0
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 800bae8:	bf88      	it	hi
 800baea:	f041 0640 	orrhi.w	r6, r1, #64	; 0x40
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 800baee:	480c      	ldr	r0, [pc, #48]	; (800bb20 <GYRO_IO_Write+0x40>)
{
 800baf0:	4614      	mov	r4, r2
  GYRO_CS_LOW();
 800baf2:	2108      	movs	r1, #8
 800baf4:	2200      	movs	r2, #0
 800baf6:	f7fd fccd 	bl	8009494 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 800bafa:	4630      	mov	r0, r6
 800bafc:	f7ff fec4 	bl	800b888 <SPIx_WriteRead>
  
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 800bb00:	442c      	add	r4, r5
 800bb02:	42a5      	cmp	r5, r4
 800bb04:	d106      	bne.n	800bb14 <GYRO_IO_Write+0x34>
    pBuffer++;
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
}
 800bb06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  GYRO_CS_HIGH();
 800bb0a:	4805      	ldr	r0, [pc, #20]	; (800bb20 <GYRO_IO_Write+0x40>)
 800bb0c:	2201      	movs	r2, #1
 800bb0e:	2108      	movs	r1, #8
 800bb10:	f7fd bcc0 	b.w	8009494 <HAL_GPIO_WritePin>
    SPIx_WriteRead(*pBuffer);
 800bb14:	f815 0b01 	ldrb.w	r0, [r5], #1
 800bb18:	f7ff feb6 	bl	800b888 <SPIx_WriteRead>
    pBuffer++;
 800bb1c:	e7f1      	b.n	800bb02 <GYRO_IO_Write+0x22>
 800bb1e:	bf00      	nop
 800bb20:	48001000 	.word	0x48001000

0800bb24 <GYRO_IO_Read>:
  * @param  NumByteToRead : number of bytes to read from the GYROSCOPE.
  * @retval None
  */
void GYRO_IO_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
  if(NumByteToRead > 0x01)
 800bb24:	2a01      	cmp	r2, #1
{  
 800bb26:	b570      	push	{r4, r5, r6, lr}
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 800bb28:	bf8c      	ite	hi
 800bb2a:	f041 04c0 	orrhi.w	r4, r1, #192	; 0xc0
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 800bb2e:	f041 0480 	orrls.w	r4, r1, #128	; 0x80
{  
 800bb32:	4606      	mov	r6, r0
 800bb34:	4615      	mov	r5, r2
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 800bb36:	480c      	ldr	r0, [pc, #48]	; (800bb68 <GYRO_IO_Read+0x44>)
 800bb38:	2200      	movs	r2, #0
 800bb3a:	2108      	movs	r1, #8
 800bb3c:	f7fd fcaa 	bl	8009494 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 800bb40:	4620      	mov	r0, r4
 800bb42:	f7ff fea1 	bl	800b888 <SPIx_WriteRead>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 800bb46:	4435      	add	r5, r6
 800bb48:	42ae      	cmp	r6, r5
 800bb4a:	d106      	bne.n	800bb5a <GYRO_IO_Read+0x36>
    pBuffer++;
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
}  
 800bb4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  GYRO_CS_HIGH();
 800bb50:	4805      	ldr	r0, [pc, #20]	; (800bb68 <GYRO_IO_Read+0x44>)
 800bb52:	2201      	movs	r2, #1
 800bb54:	2108      	movs	r1, #8
 800bb56:	f7fd bc9d 	b.w	8009494 <HAL_GPIO_WritePin>
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 800bb5a:	2000      	movs	r0, #0
 800bb5c:	f7ff fe94 	bl	800b888 <SPIx_WriteRead>
 800bb60:	f806 0b01 	strb.w	r0, [r6], #1
    pBuffer++;
 800bb64:	e7f0      	b.n	800bb48 <GYRO_IO_Read+0x24>
 800bb66:	bf00      	nop
 800bb68:	48001000 	.word	0x48001000

0800bb6c <COMPASSACCELERO_IO_Init>:
void COMPASSACCELERO_IO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable DRDY clock */
  ACCELERO_DRDY_GPIO_CLK_ENABLE();
 800bb6c:	4b16      	ldr	r3, [pc, #88]	; (800bbc8 <COMPASSACCELERO_IO_Init+0x5c>)
 800bb6e:	695a      	ldr	r2, [r3, #20]
{
 800bb70:	b570      	push	{r4, r5, r6, lr}
  ACCELERO_DRDY_GPIO_CLK_ENABLE();
 800bb72:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800bb76:	615a      	str	r2, [r3, #20]
  
  /* Enable INT1 & INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 800bb78:	695a      	ldr	r2, [r3, #20]
  /* Mems DRDY pin configuration */
  GPIO_InitStructure.Pin = ACCELERO_DRDY_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  HAL_GPIO_Init(ACCELERO_DRDY_GPIO_PORT, &GPIO_InitStructure);
 800bb7a:	4d14      	ldr	r5, [pc, #80]	; (800bbcc <COMPASSACCELERO_IO_Init+0x60>)
  ACCELERO_INT_GPIO_CLK_ENABLE();
 800bb7c:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
{
 800bb80:	b086      	sub	sp, #24
  ACCELERO_INT_GPIO_CLK_ENABLE();
 800bb82:	615a      	str	r2, [r3, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 800bb84:	2304      	movs	r3, #4
 800bb86:	2400      	movs	r4, #0
  HAL_GPIO_Init(ACCELERO_DRDY_GPIO_PORT, &GPIO_InitStructure);
 800bb88:	eb0d 0103 	add.w	r1, sp, r3
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 800bb8c:	2603      	movs	r6, #3
  HAL_GPIO_Init(ACCELERO_DRDY_GPIO_PORT, &GPIO_InitStructure);
 800bb8e:	4628      	mov	r0, r5
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 800bb90:	e9cd 3401 	strd	r3, r4, [sp, #4]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800bb94:	9403      	str	r4, [sp, #12]
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 800bb96:	9604      	str	r6, [sp, #16]
  HAL_GPIO_Init(ACCELERO_DRDY_GPIO_PORT, &GPIO_InitStructure);
 800bb98:	f7fd fbb2 	bl	8009300 <HAL_GPIO_Init>
  
  /* Enable and set Button EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(ACCELERO_DRDY_EXTI_IRQn, 0x00, 0x00);
 800bb9c:	4622      	mov	r2, r4
 800bb9e:	4621      	mov	r1, r4
 800bba0:	2008      	movs	r0, #8
 800bba2:	f7fd fb59 	bl	8009258 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ACCELERO_DRDY_EXTI_IRQn);
 800bba6:	2008      	movs	r0, #8
 800bba8:	f7fd fb8a 	bl	80092c0 <HAL_NVIC_EnableIRQ>
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
 800bbac:	2330      	movs	r3, #48	; 0x30
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 800bbae:	a901      	add	r1, sp, #4
 800bbb0:	4628      	mov	r0, r5
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 800bbb2:	e9cd 3401 	strd	r3, r4, [sp, #4]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800bbb6:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 800bbba:	f7fd fba1 	bl	8009300 <HAL_GPIO_Init>
  
  I2Cx_Init();
 800bbbe:	f7ff fe83 	bl	800b8c8 <I2Cx_Init>
}
 800bbc2:	b006      	add	sp, #24
 800bbc4:	bd70      	pop	{r4, r5, r6, pc}
 800bbc6:	bf00      	nop
 800bbc8:	40021000 	.word	0x40021000
 800bbcc:	48001000 	.word	0x48001000

0800bbd0 <COMPASSACCELERO_IO_ITConfig>:
void COMPASSACCELERO_IO_ITConfig(void)
{
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable INT1 & INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 800bbd0:	4a0e      	ldr	r2, [pc, #56]	; (800bc0c <COMPASSACCELERO_IO_ITConfig+0x3c>)
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 800bbd2:	480f      	ldr	r0, [pc, #60]	; (800bc10 <COMPASSACCELERO_IO_ITConfig+0x40>)
  ACCELERO_INT_GPIO_CLK_ENABLE();
 800bbd4:	6953      	ldr	r3, [r2, #20]
{
 800bbd6:	b510      	push	{r4, lr}
  ACCELERO_INT_GPIO_CLK_ENABLE();
 800bbd8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bbdc:	6153      	str	r3, [r2, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 800bbde:	4b0d      	ldr	r3, [pc, #52]	; (800bc14 <COMPASSACCELERO_IO_ITConfig+0x44>)
{
 800bbe0:	b086      	sub	sp, #24
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 800bbe2:	2230      	movs	r2, #48	; 0x30
 800bbe4:	e9cd 2301 	strd	r2, r3, [sp, #4]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800bbe8:	2400      	movs	r4, #0
 800bbea:	2303      	movs	r3, #3
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 800bbec:	a901      	add	r1, sp, #4
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800bbee:	e9cd 4303 	strd	r4, r3, [sp, #12]
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 800bbf2:	f7fd fb85 	bl	8009300 <HAL_GPIO_Init>
  
  /* Enable and set Button EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(ACCELERO_INT1_EXTI_IRQn, 0x00, 0x00);
 800bbf6:	4622      	mov	r2, r4
 800bbf8:	4621      	mov	r1, r4
 800bbfa:	200a      	movs	r0, #10
 800bbfc:	f7fd fb2c 	bl	8009258 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ACCELERO_INT1_EXTI_IRQn);
 800bc00:	200a      	movs	r0, #10
 800bc02:	f7fd fb5d 	bl	80092c0 <HAL_NVIC_EnableIRQ>
  
}
 800bc06:	b006      	add	sp, #24
 800bc08:	bd10      	pop	{r4, pc}
 800bc0a:	bf00      	nop
 800bc0c:	40021000 	.word	0x40021000
 800bc10:	48001000 	.word	0x48001000
 800bc14:	10110000 	.word	0x10110000

0800bc18 <COMPASSACCELERO_IO_Write>:
  * @param  RegisterAddr specifies the COMPASS / ACCELEROMETER register to be written.
  * @param  Value : Data to be written
  * @retval   None
 */
void COMPASSACCELERO_IO_Write(uint16_t DeviceAddr, uint8_t RegisterAddr, uint8_t Value)
{
 800bc18:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 800bc1a:	4b0c      	ldr	r3, [pc, #48]	; (800bc4c <COMPASSACCELERO_IO_Write+0x34>)
 800bc1c:	f88d 2017 	strb.w	r2, [sp, #23]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	9302      	str	r3, [sp, #8]
 800bc24:	f10d 0217 	add.w	r2, sp, #23
 800bc28:	2301      	movs	r3, #1
 800bc2a:	9200      	str	r2, [sp, #0]
 800bc2c:	9301      	str	r3, [sp, #4]
 800bc2e:	460a      	mov	r2, r1
 800bc30:	4601      	mov	r1, r0
 800bc32:	4807      	ldr	r0, [pc, #28]	; (800bc50 <COMPASSACCELERO_IO_Write+0x38>)
 800bc34:	f7fe fcb7 	bl	800a5a6 <HAL_I2C_Mem_Write>
  if(status != HAL_OK)
 800bc38:	b120      	cbz	r0, 800bc44 <COMPASSACCELERO_IO_Write+0x2c>
  HAL_I2C_DeInit(&I2cHandle);
 800bc3a:	4805      	ldr	r0, [pc, #20]	; (800bc50 <COMPASSACCELERO_IO_Write+0x38>)
 800bc3c:	f7fe fc9c 	bl	800a578 <HAL_I2C_DeInit>
  I2Cx_Init();
 800bc40:	f7ff fe42 	bl	800b8c8 <I2Cx_Init>
  /* call I2Cx Read data bus function */
  I2Cx_WriteData(DeviceAddr, RegisterAddr, Value);
}
 800bc44:	b007      	add	sp, #28
 800bc46:	f85d fb04 	ldr.w	pc, [sp], #4
 800bc4a:	bf00      	nop
 800bc4c:	20000b2c 	.word	0x20000b2c
 800bc50:	20001d38 	.word	0x20001d38

0800bc54 <COMPASSACCELERO_IO_Read>:
  * @param  DeviceAddr : specifies the slave address to be programmed(ACC_I2C_ADDRESS or MAG_I2C_ADDRESS).
  * @param  RegisterAddr : specifies the COMPASS / ACCELEROMETER internal address register to read from
  * @retval ACCELEROMETER register value
  */ 
uint8_t COMPASSACCELERO_IO_Read(uint16_t DeviceAddr, uint8_t RegisterAddr)
{
 800bc54:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t value = 0;
 800bc56:	2300      	movs	r3, #0
 800bc58:	f88d 3017 	strb.w	r3, [sp, #23]
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 800bc5c:	4b0b      	ldr	r3, [pc, #44]	; (800bc8c <COMPASSACCELERO_IO_Read+0x38>)
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	9302      	str	r3, [sp, #8]
{
 800bc62:	460a      	mov	r2, r1
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 800bc64:	2301      	movs	r3, #1
 800bc66:	f10d 0117 	add.w	r1, sp, #23
 800bc6a:	9100      	str	r1, [sp, #0]
 800bc6c:	9301      	str	r3, [sp, #4]
 800bc6e:	4601      	mov	r1, r0
 800bc70:	4807      	ldr	r0, [pc, #28]	; (800bc90 <COMPASSACCELERO_IO_Read+0x3c>)
 800bc72:	f7fe fd1a 	bl	800a6aa <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 800bc76:	b120      	cbz	r0, 800bc82 <COMPASSACCELERO_IO_Read+0x2e>
  HAL_I2C_DeInit(&I2cHandle);
 800bc78:	4805      	ldr	r0, [pc, #20]	; (800bc90 <COMPASSACCELERO_IO_Read+0x3c>)
 800bc7a:	f7fe fc7d 	bl	800a578 <HAL_I2C_DeInit>
  I2Cx_Init();
 800bc7e:	f7ff fe23 	bl	800b8c8 <I2Cx_Init>
  /* call I2Cx Read data bus function */   
  return I2Cx_ReadData(DeviceAddr, RegisterAddr);
}
 800bc82:	f89d 0017 	ldrb.w	r0, [sp, #23]
 800bc86:	b007      	add	sp, #28
 800bc88:	f85d fb04 	ldr.w	pc, [sp], #4
 800bc8c:	20000b2c 	.word	0x20000b2c
 800bc90:	20001d38 	.word	0x20001d38

0800bc94 <BSP_ACCELERO_Init>:
/**
  * @brief  Set accelerometer Initialization.
  * @retval ACCELERO_OK if no problem during initialization
  */
uint8_t BSP_ACCELERO_Init(void)
{
 800bc94:	b538      	push	{r3, r4, r5, lr}
  uint8_t ret = ACCELERO_ERROR;
  uint16_t ctrl = 0x0000;
  ACCELERO_InitTypeDef         Accelero_InitStructure;
  ACCELERO_FilterConfigTypeDef Accelero_FilterStructure = {0,0,0,0};

  if(Lsm303dlhcDrv.ReadID() == I_AM_LMS303DLHC)
 800bc96:	4c0c      	ldr	r4, [pc, #48]	; (800bcc8 <BSP_ACCELERO_Init+0x34>)
 800bc98:	68a3      	ldr	r3, [r4, #8]
 800bc9a:	4798      	blx	r3
 800bc9c:	2833      	cmp	r0, #51	; 0x33
 800bc9e:	d10b      	bne.n	800bcb8 <BSP_ACCELERO_Init+0x24>
    ret = ACCELERO_OK;
  }
  else if(Lsm303agrDrv.ReadID() == I_AM_LSM303AGR)
  {
    /* Initialize the accelerometer driver structure */
    AccelerometerDrv = &Lsm303agrDrv;
 800bca0:	4d0a      	ldr	r5, [pc, #40]	; (800bccc <BSP_ACCELERO_Init+0x38>)

    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
              Accelero_InitStructure.AccFull_Scale    | Accelero_InitStructure.High_Resolution) << 8);

    /* Configure the accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 800bca2:	6823      	ldr	r3, [r4, #0]
    AccelerometerDrv = &Lsm303agrDrv;
 800bca4:	602c      	str	r4, [r5, #0]
    AccelerometerDrv->Init(ctrl);
 800bca6:	f640 0047 	movw	r0, #2119	; 0x847
 800bcaa:	4798      	blx	r3
                      Accelero_FilterStructure.HighPassFilter_CutOff_Frequency |\
                      Accelero_FilterStructure.HighPassFilter_AOI1             |\
                      Accelero_FilterStructure.HighPassFilter_AOI2);

    /* Configure the accelerometer LPF main parameters */
    AccelerometerDrv->FilterConfig(ctrl);
 800bcac:	682b      	ldr	r3, [r5, #0]
 800bcae:	2090      	movs	r0, #144	; 0x90
 800bcb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcb2:	4798      	blx	r3

    ret = ACCELERO_OK;
 800bcb4:	2000      	movs	r0, #0
  }

  return ret;
}
 800bcb6:	bd38      	pop	{r3, r4, r5, pc}
  else if(Lsm303agrDrv.ReadID() == I_AM_LSM303AGR)
 800bcb8:	4c05      	ldr	r4, [pc, #20]	; (800bcd0 <BSP_ACCELERO_Init+0x3c>)
 800bcba:	68a3      	ldr	r3, [r4, #8]
 800bcbc:	4798      	blx	r3
 800bcbe:	2833      	cmp	r0, #51	; 0x33
 800bcc0:	d0ee      	beq.n	800bca0 <BSP_ACCELERO_Init+0xc>
  uint8_t ret = ACCELERO_ERROR;
 800bcc2:	2001      	movs	r0, #1
 800bcc4:	e7f7      	b.n	800bcb6 <BSP_ACCELERO_Init+0x22>
 800bcc6:	bf00      	nop
 800bcc8:	20000b54 	.word	0x20000b54
 800bccc:	20001dd0 	.word	0x20001dd0
 800bcd0:	20000bf0 	.word	0x20000bf0

0800bcd4 <BSP_ACCELERO_GetXYZ>:
  *                 pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
* @retval None
*/
void BSP_ACCELERO_GetXYZ(int16_t *pDataXYZ)
{
  if(AccelerometerDrv->GetXYZ!= NULL)
 800bcd4:	4b02      	ldr	r3, [pc, #8]	; (800bce0 <BSP_ACCELERO_GetXYZ+0xc>)
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcda:	b103      	cbz	r3, 800bcde <BSP_ACCELERO_GetXYZ+0xa>
  {
    AccelerometerDrv->GetXYZ(pDataXYZ);
 800bcdc:	4718      	bx	r3
  }
}
 800bcde:	4770      	bx	lr
 800bce0:	20001dd0 	.word	0x20001dd0

0800bce4 <BSP_GYRO_Init>:
/**
  * @brief  Set gyroscope Initialization.
  * @retval GYRO_OK if no problem during initialization
  */
uint8_t BSP_GYRO_Init(void)
{
 800bce4:	b538      	push	{r3, r4, r5, lr}
  uint8_t ret = GYRO_ERROR;
  uint16_t ctrl = 0x0000;
  GYRO_InitTypeDef         Gyro_InitStructure;
  GYRO_FilterConfigTypeDef Gyro_FilterStructure = {0,0};

  if((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 800bce6:	4c16      	ldr	r4, [pc, #88]	; (800bd40 <BSP_GYRO_Init+0x5c>)
 800bce8:	68a3      	ldr	r3, [r4, #8]
 800bcea:	4798      	blx	r3
 800bcec:	28d4      	cmp	r0, #212	; 0xd4
 800bcee:	d10f      	bne.n	800bd10 <BSP_GYRO_Init+0x2c>
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &L3gd20Drv;
 800bcf0:	4d14      	ldr	r5, [pc, #80]	; (800bd44 <BSP_GYRO_Init+0x60>)

    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
                         Gyro_InitStructure.Full_Scale) << 8);

    /* Initialize the gyroscope */
    GyroscopeDrv->Init(ctrl);
 800bcf2:	6823      	ldr	r3, [r4, #0]
    GyroscopeDrv = &L3gd20Drv;
 800bcf4:	602c      	str	r4, [r5, #0]
    GyroscopeDrv->Init(ctrl);
 800bcf6:	f241 003f 	movw	r0, #4159	; 0x103f
 800bcfa:	4798      	blx	r3

    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
                       Gyro_FilterStructure.HighPassFilter_CutOff_Frequency));

    /* Configure the gyroscope main parameters */
    GyroscopeDrv->FilterConfig(ctrl) ;
 800bcfc:	682b      	ldr	r3, [r5, #0]
 800bcfe:	2000      	movs	r0, #0
 800bd00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd02:	4798      	blx	r3

    GyroscopeDrv->FilterCmd(L3GD20_HIGHPASSFILTER_ENABLE);
 800bd04:	682b      	ldr	r3, [r5, #0]
                       Gyro_FilterStructure.HighPassFilter_CutOff_Frequency));

    /* Configure the gyroscope main parameters */
    GyroscopeDrv->FilterConfig(ctrl);

    GyroscopeDrv->FilterCmd(I3G4250D_HIGHPASSFILTER_ENABLE);
 800bd06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd08:	2010      	movs	r0, #16
 800bd0a:	4798      	blx	r3

    ret = GYRO_OK;
 800bd0c:	2000      	movs	r0, #0
  }

  return ret;
}
 800bd0e:	bd38      	pop	{r3, r4, r5, pc}
  if((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 800bd10:	68a3      	ldr	r3, [r4, #8]
 800bd12:	4798      	blx	r3
 800bd14:	28d5      	cmp	r0, #213	; 0xd5
 800bd16:	d0eb      	beq.n	800bcf0 <BSP_GYRO_Init+0xc>
  else if (I3g4250Drv.ReadID() == I_AM_I3G4250D)
 800bd18:	4d0b      	ldr	r5, [pc, #44]	; (800bd48 <BSP_GYRO_Init+0x64>)
 800bd1a:	68ab      	ldr	r3, [r5, #8]
 800bd1c:	4798      	blx	r3
 800bd1e:	28d3      	cmp	r0, #211	; 0xd3
 800bd20:	d10b      	bne.n	800bd3a <BSP_GYRO_Init+0x56>
    GyroscopeDrv = &I3g4250Drv;
 800bd22:	4c08      	ldr	r4, [pc, #32]	; (800bd44 <BSP_GYRO_Init+0x60>)
    GyroscopeDrv->Init(ctrl);
 800bd24:	682b      	ldr	r3, [r5, #0]
    GyroscopeDrv = &I3g4250Drv;
 800bd26:	6025      	str	r5, [r4, #0]
    GyroscopeDrv->Init(ctrl);
 800bd28:	f241 003f 	movw	r0, #4159	; 0x103f
 800bd2c:	4798      	blx	r3
    GyroscopeDrv->FilterConfig(ctrl);
 800bd2e:	6823      	ldr	r3, [r4, #0]
 800bd30:	2000      	movs	r0, #0
 800bd32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd34:	4798      	blx	r3
    GyroscopeDrv->FilterCmd(I3G4250D_HIGHPASSFILTER_ENABLE);
 800bd36:	6823      	ldr	r3, [r4, #0]
 800bd38:	e7e5      	b.n	800bd06 <BSP_GYRO_Init+0x22>
  uint8_t ret = GYRO_ERROR;
 800bd3a:	2001      	movs	r0, #1
 800bd3c:	e7e7      	b.n	800bd0e <BSP_GYRO_Init+0x2a>
 800bd3e:	bf00      	nop
 800bd40:	20000b88 	.word	0x20000b88
 800bd44:	20001dd4 	.word	0x20001dd4
 800bd48:	20000bbc 	.word	0x20000bbc

0800bd4c <BSP_GYRO_GetXYZ>:
  * @param pfData pointer on floating array
  * @retval None
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
  if(GyroscopeDrv->GetXYZ!= NULL)
 800bd4c:	4b02      	ldr	r3, [pc, #8]	; (800bd58 <BSP_GYRO_GetXYZ+0xc>)
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd52:	b103      	cbz	r3, 800bd56 <BSP_GYRO_GetXYZ+0xa>
  {
	GyroscopeDrv->GetXYZ(pfData);
 800bd54:	4718      	bx	r3
  }
}
 800bd56:	4770      	bx	lr
 800bd58:	20001dd4 	.word	0x20001dd4

0800bd5c <LSM303DLHC_AccDeInit>:
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccDeInit(void)
{  
}
 800bd5c:	4770      	bx	lr

0800bd5e <LSM303DLHC_AccInit>:
{  
 800bd5e:	b510      	push	{r4, lr}
 800bd60:	4604      	mov	r4, r0
  COMPASSACCELERO_IO_Init();
 800bd62:	f7ff ff03 	bl	800bb6c <COMPASSACCELERO_IO_Init>
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG1_A, ctrl);
 800bd66:	b2e2      	uxtb	r2, r4
 800bd68:	2120      	movs	r1, #32
 800bd6a:	2032      	movs	r0, #50	; 0x32
 800bd6c:	f7ff ff54 	bl	800bc18 <COMPASSACCELERO_IO_Write>
}
 800bd70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A, ctrl);
 800bd74:	2200      	movs	r2, #0
 800bd76:	2123      	movs	r1, #35	; 0x23
 800bd78:	2032      	movs	r0, #50	; 0x32
 800bd7a:	f7ff bf4d 	b.w	800bc18 <COMPASSACCELERO_IO_Write>

0800bd7e <LSM303DLHC_AccReadID>:
  * @brief  Read LSM303DLHC ID.
  * @param  None
  * @retval ID 
  */
uint8_t LSM303DLHC_AccReadID(void)
{  
 800bd7e:	b508      	push	{r3, lr}
  uint8_t ctrl = 0x00;
  
  /* Low level init */
  COMPASSACCELERO_IO_Init();
 800bd80:	f7ff fef4 	bl	800bb6c <COMPASSACCELERO_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_WHO_AM_I_ADDR);
  
  return ctrl;
}
 800bd84:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_WHO_AM_I_ADDR);
 800bd88:	210f      	movs	r1, #15
 800bd8a:	2032      	movs	r0, #50	; 0x32
 800bd8c:	f7ff bf62 	b.w	800bc54 <COMPASSACCELERO_IO_Read>

0800bd90 <LSM303DLHC_AccRebootCmd>:
  * @brief  Reboot memory content of LSM303DLHC
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccRebootCmd(void)
{
 800bd90:	b508      	push	{r3, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 800bd92:	2124      	movs	r1, #36	; 0x24
 800bd94:	2032      	movs	r0, #50	; 0x32
 800bd96:	f7ff ff5d 	bl	800bc54 <COMPASSACCELERO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LSM303DLHC_BOOT_REBOOTMEMORY;
 800bd9a:	f060 007f 	orn	r0, r0, #127	; 0x7f
  
  /* Write value to ACC MEMS CTRL_REG5 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A, tmpreg);
 800bd9e:	b2c2      	uxtb	r2, r0
}
 800bda0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A, tmpreg);
 800bda4:	2124      	movs	r1, #36	; 0x24
 800bda6:	2032      	movs	r0, #50	; 0x32
 800bda8:	f7ff bf36 	b.w	800bc18 <COMPASSACCELERO_IO_Write>

0800bdac <LSM303DLHC_AccFilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LSM303DLHC_AccFilterConfig(uint8_t FilterStruct) 
{
 800bdac:	b510      	push	{r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 800bdae:	2121      	movs	r1, #33	; 0x21
{
 800bdb0:	4604      	mov	r4, r0
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 800bdb2:	2032      	movs	r0, #50	; 0x32
 800bdb4:	f7ff ff4e 	bl	800bc54 <COMPASSACCELERO_IO_Read>
  
  tmpreg &= 0x0C;
 800bdb8:	f000 000c 	and.w	r0, r0, #12
  tmpreg |= FilterStruct;
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 800bdbc:	ea40 0204 	orr.w	r2, r0, r4
 800bdc0:	2121      	movs	r1, #33	; 0x21
}
 800bdc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 800bdc6:	2032      	movs	r0, #50	; 0x32
 800bdc8:	f7ff bf26 	b.w	800bc18 <COMPASSACCELERO_IO_Write>

0800bdcc <LSM303DLHC_AccFilterCmd>:
  *         @arg: LSM303DLHC_HIGHPASSFILTER_DISABLE 
  *         @arg: LSM303DLHC_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterCmd(uint8_t HighPassFilterState)
{
 800bdcc:	b510      	push	{r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 800bdce:	2121      	movs	r1, #33	; 0x21
{
 800bdd0:	4604      	mov	r4, r0
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 800bdd2:	2032      	movs	r0, #50	; 0x32
 800bdd4:	f7ff ff3e 	bl	800bc54 <COMPASSACCELERO_IO_Read>
  
  tmpreg &= 0xF7;
 800bdd8:	f000 00f7 	and.w	r0, r0, #247	; 0xf7
  
  tmpreg |= HighPassFilterState;
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 800bddc:	ea40 0204 	orr.w	r2, r0, r4
 800bde0:	2121      	movs	r1, #33	; 0x21
}
 800bde2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 800bde6:	2032      	movs	r0, #50	; 0x32
 800bde8:	f7ff bf16 	b.w	800bc18 <COMPASSACCELERO_IO_Write>

0800bdec <LSM303DLHC_AccReadXYZ>:
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  * @retval None
  */
void LSM303DLHC_AccReadXYZ(int16_t* pData)
{
 800bdec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  int8_t buffer[6];
  uint8_t i = 0;
  uint8_t sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
  
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A);
 800bdf0:	2123      	movs	r1, #35	; 0x23
{
 800bdf2:	4605      	mov	r5, r0
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A);
 800bdf4:	2032      	movs	r0, #50	; 0x32
 800bdf6:	f7ff ff2d 	bl	800bc54 <COMPASSACCELERO_IO_Read>
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 800bdfa:	2124      	movs	r1, #36	; 0x24
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A);
 800bdfc:	4606      	mov	r6, r0
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 800bdfe:	2032      	movs	r0, #50	; 0x32
 800be00:	f7ff ff28 	bl	800bc54 <COMPASSACCELERO_IO_Read>
  
  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_L_A); 
 800be04:	2128      	movs	r1, #40	; 0x28
 800be06:	2032      	movs	r0, #50	; 0x32
 800be08:	f7ff ff24 	bl	800bc54 <COMPASSACCELERO_IO_Read>
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
 800be0c:	2129      	movs	r1, #41	; 0x29
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_L_A); 
 800be0e:	b247      	sxtb	r7, r0
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
 800be10:	2032      	movs	r0, #50	; 0x32
 800be12:	f7ff ff1f 	bl	800bc54 <COMPASSACCELERO_IO_Read>
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_A);
 800be16:	212a      	movs	r1, #42	; 0x2a
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
 800be18:	fa4f f980 	sxtb.w	r9, r0
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_A);
 800be1c:	2032      	movs	r0, #50	; 0x32
 800be1e:	f7ff ff19 	bl	800bc54 <COMPASSACCELERO_IO_Read>
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_H_A);
 800be22:	212b      	movs	r1, #43	; 0x2b
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_A);
 800be24:	b244      	sxtb	r4, r0
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_H_A);
 800be26:	2032      	movs	r0, #50	; 0x32
 800be28:	f7ff ff14 	bl	800bc54 <COMPASSACCELERO_IO_Read>
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_L_A);
 800be2c:	212c      	movs	r1, #44	; 0x2c
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_H_A);
 800be2e:	fa4f fa80 	sxtb.w	sl, r0
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_L_A);
 800be32:	2032      	movs	r0, #50	; 0x32
 800be34:	f7ff ff0e 	bl	800bc54 <COMPASSACCELERO_IO_Read>
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_H_A);
 800be38:	212d      	movs	r1, #45	; 0x2d
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_L_A);
 800be3a:	fa4f f880 	sxtb.w	r8, r0
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_H_A);
 800be3e:	2032      	movs	r0, #50	; 0x32
 800be40:	f7ff ff08 	bl	800bc54 <COMPASSACCELERO_IO_Read>
  
  /* Check in the control register4 the data alignment*/
  if(!(ctrlx[0] & LSM303DLHC_BLE_MSB)) 
 800be44:	0672      	lsls	r2, r6, #25
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_H_A);
 800be46:	b243      	sxtb	r3, r0
  if(!(ctrlx[0] & LSM303DLHC_BLE_MSB)) 
 800be48:	d51a      	bpl.n	800be80 <LSM303DLHC_AccReadXYZ+0x94>
  }
  else /* Big Endian Mode */
  {
    for(i=0; i<3; i++)
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1]);
 800be4a:	eb09 2707 	add.w	r7, r9, r7, lsl #8
 800be4e:	eb0a 2404 	add.w	r4, sl, r4, lsl #8
 800be52:	b23f      	sxth	r7, r7
 800be54:	b224      	sxth	r4, r4
 800be56:	eb03 2308 	add.w	r3, r3, r8, lsl #8
 800be5a:	f006 0030 	and.w	r0, r6, #48	; 0x30
    }
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL4 */
  switch(ctrlx[0] & LSM303DLHC_FULLSCALE_16G)
 800be5e:	2820      	cmp	r0, #32
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 800be60:	b21a      	sxth	r2, r3
  switch(ctrlx[0] & LSM303DLHC_FULLSCALE_16G)
 800be62:	d016      	beq.n	800be92 <LSM303DLHC_AccReadXYZ+0xa6>
 800be64:	2830      	cmp	r0, #48	; 0x30
 800be66:	d016      	beq.n	800be96 <LSM303DLHC_AccReadXYZ+0xaa>
 800be68:	2810      	cmp	r0, #16
 800be6a:	bf14      	ite	ne
 800be6c:	2301      	movne	r3, #1
 800be6e:	2302      	moveq	r3, #2
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
  {
    pData[i]=(pnRawData[i] * sensitivity);
 800be70:	435f      	muls	r7, r3
 800be72:	435c      	muls	r4, r3
 800be74:	4353      	muls	r3, r2
 800be76:	802f      	strh	r7, [r5, #0]
 800be78:	806c      	strh	r4, [r5, #2]
 800be7a:	80ab      	strh	r3, [r5, #4]
  }
}
 800be7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 800be80:	eb07 2709 	add.w	r7, r7, r9, lsl #8
 800be84:	eb04 240a 	add.w	r4, r4, sl, lsl #8
 800be88:	b23f      	sxth	r7, r7
 800be8a:	b224      	sxth	r4, r4
 800be8c:	eb08 2303 	add.w	r3, r8, r3, lsl #8
 800be90:	e7e3      	b.n	800be5a <LSM303DLHC_AccReadXYZ+0x6e>
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_8G;
 800be92:	2304      	movs	r3, #4
 800be94:	e7ec      	b.n	800be70 <LSM303DLHC_AccReadXYZ+0x84>
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_16G;
 800be96:	230c      	movs	r3, #12
 800be98:	e7ea      	b.n	800be70 <LSM303DLHC_AccReadXYZ+0x84>

0800be9a <LSM303DLHC_AccFilterClickCmd>:
  *         @arg: LSM303DLHC_HPF_CLICK_DISABLE 
  *         @arg: LSM303DLHC_HPF_CLICK_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterClickCmd(uint8_t HighPassFilterClickState)
{
 800be9a:	b510      	push	{r4, lr}
  uint8_t tmpreg = 0x00;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 800be9c:	2121      	movs	r1, #33	; 0x21
{
 800be9e:	4604      	mov	r4, r0
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 800bea0:	2032      	movs	r0, #50	; 0x32
 800bea2:	f7ff fed7 	bl	800bc54 <COMPASSACCELERO_IO_Read>
  
  tmpreg &= ~(LSM303DLHC_HPF_CLICK_ENABLE);
 800bea6:	f000 00fb 	and.w	r0, r0, #251	; 0xfb
  
  tmpreg |= HighPassFilterClickState;
  
  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 800beaa:	ea40 0204 	orr.w	r2, r0, r4
 800beae:	2121      	movs	r1, #33	; 0x21
}
 800beb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 800beb4:	2032      	movs	r0, #50	; 0x32
 800beb6:	f7ff beaf 	b.w	800bc18 <COMPASSACCELERO_IO_Write>

0800beba <LSM303DLHC_AccIT1Enable>:
  *         @arg   LSM303DLHC_IT1_WTM
  *         @arg   LSM303DLHC_IT1_OVERRUN
  * @retval None
  */
void LSM303DLHC_AccIT1Enable(uint8_t LSM303DLHC_IT)
{
 800beba:	b510      	push	{r4, lr}
  uint8_t tmpval = 0x00;
  
  /* Read CTRL_REG3 register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A);
 800bebc:	2122      	movs	r1, #34	; 0x22
{
 800bebe:	4604      	mov	r4, r0
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A);
 800bec0:	2032      	movs	r0, #50	; 0x32
 800bec2:	f7ff fec7 	bl	800bc54 <COMPASSACCELERO_IO_Read>
  
  /* Enable IT1 */
  tmpval |= LSM303DLHC_IT;
 800bec6:	4320      	orrs	r0, r4
  
  /* Write value to MEMS CTRL_REG3 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A, tmpval);
 800bec8:	b2c2      	uxtb	r2, r0
}
 800beca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A, tmpval);
 800bece:	2122      	movs	r1, #34	; 0x22
 800bed0:	2032      	movs	r0, #50	; 0x32
 800bed2:	f7ff bea1 	b.w	800bc18 <COMPASSACCELERO_IO_Write>

0800bed6 <LSM303DLHC_AccClickITEnable>:
  * @brief  Click interrupt enable
  * @param  ITClick: the selected interrupt to enable
  * @retval None
  */
void LSM303DLHC_AccClickITEnable(uint8_t ITClick)
{  
 800bed6:	b510      	push	{r4, lr}
  uint8_t tmpval = 0x00;
  
  /* Read CLICK_CFR register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A);
 800bed8:	2138      	movs	r1, #56	; 0x38
{  
 800beda:	4604      	mov	r4, r0
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A);
 800bedc:	2032      	movs	r0, #50	; 0x32
 800bede:	f7ff feb9 	bl	800bc54 <COMPASSACCELERO_IO_Read>
  
  /* Enable the selected interrupt */
  tmpval |= ITClick;
 800bee2:	4320      	orrs	r0, r4
  
  /* Write value to MEMS CLICK CFG register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A, tmpval);
 800bee4:	b2c2      	uxtb	r2, r0
 800bee6:	2138      	movs	r1, #56	; 0x38
 800bee8:	2032      	movs	r0, #50	; 0x32
 800beea:	f7ff fe95 	bl	800bc18 <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Threshold on Z axis */
  tmpval = 0x0A;
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_THS_A, tmpval);
 800beee:	220a      	movs	r2, #10
 800bef0:	213a      	movs	r1, #58	; 0x3a
 800bef2:	2032      	movs	r0, #50	; 0x32
 800bef4:	f7ff fe90 	bl	800bc18 <COMPASSACCELERO_IO_Write>
  
  /* Configure Time Limit */
  tmpval = 0x05;
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LIMIT_A, tmpval);
 800bef8:	2205      	movs	r2, #5
 800befa:	213b      	movs	r1, #59	; 0x3b
 800befc:	2032      	movs	r0, #50	; 0x32
 800befe:	f7ff fe8b 	bl	800bc18 <COMPASSACCELERO_IO_Write>
  
  /* Configure Latency */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LATENCY_A, tmpval);
 800bf02:	2205      	movs	r2, #5
 800bf04:	213c      	movs	r1, #60	; 0x3c
 800bf06:	2032      	movs	r0, #50	; 0x32
 800bf08:	f7ff fe86 	bl	800bc18 <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Window */
  tmpval = 0x32;
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_WINDOW_A, tmpval);
 800bf0c:	2232      	movs	r2, #50	; 0x32
}
 800bf0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_WINDOW_A, tmpval);
 800bf12:	213d      	movs	r1, #61	; 0x3d
 800bf14:	4610      	mov	r0, r2
 800bf16:	f7ff be7f 	b.w	800bc18 <COMPASSACCELERO_IO_Write>

0800bf1a <LSM303DLHC_AccZClickITConfig>:
  * @brief  Click on Z axis interrupt config
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccZClickITConfig(void)
{  
 800bf1a:	b508      	push	{r3, lr}
  /* Configure low level IT config */
  COMPASSACCELERO_IO_ITConfig();
 800bf1c:	f7ff fe58 	bl	800bbd0 <COMPASSACCELERO_IO_ITConfig>
  
  /* Select click IT as INT1 interrupt */
  LSM303DLHC_AccIT1Enable(LSM303DLHC_IT1_CLICK);
 800bf20:	2080      	movs	r0, #128	; 0x80
 800bf22:	f7ff ffca 	bl	800beba <LSM303DLHC_AccIT1Enable>
  
  /* Enable High pass filter for click IT */
  LSM303DLHC_AccFilterClickCmd(LSM303DLHC_HPF_CLICK_ENABLE);
 800bf26:	2004      	movs	r0, #4
 800bf28:	f7ff ffb7 	bl	800be9a <LSM303DLHC_AccFilterClickCmd>
  
  /* Enable simple click IT on Z axis, */
  LSM303DLHC_AccClickITEnable(LSM303DLHC_Z_SINGLE_CLICK);
}
 800bf2c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  LSM303DLHC_AccClickITEnable(LSM303DLHC_Z_SINGLE_CLICK);
 800bf30:	2010      	movs	r0, #16
 800bf32:	f7ff bfd0 	b.w	800bed6 <LSM303DLHC_AccClickITEnable>

0800bf36 <L3GD20_DeInit>:
  * @param  None
  * @retval None
  */
void L3GD20_DeInit(void)
{
}
 800bf36:	4770      	bx	lr

0800bf38 <L3GD20_Init>:
{  
 800bf38:	b513      	push	{r0, r1, r4, lr}
  uint8_t ctrl = 0x00;
 800bf3a:	2300      	movs	r3, #0
{  
 800bf3c:	4604      	mov	r4, r0
  uint8_t ctrl = 0x00;
 800bf3e:	f88d 3007 	strb.w	r3, [sp, #7]
  GYRO_IO_Init();
 800bf42:	f7ff fd9d 	bl	800ba80 <GYRO_IO_Init>
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 800bf46:	f10d 0007 	add.w	r0, sp, #7
 800bf4a:	2201      	movs	r2, #1
 800bf4c:	2120      	movs	r1, #32
  ctrl = (uint8_t) InitStruct;
 800bf4e:	f88d 4007 	strb.w	r4, [sp, #7]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 800bf52:	f7ff fdc5 	bl	800bae0 <GYRO_IO_Write>
  ctrl = (uint8_t) (InitStruct >> 8);
 800bf56:	0a24      	lsrs	r4, r4, #8
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 800bf58:	2201      	movs	r2, #1
 800bf5a:	2123      	movs	r1, #35	; 0x23
 800bf5c:	f10d 0007 	add.w	r0, sp, #7
  ctrl = (uint8_t) (InitStruct >> 8);
 800bf60:	f88d 4007 	strb.w	r4, [sp, #7]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 800bf64:	f7ff fdbc 	bl	800bae0 <GYRO_IO_Write>
}
 800bf68:	b002      	add	sp, #8
 800bf6a:	bd10      	pop	{r4, pc}

0800bf6c <L3GD20_LowPower>:
  * @brief Set L3GD20 in low-power mode
  * @param 
  * @retval  None
  */
void L3GD20_LowPower(uint16_t InitStruct)
{  
 800bf6c:	b507      	push	{r0, r1, r2, lr}
  uint8_t ctrl = 0x00;

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 800bf6e:	2201      	movs	r2, #1
  ctrl = (uint8_t) InitStruct;
 800bf70:	f88d 0007 	strb.w	r0, [sp, #7]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 800bf74:	2120      	movs	r1, #32
 800bf76:	f10d 0007 	add.w	r0, sp, #7
 800bf7a:	f7ff fdb1 	bl	800bae0 <GYRO_IO_Write>
}
 800bf7e:	b003      	add	sp, #12
 800bf80:	f85d fb04 	ldr.w	pc, [sp], #4

0800bf84 <L3GD20_ReadID>:
{
 800bf84:	b507      	push	{r0, r1, r2, lr}
  GYRO_IO_Init();
 800bf86:	f7ff fd7b 	bl	800ba80 <GYRO_IO_Init>
  GYRO_IO_Read(&tmp, L3GD20_WHO_AM_I_ADDR, 1);
 800bf8a:	f10d 0007 	add.w	r0, sp, #7
 800bf8e:	2201      	movs	r2, #1
 800bf90:	210f      	movs	r1, #15
 800bf92:	f7ff fdc7 	bl	800bb24 <GYRO_IO_Read>
}
 800bf96:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800bf9a:	b003      	add	sp, #12
 800bf9c:	f85d fb04 	ldr.w	pc, [sp], #4

0800bfa0 <L3GD20_RebootCmd>:
{
 800bfa0:	b507      	push	{r0, r1, r2, lr}
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800bfa2:	2201      	movs	r2, #1
 800bfa4:	f10d 0007 	add.w	r0, sp, #7
 800bfa8:	2124      	movs	r1, #36	; 0x24
 800bfaa:	f7ff fdbb 	bl	800bb24 <GYRO_IO_Read>
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 800bfae:	f89d 3007 	ldrb.w	r3, [sp, #7]
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800bfb2:	2201      	movs	r2, #1
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 800bfb4:	f063 037f 	orn	r3, r3, #127	; 0x7f
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800bfb8:	2124      	movs	r1, #36	; 0x24
 800bfba:	f10d 0007 	add.w	r0, sp, #7
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 800bfbe:	f88d 3007 	strb.w	r3, [sp, #7]
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800bfc2:	f7ff fd8d 	bl	800bae0 <GYRO_IO_Write>
}
 800bfc6:	b003      	add	sp, #12
 800bfc8:	f85d fb04 	ldr.w	pc, [sp], #4

0800bfcc <L3GD20_INT1InterruptConfig>:
  * @brief  Set L3GD20 Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
 800bfcc:	b513      	push	{r0, r1, r4, lr}
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 800bfce:	2300      	movs	r3, #0
{
 800bfd0:	4604      	mov	r4, r0
  
  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 800bfd2:	2201      	movs	r2, #1
 800bfd4:	f10d 0006 	add.w	r0, sp, #6
 800bfd8:	2130      	movs	r1, #48	; 0x30
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 800bfda:	f88d 3006 	strb.w	r3, [sp, #6]
 800bfde:	f88d 3007 	strb.w	r3, [sp, #7]
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 800bfe2:	f7ff fd9f 	bl	800bb24 <GYRO_IO_Read>
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 800bfe6:	f10d 0007 	add.w	r0, sp, #7
 800bfea:	2201      	movs	r2, #1
 800bfec:	2122      	movs	r1, #34	; 0x22
 800bfee:	f7ff fd99 	bl	800bb24 <GYRO_IO_Read>
  
  ctrl_cfr &= 0x80;
 800bff2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800bff6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800bffa:	f88d 3006 	strb.w	r3, [sp, #6]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
  
  ctrl3 &= 0xDF;
 800bffe:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c002:	f023 0320 	bic.w	r3, r3, #32
  ctrl3 |= ((uint8_t) Int1Config);   
 800c006:	ea43 0004 	orr.w	r0, r3, r4
 800c00a:	f88d 0007 	strb.w	r0, [sp, #7]
  
  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 800c00e:	2201      	movs	r2, #1
 800c010:	f10d 0006 	add.w	r0, sp, #6
 800c014:	2130      	movs	r1, #48	; 0x30
 800c016:	f7ff fd63 	bl	800bae0 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 800c01a:	2201      	movs	r2, #1
 800c01c:	2122      	movs	r1, #34	; 0x22
 800c01e:	f10d 0007 	add.w	r0, sp, #7
 800c022:	f7ff fd5d 	bl	800bae0 <GYRO_IO_Write>
}
 800c026:	b002      	add	sp, #8
 800c028:	bd10      	pop	{r4, pc}

0800c02a <L3GD20_EnableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_EnableIT(uint8_t IntSel)
{  
 800c02a:	b513      	push	{r0, r1, r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 800c02c:	2201      	movs	r2, #1
{  
 800c02e:	4604      	mov	r4, r0
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 800c030:	2122      	movs	r1, #34	; 0x22
 800c032:	f10d 0007 	add.w	r0, sp, #7
 800c036:	f7ff fd75 	bl	800bb24 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 800c03a:	b96c      	cbnz	r4, 800c058 <L3GD20_EnableIT+0x2e>
  {
    tmpreg &= 0x7F;	
 800c03c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    tmpreg |= L3GD20_INT1INTERRUPT_ENABLE;
 800c040:	f063 037f 	orn	r3, r3, #127	; 0x7f
  }
  else if(IntSel == L3GD20_INT2)
  {
    tmpreg &= 0xF7;
    tmpreg |= L3GD20_INT2INTERRUPT_ENABLE;
 800c044:	f88d 3007 	strb.w	r3, [sp, #7]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 800c048:	2201      	movs	r2, #1
 800c04a:	2122      	movs	r1, #34	; 0x22
 800c04c:	f10d 0007 	add.w	r0, sp, #7
 800c050:	f7ff fd46 	bl	800bae0 <GYRO_IO_Write>
}
 800c054:	b002      	add	sp, #8
 800c056:	bd10      	pop	{r4, pc}
  else if(IntSel == L3GD20_INT2)
 800c058:	2c01      	cmp	r4, #1
 800c05a:	d1f5      	bne.n	800c048 <L3GD20_EnableIT+0x1e>
    tmpreg &= 0xF7;
 800c05c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c060:	f023 0308 	bic.w	r3, r3, #8
    tmpreg |= L3GD20_INT2INTERRUPT_ENABLE;
 800c064:	f043 0308 	orr.w	r3, r3, #8
 800c068:	e7ec      	b.n	800c044 <L3GD20_EnableIT+0x1a>

0800c06a <L3GD20_DisableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_DisableIT(uint8_t IntSel)
{  
 800c06a:	b513      	push	{r0, r1, r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 800c06c:	2201      	movs	r2, #1
{  
 800c06e:	4604      	mov	r4, r0
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 800c070:	2122      	movs	r1, #34	; 0x22
 800c072:	f10d 0007 	add.w	r0, sp, #7
 800c076:	f7ff fd55 	bl	800bb24 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 800c07a:	b96c      	cbnz	r4, 800c098 <L3GD20_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;	
 800c07c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c080:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    tmpreg |= L3GD20_INT1INTERRUPT_DISABLE;
  }
  else if(IntSel == L3GD20_INT2)
  {
    tmpreg &= 0xF7;
 800c084:	f88d 3007 	strb.w	r3, [sp, #7]
    tmpreg |= L3GD20_INT2INTERRUPT_DISABLE;
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 800c088:	2201      	movs	r2, #1
 800c08a:	2122      	movs	r1, #34	; 0x22
 800c08c:	f10d 0007 	add.w	r0, sp, #7
 800c090:	f7ff fd26 	bl	800bae0 <GYRO_IO_Write>
}
 800c094:	b002      	add	sp, #8
 800c096:	bd10      	pop	{r4, pc}
  else if(IntSel == L3GD20_INT2)
 800c098:	2c01      	cmp	r4, #1
 800c09a:	d1f5      	bne.n	800c088 <L3GD20_DisableIT+0x1e>
    tmpreg &= 0xF7;
 800c09c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c0a0:	f023 0308 	bic.w	r3, r3, #8
 800c0a4:	e7ee      	b.n	800c084 <L3GD20_DisableIT+0x1a>

0800c0a6 <L3GD20_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.        
  * @retval None
  */
void L3GD20_FilterConfig(uint8_t FilterStruct) 
{
 800c0a6:	b513      	push	{r0, r1, r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 800c0a8:	2201      	movs	r2, #1
{
 800c0aa:	4604      	mov	r4, r0
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 800c0ac:	2121      	movs	r1, #33	; 0x21
 800c0ae:	f10d 0007 	add.w	r0, sp, #7
 800c0b2:	f7ff fd37 	bl	800bb24 <GYRO_IO_Read>
  
  tmpreg &= 0xC0;
 800c0b6:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800c0ba:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
  
  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 800c0be:	4304      	orrs	r4, r0
  
  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 800c0c0:	2201      	movs	r2, #1
 800c0c2:	2121      	movs	r1, #33	; 0x21
 800c0c4:	f10d 0007 	add.w	r0, sp, #7
  tmpreg |= FilterStruct;
 800c0c8:	f88d 4007 	strb.w	r4, [sp, #7]
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 800c0cc:	f7ff fd08 	bl	800bae0 <GYRO_IO_Write>
}
 800c0d0:	b002      	add	sp, #8
 800c0d2:	bd10      	pop	{r4, pc}

0800c0d4 <L3GD20_FilterCmd>:
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE 
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE          
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
{
 800c0d4:	b513      	push	{r0, r1, r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800c0d6:	2201      	movs	r2, #1
{
 800c0d8:	4604      	mov	r4, r0
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800c0da:	2124      	movs	r1, #36	; 0x24
 800c0dc:	f10d 0007 	add.w	r0, sp, #7
 800c0e0:	f7ff fd20 	bl	800bb24 <GYRO_IO_Read>
  
  tmpreg &= 0xEF;
 800c0e4:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800c0e8:	f020 0010 	bic.w	r0, r0, #16
  
  tmpreg |= HighPassFilterState;
 800c0ec:	4304      	orrs	r4, r0
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800c0ee:	2201      	movs	r2, #1
 800c0f0:	2124      	movs	r1, #36	; 0x24
 800c0f2:	f10d 0007 	add.w	r0, sp, #7
  tmpreg |= HighPassFilterState;
 800c0f6:	f88d 4007 	strb.w	r4, [sp, #7]
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800c0fa:	f7ff fcf1 	bl	800bae0 <GYRO_IO_Write>
}
 800c0fe:	b002      	add	sp, #8
 800c100:	bd10      	pop	{r4, pc}
	...

0800c104 <L3GD20_ReadXYZAngRate>:
* @brief  Calculate the L3GD20 angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float *pfData)
{
 800c104:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c106:	b087      	sub	sp, #28
  uint8_t tmpbuffer[6] ={0};
 800c108:	2300      	movs	r3, #0
  int16_t RawData[3] = {0};
  uint8_t tmpreg = 0;
  float sensitivity = 0;
  int i =0;
  
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 800c10a:	2201      	movs	r2, #1
 800c10c:	2123      	movs	r1, #35	; 0x23
{
 800c10e:	4604      	mov	r4, r0
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 800c110:	f10d 0007 	add.w	r0, sp, #7
  uint8_t tmpbuffer[6] ={0};
 800c114:	9302      	str	r3, [sp, #8]
 800c116:	f8ad 300c 	strh.w	r3, [sp, #12]
  uint8_t tmpreg = 0;
 800c11a:	f88d 3007 	strb.w	r3, [sp, #7]
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 800c11e:	f7ff fd01 	bl	800bb24 <GYRO_IO_Read>
  
  GYRO_IO_Read(tmpbuffer,L3GD20_OUT_X_L_ADDR,6);
 800c122:	2206      	movs	r2, #6
 800c124:	2128      	movs	r1, #40	; 0x28
 800c126:	a802      	add	r0, sp, #8
 800c128:	f7ff fcfc 	bl	800bb24 <GYRO_IO_Read>
  
  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & L3GD20_BLE_MSB))
 800c12c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c130:	f89d 6008 	ldrb.w	r6, [sp, #8]
 800c134:	f89d 7009 	ldrb.w	r7, [sp, #9]
 800c138:	f89d 000a 	ldrb.w	r0, [sp, #10]
 800c13c:	f89d 500b 	ldrb.w	r5, [sp, #11]
 800c140:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800c144:	f89d 100d 	ldrb.w	r1, [sp, #13]
 800c148:	f013 0f40 	tst.w	r3, #64	; 0x40
 800c14c:	d039      	beq.n	800c1c2 <L3GD20_ReadXYZAngRate+0xbe>
  }
  else
  {
    for(i=0; i<3; i++)
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
 800c14e:	eb07 2606 	add.w	r6, r7, r6, lsl #8
 800c152:	eb05 2000 	add.w	r0, r5, r0, lsl #8
 800c156:	f8ad 6010 	strh.w	r6, [sp, #16]
 800c15a:	f8ad 0012 	strh.w	r0, [sp, #18]
 800c15e:	eb01 2202 	add.w	r2, r1, r2, lsl #8
 800c162:	f003 0330 	and.w	r3, r3, #48	; 0x30
    }
  }
  
  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 800c166:	2b10      	cmp	r3, #16
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 800c168:	f8ad 2014 	strh.w	r2, [sp, #20]
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 800c16c:	d034      	beq.n	800c1d8 <L3GD20_ReadXYZAngRate+0xd4>
 800c16e:	2b20      	cmp	r3, #32
 800c170:	d035      	beq.n	800c1de <L3GD20_ReadXYZAngRate+0xda>
 800c172:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800c1e4 <L3GD20_ReadXYZAngRate+0xe0>
 800c176:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800c1e8 <L3GD20_ReadXYZAngRate+0xe4>
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	bf08      	it	eq
 800c17e:	eef0 7a47 	vmoveq.f32	s15, s14
    break;
  }
  /* Divide by sensitivity */
  for(i=0; i<3; i++)
  {
    pfData[i]=(float)(RawData[i] * sensitivity);
 800c182:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 800c186:	ee07 3a10 	vmov	s14, r3
 800c18a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c18e:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 800c192:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c196:	ed84 7a00 	vstr	s14, [r4]
 800c19a:	ee07 3a10 	vmov	s14, r3
 800c19e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c1a2:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 800c1a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c1aa:	ed84 7a01 	vstr	s14, [r4, #4]
 800c1ae:	ee07 3a10 	vmov	s14, r3
 800c1b2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c1b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c1ba:	edc4 7a02 	vstr	s15, [r4, #8]
  }
}
 800c1be:	b007      	add	sp, #28
 800c1c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 800c1c2:	eb06 2607 	add.w	r6, r6, r7, lsl #8
 800c1c6:	eb00 2005 	add.w	r0, r0, r5, lsl #8
 800c1ca:	f8ad 6010 	strh.w	r6, [sp, #16]
 800c1ce:	f8ad 0012 	strh.w	r0, [sp, #18]
 800c1d2:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 800c1d6:	e7c4      	b.n	800c162 <L3GD20_ReadXYZAngRate+0x5e>
    sensitivity=L3GD20_SENSITIVITY_500DPS;
 800c1d8:	eddf 7a04 	vldr	s15, [pc, #16]	; 800c1ec <L3GD20_ReadXYZAngRate+0xe8>
 800c1dc:	e7d1      	b.n	800c182 <L3GD20_ReadXYZAngRate+0x7e>
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
 800c1de:	eddf 7a04 	vldr	s15, [pc, #16]	; 800c1f0 <L3GD20_ReadXYZAngRate+0xec>
 800c1e2:	e7ce      	b.n	800c182 <L3GD20_ReadXYZAngRate+0x7e>
 800c1e4:	00000000 	.word	0x00000000
 800c1e8:	410c0000 	.word	0x410c0000
 800c1ec:	418c0000 	.word	0x418c0000
 800c1f0:	428c0000 	.word	0x428c0000

0800c1f4 <I3G4250D_DeInit>:
  * @param  None
  * @retval None
  */
void I3G4250D_DeInit(void)
{
}
 800c1f4:	4770      	bx	lr

0800c1f6 <I3G4250D_Init>:
{
 800c1f6:	b513      	push	{r0, r1, r4, lr}
  uint8_t ctrl = 0x00;
 800c1f8:	2300      	movs	r3, #0
{
 800c1fa:	4604      	mov	r4, r0
  uint8_t ctrl = 0x00;
 800c1fc:	f88d 3007 	strb.w	r3, [sp, #7]
  GYRO_IO_Init();
 800c200:	f7ff fc3e 	bl	800ba80 <GYRO_IO_Init>
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG1_ADDR, 1);
 800c204:	f10d 0007 	add.w	r0, sp, #7
 800c208:	2201      	movs	r2, #1
 800c20a:	2120      	movs	r1, #32
  ctrl = (uint8_t) InitStruct;
 800c20c:	f88d 4007 	strb.w	r4, [sp, #7]
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG1_ADDR, 1);
 800c210:	f7ff fc66 	bl	800bae0 <GYRO_IO_Write>
  ctrl = (uint8_t)(InitStruct >> 8);
 800c214:	0a24      	lsrs	r4, r4, #8
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG4_ADDR, 1);
 800c216:	2201      	movs	r2, #1
 800c218:	2123      	movs	r1, #35	; 0x23
 800c21a:	f10d 0007 	add.w	r0, sp, #7
  ctrl = (uint8_t)(InitStruct >> 8);
 800c21e:	f88d 4007 	strb.w	r4, [sp, #7]
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG4_ADDR, 1);
 800c222:	f7ff fc5d 	bl	800bae0 <GYRO_IO_Write>
}
 800c226:	b002      	add	sp, #8
 800c228:	bd10      	pop	{r4, pc}

0800c22a <I3G4250D_LowPower>:
  * @param  I3G4250D_InitStruct: pointer to a I3G4250D_InitTypeDef structure
  *         that contains the configuration setting for the I3G4250D.
  * @retval None
  */
void I3G4250D_LowPower(uint16_t InitStruct)
{
 800c22a:	b507      	push	{r0, r1, r2, lr}
  uint8_t ctrl = 0x00;

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG1_ADDR, 1);
 800c22c:	2201      	movs	r2, #1
  ctrl = (uint8_t) InitStruct;
 800c22e:	f88d 0007 	strb.w	r0, [sp, #7]
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG1_ADDR, 1);
 800c232:	2120      	movs	r1, #32
 800c234:	f10d 0007 	add.w	r0, sp, #7
 800c238:	f7ff fc52 	bl	800bae0 <GYRO_IO_Write>
}
 800c23c:	b003      	add	sp, #12
 800c23e:	f85d fb04 	ldr.w	pc, [sp], #4

0800c242 <I3G4250D_ReadID>:
{
 800c242:	b507      	push	{r0, r1, r2, lr}
  GYRO_IO_Init();
 800c244:	f7ff fc1c 	bl	800ba80 <GYRO_IO_Init>
  GYRO_IO_Read(&tmp, I3G4250D_WHO_AM_I_ADDR, 1);
 800c248:	f10d 0007 	add.w	r0, sp, #7
 800c24c:	2201      	movs	r2, #1
 800c24e:	210f      	movs	r1, #15
 800c250:	f7ff fc68 	bl	800bb24 <GYRO_IO_Read>
}
 800c254:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800c258:	b003      	add	sp, #12
 800c25a:	f85d fb04 	ldr.w	pc, [sp], #4

0800c25e <I3G4250D_RebootCmd>:
{
 800c25e:	b507      	push	{r0, r1, r2, lr}
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 800c260:	2201      	movs	r2, #1
 800c262:	f10d 0007 	add.w	r0, sp, #7
 800c266:	2124      	movs	r1, #36	; 0x24
 800c268:	f7ff fc5c 	bl	800bb24 <GYRO_IO_Read>
  tmpreg |= I3G4250D_BOOT_REBOOTMEMORY;
 800c26c:	f89d 3007 	ldrb.w	r3, [sp, #7]
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 800c270:	2201      	movs	r2, #1
  tmpreg |= I3G4250D_BOOT_REBOOTMEMORY;
 800c272:	f063 037f 	orn	r3, r3, #127	; 0x7f
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 800c276:	2124      	movs	r1, #36	; 0x24
 800c278:	f10d 0007 	add.w	r0, sp, #7
  tmpreg |= I3G4250D_BOOT_REBOOTMEMORY;
 800c27c:	f88d 3007 	strb.w	r3, [sp, #7]
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 800c280:	f7ff fc2e 	bl	800bae0 <GYRO_IO_Write>
}
 800c284:	b003      	add	sp, #12
 800c286:	f85d fb04 	ldr.w	pc, [sp], #4

0800c28a <I3G4250D_INT1InterruptConfig>:
  * @brief  Set I3G4250D Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the I3G4250D Interrupt.
  * @retval None
  */
void I3G4250D_INT1InterruptConfig(uint16_t Int1Config)
{
 800c28a:	b513      	push	{r0, r1, r4, lr}
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 800c28c:	2300      	movs	r3, #0
{
 800c28e:	4604      	mov	r4, r0

  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, I3G4250D_INT1_CFG_ADDR, 1);
 800c290:	2201      	movs	r2, #1
 800c292:	f10d 0006 	add.w	r0, sp, #6
 800c296:	2130      	movs	r1, #48	; 0x30
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 800c298:	f88d 3006 	strb.w	r3, [sp, #6]
 800c29c:	f88d 3007 	strb.w	r3, [sp, #7]
  GYRO_IO_Read(&ctrl_cfr, I3G4250D_INT1_CFG_ADDR, 1);
 800c2a0:	f7ff fc40 	bl	800bb24 <GYRO_IO_Read>

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, I3G4250D_CTRL_REG3_ADDR, 1);
 800c2a4:	f10d 0007 	add.w	r0, sp, #7
 800c2a8:	2201      	movs	r2, #1
 800c2aa:	2122      	movs	r1, #34	; 0x22
 800c2ac:	f7ff fc3a 	bl	800bb24 <GYRO_IO_Read>

  ctrl_cfr &= 0x80;
 800c2b0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c2b4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c2b8:	f88d 3006 	strb.w	r3, [sp, #6]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);

  ctrl3 &= 0xDF;
 800c2bc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c2c0:	f023 0320 	bic.w	r3, r3, #32
  ctrl3 |= ((uint8_t) Int1Config);
 800c2c4:	ea43 0004 	orr.w	r0, r3, r4
 800c2c8:	f88d 0007 	strb.w	r0, [sp, #7]

  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, I3G4250D_INT1_CFG_ADDR, 1);
 800c2cc:	2201      	movs	r2, #1
 800c2ce:	f10d 0006 	add.w	r0, sp, #6
 800c2d2:	2130      	movs	r1, #48	; 0x30
 800c2d4:	f7ff fc04 	bl	800bae0 <GYRO_IO_Write>

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, I3G4250D_CTRL_REG3_ADDR, 1);
 800c2d8:	2201      	movs	r2, #1
 800c2da:	2122      	movs	r1, #34	; 0x22
 800c2dc:	f10d 0007 	add.w	r0, sp, #7
 800c2e0:	f7ff fbfe 	bl	800bae0 <GYRO_IO_Write>
}
 800c2e4:	b002      	add	sp, #8
 800c2e6:	bd10      	pop	{r4, pc}

0800c2e8 <I3G4250D_EnableIT>:
  *        @arg I3G4250D_INT1
  *        @arg I3G4250D_INT2
  * @retval None
  */
void I3G4250D_EnableIT(uint8_t IntSel)
{
 800c2e8:	b513      	push	{r0, r1, r4, lr}
  uint8_t tmpreg;

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 800c2ea:	2201      	movs	r2, #1
{
 800c2ec:	4604      	mov	r4, r0
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 800c2ee:	2122      	movs	r1, #34	; 0x22
 800c2f0:	f10d 0007 	add.w	r0, sp, #7
 800c2f4:	f7ff fc16 	bl	800bb24 <GYRO_IO_Read>

  if (IntSel == I3G4250D_INT1)
 800c2f8:	b96c      	cbnz	r4, 800c316 <I3G4250D_EnableIT+0x2e>
  {
    tmpreg &= 0x7F;
 800c2fa:	f89d 3007 	ldrb.w	r3, [sp, #7]
    tmpreg |= I3G4250D_INT1INTERRUPT_ENABLE;
 800c2fe:	f063 037f 	orn	r3, r3, #127	; 0x7f
  }
  else if (IntSel == I3G4250D_INT2)
  {
    tmpreg &= 0xF7;
    tmpreg |= I3G4250D_INT2INTERRUPT_ENABLE;
 800c302:	f88d 3007 	strb.w	r3, [sp, #7]
  }

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 800c306:	2201      	movs	r2, #1
 800c308:	2122      	movs	r1, #34	; 0x22
 800c30a:	f10d 0007 	add.w	r0, sp, #7
 800c30e:	f7ff fbe7 	bl	800bae0 <GYRO_IO_Write>
}
 800c312:	b002      	add	sp, #8
 800c314:	bd10      	pop	{r4, pc}
  else if (IntSel == I3G4250D_INT2)
 800c316:	2c01      	cmp	r4, #1
 800c318:	d1f5      	bne.n	800c306 <I3G4250D_EnableIT+0x1e>
    tmpreg &= 0xF7;
 800c31a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c31e:	f023 0308 	bic.w	r3, r3, #8
    tmpreg |= I3G4250D_INT2INTERRUPT_ENABLE;
 800c322:	f043 0308 	orr.w	r3, r3, #8
 800c326:	e7ec      	b.n	800c302 <I3G4250D_EnableIT+0x1a>

0800c328 <I3G4250D_DisableIT>:
  *        @arg I3G4250D_INT1
  *        @arg I3G4250D_INT2
  * @retval None
  */
void I3G4250D_DisableIT(uint8_t IntSel)
{
 800c328:	b513      	push	{r0, r1, r4, lr}
  uint8_t tmpreg;

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 800c32a:	2201      	movs	r2, #1
{
 800c32c:	4604      	mov	r4, r0
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 800c32e:	2122      	movs	r1, #34	; 0x22
 800c330:	f10d 0007 	add.w	r0, sp, #7
 800c334:	f7ff fbf6 	bl	800bb24 <GYRO_IO_Read>

  if (IntSel == I3G4250D_INT1)
 800c338:	b96c      	cbnz	r4, 800c356 <I3G4250D_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;
 800c33a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c33e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    tmpreg |= I3G4250D_INT1INTERRUPT_DISABLE;
  }
  else if (IntSel == I3G4250D_INT2)
  {
    tmpreg &= 0xF7;
 800c342:	f88d 3007 	strb.w	r3, [sp, #7]
    tmpreg |= I3G4250D_INT2INTERRUPT_DISABLE;
  }

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 800c346:	2201      	movs	r2, #1
 800c348:	2122      	movs	r1, #34	; 0x22
 800c34a:	f10d 0007 	add.w	r0, sp, #7
 800c34e:	f7ff fbc7 	bl	800bae0 <GYRO_IO_Write>
}
 800c352:	b002      	add	sp, #8
 800c354:	bd10      	pop	{r4, pc}
  else if (IntSel == I3G4250D_INT2)
 800c356:	2c01      	cmp	r4, #1
 800c358:	d1f5      	bne.n	800c346 <I3G4250D_DisableIT+0x1e>
    tmpreg &= 0xF7;
 800c35a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c35e:	f023 0308 	bic.w	r3, r3, #8
 800c362:	e7ee      	b.n	800c342 <I3G4250D_DisableIT+0x1a>

0800c364 <I3G4250D_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.
  * @retval None
  */
void I3G4250D_FilterConfig(uint8_t FilterStruct)
{
 800c364:	b513      	push	{r0, r1, r4, lr}
  uint8_t tmpreg;

  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG2_ADDR, 1);
 800c366:	2201      	movs	r2, #1
{
 800c368:	4604      	mov	r4, r0
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG2_ADDR, 1);
 800c36a:	2121      	movs	r1, #33	; 0x21
 800c36c:	f10d 0007 	add.w	r0, sp, #7
 800c370:	f7ff fbd8 	bl	800bb24 <GYRO_IO_Read>

  tmpreg &= 0xC0;
 800c374:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800c378:	f020 003f 	bic.w	r0, r0, #63	; 0x3f

  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 800c37c:	4304      	orrs	r4, r0

  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG2_ADDR, 1);
 800c37e:	2201      	movs	r2, #1
 800c380:	2121      	movs	r1, #33	; 0x21
 800c382:	f10d 0007 	add.w	r0, sp, #7
  tmpreg |= FilterStruct;
 800c386:	f88d 4007 	strb.w	r4, [sp, #7]
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG2_ADDR, 1);
 800c38a:	f7ff fba9 	bl	800bae0 <GYRO_IO_Write>
}
 800c38e:	b002      	add	sp, #8
 800c390:	bd10      	pop	{r4, pc}

0800c392 <I3G4250D_FilterCmd>:
  *         @arg: I3G4250D_HIGHPASSFILTER_DISABLE
  *         @arg: I3G4250D_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void I3G4250D_FilterCmd(uint8_t HighPassFilterState)
{
 800c392:	b513      	push	{r0, r1, r4, lr}
  uint8_t tmpreg;

  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 800c394:	2201      	movs	r2, #1
{
 800c396:	4604      	mov	r4, r0
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 800c398:	2124      	movs	r1, #36	; 0x24
 800c39a:	f10d 0007 	add.w	r0, sp, #7
 800c39e:	f7ff fbc1 	bl	800bb24 <GYRO_IO_Read>

  tmpreg &= 0xEF;
 800c3a2:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800c3a6:	f020 0010 	bic.w	r0, r0, #16

  tmpreg |= HighPassFilterState;
 800c3aa:	4304      	orrs	r4, r0

  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 800c3ac:	2201      	movs	r2, #1
 800c3ae:	2124      	movs	r1, #36	; 0x24
 800c3b0:	f10d 0007 	add.w	r0, sp, #7
  tmpreg |= HighPassFilterState;
 800c3b4:	f88d 4007 	strb.w	r4, [sp, #7]
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 800c3b8:	f7ff fb92 	bl	800bae0 <GYRO_IO_Write>
}
 800c3bc:	b002      	add	sp, #8
 800c3be:	bd10      	pop	{r4, pc}

0800c3c0 <I3G4250D_ReadXYZAngRate>:
* @brief  Calculate the I3G4250D angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void I3G4250D_ReadXYZAngRate(float *pfData)
{
 800c3c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c3c2:	b087      	sub	sp, #28
  uint8_t tmpbuffer[6] = {0};
 800c3c4:	2300      	movs	r3, #0
  int16_t RawData[3] = {0};
  uint8_t tmpreg = 0;
  float sensitivity = 0;
  int i = 0;

  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG4_ADDR, 1);
 800c3c6:	2201      	movs	r2, #1
 800c3c8:	2123      	movs	r1, #35	; 0x23
{
 800c3ca:	4604      	mov	r4, r0
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG4_ADDR, 1);
 800c3cc:	f10d 0007 	add.w	r0, sp, #7
  uint8_t tmpbuffer[6] = {0};
 800c3d0:	9302      	str	r3, [sp, #8]
 800c3d2:	f8ad 300c 	strh.w	r3, [sp, #12]
  uint8_t tmpreg = 0;
 800c3d6:	f88d 3007 	strb.w	r3, [sp, #7]
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG4_ADDR, 1);
 800c3da:	f7ff fba3 	bl	800bb24 <GYRO_IO_Read>

  GYRO_IO_Read(tmpbuffer, I3G4250D_OUT_X_L_ADDR, 6);
 800c3de:	2206      	movs	r2, #6
 800c3e0:	2128      	movs	r1, #40	; 0x28
 800c3e2:	a802      	add	r0, sp, #8
 800c3e4:	f7ff fb9e 	bl	800bb24 <GYRO_IO_Read>

  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if (!(tmpreg & I3G4250D_BLE_MSB))
 800c3e8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c3ec:	f89d 6008 	ldrb.w	r6, [sp, #8]
 800c3f0:	f89d 7009 	ldrb.w	r7, [sp, #9]
 800c3f4:	f89d 000a 	ldrb.w	r0, [sp, #10]
 800c3f8:	f89d 500b 	ldrb.w	r5, [sp, #11]
 800c3fc:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800c400:	f89d 100d 	ldrb.w	r1, [sp, #13]
 800c404:	f013 0f40 	tst.w	r3, #64	; 0x40
 800c408:	d039      	beq.n	800c47e <I3G4250D_ReadXYZAngRate+0xbe>
  }
  else
  {
    for (i = 0; i < 3; i++)
    {
      RawData[i] = (int16_t)(((uint16_t)tmpbuffer[2 * i] << 8) + tmpbuffer[2 * i + 1]);
 800c40a:	eb07 2606 	add.w	r6, r7, r6, lsl #8
 800c40e:	eb05 2000 	add.w	r0, r5, r0, lsl #8
 800c412:	f8ad 6010 	strh.w	r6, [sp, #16]
 800c416:	f8ad 0012 	strh.w	r0, [sp, #18]
 800c41a:	eb01 2202 	add.w	r2, r1, r2, lsl #8
 800c41e:	f003 0330 	and.w	r3, r3, #48	; 0x30
    }
  }

  /* Switch the sensitivity value set in the CRTL4 */
  switch (tmpreg & I3G4250D_FULLSCALE_SELECTION)
 800c422:	2b10      	cmp	r3, #16
      RawData[i] = (int16_t)(((uint16_t)tmpbuffer[2 * i + 1] << 8) + tmpbuffer[2 * i]);
 800c424:	f8ad 2014 	strh.w	r2, [sp, #20]
  switch (tmpreg & I3G4250D_FULLSCALE_SELECTION)
 800c428:	d034      	beq.n	800c494 <I3G4250D_ReadXYZAngRate+0xd4>
 800c42a:	2b20      	cmp	r3, #32
 800c42c:	d035      	beq.n	800c49a <I3G4250D_ReadXYZAngRate+0xda>
 800c42e:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800c4a0 <I3G4250D_ReadXYZAngRate+0xe0>
 800c432:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800c4a4 <I3G4250D_ReadXYZAngRate+0xe4>
 800c436:	2b00      	cmp	r3, #0
 800c438:	bf08      	it	eq
 800c43a:	eef0 7a47 	vmoveq.f32	s15, s14
      break;
  }
  /* Multiplied by sensitivity */
  for (i = 0; i < 3; i++)
  {
    pfData[i] = (float)(RawData[i] * sensitivity);
 800c43e:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 800c442:	ee07 3a10 	vmov	s14, r3
 800c446:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c44a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 800c44e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c452:	ed84 7a00 	vstr	s14, [r4]
 800c456:	ee07 3a10 	vmov	s14, r3
 800c45a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c45e:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 800c462:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c466:	ed84 7a01 	vstr	s14, [r4, #4]
 800c46a:	ee07 3a10 	vmov	s14, r3
 800c46e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c472:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c476:	edc4 7a02 	vstr	s15, [r4, #8]
  }
}
 800c47a:	b007      	add	sp, #28
 800c47c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      RawData[i] = (int16_t)(((uint16_t)tmpbuffer[2 * i + 1] << 8) + tmpbuffer[2 * i]);
 800c47e:	eb06 2607 	add.w	r6, r6, r7, lsl #8
 800c482:	eb00 2005 	add.w	r0, r0, r5, lsl #8
 800c486:	f8ad 6010 	strh.w	r6, [sp, #16]
 800c48a:	f8ad 0012 	strh.w	r0, [sp, #18]
 800c48e:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 800c492:	e7c4      	b.n	800c41e <I3G4250D_ReadXYZAngRate+0x5e>
      sensitivity = I3G4250D_SENSITIVITY_500DPS;
 800c494:	eddf 7a04 	vldr	s15, [pc, #16]	; 800c4a8 <I3G4250D_ReadXYZAngRate+0xe8>
 800c498:	e7d1      	b.n	800c43e <I3G4250D_ReadXYZAngRate+0x7e>
      sensitivity = I3G4250D_SENSITIVITY_2000DPS;
 800c49a:	eddf 7a04 	vldr	s15, [pc, #16]	; 800c4ac <I3G4250D_ReadXYZAngRate+0xec>
 800c49e:	e7ce      	b.n	800c43e <I3G4250D_ReadXYZAngRate+0x7e>
 800c4a0:	00000000 	.word	0x00000000
 800c4a4:	410c0000 	.word	0x410c0000
 800c4a8:	418c0000 	.word	0x418c0000
 800c4ac:	428c0000 	.word	0x428c0000

0800c4b0 <LSM303AGR_AccDeInit>:
  * @param  None
  * @retval None
  */
void LSM303AGR_AccDeInit(void)
{  
}
 800c4b0:	4770      	bx	lr

0800c4b2 <LSM303AGR_AccInit>:
{  
 800c4b2:	b510      	push	{r4, lr}
 800c4b4:	4604      	mov	r4, r0
  COMPASSACCELERO_IO_Init();
 800c4b6:	f7ff fb59 	bl	800bb6c <COMPASSACCELERO_IO_Init>
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG1_A, ctrl);
 800c4ba:	b2e2      	uxtb	r2, r4
 800c4bc:	2120      	movs	r1, #32
 800c4be:	2032      	movs	r0, #50	; 0x32
 800c4c0:	f7ff fbaa 	bl	800bc18 <COMPASSACCELERO_IO_Write>
}
 800c4c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG4_A, ctrl);
 800c4c8:	2200      	movs	r2, #0
 800c4ca:	2123      	movs	r1, #35	; 0x23
 800c4cc:	2032      	movs	r0, #50	; 0x32
 800c4ce:	f7ff bba3 	b.w	800bc18 <COMPASSACCELERO_IO_Write>

0800c4d2 <LSM303AGR_AccReadID>:
  * @brief  Read LSM303AGR ID.
  * @param  None
  * @retval ID 
  */
uint8_t LSM303AGR_AccReadID(void)
{  
 800c4d2:	b508      	push	{r3, lr}
  uint8_t ctrl = 0x00;
  
  /* Low level init */
  COMPASSACCELERO_IO_Init();
 800c4d4:	f7ff fb4a 	bl	800bb6c <COMPASSACCELERO_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_WHO_AM_I_ADDR);
  
  return ctrl;
}
 800c4d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_WHO_AM_I_ADDR);
 800c4dc:	210f      	movs	r1, #15
 800c4de:	2032      	movs	r0, #50	; 0x32
 800c4e0:	f7ff bbb8 	b.w	800bc54 <COMPASSACCELERO_IO_Read>

0800c4e4 <LSM303AGR_AccRebootCmd>:
  * @brief  Reboot memory content of LSM303AGR
  * @param  None
  * @retval None
  */
void LSM303AGR_AccRebootCmd(void)
{
 800c4e4:	b508      	push	{r3, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A);
 800c4e6:	2124      	movs	r1, #36	; 0x24
 800c4e8:	2032      	movs	r0, #50	; 0x32
 800c4ea:	f7ff fbb3 	bl	800bc54 <COMPASSACCELERO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LSM303AGR_BOOT_REBOOTMEMORY;
 800c4ee:	f060 007f 	orn	r0, r0, #127	; 0x7f
  
  /* Write value to ACC MEMS CTRL_REG5 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A, tmpreg);
 800c4f2:	b2c2      	uxtb	r2, r0
}
 800c4f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A, tmpreg);
 800c4f8:	2124      	movs	r1, #36	; 0x24
 800c4fa:	2032      	movs	r0, #50	; 0x32
 800c4fc:	f7ff bb8c 	b.w	800bc18 <COMPASSACCELERO_IO_Write>

0800c500 <LSM303AGR_AccFilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LSM303AGR_AccFilterConfig(uint8_t FilterStruct) 
{
 800c500:	b510      	push	{r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 800c502:	2121      	movs	r1, #33	; 0x21
{
 800c504:	4604      	mov	r4, r0
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 800c506:	2032      	movs	r0, #50	; 0x32
 800c508:	f7ff fba4 	bl	800bc54 <COMPASSACCELERO_IO_Read>
  
  tmpreg &= 0x0C;
 800c50c:	f000 000c 	and.w	r0, r0, #12
  tmpreg |= FilterStruct;
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 800c510:	ea40 0204 	orr.w	r2, r0, r4
 800c514:	2121      	movs	r1, #33	; 0x21
}
 800c516:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 800c51a:	2032      	movs	r0, #50	; 0x32
 800c51c:	f7ff bb7c 	b.w	800bc18 <COMPASSACCELERO_IO_Write>

0800c520 <LSM303AGR_AccFilterCmd>:
  *         @arg: LSM303AGR_HIGHPASSFILTER_DISABLE 
  *         @arg: LSM303AGR_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void LSM303AGR_AccFilterCmd(uint8_t HighPassFilterState)
{
 800c520:	b510      	push	{r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 800c522:	2121      	movs	r1, #33	; 0x21
{
 800c524:	4604      	mov	r4, r0
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 800c526:	2032      	movs	r0, #50	; 0x32
 800c528:	f7ff fb94 	bl	800bc54 <COMPASSACCELERO_IO_Read>
  
  tmpreg &= 0xF7;
 800c52c:	f000 00f7 	and.w	r0, r0, #247	; 0xf7
  
  tmpreg |= HighPassFilterState;
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 800c530:	ea40 0204 	orr.w	r2, r0, r4
 800c534:	2121      	movs	r1, #33	; 0x21
}
 800c536:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 800c53a:	2032      	movs	r0, #50	; 0x32
 800c53c:	f7ff bb6c 	b.w	800bc18 <COMPASSACCELERO_IO_Write>

0800c540 <LSM303AGR_AccReadXYZ>:
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  * @retval None
  */
void LSM303AGR_AccReadXYZ(int16_t* pData)
{
 800c540:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  int8_t buffer[6];
  uint8_t i = 0;
  uint8_t sensitivity = LSM303AGR_ACC_SENSITIVITY_2G;
  
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG4_A);
 800c544:	2123      	movs	r1, #35	; 0x23
{
 800c546:	4605      	mov	r5, r0
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG4_A);
 800c548:	2032      	movs	r0, #50	; 0x32
 800c54a:	f7ff fb83 	bl	800bc54 <COMPASSACCELERO_IO_Read>
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A);
 800c54e:	2124      	movs	r1, #36	; 0x24
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG4_A);
 800c550:	4606      	mov	r6, r0
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A);
 800c552:	2032      	movs	r0, #50	; 0x32
 800c554:	f7ff fb7e 	bl	800bc54 <COMPASSACCELERO_IO_Read>
  
  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_X_L_A); 
 800c558:	2128      	movs	r1, #40	; 0x28
 800c55a:	2032      	movs	r0, #50	; 0x32
 800c55c:	f7ff fb7a 	bl	800bc54 <COMPASSACCELERO_IO_Read>
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_X_H_A);
 800c560:	2129      	movs	r1, #41	; 0x29
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_X_L_A); 
 800c562:	b247      	sxtb	r7, r0
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_X_H_A);
 800c564:	2032      	movs	r0, #50	; 0x32
 800c566:	f7ff fb75 	bl	800bc54 <COMPASSACCELERO_IO_Read>
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Y_L_A);
 800c56a:	212a      	movs	r1, #42	; 0x2a
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_X_H_A);
 800c56c:	fa4f f980 	sxtb.w	r9, r0
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Y_L_A);
 800c570:	2032      	movs	r0, #50	; 0x32
 800c572:	f7ff fb6f 	bl	800bc54 <COMPASSACCELERO_IO_Read>
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Y_H_A);
 800c576:	212b      	movs	r1, #43	; 0x2b
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Y_L_A);
 800c578:	b244      	sxtb	r4, r0
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Y_H_A);
 800c57a:	2032      	movs	r0, #50	; 0x32
 800c57c:	f7ff fb6a 	bl	800bc54 <COMPASSACCELERO_IO_Read>
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Z_L_A);
 800c580:	212c      	movs	r1, #44	; 0x2c
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Y_H_A);
 800c582:	fa4f fa80 	sxtb.w	sl, r0
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Z_L_A);
 800c586:	2032      	movs	r0, #50	; 0x32
 800c588:	f7ff fb64 	bl	800bc54 <COMPASSACCELERO_IO_Read>
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Z_H_A);
 800c58c:	212d      	movs	r1, #45	; 0x2d
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Z_L_A);
 800c58e:	fa4f f880 	sxtb.w	r8, r0
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Z_H_A);
 800c592:	2032      	movs	r0, #50	; 0x32
 800c594:	f7ff fb5e 	bl	800bc54 <COMPASSACCELERO_IO_Read>
  
  /* Check in the control register4 the data alignment*/
  if(!(ctrlx[0] & LSM303AGR_BLE_MSB)) 
 800c598:	0672      	lsls	r2, r6, #25
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Z_H_A);
 800c59a:	b243      	sxtb	r3, r0
  if(!(ctrlx[0] & LSM303AGR_BLE_MSB)) 
 800c59c:	d51a      	bpl.n	800c5d4 <LSM303AGR_AccReadXYZ+0x94>
  }
  else /* Big Endian Mode */
  {
    for(i=0; i<3; i++)
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1]);
 800c59e:	eb09 2707 	add.w	r7, r9, r7, lsl #8
 800c5a2:	eb0a 2404 	add.w	r4, sl, r4, lsl #8
 800c5a6:	b23f      	sxth	r7, r7
 800c5a8:	b224      	sxth	r4, r4
 800c5aa:	eb03 2308 	add.w	r3, r3, r8, lsl #8
 800c5ae:	f006 0030 	and.w	r0, r6, #48	; 0x30
    }
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL4 */
  switch(ctrlx[0] & LSM303AGR_FULLSCALE_16G)
 800c5b2:	2820      	cmp	r0, #32
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 800c5b4:	b21a      	sxth	r2, r3
  switch(ctrlx[0] & LSM303AGR_FULLSCALE_16G)
 800c5b6:	d016      	beq.n	800c5e6 <LSM303AGR_AccReadXYZ+0xa6>
 800c5b8:	2830      	cmp	r0, #48	; 0x30
 800c5ba:	d016      	beq.n	800c5ea <LSM303AGR_AccReadXYZ+0xaa>
 800c5bc:	2810      	cmp	r0, #16
 800c5be:	bf14      	ite	ne
 800c5c0:	2301      	movne	r3, #1
 800c5c2:	2302      	moveq	r3, #2
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
  {
    pData[i]=(pnRawData[i] * sensitivity);
 800c5c4:	435f      	muls	r7, r3
 800c5c6:	435c      	muls	r4, r3
 800c5c8:	4353      	muls	r3, r2
 800c5ca:	802f      	strh	r7, [r5, #0]
 800c5cc:	806c      	strh	r4, [r5, #2]
 800c5ce:	80ab      	strh	r3, [r5, #4]
  }
}
 800c5d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 800c5d4:	eb07 2709 	add.w	r7, r7, r9, lsl #8
 800c5d8:	eb04 240a 	add.w	r4, r4, sl, lsl #8
 800c5dc:	b23f      	sxth	r7, r7
 800c5de:	b224      	sxth	r4, r4
 800c5e0:	eb08 2303 	add.w	r3, r8, r3, lsl #8
 800c5e4:	e7e3      	b.n	800c5ae <LSM303AGR_AccReadXYZ+0x6e>
    sensitivity = LSM303AGR_ACC_SENSITIVITY_8G;
 800c5e6:	2304      	movs	r3, #4
 800c5e8:	e7ec      	b.n	800c5c4 <LSM303AGR_AccReadXYZ+0x84>
    sensitivity = LSM303AGR_ACC_SENSITIVITY_16G;
 800c5ea:	230c      	movs	r3, #12
 800c5ec:	e7ea      	b.n	800c5c4 <LSM303AGR_AccReadXYZ+0x84>

0800c5ee <LSM303AGR_AccFilterClickCmd>:
  *         @arg: LSM303AGR_HPF_CLICK_DISABLE 
  *         @arg: LSM303AGR_HPF_CLICK_ENABLE
  * @retval None
  */
void LSM303AGR_AccFilterClickCmd(uint8_t HighPassFilterClickState)
{
 800c5ee:	b510      	push	{r4, lr}
  uint8_t tmpreg = 0x00;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 800c5f0:	2121      	movs	r1, #33	; 0x21
{
 800c5f2:	4604      	mov	r4, r0
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 800c5f4:	2032      	movs	r0, #50	; 0x32
 800c5f6:	f7ff fb2d 	bl	800bc54 <COMPASSACCELERO_IO_Read>
  
  tmpreg &= ~(LSM303AGR_HPF_CLICK_ENABLE);
 800c5fa:	f000 00fb 	and.w	r0, r0, #251	; 0xfb
  
  tmpreg |= HighPassFilterClickState;
  
  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 800c5fe:	ea40 0204 	orr.w	r2, r0, r4
 800c602:	2121      	movs	r1, #33	; 0x21
}
 800c604:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 800c608:	2032      	movs	r0, #50	; 0x32
 800c60a:	f7ff bb05 	b.w	800bc18 <COMPASSACCELERO_IO_Write>

0800c60e <LSM303AGR_AccIT1Enable>:
  *         @arg   LSM303AGR_IT1_WTM
  *         @arg   LSM303AGR_IT1_OVERRUN
  * @retval None
  */
void LSM303AGR_AccIT1Enable(uint8_t LSM303AGR_IT)
{
 800c60e:	b510      	push	{r4, lr}
  uint8_t tmpval = 0x00;
  
  /* Read CTRL_REG3 register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG3_A);
 800c610:	2122      	movs	r1, #34	; 0x22
{
 800c612:	4604      	mov	r4, r0
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG3_A);
 800c614:	2032      	movs	r0, #50	; 0x32
 800c616:	f7ff fb1d 	bl	800bc54 <COMPASSACCELERO_IO_Read>
  
  /* Enable IT1 */
  tmpval |= LSM303AGR_IT;
 800c61a:	4320      	orrs	r0, r4
  
  /* Write value to MEMS CTRL_REG3 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG3_A, tmpval);
 800c61c:	b2c2      	uxtb	r2, r0
}
 800c61e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG3_A, tmpval);
 800c622:	2122      	movs	r1, #34	; 0x22
 800c624:	2032      	movs	r0, #50	; 0x32
 800c626:	f7ff baf7 	b.w	800bc18 <COMPASSACCELERO_IO_Write>

0800c62a <LSM303AGR_AccClickITEnable>:
  * @brief  Click interrupt enable
  * @param  ITClick: the selected interrupt to enable
  * @retval None
  */
void LSM303AGR_AccClickITEnable(uint8_t ITClick)
{  
 800c62a:	b510      	push	{r4, lr}
  uint8_t tmpval = 0x00;
  
  /* Read CLICK_CFR register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CLICK_CFG_A);
 800c62c:	2138      	movs	r1, #56	; 0x38
{  
 800c62e:	4604      	mov	r4, r0
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CLICK_CFG_A);
 800c630:	2032      	movs	r0, #50	; 0x32
 800c632:	f7ff fb0f 	bl	800bc54 <COMPASSACCELERO_IO_Read>
  
  /* Enable the selected interrupt */
  tmpval |= ITClick;
 800c636:	4320      	orrs	r0, r4
  
  /* Write value to MEMS CLICK CFG register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CLICK_CFG_A, tmpval);
 800c638:	b2c2      	uxtb	r2, r0
 800c63a:	2138      	movs	r1, #56	; 0x38
 800c63c:	2032      	movs	r0, #50	; 0x32
 800c63e:	f7ff faeb 	bl	800bc18 <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Threshold on Z axis */
  tmpval = 0x0A;
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CLICK_THS_A, tmpval);
 800c642:	220a      	movs	r2, #10
 800c644:	213a      	movs	r1, #58	; 0x3a
 800c646:	2032      	movs	r0, #50	; 0x32
 800c648:	f7ff fae6 	bl	800bc18 <COMPASSACCELERO_IO_Write>
  
  /* Configure Time Limit */
  tmpval = 0x05;
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_LIMIT_A, tmpval);
 800c64c:	2205      	movs	r2, #5
 800c64e:	213b      	movs	r1, #59	; 0x3b
 800c650:	2032      	movs	r0, #50	; 0x32
 800c652:	f7ff fae1 	bl	800bc18 <COMPASSACCELERO_IO_Write>
  
  /* Configure Latency */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_LATENCY_A, tmpval);
 800c656:	2205      	movs	r2, #5
 800c658:	213c      	movs	r1, #60	; 0x3c
 800c65a:	2032      	movs	r0, #50	; 0x32
 800c65c:	f7ff fadc 	bl	800bc18 <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Window */
  tmpval = 0x32;
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_WINDOW_A, tmpval);
 800c660:	2232      	movs	r2, #50	; 0x32
}
 800c662:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_WINDOW_A, tmpval);
 800c666:	213d      	movs	r1, #61	; 0x3d
 800c668:	4610      	mov	r0, r2
 800c66a:	f7ff bad5 	b.w	800bc18 <COMPASSACCELERO_IO_Write>

0800c66e <LSM303AGR_AccZClickITConfig>:
  * @brief  Click on Z axis interrupt config
  * @param  None
  * @retval None
  */
void LSM303AGR_AccZClickITConfig(void)
{  
 800c66e:	b508      	push	{r3, lr}
  /* Configure low level IT config */
  COMPASSACCELERO_IO_ITConfig();
 800c670:	f7ff faae 	bl	800bbd0 <COMPASSACCELERO_IO_ITConfig>
  
  /* Select click IT as INT1 interrupt */
  LSM303AGR_AccIT1Enable(LSM303AGR_IT1_CLICK);
 800c674:	2080      	movs	r0, #128	; 0x80
 800c676:	f7ff ffca 	bl	800c60e <LSM303AGR_AccIT1Enable>
  
  /* Enable High pass filter for click IT */
  LSM303AGR_AccFilterClickCmd(LSM303AGR_HPF_CLICK_ENABLE);
 800c67a:	2004      	movs	r0, #4
 800c67c:	f7ff ffb7 	bl	800c5ee <LSM303AGR_AccFilterClickCmd>
  
  /* Enable simple click IT on Z axis, */
  LSM303AGR_AccClickITEnable(LSM303AGR_Z_SINGLE_CLICK);
}
 800c680:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  LSM303AGR_AccClickITEnable(LSM303AGR_Z_SINGLE_CLICK);
 800c684:	2010      	movs	r0, #16
 800c686:	f7ff bfd0 	b.w	800c62a <LSM303AGR_AccClickITEnable>
	...

0800c68c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800c68c:	f8df d034 	ldr.w	sp, [pc, #52]	; 800c6c4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800c690:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800c692:	e003      	b.n	800c69c <LoopCopyDataInit>

0800c694 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800c694:	4b0c      	ldr	r3, [pc, #48]	; (800c6c8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800c696:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800c698:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800c69a:	3104      	adds	r1, #4

0800c69c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800c69c:	480b      	ldr	r0, [pc, #44]	; (800c6cc <LoopForever+0xa>)
	ldr	r3, =_edata
 800c69e:	4b0c      	ldr	r3, [pc, #48]	; (800c6d0 <LoopForever+0xe>)
	adds	r2, r0, r1
 800c6a0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800c6a2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800c6a4:	d3f6      	bcc.n	800c694 <CopyDataInit>
	ldr	r2, =_sbss
 800c6a6:	4a0b      	ldr	r2, [pc, #44]	; (800c6d4 <LoopForever+0x12>)
	b	LoopFillZerobss
 800c6a8:	e002      	b.n	800c6b0 <LoopFillZerobss>

0800c6aa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800c6aa:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800c6ac:	f842 3b04 	str.w	r3, [r2], #4

0800c6b0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800c6b0:	4b09      	ldr	r3, [pc, #36]	; (800c6d8 <LoopForever+0x16>)
	cmp	r2, r3
 800c6b2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800c6b4:	d3f9      	bcc.n	800c6aa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800c6b6:	f7fc f8bd 	bl	8008834 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800c6ba:	f7f3 fe21 	bl	8000300 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800c6be:	f7fb f9a9 	bl	8007a14 <main>

0800c6c2 <LoopForever>:

LoopForever:
    b LoopForever
 800c6c2:	e7fe      	b.n	800c6c2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800c6c4:	20008000 	.word	0x20008000
	ldr	r3, =_sidata
 800c6c8:	0801c1b8 	.word	0x0801c1b8
	ldr	r0, =_sdata
 800c6cc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800c6d0:	20000c24 	.word	0x20000c24
	ldr	r2, =_sbss
 800c6d4:	20000c24 	.word	0x20000c24
	ldr	r3, = _ebss
 800c6d8:	20001dd8 	.word	0x20001dd8

0800c6dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800c6dc:	e7fe      	b.n	800c6dc <ADC1_2_IRQHandler>
	...

0800c6e0 <register_fini>:
 800c6e0:	4b02      	ldr	r3, [pc, #8]	; (800c6ec <register_fini+0xc>)
 800c6e2:	b113      	cbz	r3, 800c6ea <register_fini+0xa>
 800c6e4:	4802      	ldr	r0, [pc, #8]	; (800c6f0 <register_fini+0x10>)
 800c6e6:	f7f3 bde9 	b.w	80002bc <atexit>
 800c6ea:	4770      	bx	lr
 800c6ec:	00000000 	.word	0x00000000
 800c6f0:	080002d5 	.word	0x080002d5

0800c6f4 <_init>:
 800c6f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6f6:	bf00      	nop
 800c6f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c6fa:	bc08      	pop	{r3}
 800c6fc:	469e      	mov	lr, r3
 800c6fe:	4770      	bx	lr

0800c700 <_fini>:
 800c700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c702:	bf00      	nop
 800c704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c706:	bc08      	pop	{r3}
 800c708:	469e      	mov	lr, r3
 800c70a:	4770      	bx	lr
