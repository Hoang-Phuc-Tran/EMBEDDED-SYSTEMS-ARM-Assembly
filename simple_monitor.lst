
simple_monitor.elf:     file format elf32-littlearm

SYMBOL TABLE:
08000000 l    d  .isr_vector	00000000 .isr_vector
080001c0 l    d  .text	00000000 .text
0800c750 l    d  .rodata	00000000 .rodata
0801c1e4 l    d  .ARM	00000000 .ARM
0801c1ec l    d  .init_array	00000000 .init_array
0801c1f4 l    d  .fini_array	00000000 .fini_array
20000000 l    d  .data	00000000 .data
10000000 l    d  .ccmram	00000000 .ccmram
20000c24 l    d  .bss	00000000 .bss
20001dd8 l    d  ._user_heap_stack	00000000 ._user_heap_stack
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
0801ce1c l    d  .parsetable	00000000 .parsetable
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .stab	00000000 .stab
00000000 l    d  .stabstr	00000000 .stabstr
00000000 l    df *ABS*	00000000 startup_stm32f303xc.o
f1e0f85f l       *ABS*	00000000 BootRAM
0800c6dc l       .text	00000000 LoopCopyDataInit
0800c6d4 l       .text	00000000 CopyDataInit
0800c6f0 l       .text	00000000 LoopFillZerobss
0800c6ea l       .text	00000000 FillZerobss
0800c702 l       .text	00000000 LoopForever
0800c71c l       .text	00000000 Infinite_Loop
00000000 l    df *ABS*	00000000 crtstuff.c
0800c734 l     O .text	00000000 __EH_FRAME_BEGIN__
080001c0 l     F .text	00000000 deregister_tm_clones
080001dc l     F .text	00000000 register_tm_clones
08000200 l     F .text	00000000 __do_global_dtors_aux
20000c24 l       .bss	00000001 completed.1
0801c1f4 l     O .fini_array	00000000 __do_global_dtors_aux_fini_array_entry
08000228 l     F .text	00000000 frame_dummy
20000c28 l       .bss	00000018 object.0
0801c1f0 l     O .init_array	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 mycode.o
00000000 l    df *ABS*	00000000 pt_asm.o
08000288 l       .text	00000000 loop
0800029e l       .text	00000000 exit
080002a4 l       .text	00000000 busy_delay
080002a8 l       .text	00000000 delay_1oop
080002be l       .text	00000000 main_loop
080002e6 l       .text	00000000 exit_main_loop
080002c2 l       .text	00000000 loop1
080002e0 l       .text	00000000 out
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 setvbuf.c
00000000 l    df *ABS*	00000000 strcasecmp.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 strtok.c
00000000 l    df *ABS*	00000000 strtok_r.c
00000000 l    df *ABS*	00000000 strtoul.c
080008d8 l     F .text	0000013c _strtoul_l.constprop.0
00000000 l    df *ABS*	00000000 vfprintf.c
08001f78 l     F .text	0000006a __sbprintf
0800ccec l     O .rodata	00000010 blanks.1
0800ccfc l     O .rodata	00000010 zeroes.0
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 dtoa.c
08002120 l     F .text	00000126 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
08003330 l     F .text	00000004 __fp_lock
08003340 l     F .text	00000004 __fp_unlock
08003344 l     F .text	000000d8 __sinit.part.0
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 lib_a-memcpy.o
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 mprec.c
0800cd10 l     O .rodata	0000000c p05.0
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 vfprintf.c
080054d4 l     F .text	00000076 __sprint_r.part.0
080061ac l     F .text	0000006a __sbprintf
0800ce38 l     O .rodata	00000010 blanks.1
0800ce48 l     O .rodata	00000010 zeroes.0
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 assert.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
0800638c l     F .text	00000062 _fclose_r.part.0
00000000 l    df *ABS*	00000000 fiprintf.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 locale.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 lib_a-strcmp.o
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_unorddf2.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 getpid.c
00000000 l    df *ABS*	00000000 kill.c
00000000 l    df *ABS*	00000000 _exit.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 mytest.c
00000000 l    df *ABS*	00000000 pt_hook.c
00000000 l    df *ABS*	00000000 monitor.c
00000000 l    df *ABS*	00000000 parser.c
20000c78 l     O .bss	00000004 count.3
20000d1c l     O .bss	00000004 saved.1
200009b8 l     O .data	00000004 buf.2
200009bc l     O .data	00000004 printPrompt.4
0800d297 l     O .rodata	00000006 __FUNCTION__.0
00000000 l    df *ABS*	00000000 dump.c
20000d20 l     O .bss	00000004 address.1
200009c0 l     O .data	00000004 count.0
00000000 l    df *ABS*	00000000 syscall.c
20000d24 l     O .bss	00000004 heap_end.0
00000000 l    df *ABS*	00000000 terminal.c
08007fd0 l     F .text	0000007c USBD_CDC_DataIn
20000d28 l     O .bss	00000124 TerminalState
00000000 l    df *ABS*	00000000 decoder.c
08008324 l     F .text	0000007c Uncompress
20001074 l     O .bss	00000014 buf.0
00000000 l    df *ABS*	00000000 system_stm32f3xx.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal_rcc.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal.c
20001088 l     O .bss	00000004 uwTick
00000000 l    df *ABS*	00000000 stm32f3xx_hal_cortex.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal_gpio.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal_pcd.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal_pcd_ex.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal_i2c.c
0800a290 l     F .text	0000002a I2C_TransferConfig
0800a2ba l     F .text	00000098 I2C_IsAcknowledgeFailed
0800a352 l     F .text	00000054 I2C_WaitOnTXISFlagUntilTimeout
0800a3a6 l     F .text	00000064 I2C_WaitOnFlagUntilTimeout
0800a40a l     F .text	00000066 I2C_RequestMemoryWrite
0800a470 l     F .text	00000064 I2C_RequestMemoryRead
0800a4d4 l     F .text	00000050 I2C_WaitOnSTOPFlagUntilTimeout
00000000 l    df *ABS*	00000000 stm32f3xx_hal_spi.c
0800a7fe l     F .text	00000094 SPI_WaitFifoStateUntilTimeout
0800a892 l     F .text	00000082 SPI_WaitFlagStateUntilTimeout
0800a914 l     F .text	0000004c SPI_EndRxTxTransaction
00000000 l    df *ABS*	00000000 usbd_core.c
00000000 l    df *ABS*	00000000 usbd_ctlreq.c
0800aeb0 l     F .text	00000016 USBD_CtlError.constprop.0
2000108c l     O .bss	00000001 cfgidx.0
00000000 l    df *ABS*	00000000 usbd_ioreq.c
00000000 l    df *ABS*	00000000 usbd_cdc.c
0800b27a l     F .text	00000012 USBD_CDC_DataIn
0800b28c l     F .text	00000028 USBD_CDC_EP0_RxReady
0800b2b4 l     F .text	0000000c USBD_CDC_GetFSCfgDesc
0800b2c0 l     F .text	0000000c USBD_CDC_GetHSCfgDesc
0800b2cc l     F .text	0000000c USBD_CDC_GetOtherSpeedCfgDesc
0800b2e4 l     F .text	0000002e USBD_CDC_DataOut
0800b312 l     F .text	00000056 USBD_CDC_Setup
0800b368 l     F .text	0000003a USBD_CDC_DeInit
0800b3a2 l     F .text	0000008c USBD_CDC_Init
20000a88 l     O .data	0000000a USBD_CDC_DeviceQualifierDesc
00000000 l    df *ABS*	00000000 usbd_conf.c
20001208 l     O .bss	00000230 mem.0
00000000 l    df *ABS*	00000000 usbd_desc.c
0800b6e8 l     F .text	0000002a IntToUnicode
00000000 l    df *ABS*	00000000 usbd_cdc_interface.c
0800b7c0 l     F .text	00000004 CDC_Itf_DeInit
0800b7c4 l     F .text	00000048 CDC_Itf_Control
0800b80c l     F .text	0000001c CDC_Itf_Receive
0800b828 l     F .text	00000018 CDC_Itf_Init
00000000 l    df *ABS*	00000000 stm32f3_discovery.c
0800b840 l     F .text	00000088 SPIx_Init
0800b8c8 l     F .text	00000040 SPIx_WriteRead
0800b908 l     F .text	00000074 I2Cx_Init
20001d38 l     O .bss	00000038 I2cHandle
20001d70 l     O .bss	00000060 SpiHandle
00000000 l    df *ABS*	00000000 stm32f3_discovery_accelerometer.c
20001dd0 l     O .bss	00000004 AccelerometerDrv
00000000 l    df *ABS*	00000000 stm32f3_discovery_gyroscope.c
20001dd4 l     O .bss	00000004 GyroscopeDrv
00000000 l    df *ABS*	00000000 lsm303dlhc.c
00000000 l    df *ABS*	00000000 l3gd20.c
00000000 l    df *ABS*	00000000 i3g4250d.c
00000000 l    df *ABS*	00000000 lsm303agr.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0800c720 l     F .text	00000014 register_fini
00000000 l    df *ABS*	00000000 crti.o
00000000 l    df *ABS*	00000000 crtn.o
00000000 l    df *ABS*	00000000 STM32F30x_decoder.c
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 impure.c
20000010 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
0801c1f8 l       .fini_array	00000000 __fini_array_end
0801c1f4 l       .fini_array	00000000 __fini_array_start
0801c1f4 l       .init_array	00000000 __init_array_end
0801c1ec l       .init_array	00000000 __preinit_array_end
0801c1ec l       .init_array	00000000 __init_array_start
0801c1ec l       .init_array	00000000 __preinit_array_start
0800c71c  w    F .text	00000002 RTC_Alarm_IRQHandler
080188dc g     O .rodata	00000008 RTC_BKP19R_fields
0801c01c g     O .rodata	00000010 APBAHBPrescTable
0801a784 g     O .rodata	00000050 TIM2_SR_fields
08010c2c g     O .rodata	00000100 CAN_F10R1_fields
080198f4 g     O .rodata	00000008 TIM16_DMAR_fields
0800046c g     F .text	00000010 putchar
0800c71c  w    F .text	00000002 TIM8_TRG_COM_IRQHandler
08004eb4 g     F .text	00000040 _mprec_log10
0801750c g     O .rodata	00000008 I2C1_RXDR_fields
080075a8 g     F .text	0000002c .hidden __aeabi_dcmpun
0800be0c g     F .text	00000020 LSM303DLHC_AccFilterCmd
0800c71c  w    F .text	00000002 TIM8_CC_IRQHandler
0801a92c g     O .rodata	00000030 TIM6_CR1_fields
080173f4 g     O .rodata	00000048 I2C1_ICR_fields
08004f50 g     F .text	00000064 __any_on
08007fc8 g     F .text	00000004 _isatty_r
0800cde8 g     O .rodata	00000028 __mprec_tinytens
20000ccc g     O .bss	00000050 input_b
0800756c g     F .text	00000012 .hidden __aeabi_dcmple
0801a734 g     O .rodata	00000008 TIM2_PSC_fields
08019afc g     O .rodata	00000028 TIM17_CCMR1_Output_fields
080006b4 g     F .text	000000ba strcpy
08015104 g     O .rodata	00000050 COMP_COMP5_CSR_fields
08007928 g     F .text	00000010 _getpid
08017564 g     O .rodata	00000008 I2C1_TXDR_fields
0800047c g     F .text	00000068 _puts_r
0800b788 g     F .text	0000001c USBD_VCP_ConfigStrDescriptor
08011e2c g     O .rodata	00000100 CAN_F19R1_fields
080074a8 g     F .text	0000007a .hidden __cmpdf2
080083f4 g     F .text	00000054 DecodeWriteRegister
0800a164 g     F .text	000000bc HAL_PCD_EP_ClrStall
08019824 g     O .rodata	00000008 TIM16_CCR1_fields
0800c71c  w    F .text	00000002 DebugMon_Handler
08007fcc g     F .text	00000004 _lseek_r
0801646c g     O .rodata	00000020 FPU_MVFR1_fields
0800b582 g     F .text	0000001a HAL_PCD_ResetCallback
0800a256 g     F .text	0000001c PCD_WritePMA
0801262c g     O .rodata	00000100 CAN_F22R1_fields
0801422c g     O .rodata	000000e0 CAN_FA1R_fields
20000e50 g     O .bss	00000224 hUSBDDevice
0801a73c g     O .rodata	00000048 TIM2_SMCR_fields
08017854 g     O .rodata	00000020 NVIC_IPR1_fields
0801ce4c g     O .parsetable	0000000c CmdTestE
080074a8 g     F .text	0000007a .hidden __eqdf2
0801142c g     O .rodata	00000100 CAN_F14R1_fields
0801ae7c g     O .rodata	00000008 TIM8_PSC_fields
0800c282 g     F .text	0000001c I3G4250D_ReadID
080195b4 g     O .rodata	00000030 TIM15_EGR_fields
0800804c g     F .text	0000004c CmdStats
0800c0e6 g     F .text	0000002e L3GD20_FilterConfig
0800a220 g     F .text	00000036 HAL_PCDEx_PMAConfig
0801a7d4 g     O .rodata	00000140 TIM2_registers
08019554 g     O .rodata	00000058 TIM15_DIER_fields
080158b4 g     O .rodata	00000008 DMA1_CMAR3_fields
08016774 g     O .rodata	00000100 GPIOA_BSRR_fields
08015844 g     O .rodata	00000060 DMA1_CCR7_fields
08009894 g     F .text	000001b8 HAL_PCD_EP_Close
0801b394 g     O .rodata	00000008 TSC_IOG6CR_fields
08010764 g     O .rodata	00000028 ADC1_SQR1_fields
080008d0 g     F .text	00000006 strtok_r
08007018 g     F .text	0000005a .hidden __floatdidf
080144dc g     O .rodata	000000e0 CAN_FS1R_fields
08006ccc g     F .text	0000002c _kill_r
08019ef4 g     O .rodata	00000030 TIM1_CCMR2_Input_fields
08018b1c g     O .rodata	00000010 RTC_SHIFTR_fields
0800043c g     F .text	00000028 printf
0800c06a g     F .text	00000040 L3GD20_EnableIT
08014924 g     O .rodata	00000028 CAN_TI1R_fields
0800acea g     F .text	00000016 USBD_SetClassConfig
08017794 g     O .rodata	00000020 NVIC_IPR14_fields
0800697c g     F .text	0000003c _wcrtomb_r
0800c71c  w    F .text	00000002 TIM1_CC_IRQHandler
08009298 g     F .text	00000068 HAL_NVIC_SetPriority
08006a74 g     F .text	0000004c _signal_r
0801081c g     O .rodata	000001b0 ADC1_registers
0800b56a g     F .text	00000010 HAL_PCD_DataInStageCallback
0801a674 g     O .rodata	00000018 TIM2_CR2_fields
080165ec g     O .rodata	00000008 Flash_WRPR_fields
080054ac g     F .text	00000020 __sseek
08003508 g     F .text	00000008 __sinit
08015664 g     O .rodata	00000060 DMA1_CCR2_fields
08006218 g     F .text	000000b0 __swbuf_r
0800c71c  w    F .text	00000002 HardFault_Handler
0801b42c g     O .rodata	00000100 TSC_IOHCR_fields
0801526c g     O .rodata	00000020 CRC_CR_fields
080065bc g     F .text	00000040 _setlocale_r
0800341c g     F .text	0000002e __sfmoreglue
08017994 g     O .rodata	00000008 NVIC_ISER0_fields
08004510 g     F .text	00000002 __malloc_unlock
080193a4 g     O .rodata	00000008 TIM15_ARR_fields
0801890c g     O .rodata	00000008 RTC_BKP24R_fields
00000400 g       *ABS*	00000000 _Min_Stack_Size
08019fe4 g     O .rodata	00000008 TIM1_CCR3_fields
0801a174 g     O .rodata	00000008 TIM1_DMAR_fields
080194ac g     O .rodata	00000008 TIM15_CCR1_fields
0800c71c  w    F .text	00000002 USB_HP_IRQHandler
0801ba7c g     O .rodata	00000010 USART1_RTOR_fields
0801825c g     O .rodata	00000070 RCC_AHBENR_fields
0801a614 g     O .rodata	00000018 TIM2_CNT_fields
0801756c g     O .rodata	000000b0 I2C1_registers
08007af0 g     F .text	0000000e SysTick_Handler
08018c64 g     O .rodata	00000008 RTC_WPR_fields
08018b2c g     O .rodata	00000008 RTC_SSR_fields
080094d4 g     F .text	0000000a HAL_GPIO_WritePin
0801b374 g     O .rodata	00000008 TSC_IOG2CR_fields
0800b486 g     F .text	0000002e USBD_CDC_ReceivePacket
0800c71c  w    F .text	00000002 PVD_IRQHandler
08015944 g     O .rodata	00000008 DMA1_CPAR7_fields
0800bdd0 g     F .text	0000001c LSM303DLHC_AccRebootCmd
0801a91c g     O .rodata	00000010 TIM6_CNT_fields
0801a0fc g     O .rodata	00000078 TIM1_DIER_fields
0800b57a g     F .text	00000008 HAL_PCD_SOFCallback
080176d4 g     O .rodata	00000008 NVIC_ICPR0_fields
08004414 g     F .text	000000f8 memmove
0800c71c  w    F .text	00000002 TAMP_STAMP_IRQHandler
0800bac0 g     F .text	00000060 GYRO_IO_Init
08017894 g     O .rodata	00000020 NVIC_IPR2_fields
0801c1f8 g       *ABS*	00000000 _sidata
080034f4 g     F .text	00000014 _cleanup
080091b4 g     F .text	00000038 HAL_RCC_GetHCLKFreq
0800c71c  w    F .text	00000002 PendSV_Handler
0801ce40 g     O .parsetable	0000000c CmdButtonE
080176dc g     O .rodata	00000008 NVIC_ICPR1_fields
0800c71c  w    F .text	00000002 NMI_Handler
08009300 g     F .text	00000018 HAL_NVIC_EnableIRQ
08004514 g     F .text	0000004c _Balloc
0801c1ec g       .ARM	00000000 __exidx_end
0800086c g     F .text	00000064 __strtok_r
0800c71c  w    F .text	00000002 EXTI3_IRQHandler
08009148 g     F .text	0000006c HAL_RCC_GetSysClockFreq
0800ba04 g     F .text	0000001c BSP_LED_Off
080158fc g     O .rodata	00000008 DMA1_CNDTR5_fields
0801aa74 g     O .rodata	00000098 TIM8_CCER_fields
08013f2c g     O .rodata	00000100 CAN_F8R2_fields
08007498 g     F .text	0000008a .hidden __gtdf2
0801ceb8 g       .parsetable	00000000 _parsetable_end
080182cc g     O .rodata	00000048 RCC_AHBRSTR_fields
080002f8 g     F .text	0000000c __errno
0801896c g     O .rodata	00000008 RTC_BKP6R_fields
0801494c g     O .rodata	00000028 CAN_TI2R_fields
0800aec8 g     F .text	000001f4 USBD_StdDevReq
0800c3a4 g     F .text	0000002e I3G4250D_FilterConfig
0800a526 g     F .text	00000090 HAL_I2C_Init
08003b6c g     F .text	00000004 __localeconv_l
080179a4 g     O .rodata	00000008 NVIC_ISER2_fields
0801cea0 g     O .parsetable	0000000c CmdWE
0800a5b6  w    F .text	00000002 HAL_I2C_MspDeInit
080146c4 g     O .rodata	00000020 CAN_RDH0R_fields
0801640c g     O .rodata	00000020 FPU_FPDSCR_fields
0800c3d2 g     F .text	0000002e I3G4250D_FilterCmd
0800b6d0 g     F .text	0000000c USBD_VCP_DeviceDescriptor
080091ec  w    F .text	00000002 HAL_MspInit
08010b2c g     O .rodata	00000100 CAN_F0R2_fields
0801b3a4 g     O .rodata	00000008 TSC_IOG8CR_fields
0800b668 g     F .text	00000026 USBD_LL_IsStallEP
08010a2c g     O .rodata	00000100 CAN_F0R1_fields
080195f4 g     O .rodata	00000020 TIM15_SMCR_fields
0800b61c g     F .text	0000000e USBD_LL_Start
0800bc10 g     F .text	00000048 COMPASSACCELERO_IO_ITConfig
0800bcd4 g     F .text	00000040 BSP_ACCELERO_Init
0800ace0 g     F .text	0000000a USBD_Start
08007fbe g     F .text	0000000a _fstat_r
080094de g     F .text	00000008 HAL_GPIO_TogglePin
0801acd4 g     O .rodata	00000048 TIM8_CR1_fields
20000c74 g     O .bss	00000004 errno
08016504 g     O .rodata	00000008 Flash_AR_fields
0801322c g     O .rodata	00000100 CAN_F2R1_fields
080150ac g     O .rodata	00000058 COMP_COMP4_CSR_fields
08016cac g     O .rodata	00000040 GPIOB_AFRH_fields
08005468 g     F .text	00000004 __seofread
0800c74c g       .text	00000000 _etext
080160dc g     O .rodata	00000010 EXTI_PR2_fields
0801bb8c g     O .rodata	00000028 USB_FS_FNR_fields
20000c24 g       .bss	00000000 _sbss
080151fc g     O .rodata	00000070 COMP_registers
0801372c g     O .rodata	00000100 CAN_F4R2_fields
0800b6cc g     F .text	00000002 USBD_static_free
080158a4 g     O .rodata	00000008 DMA1_CMAR1_fields
0801a69c g     O .rodata	00000060 TIM2_DIER_fields
08007534 g     F .text	00000010 .hidden __aeabi_cdcmple
0801b36c g     O .rodata	00000008 TSC_IOG1CR_fields
08019ac4 g     O .rodata	00000020 TIM17_CCER_fields
0801ae84 g     O .rodata	00000008 TIM8_RCR_fields
0801982c g     O .rodata	00000010 TIM16_CNT_fields
08016dac g     O .rodata	00000100 GPIOB_BSRR_fields
0801192c g     O .rodata	00000100 CAN_F16R2_fields
08010674 g     O .rodata	00000018 ADC1_OFR1_fields
08012b2c g     O .rodata	00000100 CAN_F24R2_fields
08018904 g     O .rodata	00000008 RTC_BKP23R_fields
080194b4 g     O .rodata	00000008 TIM15_CCR2_fields
0801046c g     O .rodata	00000098 ADC1_CFGR_fields
080188ac g     O .rodata	00000008 RTC_BKP13R_fields
0800acd2 g     F .text	0000000e USBD_RegisterClass
0801222c g     O .rodata	00000100 CAN_F20R1_fields
0801b93c g     O .rodata	00000060 USART1_ICR_fields
08012d2c g     O .rodata	00000100 CAN_F25R2_fields
0801b384 g     O .rodata	00000008 TSC_IOG4CR_fields
0801312c g     O .rodata	00000100 CAN_F27R2_fields
0801aed4 g     O .rodata	00000078 TIM8_SR_fields
0801bbb4 g     O .rodata	00000050 USB_FS_ISTR_fields
080158ac g     O .rodata	00000008 DMA1_CMAR2_fields
0801891c g     O .rodata	00000008 RTC_BKP26R_fields
0801078c g     O .rodata	00000028 ADC1_SQR2_fields
08019b2c g     O .rodata	00000010 TIM17_CNT_fields
0801bfe4 g     O .rodata	00000008 WWDG_SR_fields
08009340 g     F .text	00000188 HAL_GPIO_Init
080162ac g     O .rodata	000000c0 EXTI_registers
0800ae92 g     F .text	00000006 USBD_LL_SetSpeed
20000b28 g     O .data	00000004 BUTTON_PORT
0800bd14 g     F .text	00000010 BSP_ACCELERO_GetXYZ
080176ec g     O .rodata	00000008 NVIC_ICTR_fields
0801a914 g     O .rodata	00000008 TIM6_ARR_fields
08014974 g     O .rodata	000000b0 CAN_TSR_fields
08000280 g     F .text	0000006c add_test
08007e84 g     F .text	000000b0 DumpBuffer
08000464 g     F .text	00000006 _putchar_r
08016874 g     O .rodata	00000080 GPIOA_IDR_fields
0801bd5c g     O .rodata	00000050 USB_FS_USB_EP3R_fields
0800b59e g     F .text	00000002 HAL_PCD_ResumeCallback
080042e0 g     F .text	00000134 memcpy
08007524 g     F .text	00000020 .hidden __aeabi_cdrcmple
08013d2c g     O .rodata	00000100 CAN_F7R2_fields
0801a01c g     O .rodata	00000010 TIM1_CNT_fields
0800bb20 g     F .text	00000044 GYRO_IO_Write
080004f4 g     F .text	00000174 setvbuf
0800794c g     F .text	0000005c CmdLED
20000c24 g     O .data	00000000 .hidden __TMC_END__
0801a22c g     O .rodata	00000078 TIM1_SR_fields
08017774 g     O .rodata	00000020 NVIC_IPR13_fields
080195e4 g     O .rodata	00000008 TIM15_PSC_fields
0800b0ec g     F .text	000000ae USBD_StdEPReq
08003334 g     F .text	0000000c _cleanup_r
08016674 g     O .rodata	00000040 GPIOA_AFRH_fields
08006fa0 g     F .text	00000022 .hidden __floatsidf
0800c4f2 g     F .text	00000020 LSM303AGR_AccInit
080153ac g     O .rodata	00000010 DAC_DHR12RD_fields
08015004 g     O .rodata	00000058 COMP_COMP2_CSR_fields
0801ada4 g     O .rodata	00000078 TIM8_DIER_fields
08010554 g     O .rodata	00000010 ADC1_DIFSEL_fields
080074a0 g     F .text	00000082 .hidden __ltdf2
0800ba38 g     F .text	00000074 BSP_PB_Init
0800c71c  w    F .text	00000002 USB_HP_CAN_TX_IRQHandler
0800c71c  w    F .text	00000002 EXTI0_IRQHandler
0801ae6c g     O .rodata	00000010 TIM8_OR_fields
0800c71c  w    F .text	00000002 I2C2_EV_IRQHandler
080147f4 g     O .rodata	00000020 CAN_TDH0R_fields
0801bdac g     O .rodata	00000050 USB_FS_USB_EP4R_fields
08007624 g     F .text	00000000 .hidden __aeabi_uldivmod
0801bfec g     O .rodata	00000030 WWDG_registers
08019c2c g     O .rodata	00000008 TIM17_RCR_fields
080004e4 g     F .text	00000010 puts
0800b24e g     F .text	00000016 USBD_CtlSendStatus
0800c71c  w    F .text	00000002 FPU_IRQHandler
08009258  w    F .text	0000001a HAL_Delay
0800b0bc g     F .text	00000030 USBD_StdItfReq
0801ac94 g     O .rodata	00000008 TIM8_CCR4_fields
200009c4 g     O .data	00000004 SystemCoreClock
08019654 g     O .rodata	00000120 TIM15_registers
08009b24 g     F .text	00000116 HAL_PCD_EP_Transmit
08000260 g     F .text	00000012 my_Tick
08004e58 g     F .text	0000005c __ratio
0801342c g     O .rodata	00000100 CAN_F3R1_fields
0800b19a g     F .text	00000028 USBD_ParseSetupRequest
0801a5d4 g     O .rodata	00000010 TIM2_CCR1_fields
080153fc g     O .rodata	00000010 DAC_SWTRIGR_fields
0800c71c  w    F .text	00000002 TIM1_UP_TIM16_IRQHandler
0801122c g     O .rodata	00000100 CAN_F13R1_fields
08003cc0 g     F .text	00000010 malloc
0801762c g     O .rodata	00000008 IWDG_RLR_fields
0800041c g     F .text	0000001e _printf_r
0800a272 g     F .text	0000001c PCD_ReadPMA
08006ac0 g     F .text	00000056 _raise_r
080079d0 g     F .text	0000004c CmdGyro
080062e0 g     F .text	00000040 __assert_func
080144cc g     O .rodata	00000010 CAN_FMR_fields
0800cd20 g     O .rodata	000000c8 __mprec_tens
08017e2c g     O .rodata	00000040 OPAMP_registers
080158f4 g     O .rodata	00000008 DMA1_CNDTR4_fields
080176ac g     O .rodata	00000008 NVIC_IABR1_fields
0801041c g     O .rodata	00000030 ADC1_2_registers
20000af4 g     O .data	0000001c VCP_Desc
0801600c g     O .rodata	000000d0 EXTI_PR1_fields
0800c560 g     F .text	00000020 LSM303AGR_AccFilterCmd
0800c71c  w    F .text	00000002 UsageFault_Handler
0801ac9c g     O .rodata	00000020 TIM8_CCR5_fields
0800c71c  w    F .text	00000002 ADC1_2_IRQHandler
20000c40 g     O .bss	00000004 __malloc_top_pad
20000c7c g     O .bss	00000050 input
08006cf8 g     F .text	00000004 _getpid_r
0801362c g     O .rodata	00000100 CAN_F4R1_fields
0801080c g     O .rodata	00000010 ADC1_TR3_fields
0801591c g     O .rodata	00000008 DMA1_CPAR2_fields
0800bf76 g     F .text	00000002 L3GD20_DeInit
20000c24 g       .bss	00000000 __bss_start__
080198ac g     O .rodata	00000048 TIM16_DIER_fields
080094c8 g     F .text	0000000c HAL_GPIO_ReadPin
080176cc g     O .rodata	00000008 NVIC_ICER2_fields
08000a30 g     F .text	00000018 strtoul
08006f80 g     F .text	0000001e .hidden __aeabi_ui2d
08003b70 g     F .text	00000008 _localeconv_r
0800c236 g     F .text	00000034 I3G4250D_Init
0801ac7c g     O .rodata	00000008 TIM8_CCR1_fields
0801412c g     O .rodata	00000100 CAN_F9R2_fields
08015384 g     O .rodata	00000008 DAC_DHR12L2_fields
08004770 g     F .text	0000005c __i2b
080037f4 g     F .text	000002f0 __sfvwrite_r
0800ae98 g     F .text	00000018 USBD_LL_SOF
08006b18 g     F .text	00000064 __sigtramp_r
20000000 g       .data	00000000 _sdata
0800c71c  w    F .text	00000002 SPI1_IRQHandler
080148fc g     O .rodata	00000028 CAN_TI0R_fields
0800c71c  w    F .text	00000002 CAN_SCE_IRQHandler
08007654 g     F .text	000002d0 .hidden __udivmoddi4
08006cfc g     F .text	00000000 .hidden __aeabi_drsub
0801071c g     O .rodata	00000048 ADC1_SMPR2_fields
080178d4 g     O .rodata	00000020 NVIC_IPR4_fields
08007f88 g     F .text	00000030 _sbrk_r
0800c4f0 g     F .text	00000002 LSM303AGR_AccDeInit
08017814 g     O .rodata	00000020 NVIC_IPR18_fields
0800c26a g     F .text	00000018 I3G4250D_LowPower
0800b4b4 g     F .text	00000098 HAL_PCD_MspInit
0801a964 g     O .rodata	00000010 TIM6_DIER_fields
08019e94 g     O .rodata	00000060 TIM1_CCMR1_Output_fields
0801b99c g     O .rodata	000000b0 USART1_ISR_fields
0800c71c  w    F .text	00000002 TIM6_DAC_IRQHandler
0801738c g     O .rodata	00000068 I2C1_CR2_fields
0801ac84 g     O .rodata	00000008 TIM8_CCR2_fields
0800a0c4 g     F .text	000000a0 HAL_PCD_EP_SetStall
08008160 g     F .text	0000000a _read_r
0801a1e4 g     O .rodata	00000048 TIM1_SMCR_fields
080109fc g     O .rodata	00000030 CAN_ESR_fields
0800aca8 g     F .text	0000002a USBD_Init
08016d2c g     O .rodata	00000080 GPIOB_BRR_fields
20001090 g     O .bss	00000178 hpcd
08007558 g     F .text	00000012 .hidden __aeabi_dcmplt
080063f0 g     F .text	00000034 _fclose_r
0801068c g     O .rodata	00000018 ADC1_OFR2_fields
0801a444 g     O .rodata	00000010 TIM2_ARR_fields
080032e0 g     F .text	00000050 fflush
0800bbac g     F .text	00000064 COMPASSACCELERO_IO_Init
20000c6c g     O .bss	00000004 __malloc_max_sbrked_mem
0800c234 g     F .text	00000002 I3G4250D_DeInit
0801402c g     O .rodata	00000100 CAN_F9R1_fields
08018a4c g     O .rodata	00000038 RTC_DR_fields
08019fd4 g     O .rodata	00000008 TIM1_CCR1_fields
08009318 g     F .text	00000028 HAL_SYSTICK_Config
08006fc4 g     F .text	00000042 .hidden __extendsfdf2
080165c4 g     O .rodata	00000008 Flash_OPTKEYR_fields
080106bc g     O .rodata	00000018 ADC1_OFR4_fields
20000e4c g     O .bss	00000004 USBDDataIn
080072c8 g     F .text	000001d0 .hidden __aeabi_ddiv
0800c71c  w    F .text	00000002 TIM8_UP_IRQHandler
20000ad7 g     O .data	0000001a USBD_StringSerial
08012c2c g     O .rodata	00000100 CAN_F25R1_fields
080190b4 g     O .rodata	00000018 SPI1_I2SPR_fields
0801061c g     O .rodata	00000008 ADC1_JDR1_fields
0801761c g     O .rodata	00000008 IWDG_KR_fields
0801bc6c g     O .rodata	00000050 USB_FS_USB_EP0R_fields
08006d08 g     F .text	00000276 .hidden __adddf3
0800bc58 g     F .text	0000003c COMPASSACCELERO_IO_Write
0801292c g     O .rodata	00000100 CAN_F23R2_fields
080152ac g     O .rodata	00000050 CRC_registers
0801b75c g     O .rodata	000000a0 USART1_CR1_fields
08018c74 g     O .rodata	00000320 RTC_registers
0801392c g     O .rodata	00000100 CAN_F5R2_fields
08019b74 g     O .rodata	00000028 TIM17_CR2_fields
08004cc8 g     F .text	000000c0 __b2d
0801c1e4 g       .ARM	00000000 __exidx_start
080197e4 g     O .rodata	00000018 TIM16_CCMR1_Input_fields
08016564 g     O .rodata	00000008 Flash_KEYR_fields
08007074 g     F .text	00000254 .hidden __aeabi_dmul
0800bf5a g     F .text	0000001c LSM303DLHC_AccZClickITConfig
0801abcc g     O .rodata	00000060 TIM8_CCMR2_Output_fields
08017ea4 g     O .rodata	00000028 PWR_CSR_fields
080187fc g     O .rodata	00000010 RTC_ALRMASSR_fields
20000a94 g     O .data	00000043 USBD_CDC_OtherSpeedCfgDesc
080192d4 g     O .rodata	00000020 SYSCFG_EXTICR4_fields
080176a4 g     O .rodata	00000008 NVIC_IABR0_fields
0800cce8 g     O .rodata	00000004 _global_impure_ptr
0801642c g     O .rodata	00000040 FPU_MVFR0_fields
0801992c g     O .rodata	00000008 TIM16_RCR_fields
0800506c g     F .text	000003d8 _realloc_r
08000330 g     F .text	00000048 __libc_init_array
0800b23e g     F .text	00000010 USBD_CtlContinueRx
080188a4 g     O .rodata	00000008 RTC_BKP12R_fields
0801b92c g     O .rodata	00000010 USART1_GTPR_fields
080095b0 g     F .text	000002e4 HAL_PCD_EP_Open
0800c71c  w    F .text	00000002 DMA2_Channel2_IRQHandler
0800c71c  w    F .text	00000002 DMA1_Channel4_IRQHandler
0801a1c4 g     O .rodata	00000010 TIM1_OR_fields
080171b4 g     O .rodata	00000080 GPIOB_PUPDR_fields
08009c3c g     F .text	00000486 HAL_PCD_IRQHandler
08007be8 g     F .text	00000020 CmdR
0800654c g     F .text	00000026 _fputwc_r
0800ce10 g     O .rodata	00000028 __mprec_bigtens
08019fec g     O .rodata	00000008 TIM1_CCR4_fields
0800461c g     F .text	000000b4 __s2b
08006a34 g     F .text	0000000e abort
08006f80 g     F .text	0000001e .hidden __floatunsidf
08014874 g     O .rodata	00000020 CAN_TDL1R_fields
08004ad8 g     F .text	00000042 __mcmp
08017934 g     O .rodata	00000020 NVIC_IPR7_fields
0800c114 g     F .text	0000002e L3GD20_FilterCmd
08019bf4 g     O .rodata	00000008 TIM17_DMAR_fields
0800a5b8 g     F .text	0000002e HAL_I2C_DeInit
080194bc g     O .rodata	00000010 TIM15_CNT_fields
08003520 g     F .text	00000014 __fp_lock_all
0800a962 g     F .text	000000a4 HAL_SPI_Init
08018894 g     O .rodata	00000008 RTC_BKP10R_fields
0801467c g     O .rodata	00000048 CAN_MSR_fields
080186bc g     O .rodata	000000d0 RCC_registers
0800c734 g     F .text	00000000 _init
08014854 g     O .rodata	00000020 CAN_TDL0R_fields
080153c4 g     O .rodata	00000008 DAC_DHR8R2_fields
0801838c g     O .rodata	00000090 RCC_APB1RSTR_fields
0800bd8c g     F .text	00000010 BSP_GYRO_GetXYZ
0801888c g     O .rodata	00000008 RTC_BKP0R_fields
08014a24 g     O .rodata	00000590 CAN_registers
0801ce1c g       .parsetable	00000000 _parsetable_start
08015784 g     O .rodata	00000060 DMA1_CCR5_fields
0801897c g     O .rodata	00000008 RTC_BKP8R_fields
0800c2ca g     F .text	0000005e I3G4250D_INT1InterruptConfig
0801b63c g     O .rodata	00000110 TSC_registers
0801a544 g     O .rodata	00000030 TIM2_CCMR2_Input_fields
0800b64c g     F .text	0000000e USBD_LL_StallEP
080176c4 g     O .rodata	00000008 NVIC_ICER1_fields
080198fc g     O .rodata	00000028 TIM16_EGR_fields
0801ce88 g     O .parsetable	0000000c CmdRE
0800a960  w    F .text	00000002 HAL_SPI_MspInit
08013e2c g     O .rodata	00000100 CAN_F8R1_fields
0800c71c  w    F .text	00000002 USART3_IRQHandler
0801242c g     O .rodata	00000100 CAN_F21R1_fields
0801866c g     O .rodata	00000050 RCC_CSR_fields
0800b714 g     F .text	0000003c USBD_VCP_SerialStrDescriptor
08016afc g     O .rodata	00000080 GPIOA_OTYPER_fields
0801538c g     O .rodata	00000010 DAC_DHR12LD_fields
08019934 g     O .rodata	00000030 TIM16_SR_fields
0801a2a4 g     O .rodata	000001a0 TIM1_registers
08000304 g     F .text	0000002c __libc_fini_array
0801063c g     O .rodata	00000038 ADC1_JSQR_fields
0800c400 g     F .text	000000f0 I3G4250D_ReadXYZAngRate
20001dd8 g       .bss	00000000 _ebss
08007b00 g     F .text	00000030 CmdTest
0800bc94 g     F .text	00000040 COMPASSACCELERO_IO_Read
20000b88 g     O .data	00000034 L3gd20Drv
0801636c g     O .rodata	00000050 FPU_CPACR_fields
0800c71c  w    F .text	00000002 DMA1_Channel7_IRQHandler
08014894 g     O .rodata	00000020 CAN_TDL2R_fields
0800a6ea g     F .text	0000010e HAL_I2C_Mem_Read
080166b4 g     O .rodata	00000040 GPIOA_AFRL_fields
0800c6cc  w    F .text	00000038 Reset_Handler
20000a00 g     O .data	00000043 USBD_CDC_CfgFSDesc
08018934 g     O .rodata	00000008 RTC_BKP29R_fields
0800bd24 g     F .text	00000068 BSP_GYRO_Init
080176f4 g     O .rodata	00000020 NVIC_IPR0_fields
080169fc g     O .rodata	00000080 GPIOA_ODR_fields
080046d0 g     F .text	00000040 __hi0bits
080177b4 g     O .rodata	00000020 NVIC_IPR15_fields
08019fdc g     O .rodata	00000008 TIM1_CCR2_fields
080160ec g     O .rodata	000000d0 EXTI_RTSR1_fields
080153e4 g     O .rodata	00000008 DAC_DOR2_fields
0801528c g     O .rodata	00000008 CRC_DR_fields
080075d4 g     F .text	0000004e .hidden __fixdfsi
080170b4 g     O .rodata	00000080 GPIOB_OSPEEDR_fields
0801ce7c g     O .parsetable	0000000c CmdLEDE
0800c71c  w    F .text	00000002 UART5_IRQHandler
080084f8 g     F .text	00000054 DecodePeripheral
08019274 g     O .rodata	00000020 SYSCFG_EXTICR1_fields
08010f2c g     O .rodata	00000100 CAN_F11R2_fields
0800c71c  w    F .text	00000002 ADC3_IRQHandler
08018c2c g     O .rodata	00000038 RTC_TSTR_fields
0801a62c g     O .rodata	00000048 TIM2_CR1_fields
08009218 g     F .text	00000024 HAL_Init
0801212c g     O .rodata	00000100 CAN_F1R2_fields
08004fb4 g     F .text	00000056 _putc_r
0800b224 g     F .text	0000001a USBD_CtlPrepareRx
080188cc g     O .rodata	00000008 RTC_BKP17R_fields
08014724 g     O .rodata	00000020 CAN_RDL1R_fields
0801282c g     O .rodata	00000100 CAN_F23R1_fields
0800aa08 g     F .text	0000002a HAL_SPI_DeInit
0800c71c  w    F .text	00000002 TIM4_IRQHandler
08011c2c g     O .rodata	00000100 CAN_F18R1_fields
0801beec g     O .rodata	000000d0 USB_FS_registers
08006d08 g     F .text	00000276 .hidden __aeabi_dadd
0801ac8c g     O .rodata	00000008 TIM8_CCR3_fields
080074a0 g     F .text	00000082 .hidden __ledf2
0801132c g     O .rodata	00000100 CAN_F13R2_fields
0800d02a g     O .rodata	00000008 LEDs
0801a4b4 g     O .rodata	00000030 TIM2_CCMR1_Input_fields
0801539c g     O .rodata	00000008 DAC_DHR12R1_fields
080174c4 g     O .rodata	00000028 I2C1_OAR1_fields
0800b6c4 g     F .text	00000008 USBD_static_malloc
08014774 g     O .rodata	00000020 CAN_RF0R_fields
0800c71c  w    F .text	00000002 CAN_RX1_IRQHandler
0800c71c  w    F .text	00000002 DMA2_Channel1_IRQHandler
08018974 g     O .rodata	00000008 RTC_BKP7R_fields
08004928 g     F .text	000000c0 __pow5mult
080107ec g     O .rodata	00000010 ADC1_TR1_fields
0801590c g     O .rodata	00000008 DMA1_CNDTR7_fields
08007008 g     F .text	0000006a .hidden __aeabi_ul2d
0800b458 g     F .text	0000002e USBD_CDC_TransmitPacket
20000b2c g     O .data	00000004 I2cxTimeout
0801b38c g     O .rodata	00000008 TSC_IOG5CR_fields
080153a4 g     O .rodata	00000008 DAC_DHR12R2_fields
080188d4 g     O .rodata	00000008 RTC_BKP18R_fields
08000248 g     F .text	00000018 mytest
080158cc g     O .rodata	00000008 DMA1_CMAR6_fields
0801942c g     O .rodata	00000030 TIM15_CCMR1_Input_fields
08007a1c g     F .text	0000002c CmdButton
0800b264 g     F .text	00000016 USBD_CtlReceiveStatus
0801a604 g     O .rodata	00000010 TIM2_CCR4_fields
20001dd8 g       ._user_heap_stack	00000000 end
20000b10 g     O .data	00000008 LineCoding
08018f94 g     O .rodata	00000070 SPI1_CR1_fields
0800c71c  w    F .text	00000002 I2C1_EV_IRQHandler
08019134 g     O .rodata	00000090 SPI1_registers
0800b62a g     F .text	00000014 USBD_LL_OpenEP
0801ad94 g     O .rodata	00000010 TIM8_DCR_fields
080085a0 g     F .text	00000064 DecodePrintRegisters
0801bc04 g     O .rodata	00000068 USB_FS_USB_CNTR_fields
0801ba94 g     O .rodata	000000b0 USART1_registers
0800c0aa g     F .text	0000003c L3GD20_DisableIT
0801ba8c g     O .rodata	00000008 USART1_TDR_fields
08018314 g     O .rodata	00000078 RCC_APB1ENR_fields
0800aa06  w    F .text	00000002 HAL_SPI_MspDeInit
080158e4 g     O .rodata	00000008 DMA1_CNDTR2_fields
080145bc g     O .rodata	00000070 CAN_IER_fields
08015604 g     O .rodata	00000060 DMA1_CCR1_fields
080176bc g     O .rodata	00000008 NVIC_ICER0_fields
0801799c g     O .rodata	00000008 NVIC_ISER1_fields
0800adc8 g     F .text	0000008c USBD_LL_DataInStage
0801894c g     O .rodata	00000008 RTC_BKP31R_fields
0801a17c g     O .rodata	00000048 TIM1_EGR_fields
0801a4e4 g     O .rodata	00000060 TIM2_CCMR1_Output_fields
080153ec g     O .rodata	00000010 DAC_SR_fields
0801a5e4 g     O .rodata	00000010 TIM2_CCR2_fields
0800b5a0 g     F .text	0000007c USBD_LL_Init
08018954 g     O .rodata	00000008 RTC_BKP3R_fields
0800c66a g     F .text	00000044 LSM303AGR_AccClickITEnable
0800b9e8 g     F .text	0000001c BSP_LED_On
0800bf78 g     F .text	00000034 L3GD20_Init
08007594 g     F .text	00000012 .hidden __aeabi_dcmpgt
0800c71c  w    F .text	00000002 DMA1_Channel6_IRQHandler
200009c8 g     O .data	00000038 USBD_CDC
0800ad00 g     F .text	0000000e USBD_ClrClassConfig
08018964 g     O .rodata	00000008 RTC_BKP5R_fields
0800c71c  w    F .text	00000002 UART4_IRQHandler
0800bfac g     F .text	00000018 L3GD20_LowPower
0800c71c  w    F .text	00000002 DMA2_Channel4_IRQHandler
0800b42e g     F .text	0000000e USBD_CDC_RegisterInterface
08003510 g     F .text	00000002 __sfp_lock_acquire
08004240 g     F .text	00000000 memchr
20001dd8 g       .bss	00000000 __bss_end__
080035e8 g     F .text	0000020c _free_r
0800c71c  w    F .text	00000002 TIM3_IRQHandler
0800c71c  w    F .text	00000002 RCC_IRQHandler
0801898c g     O .rodata	00000020 RTC_CALR_fields
080065fc g     F .text	0000000c __locale_mb_cur_max
08007580 g     F .text	00000012 .hidden __aeabi_dcmpge
0801537c g     O .rodata	00000008 DAC_DHR12L1_fields
08019c34 g     O .rodata	00000030 TIM17_SR_fields
20000bbc g     O .data	00000034 I3g4250Drv
00001000 g       *ABS*	00000000 _Min_Heap_Size
08017134 g     O .rodata	00000080 GPIOB_OTYPER_fields
0800c71c  w    F .text	00000002 DMA1_Channel1_IRQHandler
08018984 g     O .rodata	00000008 RTC_BKP9R_fields
0801152c g     O .rodata	00000100 CAN_F14R2_fields
08006d04 g     F .text	0000027a .hidden __aeabi_dsub
0800b558 g     F .text	00000012 HAL_PCD_DataOutStageCallback
0800c71c g       .text	00000002 Default_Handler
20000840 g     O .data	00000004 __malloc_sbrk_base
0800b76c g     F .text	0000001c USBD_VCP_ManufacturerStrDescriptor
0800c540 g     F .text	00000020 LSM303AGR_AccFilterConfig
080168f4 g     O .rodata	00000088 GPIOA_LCKR_fields
08018b34 g     O .rodata	00000090 RTC_TAFCR_fields
20000b18 g     O .data	00000010 USBD_CDC_fops
08016bfc g     O .rodata	000000b0 GPIOA_registers
080179bc g     O .rodata	00000008 NVIC_ISPR2_fields
0800c71c  w    F .text	00000002 USBWakeUp_RMP_IRQHandler
0801a574 g     O .rodata	00000060 TIM2_CCMR2_Output_fields
08016f2c g     O .rodata	00000088 GPIOB_LCKR_fields
0801ad1c g     O .rodata	00000078 TIM8_CR2_fields
08009b14 g     F .text	00000010 HAL_PCD_EP_GetRxCount
080109cc g     O .rodata	00000030 CAN_BTR_fields
08007008 g     F .text	0000006a .hidden __floatundidf
08015724 g     O .rodata	00000060 DMA1_CCR4_fields
08017714 g     O .rodata	00000020 NVIC_IPR10_fields
08019a74 g     O .rodata	00000008 TIM17_ARR_fields
0801112c g     O .rodata	00000100 CAN_F12R2_fields
080049e8 g     F .text	000000f0 __lshift
0801ba54 g     O .rodata	00000028 USART1_RQR_fields
08019bac g     O .rodata	00000048 TIM17_DIER_fields
08006bd8 g     F .text	00000054 signal
080188fc g     O .rodata	00000008 RTC_BKP22R_fields
08014834 g     O .rodata	00000020 CAN_TDH2R_fields
0801a1dc g     O .rodata	00000008 TIM1_RCR_fields
0800b65a g     F .text	0000000e USBD_LL_ClearStallEP
080178f4 g     O .rodata	00000020 NVIC_IPR5_fields
0801656c g     O .rodata	00000058 Flash_OBR_fields
0800c71c  w    F .text	00000002 EXTI15_10_IRQHandler
080148cc g     O .rodata	00000018 CAN_TDT1R_fields
0800c144 g     F .text	000000f0 L3GD20_ReadXYZAngRate
08018bc4 g     O .rodata	00000038 RTC_TR_fields
080177f4 g     O .rodata	00000020 NVIC_IPR17_fields
080020b8 g     F .text	00000068 __register_exitproc
0801650c g     O .rodata	00000058 Flash_CR_fields
080190d4 g     O .rodata	00000058 SPI1_SR_fields
0801bb4c g     O .rodata	00000040 USB_FS_DADDR_fields
0801629c g     O .rodata	00000010 EXTI_SWIER2_fields
08009584 g     F .text	0000002c HAL_PCD_SetAddress
08017834 g     O .rodata	00000020 NVIC_IPR19_fields
0801a984 g     O .rodata	00000008 TIM6_SR_fields
0801202c g     O .rodata	00000100 CAN_F1R1_fields
08019c24 g     O .rodata	00000008 TIM17_PSC_fields
08019294 g     O .rodata	00000020 SYSCFG_EXTICR2_fields
080047cc g     F .text	0000015c __multiply
08019064 g     O .rodata	00000008 SPI1_CRCPR_fields
0800bdec g     F .text	00000020 LSM303DLHC_AccFilterConfig
08007b7c g     F .text	00000050 _pt_A2
08008e98 g     F .text	000002b0 HAL_RCC_ClockConfig
08009274 g     F .text	00000024 HAL_NVIC_SetPriorityGrouping
200009b4 g     O .data	00000004 Commands
080107fc g     O .rodata	00000010 ADC1_TR2_fields
20000c44 g     O .bss	00000028 __malloc_current_mallinfo
0800beda g     F .text	00000020 LSM303DLHC_AccFilterClickCmd
08018c24 g     O .rodata	00000008 RTC_TSSSR_fields
08007d00 g     F .text	0000013c TaskInput
0801a95c g     O .rodata	00000008 TIM6_CR2_fields
0801861c g     O .rodata	00000050 RCC_CR_fields
080143ec g     O .rodata	000000e0 CAN_FM1R_fields
0801a014 g     O .rodata	00000008 TIM1_CCR6_fields
08004d88 g     F .text	000000d0 __d2b
0801b7fc g     O .rodata	00000098 USART1_CR2_fields
08019d6c g     O .rodata	00000060 TIM1_BDTR_fields
08000668 g     F .text	0000004c strcasecmp
0801764c g     O .rodata	00000008 IWDG_WINR_fields
080106d4 g     O .rodata	00000048 ADC1_SMPR1_fields
0800bb64 g     F .text	00000048 GYRO_IO_Read
08000278 g     F .text	00000004 my_Init
080174ec g     O .rodata	00000018 I2C1_OAR2_fields
08007b30 g     F .text	0000004c AddTest
08012e2c g     O .rodata	00000100 CAN_F26R1_fields
08000a14 g     F .text	00000002 _strtoul_r
080152a4 g     O .rodata	00000008 CRC_POL_fields
080158bc g     O .rodata	00000008 DMA1_CMAR4_fields
0800c71c  w    F .text	00000002 TIM7_IRQHandler
0800c00c g     F .text	0000005e L3GD20_INT1InterruptConfig
0800b59c g     F .text	00000002 HAL_PCD_SuspendCallback
08015924 g     O .rodata	00000008 DMA1_CPAR3_fields
080188b4 g     O .rodata	00000008 RTC_BKP14R_fields
0800b2d8 g     F .text	0000000c USBD_CDC_GetDeviceQualifierDescriptor
08007fb8 g     F .text	00000006 _close_r
0801906c g     O .rodata	00000008 SPI1_DR_fields
080184d4 g     O .rodata	00000018 RCC_CFGR2_fields
08006fa0 g     F .text	00000022 .hidden __aeabi_i2d
08019544 g     O .rodata	00000010 TIM15_DCR_fields
080164ec g     O .rodata	00000018 Flash_ACR_fields
08015294 g     O .rodata	00000008 CRC_IDR_fields
20000b54 g     O .data	00000034 Lsm303dlhcDrv
08015934 g     O .rodata	00000008 DMA1_CPAR5_fields
08011d2c g     O .rodata	00000100 CAN_F18R2_fields
08017654 g     O .rodata	00000050 IWDG_registers
0800085c g     F .text	00000010 strtok
0801ce70 g     O .parsetable	0000000c CmdGyroE
08017624 g     O .rodata	00000008 IWDG_PR_fields
08017734 g     O .rodata	00000020 NVIC_IPR11_fields
080151ac g     O .rodata	00000050 COMP_COMP7_CSR_fields
08014794 g     O .rodata	00000020 CAN_RF1R_fields
08008098 g     F .text	0000007c TerminalInit
08001fe4 g     F .text	000000d4 __swsetup_r
0801aa0c g     O .rodata	00000008 TIM8_ARR_fields
080002b4 g     F .text	00000000 pt_led_demo_a2
08007924  w    F .text	00000002 .hidden __aeabi_ldiv0
0800c71c  w    F .text	00000002 EXTI9_5_IRQHandler
0800aca2 g     F .text	00000006 HAL_SPI_GetState
080072c8 g     F .text	000001d0 .hidden __divdf3
08010564 g     O .rodata	00000008 ADC1_DR_fields
0800344c g     F .text	000000a8 __sfp
08004ef4 g     F .text	0000005a __copybits
0800c71c  w    F .text	00000002 RTC_WKUP_IRQHandler
0801b74c g     O .rodata	00000010 USART1_BRR_fields
0801945c g     O .rodata	00000050 TIM15_CCMR1_Output_fields
0801ce34 g     O .parsetable	0000000c AddTestE
20000438 g     O .data	00000408 __malloc_av_
080191c4 g     O .rodata	00000088 SYSCFG_CFGR1_fields
0800351c g     F .text	00000002 __sinit_lock_release
0800816a g     F .text	00000010 TerminalReadNonBlock
08007074 g     F .text	00000254 .hidden __muldf3
080148b4 g     O .rodata	00000018 CAN_TDT0R_fields
08007f34 g     F .text	00000054 CmdDump
08005444 g     F .text	00000022 __sread
080197fc g     O .rodata	00000028 TIM16_CCMR1_Output_fields
0801bfbc g     O .rodata	00000018 WWDG_CFR_fields
08017eec g     O .rodata	00000370 Peripherals
08017034 g     O .rodata	00000080 GPIOB_ODR_fields
0800924c  w    F .text	0000000c HAL_GetTick
0801bdfc g     O .rodata	00000050 USB_FS_USB_EP5R_fields
08010e2c g     O .rodata	00000100 CAN_F11R1_fields
0800450c g     F .text	00000002 __malloc_lock
080179ac g     O .rodata	00000008 NVIC_ISPR0_fields
080105c4 g     O .rodata	00000058 ADC1_ISR_fields
080163c4 g     O .rodata	00000048 FPU_FPCCR_fields
0801b14c g     O .rodata	00000010 TSC_ICR_fields
0800be2c g     F .text	000000ae LSM303DLHC_AccReadXYZ
080176b4 g     O .rodata	00000008 NVIC_IABR2_fields
080032b4 g     F .text	0000002c _fflush_r
0800817a g     F .text	00000012 TerminalReadAnyNonBlock
0800b750 g     F .text	0000001c USBD_VCP_ProductStrDescriptor
0800632c g     F .text	0000005e _calloc_r
08016b7c g     O .rodata	00000080 GPIOA_PUPDR_fields
0800c71c  w    F .text	00000002 SPI2_IRQHandler
080188f4 g     O .rodata	00000008 RTC_BKP21R_fields
0801c09d g     O .rodata	00000012 hUSBDDeviceDesc
08018bfc g     O .rodata	00000028 RTC_TSDR_fields
08008318 g     F .text	0000000c USB_LP_CAN_RX0_IRQHandler
080184ec g     O .rodata	00000048 RCC_CFGR3_fields
08000378 g     F .text	000000a4 memset
0800c71c  w    F .text	00000002 MemManage_Handler
08007a54 g     F .text	0000009c main
0801b52c g     O .rodata	00000100 TSC_IOSCR_fields
08015b0c g     O .rodata	000001e0 DMA1_registers
0800baac g     F .text	00000014 BSP_PB_GetState
080192b4 g     O .rodata	00000020 SYSCFG_EXTICR3_fields
20000c70 g     O .bss	00000004 __malloc_max_total_mem
0801062c g     O .rodata	00000008 ADC1_JDR3_fields
0801912c g     O .rodata	00000008 SPI1_TXCRCR_fields
080062c8 g     F .text	00000018 __swbuf
0800aa32 g     F .text	00000270 HAL_SPI_TransmitReceive
20000b50 g     O .data	00000004 SpixTimeout
0801ce1c g       *ABS*	00000000 _siccmram
0801505c g     O .rodata	00000050 COMP_COMP3_CSR_fields
08017974 g     O .rodata	00000020 NVIC_IPR9_fields
080155c4 g     O .rodata	00000040 DBGMCU_registers
080177d4 g     O .rodata	00000020 NVIC_IPR16_fields
0801332c g     O .rodata	00000100 CAN_F2R2_fields
0800c71c  w    F .text	00000002 SVC_Handler
080054cc g     F .text	00000008 __sclose
0800c71c  w    F .text	00000002 DMA2_Channel5_IRQHandler
0801594c g     O .rodata	000000e0 DMA1_IFCR_fields
08006424 g     F .text	0000003c fclose
0801b3ac g     O .rodata	00000080 TSC_IOGCSR_fields
080082b4 g     F .text	00000064 TerminalInputBufferWrite
08015914 g     O .rodata	00000008 DMA1_CPAR1_fields
08002248 g     F .text	00000f3c _dtoa_r
08003ce0 g     F .text	00000554 _malloc_r
08016cec g     O .rodata	00000040 GPIOB_AFRL_fields
08006a18 g     F .text	0000001a __ascii_wctomb
0801056c g     O .rodata	00000058 ADC1_IER_fields
08007018 g     F .text	0000005a .hidden __aeabi_l2d
080153bc g     O .rodata	00000008 DAC_DHR8R1_fields
08019e64 g     O .rodata	00000030 TIM1_CCMR1_Input_fields
08006460 g     F .text	0000001c _fiprintf_r
08006c2c g     F .text	00000038 _init_signal
0801b16c g     O .rodata	00000100 TSC_IOASCR_fields
08017874 g     O .rodata	00000020 NVIC_IPR20_fields
08003ae4 g     F .text	00000040 _fwalk
0800ae54 g     F .text	0000003e USBD_LL_Reset
0801475c g     O .rodata	00000018 CAN_RDT1R_fields
080166f4 g     O .rodata	00000080 GPIOA_BRR_fields
0801232c g     O .rodata	00000100 CAN_F20R2_fields
0801b62c g     O .rodata	00000010 TSC_ISR_fields
0800b6b8 g     F .text	0000000c USBD_LL_GetRxDataSize
0800c71c  w    F .text	00000002 DMA1_Channel5_IRQHandler
0800bd9e g     F .text	00000020 LSM303DLHC_AccInit
0800c71c  w    F .text	00000002 USB_LP_IRQHandler
20001538 g     O .bss	00000800 UserRxBuffer
08006648 g     F .text	00000014 _mbtowc_r
08019074 g     O .rodata	00000040 SPI1_I2SCFGR_fields
0801c099 g     O .rodata	00000004 USBD_LangIDDesc
0801172c g     O .rodata	00000100 CAN_F15R2_fields
0800c71c  w    F .text	00000002 EXTI4_IRQHandler
0801bd0c g     O .rodata	00000050 USB_FS_USB_EP2R_fields
0800500c g     F .text	00000060 putc
20000b30 g     O .data	00000020 LED_PORT
0801acbc g     O .rodata	00000008 TIM8_CCR6_fields
0800c62e g     F .text	00000020 LSM303AGR_AccFilterClickCmd
0800bf16 g     F .text	00000044 LSM303DLHC_AccClickITEnable
0800ad68 g     F .text	00000060 USBD_LL_DataOutStage
0801895c g     O .rodata	00000008 RTC_BKP4R_fields
08003548 g     F .text	000000a0 _malloc_trim_r
0801b39c g     O .rodata	00000008 TSC_IOG7CR_fields
080188c4 g     O .rodata	00000008 RTC_BKP16R_fields
0801558c g     O .rodata	00000028 DBGMCU_CR_fields
08014744 g     O .rodata	00000018 CAN_RDT0R_fields
0801044c g     O .rodata	00000008 ADC1_AWD2CR_fields
080158c4 g     O .rodata	00000008 DMA1_CMAR5_fields
08014704 g     O .rodata	00000020 CAN_RDL0R_fields
0801592c g     O .rodata	00000008 DMA1_CPAR4_fields
080066a8 g     F .text	000002dc strcmp
0801a98c g     O .rodata	00000080 TIM6_registers
080079a8 g     F .text	00000028 CmdAccel
08006190 g     F .text	0000001c vfiprintf
0801889c g     O .rodata	00000008 RTC_BKP11R_fields
0800a7f8 g     F .text	00000006 HAL_I2C_GetState
08008874 g     F .text	00000068 SystemInit
08000a18 g     F .text	00000018 strtoul_l
0801977c g     O .rodata	00000048 TIM16_BDTR_fields
080074a8 g     F .text	0000007a .hidden __nedf2
0801880c g     O .rodata	00000070 RTC_ALRMBR_fields
0801a68c g     O .rodata	00000010 TIM2_DCR_fields
08010504 g     O .rodata	00000050 ADC1_CR_fields
0800c740 g     F .text	00000000 _fini
08007bcc g     F .text	0000001c CmdW
08009578 g     F .text	0000000c HAL_PCD_Start
0800c71c  w    F .text	00000002 TIM1_TRG_COM_TIM17_IRQHandler
08015dec g     O .rodata	00000020 EXTI_EMR2_fields
0800bdbe g     F .text	00000012 LSM303DLHC_AccReadID
08018c6c g     O .rodata	00000008 RTC_WUTR_fields
0801593c g     O .rodata	00000008 DMA1_CPAR6_fields
0801529c g     O .rodata	00000008 CRC_INIT_fields
08018a84 g     O .rodata	00000088 RTC_ISR_fields
0801a0ec g     O .rodata	00000010 TIM1_DCR_fields
08017e6c g     O .rodata	00000038 PWR_CR_fields
0801a704 g     O .rodata	00000030 TIM2_EGR_fields
080002ec g     F .text	0000000c atexit
08017c2c g     O .rodata	00000080 OPAMP_OPAMP1_CR_fields
0801648c g     O .rodata	00000060 FPU_registers
08015eec g     O .rodata	00000100 EXTI_IMR1_fields
08008274 g     F .text	00000040 _write_r
080107dc g     O .rodata	00000010 ADC1_SQR4_fields
10000000 g       .ccmram	00000000 _eccmram
080107b4 g     O .rodata	00000028 ADC1_SQR3_fields
0800c71c  w    F .text	00000002 DMA1_Channel3_IRQHandler
080154ec g     O .rodata	00000080 DBGMCU_APB1FZ_fields
08006608 g     F .text	00000040 setlocale
08019004 g     O .rodata	00000060 SPI1_CR2_fields
0801045c g     O .rodata	00000010 ADC1_CALFACT_fields
0801892c g     O .rodata	00000008 RTC_BKP28R_fields
080091ee  w    F .text	00000028 HAL_InitTick
0800c64e g     F .text	0000001c LSM303AGR_AccIT1Enable
08019ff4 g     O .rodata	00000020 TIM1_CCR5_fields
0800b68e g     F .text	0000000e USBD_LL_SetUSBAddress
08017754 g     O .rodata	00000020 NVIC_IPR12_fields
0801c0b0 g     O .rodata	00000010 LED_PIN
20000008 g     O .data	00000004 _impure_ptr
080148e4 g     O .rodata	00000018 CAN_TDT2R_fields
08010634 g     O .rodata	00000008 ADC1_JDR4_fields
08019504 g     O .rodata	00000040 TIM15_CR2_fields
08003184 g     F .text	00000130 __sflush_r
08018534 g     O .rodata	00000060 RCC_CFGR_fields
0800923c  w    F .text	00000010 HAL_IncTick
08019bfc g     O .rodata	00000028 TIM17_EGR_fields
0800b63e g     F .text	0000000e USBD_LL_CloseEP
0800c71c  w    F .text	00000002 ADC4_IRQHandler
080189ac g     O .rodata	000000a0 RTC_CR_fields
0800b214 g     F .text	00000010 USBD_CtlContinueSendData
08015a2c g     O .rodata	000000e0 DMA1_ISR_fields
08013a2c g     O .rodata	00000100 CAN_F6R1_fields
0800bfc4 g     F .text	0000001c L3GD20_ReadID
0800c71c  w    F .text	00000002 WWDG_IRQHandler
0800a524  w    F .text	00000002 HAL_I2C_MspInit
08015cec g     O .rodata	00000100 EXTI_EMR1_fields
08017914 g     O .rodata	00000020 NVIC_IPR6_fields
0801a5f4 g     O .rodata	00000010 TIM2_CCR3_fields
080157e4 g     O .rodata	00000060 DMA1_CCR6_fields
0800665c g     F .text	0000002a __ascii_mbtowc
0801697c g     O .rodata	00000080 GPIOA_MODER_fields
08017cac g     O .rodata	00000080 OPAMP_OPAMP2_CR_fields
08004c68 g     F .text	00000060 __ulp
08003534 g     F .text	00000014 __fp_unlock_all
0800c368 g     F .text	0000003c I3G4250D_DisableIT
0801a074 g     O .rodata	00000078 TIM1_CR2_fields
08018b0c g     O .rodata	00000010 RTC_PRER_fields
0800b69c g     F .text	0000000e USBD_LL_Transmit
0800c71c  w    F .text	00000002 TIM2_IRQHandler
08000274 g     F .text	00000004 my_Loop
080197c4 g     O .rodata	00000020 TIM16_CCER_fields
080094e6 g     F .text	00000092 HAL_PCD_Init
20000a44 g     O .data	00000043 USBD_CDC_CfgHSDesc
0801ce64 g     O .parsetable	0000000c CmdDecodeE
08012f2c g     O .rodata	00000100 CAN_F26R2_fields
08013b2c g     O .rodata	00000100 CAN_F6R2_fields
20000000 g       .data	00000000 myTickCount
0801182c g     O .rodata	00000100 CAN_F16R1_fields
08018924 g     O .rodata	00000008 RTC_BKP27R_fields
080161bc g     O .rodata	00000010 EXTI_RTSR2_fields
08019874 g     O .rodata	00000028 TIM16_CR2_fields
0801878c g     O .rodata	00000070 RTC_ALRMAR_fields
08019d64 g     O .rodata	00000008 TIM1_ARR_fields
0800b1c2 g     F .text	00000038 USBD_GetString
0800ba20 g     F .text	00000018 BSP_LED_Toggle
0801272c g     O .rodata	00000100 CAN_F22R2_fields
08012a2c g     O .rodata	00000100 CAN_F24R1_fields
08003b78 g     F .text	00000008 localeconv
0800b54c g     F .text	0000000c HAL_PCD_SetupStageCallback
0801382c g     O .rodata	00000100 CAN_F5R1_fields
0800c71c  w    F .text	00000002 COMP7_IRQHandler
08003c60 g     F .text	0000005e __swhatbuf_r
20008000 g       *ABS*	00000000 _estack
08007c08 g     F .text	000000f8 parse
0801893c g     O .rodata	00000008 RTC_BKP2R_fields
0800c71c  w    F .text	00000002 COMP1_2_3_IRQHandler
08011a2c g     O .rodata	00000100 CAN_F17R1_fields
0800c71c  w    F .text	00000002 EXTI1_IRQHandler
0801aa14 g     O .rodata	00000060 TIM8_BDTR_fields
08007544 g     F .text	00000012 .hidden __aeabi_dcmpeq
0800c512 g     F .text	00000012 LSM303AGR_AccReadID
0801bcbc g     O .rodata	00000050 USB_FS_USB_EP1R_fields
0801036c g     O .rodata	000000b0 ADC1_2_CSR_fields
080163bc g     O .rodata	00000008 FPU_FPCAR_fields
20000c24 g       .data	00000000 _edata
0801af4c g     O .rodata	000001a0 TIM8_registers
08018944 g     O .rodata	00000008 RTC_BKP30R_fields
08019ae4 g     O .rodata	00000018 TIM17_CCMR1_Input_fields
10000000 g       .ccmram	00000000 _sccmram
0801983c g     O .rodata	00000038 TIM16_CR1_fields
08011b2c g     O .rodata	00000100 CAN_F17R2_fields
080194cc g     O .rodata	00000038 TIM15_CR1_fields
080064a4 g     F .text	000000a6 __fputwc
08008604 g     F .text	00000270 CmdDecode
080195ec g     O .rodata	00000008 TIM15_RCR_fields
08016eac g     O .rodata	00000080 GPIOB_IDR_fields
08019f84 g     O .rodata	00000050 TIM1_CCMR3_Output_fields
0801ae1c g     O .rodata	00000008 TIM8_DMAR_fields
080165f4 g     O .rodata	00000080 Flash_registers
0801989c g     O .rodata	00000010 TIM16_DCR_fields
0800c328 g     F .text	00000040 I3G4250D_EnableIT
0801845c g     O .rodata	00000040 RCC_APB2RSTR_fields
08007e3c g     F .text	00000028 fetch_uint32_arg
0801887c g     O .rodata	00000010 RTC_ALRMBSSR_fields
080192f4 g     O .rodata	00000040 SYSCFG_RCR_fields
0800c71c  w    F .text	00000002 USART2_IRQHandler
08019b3c g     O .rodata	00000038 TIM17_CR1_fields
080179cc g     O .rodata	00000260 NVIC_registers
0800c71c  w    F .text	00000002 COMP4_5_6_IRQHandler
0800546c g     F .text	0000003e __swrite
080088dc g     F .text	000005bc HAL_RCC_OscConfig
20000844 g     O .data	00000004 __malloc_trim_threshold
08019b24 g     O .rodata	00000008 TIM17_CCR1_fields
0801753c g     O .rodata	00000028 I2C1_TIMINGR_fields
0801bb44 g     O .rodata	00000008 USB_FS_BTABLE_fields
08014814 g     O .rodata	00000020 CAN_TDH1R_fields
0800647c g     F .text	00000028 fiprintf
080172e4 g     O .rodata	000000a8 I2C1_CR1_fields
08005564 g     F .text	00000c2c _vfiprintf_r
08000000 g     O .isr_vector	00000000 g_pfnVectors
0800b1fa g     F .text	0000001a USBD_CtlSendData
0801162c g     O .rodata	00000100 CAN_F15R1_fields
0801035c g     O .rodata	00000010 ADC1_2_CDR_fields
08003b24 g     F .text	00000048 _fwalk_reent
08004b1c g     F .text	0000014c __mdiff
0801a97c g     O .rodata	00000008 TIM6_PSC_fields
080075d4 g     F .text	0000004e .hidden __aeabi_d2iz
080188bc g     O .rodata	00000008 RTC_BKP15R_fields
08017ecc g     O .rodata	00000020 PWR_registers
080165cc g     O .rodata	00000020 Flash_SR_fields
08010624 g     O .rodata	00000008 ADC1_JDR2_fields
08007938 g     F .text	00000010 _kill
080188ec g     O .rodata	00000008 RTC_BKP20R_fields
08015904 g     O .rodata	00000008 DMA1_CNDTR6_fields
08011f2c g     O .rodata	00000100 CAN_F19R2_fields
0800c71c  w    F .text	00000002 I2C2_ER_IRQHandler
0801031c g     O .rodata	00000040 ADC1_2_CCR_fields
0800c71c  w    F .text	00000002 DMA1_Channel2_IRQHandler
0801540c g     O .rodata	000000e0 DAC_registers
08016a7c g     O .rodata	00000080 GPIOA_OSPEEDR_fields
0801ab9c g     O .rodata	00000030 TIM8_CCMR2_Input_fields
08003514 g     F .text	00000002 __sfp_lock_release
08019a7c g     O .rodata	00000048 TIM17_BDTR_fields
080146e4 g     O .rodata	00000020 CAN_RDH1R_fields
0800c29e g     F .text	0000002c I3G4250D_RebootCmd
0801a454 g     O .rodata	00000060 TIM2_CCER_fields
080153cc g     O .rodata	00000010 DAC_DHR8RD_fields
08007e64 g     F .text	00000020 fetch_string_arg
0800b97c g     F .text	0000006c BSP_LED_Init
08016fb4 g     O .rodata	00000080 GPIOB_MODER_fields
0801ce58 g     O .parsetable	0000000c CmdDumpE
0801c02c g     O .rodata	00000010 PLLMULFactorTable
0801b894 g     O .rodata	00000098 USART1_CR3_fields
08008448 g     F .text	00000050 DecodeField
080147b4 g     O .rodata	00000020 CAN_RI0R_fields
0800c71c  w    F .text	00000002 TIM8_BRK_IRQHandler
0801556c g     O .rodata	00000020 DBGMCU_APB2FZ_fields
0801a1d4 g     O .rodata	00000008 TIM1_PSC_fields
0800854c g     F .text	00000054 DecodePrintPeripherals
080193f4 g     O .rodata	00000038 TIM15_CCER_fields
080158d4 g     O .rodata	00000008 DMA1_CMAR7_fields
0800cbe4 g     O .rodata	00000101 _ctype_
08007924  w    F .text	00000002 .hidden __aeabi_idiv0
080075a8 g     F .text	0000002c .hidden __unorddf2
0800c580 g     F .text	000000ae LSM303AGR_AccReadXYZ
0800bd9c g     F .text	00000002 LSM303DLHC_AccDeInit
080147d4 g     O .rodata	00000020 CAN_RI1R_fields
0801924c g     O .rodata	00000028 SYSCFG_CFGR2_fields
08018594 g     O .rodata	00000088 RCC_CIR_fields
0801ce94 g     O .parsetable	0000000c CmdStatsE
0800c71c  w    F .text	00000002 FLASH_IRQHandler
080195ac g     O .rodata	00000008 TIM15_DMAR_fields
08015edc g     O .rodata	00000010 EXTI_FTSR2_fields
08010d2c g     O .rodata	00000100 CAN_F10R2_fields
08007948 g     F .text	00000002 _exit
080178b4 g     O .rodata	00000020 NVIC_IPR3_fields
080158dc g     O .rodata	00000008 DMA1_CNDTR1_fields
08017514 g     O .rodata	00000028 I2C1_TIMEOUTR_fields
080193ac g     O .rodata	00000048 TIM15_BDTR_fields
0800b6dc g     F .text	0000000c USBD_VCP_LangIDStrDescriptor
20001438 g     O .bss	00000100 USBD_StrDesc
0800818c g     F .text	000000e8 TerminalOutputBufferWrite
0800c71c  w    F .text	00000002 BusFault_Handler
0800c71c  w    F .text	00000002 USART1_IRQHandler
08014fb4 g     O .rodata	00000050 COMP_COMP1_CSR_fields
0801ae24 g     O .rodata	00000048 TIM8_EGR_fields
08003b80 g     F .text	000000e0 __smakebuf_r
08019614 g     O .rodata	00000040 TIM15_SR_fields
08000780 g     F .text	000000dc strlen
0801841c g     O .rodata	00000040 RCC_APB2ENR_fields
0800c71c  w    F .text	00000002 SPI3_IRQHandler
0800c524 g     F .text	0000001c LSM303AGR_AccRebootCmd
08006a44 g     F .text	00000030 _init_signal_r
08007534 g     F .text	00000010 .hidden __aeabi_cdcmpeq
08007498 g     F .text	0000008a .hidden __gedf2
080156c4 g     O .rodata	00000060 DMA1_CCR3_fields
0801a02c g     O .rodata	00000048 TIM1_CR1_fields
08017634 g     O .rodata	00000018 IWDG_SR_fields
0801be4c g     O .rodata	00000050 USB_FS_USB_EP6R_fields
08019964 g     O .rodata	00000110 TIM16_registers
0800a28e  w    F .text	00000002 HAL_PCDEx_SetConnectionState
08019c64 g     O .rodata	00000100 TIM17_registers
0800a5e6 g     F .text	00000104 HAL_I2C_Mem_Write
08006320 g     F .text	0000000a __assert
08019dcc g     O .rodata	00000098 TIM1_CCER_fields
0801352c g     O .rodata	00000100 CAN_F3R2_fields
080152fc g     O .rodata	00000080 DAC_CR_fields
0800c71c  w    F .text	00000002 I2C1_ER_IRQHandler
0800554c g     F .text	00000016 __sprint_r
0801be9c g     O .rodata	00000050 USB_FS_USB_EP7R_fields
0801743c g     O .rodata	00000088 I2C1_ISR_fields
08019f24 g     O .rodata	00000060 TIM1_CCMR2_Output_fields
08017954 g     O .rodata	00000020 NVIC_IPR8_fields
0801c03c g     O .rodata	00000010 PredivFactorTable
0801b37c g     O .rodata	00000008 TSC_IOG3CR_fields
08006fc4 g     F .text	00000042 .hidden __aeabi_f2d
0800b6aa g     F .text	0000000e USBD_LL_PrepareReceive
080158ec g     O .rodata	00000008 DMA1_CNDTR3_fields
0800bfe0 g     F .text	0000002c L3GD20_RebootCmd
0801302c g     O .rodata	00000100 CAN_F27R1_fields
0801b15c g     O .rodata	00000010 TSC_IER_fields
0800c6ae g     F .text	0000001c LSM303AGR_AccZClickITConfig
0801430c g     O .rodata	000000e0 CAN_FFA1R_fields
0801acc4 g     O .rodata	00000010 TIM8_CNT_fields
08006a04 g     F .text	00000014 _wctomb_r
0801ce1c g     O .parsetable	0000000c _pt_A2E
08010454 g     O .rodata	00000008 ADC1_AWD3CR_fields
08018914 g     O .rodata	00000008 RTC_BKP25R_fields
0801b26c g     O .rodata	00000100 TSC_IOCCR_fields
08017d2c g     O .rodata	00000080 OPAMP_OPAMP3_CR_fields
0800b44c g     F .text	0000000c USBD_CDC_SetRxBuffer
080161cc g     O .rodata	000000d0 EXTI_SWIER1_fields
08006d04 g     F .text	0000027a .hidden __subdf3
08019774 g     O .rodata	00000008 TIM16_ARR_fields
080155b4 g     O .rodata	00000010 DBGMCU_IDCODE_fields
08000a48 g     F .text	00001514 _vfprintf_r
20000bf0 g     O .data	00000034 Lsm303agrDrv
08004710 g     F .text	0000005e __lo0bits
08015fec g     O .rodata	00000020 EXTI_IMR2_fields
0801a974 g     O .rodata	00000008 TIM6_EGR_fields
080190cc g     O .rodata	00000008 SPI1_RXCRCR_fields
08017504 g     O .rodata	00000008 I2C1_PECR_fields
08009a4c g     F .text	000000c8 HAL_PCD_EP_Receive
080106a4 g     O .rodata	00000018 ADC1_OFR3_fields
08015154 g     O .rodata	00000058 COMP_COMP6_CSR_fields
080188e4 g     O .rodata	00000008 RTC_BKP1R_fields
0801ab3c g     O .rodata	00000060 TIM8_CCMR1_Output_fields
08017234 g     O .rodata	000000b0 GPIOB_registers
08008498 g     F .text	00000060 DecodeRegister
08006c64 g     F .text	00000068 __sigtramp
0801ae8c g     O .rodata	00000048 TIM8_SMCR_fields
080083a0 g     F .text	00000054 DecodeReadRegister
0801462c g     O .rodata	00000050 CAN_MCR_fields
080069b8 g     F .text	0000004c wcrtomb
080153dc g     O .rodata	00000008 DAC_DOR1_fields
08008114 g     F .text	0000004c TerminalRead
0801b0ec g     O .rodata	00000060 TSC_CR_fields
0801a6fc g     O .rodata	00000008 TIM2_DMAR_fields
20000848 g     O .data	0000016c __global_locale
0801ab0c g     O .rodata	00000030 TIM8_CCMR1_Input_fields
0800befa g     F .text	0000001c LSM303DLHC_AccIT1Enable
0801102c g     O .rodata	00000100 CAN_F12R1_fields
0800c71c  w    F .text	00000002 USBWakeUp_IRQHandler
08019924 g     O .rodata	00000008 TIM16_PSC_fields
0801ba4c g     O .rodata	00000008 USART1_RDR_fields
0801849c g     O .rodata	00000038 RCC_BDCR_fields
08001f5c g     F .text	0000001c vfprintf
08019b9c g     O .rodata	00000010 TIM17_DCR_fields
080179b4 g     O .rodata	00000008 NVIC_ISPR1_fields
080176e4 g     O .rodata	00000008 NVIC_ICPR2_fields
0801ce28 g     O .parsetable	0000000c CmdAccelE
0801252c g     O .rodata	00000100 CAN_F21R2_fields
0800b43c g     F .text	00000010 USBD_CDC_SetTxBuffer
08006574 g     F .text	00000048 fputwc
08019334 g     O .rodata	00000070 SYSCFG_registers
08006b7c g     F .text	0000005c raise
08017dac g     O .rodata	00000080 OPAMP_OPAMP4_CR_fields
08003cd0 g     F .text	00000010 free
08003518 g     F .text	00000002 __sinit_lock_acquire
0800c71c  w    F .text	00000002 DMA2_Channel3_IRQHandler
08015e0c g     O .rodata	000000d0 EXTI_FTSR1_fields
0800b7a4 g     F .text	0000001c USBD_VCP_InterfaceStrDescriptor
08013c2c g     O .rodata	00000100 CAN_F7R1_fields
08004574 g     F .text	000000a8 __multadd
0800ad0e g     F .text	0000005a USBD_LL_SetupStage
08004560 g     F .text	00000012 _Bfree
08007a48 g     F .text	0000000a Error_Handler
0801bfd4 g     O .rodata	00000010 WWDG_CR_fields
0800c71c  w    F .text	00000002 EXTI2_TSC_IRQHandler
080179c4 g     O .rodata	00000008 NVIC_STIR_fields
0800c71c  w    F .text	00000002 TIM1_BRK_TIM15_IRQHandler
0801ac2c g     O .rodata	00000050 TIM8_CCMR3_Output_fields



Disassembly of section .text:

080001c0 <deregister_tm_clones>:
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <deregister_tm_clones+0x10>)
 80001c2:	4b04      	ldr	r3, [pc, #16]	; (80001d4 <deregister_tm_clones+0x14>)
 80001c4:	4283      	cmp	r3, r0
 80001c6:	d002      	beq.n	80001ce <deregister_tm_clones+0xe>
 80001c8:	4b03      	ldr	r3, [pc, #12]	; (80001d8 <deregister_tm_clones+0x18>)
 80001ca:	b103      	cbz	r3, 80001ce <deregister_tm_clones+0xe>
 80001cc:	4718      	bx	r3
 80001ce:	4770      	bx	lr
 80001d0:	20000c24 	.word	0x20000c24
 80001d4:	20000c24 	.word	0x20000c24
 80001d8:	00000000 	.word	0x00000000

080001dc <register_tm_clones>:
 80001dc:	4805      	ldr	r0, [pc, #20]	; (80001f4 <register_tm_clones+0x18>)
 80001de:	4906      	ldr	r1, [pc, #24]	; (80001f8 <register_tm_clones+0x1c>)
 80001e0:	1a0b      	subs	r3, r1, r0
 80001e2:	0fd9      	lsrs	r1, r3, #31
 80001e4:	eb01 01a3 	add.w	r1, r1, r3, asr #2
 80001e8:	1049      	asrs	r1, r1, #1
 80001ea:	d002      	beq.n	80001f2 <register_tm_clones+0x16>
 80001ec:	4b03      	ldr	r3, [pc, #12]	; (80001fc <register_tm_clones+0x20>)
 80001ee:	b103      	cbz	r3, 80001f2 <register_tm_clones+0x16>
 80001f0:	4718      	bx	r3
 80001f2:	4770      	bx	lr
 80001f4:	20000c24 	.word	0x20000c24
 80001f8:	20000c24 	.word	0x20000c24
 80001fc:	00000000 	.word	0x00000000

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c06      	ldr	r4, [pc, #24]	; (800021c <__do_global_dtors_aux+0x1c>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b943      	cbnz	r3, 800021a <__do_global_dtors_aux+0x1a>
 8000208:	f7ff ffda 	bl	80001c0 <deregister_tm_clones>
 800020c:	4b04      	ldr	r3, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	b113      	cbz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000210:	4804      	ldr	r0, [pc, #16]	; (8000224 <__do_global_dtors_aux+0x24>)
 8000212:	f3af 8000 	nop.w
 8000216:	2301      	movs	r3, #1
 8000218:	7023      	strb	r3, [r4, #0]
 800021a:	bd10      	pop	{r4, pc}
 800021c:	20000c24 	.word	0x20000c24
 8000220:	00000000 	.word	0x00000000
 8000224:	0800c734 	.word	0x0800c734

08000228 <frame_dummy>:
 8000228:	b508      	push	{r3, lr}
 800022a:	4b04      	ldr	r3, [pc, #16]	; (800023c <frame_dummy+0x14>)
 800022c:	b11b      	cbz	r3, 8000236 <frame_dummy+0xe>
 800022e:	4904      	ldr	r1, [pc, #16]	; (8000240 <frame_dummy+0x18>)
 8000230:	4804      	ldr	r0, [pc, #16]	; (8000244 <frame_dummy+0x1c>)
 8000232:	f3af 8000 	nop.w
 8000236:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800023a:	e7cf      	b.n	80001dc <register_tm_clones>
 800023c:	00000000 	.word	0x00000000
 8000240:	20000c28 	.word	0x20000c28
 8000244:	0800c734 	.word	0x0800c734

08000248 <mytest>:
@@ Function Header Block
    .align  2               @ Code alignment - 2^n alignment (n=2)
                            @ This causes the assembler to use 4 byte alignment

    .syntax unified         @ Sets the instruction set to the new unified ARM + THUMB
                            @ instructions. The default is divided (separate instruction sets)
 8000248:	b500      	push	{lr}

 800024a:	b402      	push	{r1}
    .global mytest          @ Make the symbol name for the function visible to the linker
 800024c:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}

 800024e:	f04f 0000 	mov.w	r0, #0
    .code   16              @ 16bit THUMB code (BOTH .code and .thumb_func are required)
 8000252:	f00b fbe5 	bl	800ba20 <BSP_LED_Toggle>
    .thumb_func             @ Specifies that the following symbol is the name of a THUMB
 8000256:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
                            @ encoded function. Necessary for interlinking between ARM and THUMB code.
 8000258:	4908      	ldr	r1, [pc, #32]	; (800027c <my_Init+0x4>)

 800025a:	6808      	ldr	r0, [r1, #0]
    .type   mytest, %function   @ Declares that mytest symbol is a function (not strictly required)
 800025c:	bc02      	pop	{r1}

 800025e:	bd00      	pop	{pc}

08000260 <my_Tick>:
mytest:

    push {lr}                @ Put aside registers we want to restore later

    mov  r0, #1                     @ r0 holds our argument for the LED toggle function
                                    @ So pass it a value
 8000260:	b500      	push	{lr}

 8000262:	b403      	push	{r0, r1}
    bl   BSP_LED_Toggle             @ call BSP C function using Branch with Link (bl)
    
 8000264:	4905      	ldr	r1, [pc, #20]	; (800027c <my_Init+0x4>)
    ldr  r1, =myTickCount
 8000266:	6808      	ldr	r0, [r1, #0]
    ldr  r0, [r1]
 8000268:	f100 0001 	add.w	r0, r0, #1

 800026c:	6008      	str	r0, [r1, #0]
    pop  {lr}                @ Bring all the register values back
 800026e:	bc03      	pop	{r0, r1}

 8000270:	bd00      	pop	{pc}
 8000272:	bf00      	nop

08000274 <my_Loop>:
    .global my_Tick             @@ Expose my_Tick to the linker
    .code   16                  @@ - 16bit THUMB code (BOTH are required!)
    .thumb_func                 @@ /

    .type   my_Tick, %function  @@ - symbol type (not req)

 8000274:	b500      	push	{lr}
@@ Declaration : void my_Tick( void )
 8000276:	bd00      	pop	{pc}

08000278 <my_Init>:
    ldr  r0, [r1]           @@ Load r0 with the address pointed at by r1 (myTickCount address)
    add  r0, r0, #1         @@ Increment r0
    str  r0, [r1]           @@ Store the current r0 value back to the address pointed at by r1

    pop {lr}

 8000278:	b500      	push	{lr}
    bx lr                  @@ Return to the address stored in lr
 800027a:	bd00      	pop	{pc}
                            @ encoded function. Necessary for interlinking between ARM and THUMB code.
 800027c:	20000000 	.word	0x20000000

08000280 <add_test>:
@ Input: r0, r1 (i.e. r0 holds x, r1 holds y)
@ Returns: r0
@
@ Here is the actual add_test function
    add_test:
    push {r4,r5, lr}    @ push the r4, r5 and lr register on the stack
 8000280:	b530      	push	{r4, r5, lr}
   
    mov r5, r0
 8000282:	4605      	mov	r5, r0
    mov r4, #0
 8000284:	f04f 0400 	mov.w	r4, #0

08000288 <loop>:

    loop:
    cmp r4, #8
 8000288:	2c08      	cmp	r4, #8
    beq exit
 800028a:	d008      	beq.n	800029e <exit>
    mov r0, r4
 800028c:	4620      	mov	r0, r4
    bl   BSP_LED_Toggle             @ call BSP C function using Branch with Link (bl)
 800028e:	f00b fbc7 	bl	800ba20 <BSP_LED_Toggle>
    
    mov r0, r5
 8000292:	4628      	mov	r0, r5
    bl busy_delay
 8000294:	f000 f806 	bl	80002a4 <busy_delay>

    add r4, r4, #1
 8000298:	f104 0401 	add.w	r4, r4, #1
    b loop
 800029c:	e7f4      	b.n	8000288 <loop>

0800029e <exit>:



    exit:
    pop {r4,r5, lr}      @ pop the r4,r5 and lr register out of the stack
 800029e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    bx lr                @ Return (Branch eXchange) to the address in the link register (lr)
 80002a2:	4770      	bx	lr

080002a4 <busy_delay>:
@ Input: r0 (i.e. r0 holds number of cycles to delay)
@ Returns: r0
@
@ Here is the actual function. DO NOT MODIFY THIS FUNCTION.
    busy_delay:
    push {r5}
 80002a4:	b420      	push	{r5}
    mov r5, r0
 80002a6:	4605      	mov	r5, r0

080002a8 <delay_1oop>:

    delay_1oop:
    subs r5, r5, #1
 80002a8:	3d01      	subs	r5, #1
    bge delay_1oop
 80002aa:	dafd      	bge.n	80002a8 <delay_1oop>
    mov r0, #0 @ Return zero (success)
 80002ac:	f04f 0000 	mov.w	r0, #0
    pop {r5}
 80002b0:	bc20      	pop	{r5}
    bx lr @ Return (Branch eXchange) to the address in the link register (lr)
 80002b2:	4770      	bx	lr

080002b4 <pt_led_demo_a2>:
@ Input: r0, r1 (i.e. r0 holds count, r1 holds delay)
@ Returns: r0
@
@ Here is the actual pt_led_demo_a2 function
    pt_led_demo_a2:
    push {r4,r5,r6,lr}    @ push the r4, r5, r6 and lr register on the stack
 80002b4:	b570      	push	{r4, r5, r6, lr}
   
    mov r4, r0            @ copy the count value and save it in r4 
 80002b6:	4604      	mov	r4, r0
    mov r5, r1            @ copy the delay value and save it in r5
 80002b8:	460d      	mov	r5, r1
    mov r6, #8            @ The r6 holds the LEDs index
 80002ba:	f04f 0608 	mov.w	r6, #8

080002be <main_loop>:

    @ This main_loop will repeat 8 LEDs based on the user's input
    main_loop:
    subs r4,r4, #1          @ Subtract to count down the loop
 80002be:	3c01      	subs	r4, #1
    blt exit_main_loop      @ If r4 < 0, exit the loop
 80002c0:	db11      	blt.n	80002e6 <exit_main_loop>

080002c2 <loop1>:

        @ This small loop will toggle 8 LEDs
        loop1:
        subs r6, r6, #1        @ Subtract to count down the loop
 80002c2:	3e01      	subs	r6, #1
        blt out                @ if r6 < 0, exit the loop
 80002c4:	db0c      	blt.n	80002e0 <out>

        mov r0, r6             @ move the led index to r0
 80002c6:	4630      	mov	r0, r6
        bl BSP_LED_Toggle      @ cal the BSP_LED_Toggle
 80002c8:	f00b fbaa 	bl	800ba20 <BSP_LED_Toggle>
        
        mov r0, r5             @ copy the r5 value to r0
 80002cc:	4628      	mov	r0, r5
        bl busy_delay          @ call the busy_delay
 80002ce:	f7ff ffe9 	bl	80002a4 <busy_delay>
        
        mov r0, r6             @ move the led index to r0
 80002d2:	4630      	mov	r0, r6
        bl BSP_LED_Toggle      @ cal the BSP_LED_Toggle
 80002d4:	f00b fba4 	bl	800ba20 <BSP_LED_Toggle>

        mov r0, r5             @ copy the r5 value to r0
 80002d8:	4628      	mov	r0, r5
        bl busy_delay          @ call the busy_delay
 80002da:	f7ff ffe3 	bl	80002a4 <busy_delay>

        b loop1                @ back to the loop1 again
 80002de:	e7f0      	b.n	80002c2 <loop1>

080002e0 <out>:

        @ exit small loop1
        out:
        mov r6, #8             @ reset the led circle
 80002e0:	f04f 0608 	mov.w	r6, #8
        b main_loop            @ go back to the main loop
 80002e4:	e7eb      	b.n	80002be <main_loop>

080002e6 <exit_main_loop>:


    @ exit main loop
    exit_main_loop:
    pop {r4,r5,r6,lr}        @ pop the r4,r5,r6 and lr register out of the stack
 80002e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    bx lr                    @ Return (Branch eXchange) to the address in the link register (lr)
 80002ea:	4770      	bx	lr

080002ec <atexit>:
 80002ec:	2300      	movs	r3, #0
 80002ee:	4601      	mov	r1, r0
 80002f0:	461a      	mov	r2, r3
 80002f2:	4618      	mov	r0, r3
 80002f4:	f001 bee0 	b.w	80020b8 <__register_exitproc>

080002f8 <__errno>:
 80002f8:	4b01      	ldr	r3, [pc, #4]	; (8000300 <__errno+0x8>)
 80002fa:	6818      	ldr	r0, [r3, #0]
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop
 8000300:	20000008 	.word	0x20000008

08000304 <__libc_fini_array>:
 8000304:	b538      	push	{r3, r4, r5, lr}
 8000306:	4b08      	ldr	r3, [pc, #32]	; (8000328 <__libc_fini_array+0x24>)
 8000308:	4d08      	ldr	r5, [pc, #32]	; (800032c <__libc_fini_array+0x28>)
 800030a:	1b5b      	subs	r3, r3, r5
 800030c:	109c      	asrs	r4, r3, #2
 800030e:	d007      	beq.n	8000320 <__libc_fini_array+0x1c>
 8000310:	3b04      	subs	r3, #4
 8000312:	441d      	add	r5, r3
 8000314:	3c01      	subs	r4, #1
 8000316:	f855 3904 	ldr.w	r3, [r5], #-4
 800031a:	4798      	blx	r3
 800031c:	2c00      	cmp	r4, #0
 800031e:	d1f9      	bne.n	8000314 <__libc_fini_array+0x10>
 8000320:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000324:	f00c ba0c 	b.w	800c740 <_fini>
 8000328:	0801c1f8 	.word	0x0801c1f8
 800032c:	0801c1f4 	.word	0x0801c1f4

08000330 <__libc_init_array>:
 8000330:	b570      	push	{r4, r5, r6, lr}
 8000332:	4e0d      	ldr	r6, [pc, #52]	; (8000368 <__libc_init_array+0x38>)
 8000334:	4d0d      	ldr	r5, [pc, #52]	; (800036c <__libc_init_array+0x3c>)
 8000336:	1b76      	subs	r6, r6, r5
 8000338:	10b6      	asrs	r6, r6, #2
 800033a:	d006      	beq.n	800034a <__libc_init_array+0x1a>
 800033c:	2400      	movs	r4, #0
 800033e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000342:	3401      	adds	r4, #1
 8000344:	4798      	blx	r3
 8000346:	42a6      	cmp	r6, r4
 8000348:	d1f9      	bne.n	800033e <__libc_init_array+0xe>
 800034a:	4e09      	ldr	r6, [pc, #36]	; (8000370 <__libc_init_array+0x40>)
 800034c:	4d09      	ldr	r5, [pc, #36]	; (8000374 <__libc_init_array+0x44>)
 800034e:	1b76      	subs	r6, r6, r5
 8000350:	f00c f9f0 	bl	800c734 <_init>
 8000354:	10b6      	asrs	r6, r6, #2
 8000356:	d006      	beq.n	8000366 <__libc_init_array+0x36>
 8000358:	2400      	movs	r4, #0
 800035a:	f855 3b04 	ldr.w	r3, [r5], #4
 800035e:	3401      	adds	r4, #1
 8000360:	4798      	blx	r3
 8000362:	42a6      	cmp	r6, r4
 8000364:	d1f9      	bne.n	800035a <__libc_init_array+0x2a>
 8000366:	bd70      	pop	{r4, r5, r6, pc}
 8000368:	0801c1ec 	.word	0x0801c1ec
 800036c:	0801c1ec 	.word	0x0801c1ec
 8000370:	0801c1f4 	.word	0x0801c1f4
 8000374:	0801c1ec 	.word	0x0801c1ec

08000378 <memset>:
 8000378:	0783      	lsls	r3, r0, #30
 800037a:	b530      	push	{r4, r5, lr}
 800037c:	d048      	beq.n	8000410 <memset+0x98>
 800037e:	1e54      	subs	r4, r2, #1
 8000380:	2a00      	cmp	r2, #0
 8000382:	d03f      	beq.n	8000404 <memset+0x8c>
 8000384:	b2ca      	uxtb	r2, r1
 8000386:	4603      	mov	r3, r0
 8000388:	e001      	b.n	800038e <memset+0x16>
 800038a:	3c01      	subs	r4, #1
 800038c:	d33a      	bcc.n	8000404 <memset+0x8c>
 800038e:	f803 2b01 	strb.w	r2, [r3], #1
 8000392:	079d      	lsls	r5, r3, #30
 8000394:	d1f9      	bne.n	800038a <memset+0x12>
 8000396:	2c03      	cmp	r4, #3
 8000398:	d92d      	bls.n	80003f6 <memset+0x7e>
 800039a:	b2cd      	uxtb	r5, r1
 800039c:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 80003a0:	2c0f      	cmp	r4, #15
 80003a2:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 80003a6:	d936      	bls.n	8000416 <memset+0x9e>
 80003a8:	f1a4 0210 	sub.w	r2, r4, #16
 80003ac:	f022 0c0f 	bic.w	ip, r2, #15
 80003b0:	f103 0e20 	add.w	lr, r3, #32
 80003b4:	44e6      	add	lr, ip
 80003b6:	ea4f 1c12 	mov.w	ip, r2, lsr #4
 80003ba:	f103 0210 	add.w	r2, r3, #16
 80003be:	e942 5504 	strd	r5, r5, [r2, #-16]
 80003c2:	e942 5502 	strd	r5, r5, [r2, #-8]
 80003c6:	3210      	adds	r2, #16
 80003c8:	4572      	cmp	r2, lr
 80003ca:	d1f8      	bne.n	80003be <memset+0x46>
 80003cc:	f10c 0201 	add.w	r2, ip, #1
 80003d0:	f014 0f0c 	tst.w	r4, #12
 80003d4:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80003d8:	f004 0c0f 	and.w	ip, r4, #15
 80003dc:	d013      	beq.n	8000406 <memset+0x8e>
 80003de:	f1ac 0304 	sub.w	r3, ip, #4
 80003e2:	f023 0303 	bic.w	r3, r3, #3
 80003e6:	3304      	adds	r3, #4
 80003e8:	4413      	add	r3, r2
 80003ea:	f842 5b04 	str.w	r5, [r2], #4
 80003ee:	4293      	cmp	r3, r2
 80003f0:	d1fb      	bne.n	80003ea <memset+0x72>
 80003f2:	f00c 0403 	and.w	r4, ip, #3
 80003f6:	b12c      	cbz	r4, 8000404 <memset+0x8c>
 80003f8:	b2ca      	uxtb	r2, r1
 80003fa:	441c      	add	r4, r3
 80003fc:	f803 2b01 	strb.w	r2, [r3], #1
 8000400:	429c      	cmp	r4, r3
 8000402:	d1fb      	bne.n	80003fc <memset+0x84>
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	4664      	mov	r4, ip
 8000408:	4613      	mov	r3, r2
 800040a:	2c00      	cmp	r4, #0
 800040c:	d1f4      	bne.n	80003f8 <memset+0x80>
 800040e:	e7f9      	b.n	8000404 <memset+0x8c>
 8000410:	4603      	mov	r3, r0
 8000412:	4614      	mov	r4, r2
 8000414:	e7bf      	b.n	8000396 <memset+0x1e>
 8000416:	461a      	mov	r2, r3
 8000418:	46a4      	mov	ip, r4
 800041a:	e7e0      	b.n	80003de <memset+0x66>

0800041c <_printf_r>:
 800041c:	b40e      	push	{r1, r2, r3}
 800041e:	b500      	push	{lr}
 8000420:	b082      	sub	sp, #8
 8000422:	ab03      	add	r3, sp, #12
 8000424:	6881      	ldr	r1, [r0, #8]
 8000426:	f853 2b04 	ldr.w	r2, [r3], #4
 800042a:	9301      	str	r3, [sp, #4]
 800042c:	f000 fb0c 	bl	8000a48 <_vfprintf_r>
 8000430:	b002      	add	sp, #8
 8000432:	f85d eb04 	ldr.w	lr, [sp], #4
 8000436:	b003      	add	sp, #12
 8000438:	4770      	bx	lr
 800043a:	bf00      	nop

0800043c <printf>:
 800043c:	b40f      	push	{r0, r1, r2, r3}
 800043e:	b500      	push	{lr}
 8000440:	4907      	ldr	r1, [pc, #28]	; (8000460 <printf+0x24>)
 8000442:	b083      	sub	sp, #12
 8000444:	ab04      	add	r3, sp, #16
 8000446:	6808      	ldr	r0, [r1, #0]
 8000448:	f853 2b04 	ldr.w	r2, [r3], #4
 800044c:	6881      	ldr	r1, [r0, #8]
 800044e:	9301      	str	r3, [sp, #4]
 8000450:	f000 fafa 	bl	8000a48 <_vfprintf_r>
 8000454:	b003      	add	sp, #12
 8000456:	f85d eb04 	ldr.w	lr, [sp], #4
 800045a:	b004      	add	sp, #16
 800045c:	4770      	bx	lr
 800045e:	bf00      	nop
 8000460:	20000008 	.word	0x20000008

08000464 <_putchar_r>:
 8000464:	6882      	ldr	r2, [r0, #8]
 8000466:	f004 bda5 	b.w	8004fb4 <_putc_r>
 800046a:	bf00      	nop

0800046c <putchar>:
 800046c:	4b02      	ldr	r3, [pc, #8]	; (8000478 <putchar+0xc>)
 800046e:	4601      	mov	r1, r0
 8000470:	6818      	ldr	r0, [r3, #0]
 8000472:	6882      	ldr	r2, [r0, #8]
 8000474:	f004 bd9e 	b.w	8004fb4 <_putc_r>
 8000478:	20000008 	.word	0x20000008

0800047c <_puts_r>:
 800047c:	b570      	push	{r4, r5, r6, lr}
 800047e:	4604      	mov	r4, r0
 8000480:	b088      	sub	sp, #32
 8000482:	4608      	mov	r0, r1
 8000484:	460d      	mov	r5, r1
 8000486:	f000 f97b 	bl	8000780 <strlen>
 800048a:	4e15      	ldr	r6, [pc, #84]	; (80004e0 <_puts_r+0x64>)
 800048c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800048e:	9005      	str	r0, [sp, #20]
 8000490:	2101      	movs	r1, #1
 8000492:	1843      	adds	r3, r0, r1
 8000494:	e9cd 6106 	strd	r6, r1, [sp, #24]
 8000498:	a804      	add	r0, sp, #16
 800049a:	2102      	movs	r1, #2
 800049c:	9504      	str	r5, [sp, #16]
 800049e:	9303      	str	r3, [sp, #12]
 80004a0:	68a5      	ldr	r5, [r4, #8]
 80004a2:	9001      	str	r0, [sp, #4]
 80004a4:	9102      	str	r1, [sp, #8]
 80004a6:	b1b2      	cbz	r2, 80004d6 <_puts_r+0x5a>
 80004a8:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
 80004ac:	049a      	lsls	r2, r3, #18
 80004ae:	d406      	bmi.n	80004be <_puts_r+0x42>
 80004b0:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 80004b2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80004b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80004ba:	81ab      	strh	r3, [r5, #12]
 80004bc:	666a      	str	r2, [r5, #100]	; 0x64
 80004be:	aa01      	add	r2, sp, #4
 80004c0:	4629      	mov	r1, r5
 80004c2:	4620      	mov	r0, r4
 80004c4:	f003 f996 	bl	80037f4 <__sfvwrite_r>
 80004c8:	2800      	cmp	r0, #0
 80004ca:	bf14      	ite	ne
 80004cc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80004d0:	200a      	moveq	r0, #10
 80004d2:	b008      	add	sp, #32
 80004d4:	bd70      	pop	{r4, r5, r6, pc}
 80004d6:	4620      	mov	r0, r4
 80004d8:	f003 f816 	bl	8003508 <__sinit>
 80004dc:	e7e4      	b.n	80004a8 <_puts_r+0x2c>
 80004de:	bf00      	nop
 80004e0:	0801c0c0 	.word	0x0801c0c0

080004e4 <puts>:
 80004e4:	4b02      	ldr	r3, [pc, #8]	; (80004f0 <puts+0xc>)
 80004e6:	4601      	mov	r1, r0
 80004e8:	6818      	ldr	r0, [r3, #0]
 80004ea:	f7ff bfc7 	b.w	800047c <_puts_r>
 80004ee:	bf00      	nop
 80004f0:	20000008 	.word	0x20000008

080004f4 <setvbuf>:
 80004f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80004f8:	4c5a      	ldr	r4, [pc, #360]	; (8000664 <setvbuf+0x170>)
 80004fa:	f8d4 8000 	ldr.w	r8, [r4]
 80004fe:	b083      	sub	sp, #12
 8000500:	4604      	mov	r4, r0
 8000502:	460e      	mov	r6, r1
 8000504:	4617      	mov	r7, r2
 8000506:	461d      	mov	r5, r3
 8000508:	f1b8 0f00 	cmp.w	r8, #0
 800050c:	d003      	beq.n	8000516 <setvbuf+0x22>
 800050e:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
 8000512:	2b00      	cmp	r3, #0
 8000514:	d068      	beq.n	80005e8 <setvbuf+0xf4>
 8000516:	2f02      	cmp	r7, #2
 8000518:	d005      	beq.n	8000526 <setvbuf+0x32>
 800051a:	2f01      	cmp	r7, #1
 800051c:	f200 808e 	bhi.w	800063c <setvbuf+0x148>
 8000520:	2d00      	cmp	r5, #0
 8000522:	f2c0 808b 	blt.w	800063c <setvbuf+0x148>
 8000526:	4621      	mov	r1, r4
 8000528:	4640      	mov	r0, r8
 800052a:	f002 fec3 	bl	80032b4 <_fflush_r>
 800052e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8000530:	b141      	cbz	r1, 8000544 <setvbuf+0x50>
 8000532:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8000536:	4299      	cmp	r1, r3
 8000538:	d002      	beq.n	8000540 <setvbuf+0x4c>
 800053a:	4640      	mov	r0, r8
 800053c:	f003 f854 	bl	80035e8 <_free_r>
 8000540:	2300      	movs	r3, #0
 8000542:	6323      	str	r3, [r4, #48]	; 0x30
 8000544:	f9b4 c00c 	ldrsh.w	ip, [r4, #12]
 8000548:	2300      	movs	r3, #0
 800054a:	f01c 0f80 	tst.w	ip, #128	; 0x80
 800054e:	61a3      	str	r3, [r4, #24]
 8000550:	6063      	str	r3, [r4, #4]
 8000552:	d151      	bne.n	80005f8 <setvbuf+0x104>
 8000554:	f42c 6c4a 	bic.w	ip, ip, #3232	; 0xca0
 8000558:	f02c 0c03 	bic.w	ip, ip, #3
 800055c:	2f02      	cmp	r7, #2
 800055e:	f8a4 c00c 	strh.w	ip, [r4, #12]
 8000562:	d057      	beq.n	8000614 <setvbuf+0x120>
 8000564:	ab01      	add	r3, sp, #4
 8000566:	466a      	mov	r2, sp
 8000568:	4621      	mov	r1, r4
 800056a:	4640      	mov	r0, r8
 800056c:	f003 fb78 	bl	8003c60 <__swhatbuf_r>
 8000570:	89a3      	ldrh	r3, [r4, #12]
 8000572:	4318      	orrs	r0, r3
 8000574:	81a0      	strh	r0, [r4, #12]
 8000576:	b325      	cbz	r5, 80005c2 <setvbuf+0xce>
 8000578:	b326      	cbz	r6, 80005c4 <setvbuf+0xd0>
 800057a:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
 800057e:	b37b      	cbz	r3, 80005e0 <setvbuf+0xec>
 8000580:	9b00      	ldr	r3, [sp, #0]
 8000582:	f9b4 c00c 	ldrsh.w	ip, [r4, #12]
 8000586:	6026      	str	r6, [r4, #0]
 8000588:	42ab      	cmp	r3, r5
 800058a:	bf1c      	itt	ne
 800058c:	f44c 6c00 	orrne.w	ip, ip, #2048	; 0x800
 8000590:	f8a4 c00c 	strhne.w	ip, [r4, #12]
 8000594:	2f01      	cmp	r7, #1
 8000596:	bf04      	itt	eq
 8000598:	f04c 0c01 	orreq.w	ip, ip, #1
 800059c:	f8a4 c00c 	strheq.w	ip, [r4, #12]
 80005a0:	f01c 0008 	ands.w	r0, ip, #8
 80005a4:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80005a8:	fa1f f38c 	uxth.w	r3, ip
 80005ac:	d020      	beq.n	80005f0 <setvbuf+0xfc>
 80005ae:	f013 0001 	ands.w	r0, r3, #1
 80005b2:	d03f      	beq.n	8000634 <setvbuf+0x140>
 80005b4:	2000      	movs	r0, #0
 80005b6:	426d      	negs	r5, r5
 80005b8:	60a0      	str	r0, [r4, #8]
 80005ba:	61a5      	str	r5, [r4, #24]
 80005bc:	b003      	add	sp, #12
 80005be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80005c2:	9d00      	ldr	r5, [sp, #0]
 80005c4:	4628      	mov	r0, r5
 80005c6:	f003 fb7b 	bl	8003cc0 <malloc>
 80005ca:	4606      	mov	r6, r0
 80005cc:	2800      	cmp	r0, #0
 80005ce:	d038      	beq.n	8000642 <setvbuf+0x14e>
 80005d0:	89a3      	ldrh	r3, [r4, #12]
 80005d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005d6:	81a3      	strh	r3, [r4, #12]
 80005d8:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d1cf      	bne.n	8000580 <setvbuf+0x8c>
 80005e0:	4640      	mov	r0, r8
 80005e2:	f002 ff91 	bl	8003508 <__sinit>
 80005e6:	e7cb      	b.n	8000580 <setvbuf+0x8c>
 80005e8:	4640      	mov	r0, r8
 80005ea:	f002 ff8d 	bl	8003508 <__sinit>
 80005ee:	e792      	b.n	8000516 <setvbuf+0x22>
 80005f0:	60a0      	str	r0, [r4, #8]
 80005f2:	b003      	add	sp, #12
 80005f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80005f8:	6921      	ldr	r1, [r4, #16]
 80005fa:	4640      	mov	r0, r8
 80005fc:	f002 fff4 	bl	80035e8 <_free_r>
 8000600:	f9b4 c00c 	ldrsh.w	ip, [r4, #12]
 8000604:	f42c 6c4a 	bic.w	ip, ip, #3232	; 0xca0
 8000608:	f02c 0c03 	bic.w	ip, ip, #3
 800060c:	2f02      	cmp	r7, #2
 800060e:	f8a4 c00c 	strh.w	ip, [r4, #12]
 8000612:	d1a7      	bne.n	8000564 <setvbuf+0x70>
 8000614:	2000      	movs	r0, #0
 8000616:	f104 0343 	add.w	r3, r4, #67	; 0x43
 800061a:	f04c 0c02 	orr.w	ip, ip, #2
 800061e:	2100      	movs	r1, #0
 8000620:	2201      	movs	r2, #1
 8000622:	e9c4 3204 	strd	r3, r2, [r4, #16]
 8000626:	f8a4 c00c 	strh.w	ip, [r4, #12]
 800062a:	60a1      	str	r1, [r4, #8]
 800062c:	6023      	str	r3, [r4, #0]
 800062e:	b003      	add	sp, #12
 8000630:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000634:	60a5      	str	r5, [r4, #8]
 8000636:	b003      	add	sp, #12
 8000638:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800063c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000640:	e7d7      	b.n	80005f2 <setvbuf+0xfe>
 8000642:	f8dd 9000 	ldr.w	r9, [sp]
 8000646:	45a9      	cmp	r9, r5
 8000648:	d004      	beq.n	8000654 <setvbuf+0x160>
 800064a:	4648      	mov	r0, r9
 800064c:	f003 fb38 	bl	8003cc0 <malloc>
 8000650:	4606      	mov	r6, r0
 8000652:	b920      	cbnz	r0, 800065e <setvbuf+0x16a>
 8000654:	f9b4 c00c 	ldrsh.w	ip, [r4, #12]
 8000658:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800065c:	e7db      	b.n	8000616 <setvbuf+0x122>
 800065e:	464d      	mov	r5, r9
 8000660:	e7b6      	b.n	80005d0 <setvbuf+0xdc>
 8000662:	bf00      	nop
 8000664:	20000008 	.word	0x20000008

08000668 <strcasecmp>:
 8000668:	b510      	push	{r4, lr}
 800066a:	4c11      	ldr	r4, [pc, #68]	; (80006b0 <strcasecmp+0x48>)
 800066c:	4686      	mov	lr, r0
 800066e:	f81e cb01 	ldrb.w	ip, [lr], #1
 8000672:	f814 300c 	ldrb.w	r3, [r4, ip]
 8000676:	f003 0303 	and.w	r3, r3, #3
 800067a:	2b01      	cmp	r3, #1
 800067c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000680:	4662      	mov	r2, ip
 8000682:	bf08      	it	eq
 8000684:	f10c 0220 	addeq.w	r2, ip, #32
 8000688:	f814 c003 	ldrb.w	ip, [r4, r3]
 800068c:	f00c 0c03 	and.w	ip, ip, #3
 8000690:	f1bc 0f01 	cmp.w	ip, #1
 8000694:	4618      	mov	r0, r3
 8000696:	d004      	beq.n	80006a2 <strcasecmp+0x3a>
 8000698:	1ad2      	subs	r2, r2, r3
 800069a:	d106      	bne.n	80006aa <strcasecmp+0x42>
 800069c:	2b00      	cmp	r3, #0
 800069e:	d1e6      	bne.n	800066e <strcasecmp+0x6>
 80006a0:	bd10      	pop	{r4, pc}
 80006a2:	3320      	adds	r3, #32
 80006a4:	1ad0      	subs	r0, r2, r3
 80006a6:	d0e2      	beq.n	800066e <strcasecmp+0x6>
 80006a8:	bd10      	pop	{r4, pc}
 80006aa:	4610      	mov	r0, r2
 80006ac:	bd10      	pop	{r4, pc}
 80006ae:	bf00      	nop
 80006b0:	0800cbe5 	.word	0x0800cbe5

080006b4 <strcpy>:
 80006b4:	ea80 0201 	eor.w	r2, r0, r1
 80006b8:	4684      	mov	ip, r0
 80006ba:	f012 0f03 	tst.w	r2, #3
 80006be:	d14f      	bne.n	8000760 <strcpy+0xac>
 80006c0:	f011 0f03 	tst.w	r1, #3
 80006c4:	d132      	bne.n	800072c <strcpy+0x78>
 80006c6:	f84d 4d04 	str.w	r4, [sp, #-4]!
 80006ca:	f011 0f04 	tst.w	r1, #4
 80006ce:	f851 3b04 	ldr.w	r3, [r1], #4
 80006d2:	d00b      	beq.n	80006ec <strcpy+0x38>
 80006d4:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 80006d8:	439a      	bics	r2, r3
 80006da:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 80006de:	bf04      	itt	eq
 80006e0:	f84c 3b04 	streq.w	r3, [ip], #4
 80006e4:	f851 3b04 	ldreq.w	r3, [r1], #4
 80006e8:	d116      	bne.n	8000718 <strcpy+0x64>
 80006ea:	bf00      	nop
 80006ec:	f851 4b04 	ldr.w	r4, [r1], #4
 80006f0:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 80006f4:	439a      	bics	r2, r3
 80006f6:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 80006fa:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
 80006fe:	d10b      	bne.n	8000718 <strcpy+0x64>
 8000700:	f84c 3b04 	str.w	r3, [ip], #4
 8000704:	43a2      	bics	r2, r4
 8000706:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 800070a:	bf04      	itt	eq
 800070c:	f851 3b04 	ldreq.w	r3, [r1], #4
 8000710:	f84c 4b04 	streq.w	r4, [ip], #4
 8000714:	d0ea      	beq.n	80006ec <strcpy+0x38>
 8000716:	4623      	mov	r3, r4
 8000718:	f80c 3b01 	strb.w	r3, [ip], #1
 800071c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8000720:	ea4f 2333 	mov.w	r3, r3, ror #8
 8000724:	d1f8      	bne.n	8000718 <strcpy+0x64>
 8000726:	f85d 4b04 	ldr.w	r4, [sp], #4
 800072a:	4770      	bx	lr
 800072c:	f011 0f01 	tst.w	r1, #1
 8000730:	d006      	beq.n	8000740 <strcpy+0x8c>
 8000732:	f811 2b01 	ldrb.w	r2, [r1], #1
 8000736:	f80c 2b01 	strb.w	r2, [ip], #1
 800073a:	2a00      	cmp	r2, #0
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	f011 0f02 	tst.w	r1, #2
 8000744:	d0bf      	beq.n	80006c6 <strcpy+0x12>
 8000746:	f831 2b02 	ldrh.w	r2, [r1], #2
 800074a:	f012 0fff 	tst.w	r2, #255	; 0xff
 800074e:	bf16      	itet	ne
 8000750:	f82c 2b02 	strhne.w	r2, [ip], #2
 8000754:	f88c 2000 	strbeq.w	r2, [ip]
 8000758:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
 800075c:	d1b3      	bne.n	80006c6 <strcpy+0x12>
 800075e:	4770      	bx	lr
 8000760:	f811 2b01 	ldrb.w	r2, [r1], #1
 8000764:	f80c 2b01 	strb.w	r2, [ip], #1
 8000768:	2a00      	cmp	r2, #0
 800076a:	d1f9      	bne.n	8000760 <strcpy+0xac>
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop
	...

08000780 <strlen>:
 8000780:	f890 f000 	pld	[r0]
 8000784:	e96d 4502 	strd	r4, r5, [sp, #-8]!
 8000788:	f020 0107 	bic.w	r1, r0, #7
 800078c:	f06f 0c00 	mvn.w	ip, #0
 8000790:	f010 0407 	ands.w	r4, r0, #7
 8000794:	f891 f020 	pld	[r1, #32]
 8000798:	f040 8049 	bne.w	800082e <strlen+0xae>
 800079c:	f04f 0400 	mov.w	r4, #0
 80007a0:	f06f 0007 	mvn.w	r0, #7
 80007a4:	e9d1 2300 	ldrd	r2, r3, [r1]
 80007a8:	f891 f040 	pld	[r1, #64]	; 0x40
 80007ac:	f100 0008 	add.w	r0, r0, #8
 80007b0:	fa82 f24c 	uadd8	r2, r2, ip
 80007b4:	faa4 f28c 	sel	r2, r4, ip
 80007b8:	fa83 f34c 	uadd8	r3, r3, ip
 80007bc:	faa2 f38c 	sel	r3, r2, ip
 80007c0:	bb4b      	cbnz	r3, 8000816 <strlen+0x96>
 80007c2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 80007c6:	fa82 f24c 	uadd8	r2, r2, ip
 80007ca:	f100 0008 	add.w	r0, r0, #8
 80007ce:	faa4 f28c 	sel	r2, r4, ip
 80007d2:	fa83 f34c 	uadd8	r3, r3, ip
 80007d6:	faa2 f38c 	sel	r3, r2, ip
 80007da:	b9e3      	cbnz	r3, 8000816 <strlen+0x96>
 80007dc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
 80007e0:	fa82 f24c 	uadd8	r2, r2, ip
 80007e4:	f100 0008 	add.w	r0, r0, #8
 80007e8:	faa4 f28c 	sel	r2, r4, ip
 80007ec:	fa83 f34c 	uadd8	r3, r3, ip
 80007f0:	faa2 f38c 	sel	r3, r2, ip
 80007f4:	b97b      	cbnz	r3, 8000816 <strlen+0x96>
 80007f6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 80007fa:	f101 0120 	add.w	r1, r1, #32
 80007fe:	fa82 f24c 	uadd8	r2, r2, ip
 8000802:	f100 0008 	add.w	r0, r0, #8
 8000806:	faa4 f28c 	sel	r2, r4, ip
 800080a:	fa83 f34c 	uadd8	r3, r3, ip
 800080e:	faa2 f38c 	sel	r3, r2, ip
 8000812:	2b00      	cmp	r3, #0
 8000814:	d0c6      	beq.n	80007a4 <strlen+0x24>
 8000816:	2a00      	cmp	r2, #0
 8000818:	bf04      	itt	eq
 800081a:	3004      	addeq	r0, #4
 800081c:	461a      	moveq	r2, r3
 800081e:	ba12      	rev	r2, r2
 8000820:	fab2 f282 	clz	r2, r2
 8000824:	e8fd 4502 	ldrd	r4, r5, [sp], #8
 8000828:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 800082c:	4770      	bx	lr
 800082e:	e9d1 2300 	ldrd	r2, r3, [r1]
 8000832:	f004 0503 	and.w	r5, r4, #3
 8000836:	f1c4 0000 	rsb	r0, r4, #0
 800083a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 800083e:	f014 0f04 	tst.w	r4, #4
 8000842:	f891 f040 	pld	[r1, #64]	; 0x40
 8000846:	fa0c f505 	lsl.w	r5, ip, r5
 800084a:	ea62 0205 	orn	r2, r2, r5
 800084e:	bf1c      	itt	ne
 8000850:	ea63 0305 	ornne	r3, r3, r5
 8000854:	4662      	movne	r2, ip
 8000856:	f04f 0400 	mov.w	r4, #0
 800085a:	e7a9      	b.n	80007b0 <strlen+0x30>

0800085c <strtok>:
 800085c:	4a02      	ldr	r2, [pc, #8]	; (8000868 <strtok+0xc>)
 800085e:	6812      	ldr	r2, [r2, #0]
 8000860:	2301      	movs	r3, #1
 8000862:	325c      	adds	r2, #92	; 0x5c
 8000864:	f000 b802 	b.w	800086c <__strtok_r>
 8000868:	20000008 	.word	0x20000008

0800086c <__strtok_r>:
 800086c:	b4f0      	push	{r4, r5, r6, r7}
 800086e:	4607      	mov	r7, r0
 8000870:	b310      	cbz	r0, 80008b8 <__strtok_r+0x4c>
 8000872:	463e      	mov	r6, r7
 8000874:	468c      	mov	ip, r1
 8000876:	f816 0b01 	ldrb.w	r0, [r6], #1
 800087a:	e001      	b.n	8000880 <__strtok_r+0x14>
 800087c:	42a0      	cmp	r0, r4
 800087e:	d016      	beq.n	80008ae <__strtok_r+0x42>
 8000880:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8000884:	2c00      	cmp	r4, #0
 8000886:	d1f9      	bne.n	800087c <__strtok_r+0x10>
 8000888:	b1d8      	cbz	r0, 80008c2 <__strtok_r+0x56>
 800088a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800088e:	460c      	mov	r4, r1
 8000890:	e001      	b.n	8000896 <__strtok_r+0x2a>
 8000892:	2b00      	cmp	r3, #0
 8000894:	d0f9      	beq.n	800088a <__strtok_r+0x1e>
 8000896:	f814 3b01 	ldrb.w	r3, [r4], #1
 800089a:	429d      	cmp	r5, r3
 800089c:	d1f9      	bne.n	8000892 <__strtok_r+0x26>
 800089e:	b14d      	cbz	r5, 80008b4 <__strtok_r+0x48>
 80008a0:	2300      	movs	r3, #0
 80008a2:	f806 3c01 	strb.w	r3, [r6, #-1]
 80008a6:	6016      	str	r6, [r2, #0]
 80008a8:	4638      	mov	r0, r7
 80008aa:	bcf0      	pop	{r4, r5, r6, r7}
 80008ac:	4770      	bx	lr
 80008ae:	b15b      	cbz	r3, 80008c8 <__strtok_r+0x5c>
 80008b0:	4637      	mov	r7, r6
 80008b2:	e7de      	b.n	8000872 <__strtok_r+0x6>
 80008b4:	462e      	mov	r6, r5
 80008b6:	e7f6      	b.n	80008a6 <__strtok_r+0x3a>
 80008b8:	6817      	ldr	r7, [r2, #0]
 80008ba:	2f00      	cmp	r7, #0
 80008bc:	d1d9      	bne.n	8000872 <__strtok_r+0x6>
 80008be:	4638      	mov	r0, r7
 80008c0:	e7f3      	b.n	80008aa <__strtok_r+0x3e>
 80008c2:	bcf0      	pop	{r4, r5, r6, r7}
 80008c4:	6010      	str	r0, [r2, #0]
 80008c6:	4770      	bx	lr
 80008c8:	6016      	str	r6, [r2, #0]
 80008ca:	4638      	mov	r0, r7
 80008cc:	703b      	strb	r3, [r7, #0]
 80008ce:	e7ec      	b.n	80008aa <__strtok_r+0x3e>

080008d0 <strtok_r>:
 80008d0:	2301      	movs	r3, #1
 80008d2:	f7ff bfcb 	b.w	800086c <__strtok_r>
 80008d6:	bf00      	nop

080008d8 <_strtoul_l.constprop.0>:
 80008d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008dc:	4607      	mov	r7, r0
 80008de:	484b      	ldr	r0, [pc, #300]	; (8000a0c <_strtoul_l.constprop.0+0x134>)
 80008e0:	460e      	mov	r6, r1
 80008e2:	4635      	mov	r5, r6
 80008e4:	f816 cb01 	ldrb.w	ip, [r6], #1
 80008e8:	f810 400c 	ldrb.w	r4, [r0, ip]
 80008ec:	f014 0408 	ands.w	r4, r4, #8
 80008f0:	d1f7      	bne.n	80008e2 <_strtoul_l.constprop.0+0xa>
 80008f2:	f1bc 0f2d 	cmp.w	ip, #45	; 0x2d
 80008f6:	46e6      	mov	lr, ip
 80008f8:	d058      	beq.n	80009ac <_strtoul_l.constprop.0+0xd4>
 80008fa:	f1bc 0f2b 	cmp.w	ip, #43	; 0x2b
 80008fe:	bf04      	itt	eq
 8000900:	f896 e000 	ldrbeq.w	lr, [r6]
 8000904:	1cae      	addeq	r6, r5, #2
 8000906:	b15b      	cbz	r3, 8000920 <_strtoul_l.constprop.0+0x48>
 8000908:	2b10      	cmp	r3, #16
 800090a:	d054      	beq.n	80009b6 <_strtoul_l.constprop.0+0xde>
 800090c:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8000910:	fbb8 f8f3 	udiv	r8, r8, r3
 8000914:	fb03 fa08 	mul.w	sl, r3, r8
 8000918:	ea6f 0a0a 	mvn.w	sl, sl
 800091c:	4699      	mov	r9, r3
 800091e:	e008      	b.n	8000932 <_strtoul_l.constprop.0+0x5a>
 8000920:	f1be 0f30 	cmp.w	lr, #48	; 0x30
 8000924:	d05a      	beq.n	80009dc <_strtoul_l.constprop.0+0x104>
 8000926:	230a      	movs	r3, #10
 8000928:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 8000a10 <_strtoul_l.constprop.0+0x138>
 800092c:	f04f 0a05 	mov.w	sl, #5
 8000930:	4699      	mov	r9, r3
 8000932:	2500      	movs	r5, #0
 8000934:	4628      	mov	r0, r5
 8000936:	e007      	b.n	8000948 <_strtoul_l.constprop.0+0x70>
 8000938:	4540      	cmp	r0, r8
 800093a:	d815      	bhi.n	8000968 <_strtoul_l.constprop.0+0x90>
 800093c:	d029      	beq.n	8000992 <_strtoul_l.constprop.0+0xba>
 800093e:	fb09 c000 	mla	r0, r9, r0, ip
 8000942:	2501      	movs	r5, #1
 8000944:	f816 eb01 	ldrb.w	lr, [r6], #1
 8000948:	f1ae 0c30 	sub.w	ip, lr, #48	; 0x30
 800094c:	f1bc 0f09 	cmp.w	ip, #9
 8000950:	d906      	bls.n	8000960 <_strtoul_l.constprop.0+0x88>
 8000952:	f1ae 0c41 	sub.w	ip, lr, #65	; 0x41
 8000956:	f1bc 0f19 	cmp.w	ip, #25
 800095a:	d808      	bhi.n	800096e <_strtoul_l.constprop.0+0x96>
 800095c:	f1ae 0c37 	sub.w	ip, lr, #55	; 0x37
 8000960:	4563      	cmp	r3, ip
 8000962:	dd0d      	ble.n	8000980 <_strtoul_l.constprop.0+0xa8>
 8000964:	2d00      	cmp	r5, #0
 8000966:	dae7      	bge.n	8000938 <_strtoul_l.constprop.0+0x60>
 8000968:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800096c:	e7ea      	b.n	8000944 <_strtoul_l.constprop.0+0x6c>
 800096e:	f1ae 0c61 	sub.w	ip, lr, #97	; 0x61
 8000972:	f1bc 0f19 	cmp.w	ip, #25
 8000976:	d803      	bhi.n	8000980 <_strtoul_l.constprop.0+0xa8>
 8000978:	f1ae 0c57 	sub.w	ip, lr, #87	; 0x57
 800097c:	4563      	cmp	r3, ip
 800097e:	dcf1      	bgt.n	8000964 <_strtoul_l.constprop.0+0x8c>
 8000980:	2d00      	cmp	r5, #0
 8000982:	db0b      	blt.n	800099c <_strtoul_l.constprop.0+0xc4>
 8000984:	b104      	cbz	r4, 8000988 <_strtoul_l.constprop.0+0xb0>
 8000986:	4240      	negs	r0, r0
 8000988:	b10a      	cbz	r2, 800098e <_strtoul_l.constprop.0+0xb6>
 800098a:	b96d      	cbnz	r5, 80009a8 <_strtoul_l.constprop.0+0xd0>
 800098c:	6011      	str	r1, [r2, #0]
 800098e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000992:	45d4      	cmp	ip, sl
 8000994:	ddd3      	ble.n	800093e <_strtoul_l.constprop.0+0x66>
 8000996:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800099a:	e7d3      	b.n	8000944 <_strtoul_l.constprop.0+0x6c>
 800099c:	2322      	movs	r3, #34	; 0x22
 800099e:	603b      	str	r3, [r7, #0]
 80009a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009a4:	2a00      	cmp	r2, #0
 80009a6:	d0f2      	beq.n	800098e <_strtoul_l.constprop.0+0xb6>
 80009a8:	1e71      	subs	r1, r6, #1
 80009aa:	e7ef      	b.n	800098c <_strtoul_l.constprop.0+0xb4>
 80009ac:	f896 e000 	ldrb.w	lr, [r6]
 80009b0:	2401      	movs	r4, #1
 80009b2:	1cae      	adds	r6, r5, #2
 80009b4:	e7a7      	b.n	8000906 <_strtoul_l.constprop.0+0x2e>
 80009b6:	f1be 0f30 	cmp.w	lr, #48	; 0x30
 80009ba:	d121      	bne.n	8000a00 <_strtoul_l.constprop.0+0x128>
 80009bc:	7830      	ldrb	r0, [r6, #0]
 80009be:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80009c2:	2858      	cmp	r0, #88	; 0x58
 80009c4:	d116      	bne.n	80009f4 <_strtoul_l.constprop.0+0x11c>
 80009c6:	f04f 0910 	mov.w	r9, #16
 80009ca:	f896 e001 	ldrb.w	lr, [r6, #1]
 80009ce:	f04f 0a0f 	mov.w	sl, #15
 80009d2:	3602      	adds	r6, #2
 80009d4:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
 80009d8:	464b      	mov	r3, r9
 80009da:	e7aa      	b.n	8000932 <_strtoul_l.constprop.0+0x5a>
 80009dc:	7833      	ldrb	r3, [r6, #0]
 80009de:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80009e2:	2b58      	cmp	r3, #88	; 0x58
 80009e4:	d0ef      	beq.n	80009c6 <_strtoul_l.constprop.0+0xee>
 80009e6:	2308      	movs	r3, #8
 80009e8:	f04f 0a07 	mov.w	sl, #7
 80009ec:	f06f 4860 	mvn.w	r8, #3758096384	; 0xe0000000
 80009f0:	4699      	mov	r9, r3
 80009f2:	e79e      	b.n	8000932 <_strtoul_l.constprop.0+0x5a>
 80009f4:	4699      	mov	r9, r3
 80009f6:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
 80009fa:	f04f 0a0f 	mov.w	sl, #15
 80009fe:	e798      	b.n	8000932 <_strtoul_l.constprop.0+0x5a>
 8000a00:	f04f 0a0f 	mov.w	sl, #15
 8000a04:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
 8000a08:	4699      	mov	r9, r3
 8000a0a:	e792      	b.n	8000932 <_strtoul_l.constprop.0+0x5a>
 8000a0c:	0800cbe5 	.word	0x0800cbe5
 8000a10:	19999999 	.word	0x19999999

08000a14 <_strtoul_r>:
 8000a14:	e760      	b.n	80008d8 <_strtoul_l.constprop.0>
 8000a16:	bf00      	nop

08000a18 <strtoul_l>:
 8000a18:	b410      	push	{r4}
 8000a1a:	4c04      	ldr	r4, [pc, #16]	; (8000a2c <strtoul_l+0x14>)
 8000a1c:	4684      	mov	ip, r0
 8000a1e:	4613      	mov	r3, r2
 8000a20:	6820      	ldr	r0, [r4, #0]
 8000a22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000a26:	460a      	mov	r2, r1
 8000a28:	4661      	mov	r1, ip
 8000a2a:	e755      	b.n	80008d8 <_strtoul_l.constprop.0>
 8000a2c:	20000008 	.word	0x20000008

08000a30 <strtoul>:
 8000a30:	b410      	push	{r4}
 8000a32:	4c04      	ldr	r4, [pc, #16]	; (8000a44 <strtoul+0x14>)
 8000a34:	4684      	mov	ip, r0
 8000a36:	4613      	mov	r3, r2
 8000a38:	6820      	ldr	r0, [r4, #0]
 8000a3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000a3e:	460a      	mov	r2, r1
 8000a40:	4661      	mov	r1, ip
 8000a42:	e749      	b.n	80008d8 <_strtoul_l.constprop.0>
 8000a44:	20000008 	.word	0x20000008

08000a48 <_vfprintf_r>:
 8000a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a4c:	ed2d 8b06 	vpush	{d8-d10}
 8000a50:	b0bb      	sub	sp, #236	; 0xec
 8000a52:	461c      	mov	r4, r3
 8000a54:	4688      	mov	r8, r1
 8000a56:	4691      	mov	r9, r2
 8000a58:	ee09 0a10 	vmov	s18, r0
 8000a5c:	4605      	mov	r5, r0
 8000a5e:	f003 f887 	bl	8003b70 <_localeconv_r>
 8000a62:	6803      	ldr	r3, [r0, #0]
 8000a64:	9310      	str	r3, [sp, #64]	; 0x40
 8000a66:	4618      	mov	r0, r3
 8000a68:	9409      	str	r4, [sp, #36]	; 0x24
 8000a6a:	f7ff fe89 	bl	8000780 <strlen>
 8000a6e:	900e      	str	r0, [sp, #56]	; 0x38
 8000a70:	b11d      	cbz	r5, 8000a7a <_vfprintf_r+0x32>
 8000a72:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	f000 8242 	beq.w	8000efe <_vfprintf_r+0x4b6>
 8000a7a:	f9b8 200c 	ldrsh.w	r2, [r8, #12]
 8000a7e:	0495      	lsls	r5, r2, #18
 8000a80:	b293      	uxth	r3, r2
 8000a82:	d40a      	bmi.n	8000a9a <_vfprintf_r+0x52>
 8000a84:	f442 5300 	orr.w	r3, r2, #8192	; 0x2000
 8000a88:	f8d8 2064 	ldr.w	r2, [r8, #100]	; 0x64
 8000a8c:	f8a8 300c 	strh.w	r3, [r8, #12]
 8000a90:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000a94:	b29b      	uxth	r3, r3
 8000a96:	f8c8 2064 	str.w	r2, [r8, #100]	; 0x64
 8000a9a:	0718      	lsls	r0, r3, #28
 8000a9c:	f140 80ab 	bpl.w	8000bf6 <_vfprintf_r+0x1ae>
 8000aa0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8000aa4:	2a00      	cmp	r2, #0
 8000aa6:	f000 80a6 	beq.w	8000bf6 <_vfprintf_r+0x1ae>
 8000aaa:	f003 031a 	and.w	r3, r3, #26
 8000aae:	2b0a      	cmp	r3, #10
 8000ab0:	f000 80b0 	beq.w	8000c14 <_vfprintf_r+0x1cc>
 8000ab4:	ed9f 7b94 	vldr	d7, [pc, #592]	; 8000d08 <_vfprintf_r+0x2c0>
 8000ab8:	2300      	movs	r3, #0
 8000aba:	e9cd 331e 	strd	r3, r3, [sp, #120]	; 0x78
 8000abe:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8000ac2:	aa2a      	add	r2, sp, #168	; 0xa8
 8000ac4:	930b      	str	r3, [sp, #44]	; 0x2c
 8000ac6:	921d      	str	r2, [sp, #116]	; 0x74
 8000ac8:	4692      	mov	sl, r2
 8000aca:	930f      	str	r3, [sp, #60]	; 0x3c
 8000acc:	9311      	str	r3, [sp, #68]	; 0x44
 8000ace:	9307      	str	r3, [sp, #28]
 8000ad0:	f899 3000 	ldrb.w	r3, [r9]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	f000 81a4 	beq.w	8000e22 <_vfprintf_r+0x3da>
 8000ada:	464c      	mov	r4, r9
 8000adc:	e004      	b.n	8000ae8 <_vfprintf_r+0xa0>
 8000ade:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	f000 80e5 	beq.w	8000cb2 <_vfprintf_r+0x26a>
 8000ae8:	2b25      	cmp	r3, #37	; 0x25
 8000aea:	d1f8      	bne.n	8000ade <_vfprintf_r+0x96>
 8000aec:	ebb4 0509 	subs.w	r5, r4, r9
 8000af0:	f040 80e3 	bne.w	8000cba <_vfprintf_r+0x272>
 8000af4:	7823      	ldrb	r3, [r4, #0]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	f000 8193 	beq.w	8000e22 <_vfprintf_r+0x3da>
 8000afc:	2300      	movs	r3, #0
 8000afe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000b06:	7865      	ldrb	r5, [r4, #1]
 8000b08:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
 8000b0c:	f104 0901 	add.w	r9, r4, #1
 8000b10:	4618      	mov	r0, r3
 8000b12:	469b      	mov	fp, r3
 8000b14:	f109 0901 	add.w	r9, r9, #1
 8000b18:	f1a5 0220 	sub.w	r2, r5, #32
 8000b1c:	2a58      	cmp	r2, #88	; 0x58
 8000b1e:	f200 80f7 	bhi.w	8000d10 <_vfprintf_r+0x2c8>
 8000b22:	e8df f012 	tbh	[pc, r2, lsl #1]
 8000b26:	027f      	.short	0x027f
 8000b28:	00f500f5 	.word	0x00f500f5
 8000b2c:	00f5027a 	.word	0x00f5027a
 8000b30:	00f500f5 	.word	0x00f500f5
 8000b34:	00f500f5 	.word	0x00f500f5
 8000b38:	022d00f5 	.word	0x022d00f5
 8000b3c:	00f50275 	.word	0x00f50275
 8000b40:	023d0238 	.word	0x023d0238
 8000b44:	027000f5 	.word	0x027000f5
 8000b48:	00590059 	.word	0x00590059
 8000b4c:	00590059 	.word	0x00590059
 8000b50:	00590059 	.word	0x00590059
 8000b54:	00590059 	.word	0x00590059
 8000b58:	00f50059 	.word	0x00f50059
 8000b5c:	00f500f5 	.word	0x00f500f5
 8000b60:	00f500f5 	.word	0x00f500f5
 8000b64:	00f500f5 	.word	0x00f500f5
 8000b68:	00f500f5 	.word	0x00f500f5
 8000b6c:	025700f5 	.word	0x025700f5
 8000b70:	00f50189 	.word	0x00f50189
 8000b74:	00f50189 	.word	0x00f50189
 8000b78:	00f500f5 	.word	0x00f500f5
 8000b7c:	02b600f5 	.word	0x02b600f5
 8000b80:	00f500f5 	.word	0x00f500f5
 8000b84:	00f50098 	.word	0x00f50098
 8000b88:	00f500f5 	.word	0x00f500f5
 8000b8c:	00f500f5 	.word	0x00f500f5
 8000b90:	00f50088 	.word	0x00f50088
 8000b94:	029500f5 	.word	0x029500f5
 8000b98:	00f500f5 	.word	0x00f500f5
 8000b9c:	00f500f5 	.word	0x00f500f5
 8000ba0:	00f500f5 	.word	0x00f500f5
 8000ba4:	00f500f5 	.word	0x00f500f5
 8000ba8:	00f500f5 	.word	0x00f500f5
 8000bac:	01f00287 	.word	0x01f00287
 8000bb0:	01890189 	.word	0x01890189
 8000bb4:	02bb0189 	.word	0x02bb0189
 8000bb8:	00f501f0 	.word	0x00f501f0
 8000bbc:	02ec00f5 	.word	0x02ec00f5
 8000bc0:	02d600f5 	.word	0x02d600f5
 8000bc4:	02c5009a 	.word	0x02c5009a
 8000bc8:	00f502c0 	.word	0x00f502c0
 8000bcc:	00f5031b 	.word	0x00f5031b
 8000bd0:	00f5008a 	.word	0x00f5008a
 8000bd4:	02f900f5 	.word	0x02f900f5
 8000bd8:	f1a5 0230 	sub.w	r2, r5, #48	; 0x30
 8000bdc:	2100      	movs	r1, #0
 8000bde:	f819 5b01 	ldrb.w	r5, [r9], #1
 8000be2:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8000be6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8000bea:	f1a5 0230 	sub.w	r2, r5, #48	; 0x30
 8000bee:	2a09      	cmp	r2, #9
 8000bf0:	d9f5      	bls.n	8000bde <_vfprintf_r+0x196>
 8000bf2:	9106      	str	r1, [sp, #24]
 8000bf4:	e790      	b.n	8000b18 <_vfprintf_r+0xd0>
 8000bf6:	ee19 0a10 	vmov	r0, s18
 8000bfa:	4641      	mov	r1, r8
 8000bfc:	f001 f9f2 	bl	8001fe4 <__swsetup_r>
 8000c00:	2800      	cmp	r0, #0
 8000c02:	f041 8126 	bne.w	8001e52 <_vfprintf_r+0x140a>
 8000c06:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8000c0a:	f003 031a 	and.w	r3, r3, #26
 8000c0e:	2b0a      	cmp	r3, #10
 8000c10:	f47f af50 	bne.w	8000ab4 <_vfprintf_r+0x6c>
 8000c14:	f9b8 300e 	ldrsh.w	r3, [r8, #14]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	f6ff af4b 	blt.w	8000ab4 <_vfprintf_r+0x6c>
 8000c1e:	ee19 0a10 	vmov	r0, s18
 8000c22:	4623      	mov	r3, r4
 8000c24:	464a      	mov	r2, r9
 8000c26:	4641      	mov	r1, r8
 8000c28:	b03b      	add	sp, #236	; 0xec
 8000c2a:	ecbd 8b06 	vpop	{d8-d10}
 8000c2e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c32:	f001 b9a1 	b.w	8001f78 <__sbprintf>
 8000c36:	f04b 0b10 	orr.w	fp, fp, #16
 8000c3a:	f01b 0120 	ands.w	r1, fp, #32
 8000c3e:	f000 8150 	beq.w	8000ee2 <_vfprintf_r+0x49a>
 8000c42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000c44:	3307      	adds	r3, #7
 8000c46:	f023 0307 	bic.w	r3, r3, #7
 8000c4a:	6859      	ldr	r1, [r3, #4]
 8000c4c:	f853 0b08 	ldr.w	r0, [r3], #8
 8000c50:	9309      	str	r3, [sp, #36]	; 0x24
 8000c52:	2301      	movs	r3, #1
 8000c54:	e00e      	b.n	8000c74 <_vfprintf_r+0x22c>
 8000c56:	f04b 0b10 	orr.w	fp, fp, #16
 8000c5a:	f01b 0120 	ands.w	r1, fp, #32
 8000c5e:	f000 8133 	beq.w	8000ec8 <_vfprintf_r+0x480>
 8000c62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000c64:	3307      	adds	r3, #7
 8000c66:	f023 0307 	bic.w	r3, r3, #7
 8000c6a:	6859      	ldr	r1, [r3, #4]
 8000c6c:	f853 0b08 	ldr.w	r0, [r3], #8
 8000c70:	9309      	str	r3, [sp, #36]	; 0x24
 8000c72:	2300      	movs	r3, #0
 8000c74:	2400      	movs	r4, #0
 8000c76:	f88d 4057 	strb.w	r4, [sp, #87]	; 0x57
 8000c7a:	9a05      	ldr	r2, [sp, #20]
 8000c7c:	1c56      	adds	r6, r2, #1
 8000c7e:	f000 8291 	beq.w	80011a4 <_vfprintf_r+0x75c>
 8000c82:	f02b 0680 	bic.w	r6, fp, #128	; 0x80
 8000c86:	9603      	str	r6, [sp, #12]
 8000c88:	ea50 0601 	orrs.w	r6, r0, r1
 8000c8c:	f040 8288 	bne.w	80011a0 <_vfprintf_r+0x758>
 8000c90:	2a00      	cmp	r2, #0
 8000c92:	f040 830d 	bne.w	80012b0 <_vfprintf_r+0x868>
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	f040 851e 	bne.w	80016d8 <_vfprintf_r+0xc90>
 8000c9c:	f01b 0301 	ands.w	r3, fp, #1
 8000ca0:	9308      	str	r3, [sp, #32]
 8000ca2:	f000 8594 	beq.w	80017ce <_vfprintf_r+0xd86>
 8000ca6:	2330      	movs	r3, #48	; 0x30
 8000ca8:	f88d 30a7 	strb.w	r3, [sp, #167]	; 0xa7
 8000cac:	f10d 06a7 	add.w	r6, sp, #167	; 0xa7
 8000cb0:	e29d      	b.n	80011ee <_vfprintf_r+0x7a6>
 8000cb2:	ebb4 0509 	subs.w	r5, r4, r9
 8000cb6:	f000 80b4 	beq.w	8000e22 <_vfprintf_r+0x3da>
 8000cba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8000cbc:	442b      	add	r3, r5
 8000cbe:	931f      	str	r3, [sp, #124]	; 0x7c
 8000cc0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8000cc2:	3301      	adds	r3, #1
 8000cc4:	2b07      	cmp	r3, #7
 8000cc6:	e9ca 9500 	strd	r9, r5, [sl]
 8000cca:	931e      	str	r3, [sp, #120]	; 0x78
 8000ccc:	dc05      	bgt.n	8000cda <_vfprintf_r+0x292>
 8000cce:	f10a 0a08 	add.w	sl, sl, #8
 8000cd2:	9b07      	ldr	r3, [sp, #28]
 8000cd4:	442b      	add	r3, r5
 8000cd6:	9307      	str	r3, [sp, #28]
 8000cd8:	e70c      	b.n	8000af4 <_vfprintf_r+0xac>
 8000cda:	ee19 0a10 	vmov	r0, s18
 8000cde:	aa1d      	add	r2, sp, #116	; 0x74
 8000ce0:	4641      	mov	r1, r8
 8000ce2:	f004 fc33 	bl	800554c <__sprint_r>
 8000ce6:	b918      	cbnz	r0, 8000cf0 <_vfprintf_r+0x2a8>
 8000ce8:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 8000cec:	e7f1      	b.n	8000cd2 <_vfprintf_r+0x28a>
 8000cee:	46b0      	mov	r8, r6
 8000cf0:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8000cf4:	065b      	lsls	r3, r3, #25
 8000cf6:	f101 80ac 	bmi.w	8001e52 <_vfprintf_r+0x140a>
 8000cfa:	9807      	ldr	r0, [sp, #28]
 8000cfc:	b03b      	add	sp, #236	; 0xec
 8000cfe:	ecbd 8b06 	vpop	{d8-d10}
 8000d02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d06:	bf00      	nop
	...
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	f040 87e5 	bne.w	8001ce0 <_vfprintf_r+0x1298>
 8000d16:	2d00      	cmp	r5, #0
 8000d18:	f000 8083 	beq.w	8000e22 <_vfprintf_r+0x3da>
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
 8000d22:	2301      	movs	r3, #1
 8000d24:	f88d 5080 	strb.w	r5, [sp, #128]	; 0x80
 8000d28:	9304      	str	r3, [sp, #16]
 8000d2a:	9308      	str	r3, [sp, #32]
 8000d2c:	ae20      	add	r6, sp, #128	; 0x80
 8000d2e:	2300      	movs	r3, #0
 8000d30:	f8cd b00c 	str.w	fp, [sp, #12]
 8000d34:	9305      	str	r3, [sp, #20]
 8000d36:	930a      	str	r3, [sp, #40]	; 0x28
 8000d38:	9b03      	ldr	r3, [sp, #12]
 8000d3a:	f013 0302 	ands.w	r3, r3, #2
 8000d3e:	d002      	beq.n	8000d46 <_vfprintf_r+0x2fe>
 8000d40:	9a04      	ldr	r2, [sp, #16]
 8000d42:	3202      	adds	r2, #2
 8000d44:	9204      	str	r2, [sp, #16]
 8000d46:	9a03      	ldr	r2, [sp, #12]
 8000d48:	f012 0b84 	ands.w	fp, r2, #132	; 0x84
 8000d4c:	d105      	bne.n	8000d5a <_vfprintf_r+0x312>
 8000d4e:	9a06      	ldr	r2, [sp, #24]
 8000d50:	9904      	ldr	r1, [sp, #16]
 8000d52:	1a57      	subs	r7, r2, r1
 8000d54:	2f00      	cmp	r7, #0
 8000d56:	f300 83a2 	bgt.w	800149e <_vfprintf_r+0xa56>
 8000d5a:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 8000d5c:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
 8000d60:	b18a      	cbz	r2, 8000d86 <_vfprintf_r+0x33e>
 8000d62:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8000d64:	f10d 0157 	add.w	r1, sp, #87	; 0x57
 8000d68:	3201      	adds	r2, #1
 8000d6a:	3401      	adds	r4, #1
 8000d6c:	f8ca 1000 	str.w	r1, [sl]
 8000d70:	2a07      	cmp	r2, #7
 8000d72:	f04f 0101 	mov.w	r1, #1
 8000d76:	941f      	str	r4, [sp, #124]	; 0x7c
 8000d78:	921e      	str	r2, [sp, #120]	; 0x78
 8000d7a:	f8ca 1004 	str.w	r1, [sl, #4]
 8000d7e:	f300 83dd 	bgt.w	800153c <_vfprintf_r+0xaf4>
 8000d82:	f10a 0a08 	add.w	sl, sl, #8
 8000d86:	b183      	cbz	r3, 8000daa <_vfprintf_r+0x362>
 8000d88:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8000d8a:	aa16      	add	r2, sp, #88	; 0x58
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	3402      	adds	r4, #2
 8000d90:	f8ca 2000 	str.w	r2, [sl]
 8000d94:	2b07      	cmp	r3, #7
 8000d96:	f04f 0202 	mov.w	r2, #2
 8000d9a:	941f      	str	r4, [sp, #124]	; 0x7c
 8000d9c:	931e      	str	r3, [sp, #120]	; 0x78
 8000d9e:	f8ca 2004 	str.w	r2, [sl, #4]
 8000da2:	f300 83da 	bgt.w	800155a <_vfprintf_r+0xb12>
 8000da6:	f10a 0a08 	add.w	sl, sl, #8
 8000daa:	f1bb 0f80 	cmp.w	fp, #128	; 0x80
 8000dae:	f000 829b 	beq.w	80012e8 <_vfprintf_r+0x8a0>
 8000db2:	9b05      	ldr	r3, [sp, #20]
 8000db4:	9a08      	ldr	r2, [sp, #32]
 8000db6:	eba3 0b02 	sub.w	fp, r3, r2
 8000dba:	f1bb 0f00 	cmp.w	fp, #0
 8000dbe:	f300 82d6 	bgt.w	800136e <_vfprintf_r+0x926>
 8000dc2:	9b03      	ldr	r3, [sp, #12]
 8000dc4:	05df      	lsls	r7, r3, #23
 8000dc6:	f100 821b 	bmi.w	8001200 <_vfprintf_r+0x7b8>
 8000dca:	9b08      	ldr	r3, [sp, #32]
 8000dcc:	f8ca 3004 	str.w	r3, [sl, #4]
 8000dd0:	441c      	add	r4, r3
 8000dd2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8000dd4:	f8ca 6000 	str.w	r6, [sl]
 8000dd8:	3301      	adds	r3, #1
 8000dda:	2b07      	cmp	r3, #7
 8000ddc:	941f      	str	r4, [sp, #124]	; 0x7c
 8000dde:	931e      	str	r3, [sp, #120]	; 0x78
 8000de0:	f300 8350 	bgt.w	8001484 <_vfprintf_r+0xa3c>
 8000de4:	f10a 0a08 	add.w	sl, sl, #8
 8000de8:	9b03      	ldr	r3, [sp, #12]
 8000dea:	075a      	lsls	r2, r3, #29
 8000dec:	d505      	bpl.n	8000dfa <_vfprintf_r+0x3b2>
 8000dee:	9b06      	ldr	r3, [sp, #24]
 8000df0:	9a04      	ldr	r2, [sp, #16]
 8000df2:	1a9d      	subs	r5, r3, r2
 8000df4:	2d00      	cmp	r5, #0
 8000df6:	f300 83bd 	bgt.w	8001574 <_vfprintf_r+0xb2c>
 8000dfa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8000dfe:	9904      	ldr	r1, [sp, #16]
 8000e00:	428a      	cmp	r2, r1
 8000e02:	bfac      	ite	ge
 8000e04:	189b      	addge	r3, r3, r2
 8000e06:	185b      	addlt	r3, r3, r1
 8000e08:	9307      	str	r3, [sp, #28]
 8000e0a:	2c00      	cmp	r4, #0
 8000e0c:	f040 82ea 	bne.w	80013e4 <_vfprintf_r+0x99c>
 8000e10:	2300      	movs	r3, #0
 8000e12:	931e      	str	r3, [sp, #120]	; 0x78
 8000e14:	f899 3000 	ldrb.w	r3, [r9]
 8000e18:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	f47f ae5c 	bne.w	8000ada <_vfprintf_r+0x92>
 8000e22:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	f43f af63 	beq.w	8000cf0 <_vfprintf_r+0x2a8>
 8000e2a:	ee19 0a10 	vmov	r0, s18
 8000e2e:	aa1d      	add	r2, sp, #116	; 0x74
 8000e30:	4641      	mov	r1, r8
 8000e32:	f004 fb8b 	bl	800554c <__sprint_r>
 8000e36:	e75b      	b.n	8000cf0 <_vfprintf_r+0x2a8>
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	f040 87f6 	bne.w	8001e2a <_vfprintf_r+0x13e2>
 8000e3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000e40:	3307      	adds	r3, #7
 8000e42:	f023 0307 	bic.w	r3, r3, #7
 8000e46:	ecb3 7b02 	vldmia	r3!, {d7}
 8000e4a:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8000e4e:	e9dd 670c 	ldrd	r6, r7, [sp, #48]	; 0x30
 8000e52:	9309      	str	r3, [sp, #36]	; 0x24
 8000e54:	f027 4300 	bic.w	r3, r7, #2147483648	; 0x80000000
 8000e58:	ee08 3a90 	vmov	s17, r3
 8000e5c:	ee08 6a10 	vmov	s16, r6
 8000e60:	4bb9      	ldr	r3, [pc, #740]	; (8001148 <_vfprintf_r+0x700>)
 8000e62:	ec51 0b18 	vmov	r0, r1, d8
 8000e66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e6a:	f006 fb9d 	bl	80075a8 <__aeabi_dcmpun>
 8000e6e:	2800      	cmp	r0, #0
 8000e70:	f040 84b4 	bne.w	80017dc <_vfprintf_r+0xd94>
 8000e74:	4bb4      	ldr	r3, [pc, #720]	; (8001148 <_vfprintf_r+0x700>)
 8000e76:	ec51 0b18 	vmov	r0, r1, d8
 8000e7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e7e:	f006 fb75 	bl	800756c <__aeabi_dcmple>
 8000e82:	2800      	cmp	r0, #0
 8000e84:	f040 84aa 	bne.w	80017dc <_vfprintf_r+0xd94>
 8000e88:	2200      	movs	r2, #0
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	4630      	mov	r0, r6
 8000e8e:	4639      	mov	r1, r7
 8000e90:	f006 fb62 	bl	8007558 <__aeabi_dcmplt>
 8000e94:	2800      	cmp	r0, #0
 8000e96:	f040 8702 	bne.w	8001c9e <_vfprintf_r+0x1256>
 8000e9a:	f89d 4057 	ldrb.w	r4, [sp, #87]	; 0x57
 8000e9e:	4eab      	ldr	r6, [pc, #684]	; (800114c <_vfprintf_r+0x704>)
 8000ea0:	f02b 0380 	bic.w	r3, fp, #128	; 0x80
 8000ea4:	9303      	str	r3, [sp, #12]
 8000ea6:	4baa      	ldr	r3, [pc, #680]	; (8001150 <_vfprintf_r+0x708>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	2d47      	cmp	r5, #71	; 0x47
 8000eac:	bfc8      	it	gt
 8000eae:	461e      	movgt	r6, r3
 8000eb0:	2303      	movs	r3, #3
 8000eb2:	e9cd 3204 	strd	r3, r2, [sp, #16]
 8000eb6:	9308      	str	r3, [sp, #32]
 8000eb8:	920a      	str	r2, [sp, #40]	; 0x28
 8000eba:	2c00      	cmp	r4, #0
 8000ebc:	f43f af3c 	beq.w	8000d38 <_vfprintf_r+0x2f0>
 8000ec0:	9b04      	ldr	r3, [sp, #16]
 8000ec2:	3301      	adds	r3, #1
 8000ec4:	9304      	str	r3, [sp, #16]
 8000ec6:	e737      	b.n	8000d38 <_vfprintf_r+0x2f0>
 8000ec8:	f01b 0310 	ands.w	r3, fp, #16
 8000ecc:	d152      	bne.n	8000f74 <_vfprintf_r+0x52c>
 8000ece:	f01b 0140 	ands.w	r1, fp, #64	; 0x40
 8000ed2:	d04f      	beq.n	8000f74 <_vfprintf_r+0x52c>
 8000ed4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000ed6:	f852 0b04 	ldr.w	r0, [r2], #4
 8000eda:	9209      	str	r2, [sp, #36]	; 0x24
 8000edc:	4619      	mov	r1, r3
 8000ede:	b280      	uxth	r0, r0
 8000ee0:	e6c8      	b.n	8000c74 <_vfprintf_r+0x22c>
 8000ee2:	f01b 0310 	ands.w	r3, fp, #16
 8000ee6:	d13f      	bne.n	8000f68 <_vfprintf_r+0x520>
 8000ee8:	f01b 0140 	ands.w	r1, fp, #64	; 0x40
 8000eec:	d03c      	beq.n	8000f68 <_vfprintf_r+0x520>
 8000eee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000ef0:	f852 0b04 	ldr.w	r0, [r2], #4
 8000ef4:	9209      	str	r2, [sp, #36]	; 0x24
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	b280      	uxth	r0, r0
 8000efa:	2301      	movs	r3, #1
 8000efc:	e6ba      	b.n	8000c74 <_vfprintf_r+0x22c>
 8000efe:	4628      	mov	r0, r5
 8000f00:	f002 fb02 	bl	8003508 <__sinit>
 8000f04:	e5b9      	b.n	8000a7a <_vfprintf_r+0x32>
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	f040 879f 	bne.w	8001e4a <_vfprintf_r+0x1402>
 8000f0c:	f01b 0f20 	tst.w	fp, #32
 8000f10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000f12:	d068      	beq.n	8000fe6 <_vfprintf_r+0x59e>
 8000f14:	3307      	adds	r3, #7
 8000f16:	f023 0307 	bic.w	r3, r3, #7
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	f852 0b08 	ldr.w	r0, [r2], #8
 8000f22:	9209      	str	r2, [sp, #36]	; 0x24
 8000f24:	4619      	mov	r1, r3
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	f2c0 843d 	blt.w	80017a6 <_vfprintf_r+0xd5e>
 8000f2c:	9b05      	ldr	r3, [sp, #20]
 8000f2e:	3301      	adds	r3, #1
 8000f30:	f000 8505 	beq.w	800193e <_vfprintf_r+0xef6>
 8000f34:	f02b 0380 	bic.w	r3, fp, #128	; 0x80
 8000f38:	9303      	str	r3, [sp, #12]
 8000f3a:	ea50 0301 	orrs.w	r3, r0, r1
 8000f3e:	f89d 4057 	ldrb.w	r4, [sp, #87]	; 0x57
 8000f42:	f000 83c5 	beq.w	80016d0 <_vfprintf_r+0xc88>
 8000f46:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8000f4a:	280a      	cmp	r0, #10
 8000f4c:	f171 0300 	sbcs.w	r3, r1, #0
 8000f50:	f080 84fc 	bcs.w	800194c <_vfprintf_r+0xf04>
 8000f54:	3030      	adds	r0, #48	; 0x30
 8000f56:	2301      	movs	r3, #1
 8000f58:	f88d 00a7 	strb.w	r0, [sp, #167]	; 0xa7
 8000f5c:	f8cd b00c 	str.w	fp, [sp, #12]
 8000f60:	9308      	str	r3, [sp, #32]
 8000f62:	f10d 06a7 	add.w	r6, sp, #167	; 0xa7
 8000f66:	e142      	b.n	80011ee <_vfprintf_r+0x7a6>
 8000f68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000f6a:	f853 0b04 	ldr.w	r0, [r3], #4
 8000f6e:	9309      	str	r3, [sp, #36]	; 0x24
 8000f70:	2301      	movs	r3, #1
 8000f72:	e67f      	b.n	8000c74 <_vfprintf_r+0x22c>
 8000f74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000f76:	f853 0b04 	ldr.w	r0, [r3], #4
 8000f7a:	9309      	str	r3, [sp, #36]	; 0x24
 8000f7c:	460b      	mov	r3, r1
 8000f7e:	e679      	b.n	8000c74 <_vfprintf_r+0x22c>
 8000f80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000f82:	f852 1b04 	ldr.w	r1, [r2], #4
 8000f86:	9106      	str	r1, [sp, #24]
 8000f88:	2900      	cmp	r1, #0
 8000f8a:	f280 841b 	bge.w	80017c4 <_vfprintf_r+0xd7c>
 8000f8e:	9906      	ldr	r1, [sp, #24]
 8000f90:	9209      	str	r2, [sp, #36]	; 0x24
 8000f92:	4249      	negs	r1, r1
 8000f94:	9106      	str	r1, [sp, #24]
 8000f96:	f899 5000 	ldrb.w	r5, [r9]
 8000f9a:	f04b 0b04 	orr.w	fp, fp, #4
 8000f9e:	e5b9      	b.n	8000b14 <_vfprintf_r+0xcc>
 8000fa0:	4649      	mov	r1, r9
 8000fa2:	f811 5b01 	ldrb.w	r5, [r1], #1
 8000fa6:	2d2a      	cmp	r5, #42	; 0x2a
 8000fa8:	f000 87c5 	beq.w	8001f36 <_vfprintf_r+0x14ee>
 8000fac:	f1a5 0230 	sub.w	r2, r5, #48	; 0x30
 8000fb0:	2a09      	cmp	r2, #9
 8000fb2:	4689      	mov	r9, r1
 8000fb4:	bf98      	it	ls
 8000fb6:	2100      	movls	r1, #0
 8000fb8:	f200 8733 	bhi.w	8001e22 <_vfprintf_r+0x13da>
 8000fbc:	f819 5b01 	ldrb.w	r5, [r9], #1
 8000fc0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8000fc4:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8000fc8:	f1a5 0230 	sub.w	r2, r5, #48	; 0x30
 8000fcc:	2a09      	cmp	r2, #9
 8000fce:	d9f5      	bls.n	8000fbc <_vfprintf_r+0x574>
 8000fd0:	9105      	str	r1, [sp, #20]
 8000fd2:	e5a1      	b.n	8000b18 <_vfprintf_r+0xd0>
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	f040 8730 	bne.w	8001e3a <_vfprintf_r+0x13f2>
 8000fda:	f04b 0b10 	orr.w	fp, fp, #16
 8000fde:	f01b 0f20 	tst.w	fp, #32
 8000fe2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000fe4:	d196      	bne.n	8000f14 <_vfprintf_r+0x4cc>
 8000fe6:	f853 0b04 	ldr.w	r0, [r3], #4
 8000fea:	9309      	str	r3, [sp, #36]	; 0x24
 8000fec:	f01b 0f10 	tst.w	fp, #16
 8000ff0:	f040 83d4 	bne.w	800179c <_vfprintf_r+0xd54>
 8000ff4:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8000ff8:	f000 83d0 	beq.w	800179c <_vfprintf_r+0xd54>
 8000ffc:	f340 31c0 	sbfx	r1, r0, #15, #1
 8001000:	460b      	mov	r3, r1
 8001002:	b200      	sxth	r0, r0
 8001004:	e78f      	b.n	8000f26 <_vfprintf_r+0x4de>
 8001006:	f899 5000 	ldrb.w	r5, [r9]
 800100a:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
 800100e:	e581      	b.n	8000b14 <_vfprintf_r+0xcc>
 8001010:	f899 5000 	ldrb.w	r5, [r9]
 8001014:	2301      	movs	r3, #1
 8001016:	202b      	movs	r0, #43	; 0x2b
 8001018:	e57c      	b.n	8000b14 <_vfprintf_r+0xcc>
 800101a:	f899 5000 	ldrb.w	r5, [r9]
 800101e:	f04b 0b01 	orr.w	fp, fp, #1
 8001022:	e577      	b.n	8000b14 <_vfprintf_r+0xcc>
 8001024:	f899 5000 	ldrb.w	r5, [r9]
 8001028:	2800      	cmp	r0, #0
 800102a:	f47f ad73 	bne.w	8000b14 <_vfprintf_r+0xcc>
 800102e:	2301      	movs	r3, #1
 8001030:	2020      	movs	r0, #32
 8001032:	e56f      	b.n	8000b14 <_vfprintf_r+0xcc>
 8001034:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001036:	2200      	movs	r2, #0
 8001038:	f88d 2057 	strb.w	r2, [sp, #87]	; 0x57
 800103c:	f853 2b04 	ldr.w	r2, [r3], #4
 8001040:	9309      	str	r3, [sp, #36]	; 0x24
 8001042:	2301      	movs	r3, #1
 8001044:	f88d 2080 	strb.w	r2, [sp, #128]	; 0x80
 8001048:	9304      	str	r3, [sp, #16]
 800104a:	9308      	str	r3, [sp, #32]
 800104c:	ae20      	add	r6, sp, #128	; 0x80
 800104e:	e66e      	b.n	8000d2e <_vfprintf_r+0x2e6>
 8001050:	2b00      	cmp	r3, #0
 8001052:	f040 86e2 	bne.w	8001e1a <_vfprintf_r+0x13d2>
 8001056:	4b3f      	ldr	r3, [pc, #252]	; (8001154 <_vfprintf_r+0x70c>)
 8001058:	930f      	str	r3, [sp, #60]	; 0x3c
 800105a:	f01b 0120 	ands.w	r1, fp, #32
 800105e:	d063      	beq.n	8001128 <_vfprintf_r+0x6e0>
 8001060:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001062:	3307      	adds	r3, #7
 8001064:	f023 0307 	bic.w	r3, r3, #7
 8001068:	6859      	ldr	r1, [r3, #4]
 800106a:	f853 0b08 	ldr.w	r0, [r3], #8
 800106e:	9309      	str	r3, [sp, #36]	; 0x24
 8001070:	f01b 0f01 	tst.w	fp, #1
 8001074:	d00b      	beq.n	800108e <_vfprintf_r+0x646>
 8001076:	ea50 0301 	orrs.w	r3, r0, r1
 800107a:	d008      	beq.n	800108e <_vfprintf_r+0x646>
 800107c:	2330      	movs	r3, #48	; 0x30
 800107e:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
 8001082:	f88d 5059 	strb.w	r5, [sp, #89]	; 0x59
 8001086:	f04b 0b02 	orr.w	fp, fp, #2
 800108a:	2302      	movs	r3, #2
 800108c:	e5f2      	b.n	8000c74 <_vfprintf_r+0x22c>
 800108e:	2302      	movs	r3, #2
 8001090:	e5f0      	b.n	8000c74 <_vfprintf_r+0x22c>
 8001092:	f899 5000 	ldrb.w	r5, [r9]
 8001096:	f04b 0b08 	orr.w	fp, fp, #8
 800109a:	e53b      	b.n	8000b14 <_vfprintf_r+0xcc>
 800109c:	f899 5000 	ldrb.w	r5, [r9]
 80010a0:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
 80010a4:	e536      	b.n	8000b14 <_vfprintf_r+0xcc>
 80010a6:	f899 5000 	ldrb.w	r5, [r9]
 80010aa:	f04b 0b20 	orr.w	fp, fp, #32
 80010ae:	e531      	b.n	8000b14 <_vfprintf_r+0xcc>
 80010b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80010b2:	f853 0b04 	ldr.w	r0, [r3], #4
 80010b6:	9309      	str	r3, [sp, #36]	; 0x24
 80010b8:	2330      	movs	r3, #48	; 0x30
 80010ba:	2578      	movs	r5, #120	; 0x78
 80010bc:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
 80010c0:	4b25      	ldr	r3, [pc, #148]	; (8001158 <_vfprintf_r+0x710>)
 80010c2:	930f      	str	r3, [sp, #60]	; 0x3c
 80010c4:	f04b 0b02 	orr.w	fp, fp, #2
 80010c8:	f88d 5059 	strb.w	r5, [sp, #89]	; 0x59
 80010cc:	2100      	movs	r1, #0
 80010ce:	2302      	movs	r3, #2
 80010d0:	e5d0      	b.n	8000c74 <_vfprintf_r+0x22c>
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	f040 86ad 	bne.w	8001e32 <_vfprintf_r+0x13ea>
 80010d8:	f01b 0f20 	tst.w	fp, #32
 80010dc:	f040 8425 	bne.w	800192a <_vfprintf_r+0xee2>
 80010e0:	f01b 0f10 	tst.w	fp, #16
 80010e4:	f040 849d 	bne.w	8001a22 <_vfprintf_r+0xfda>
 80010e8:	f01b 0f40 	tst.w	fp, #64	; 0x40
 80010ec:	f000 8499 	beq.w	8001a22 <_vfprintf_r+0xfda>
 80010f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80010f2:	9907      	ldr	r1, [sp, #28]
 80010f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80010f8:	9309      	str	r3, [sp, #36]	; 0x24
 80010fa:	8011      	strh	r1, [r2, #0]
 80010fc:	e4e8      	b.n	8000ad0 <_vfprintf_r+0x88>
 80010fe:	f899 5000 	ldrb.w	r5, [r9]
 8001102:	2d6c      	cmp	r5, #108	; 0x6c
 8001104:	bf03      	ittte	eq
 8001106:	f899 5001 	ldrbeq.w	r5, [r9, #1]
 800110a:	f04b 0b20 	orreq.w	fp, fp, #32
 800110e:	f109 0901 	addeq.w	r9, r9, #1
 8001112:	f04b 0b10 	orrne.w	fp, fp, #16
 8001116:	e4fd      	b.n	8000b14 <_vfprintf_r+0xcc>
 8001118:	2b00      	cmp	r3, #0
 800111a:	f040 8692 	bne.w	8001e42 <_vfprintf_r+0x13fa>
 800111e:	4b0e      	ldr	r3, [pc, #56]	; (8001158 <_vfprintf_r+0x710>)
 8001120:	930f      	str	r3, [sp, #60]	; 0x3c
 8001122:	f01b 0120 	ands.w	r1, fp, #32
 8001126:	d19b      	bne.n	8001060 <_vfprintf_r+0x618>
 8001128:	f01b 0310 	ands.w	r3, fp, #16
 800112c:	f040 8331 	bne.w	8001792 <_vfprintf_r+0xd4a>
 8001130:	f01b 0140 	ands.w	r1, fp, #64	; 0x40
 8001134:	f000 832d 	beq.w	8001792 <_vfprintf_r+0xd4a>
 8001138:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800113a:	f852 0b04 	ldr.w	r0, [r2], #4
 800113e:	9209      	str	r2, [sp, #36]	; 0x24
 8001140:	4619      	mov	r1, r3
 8001142:	b280      	uxth	r0, r0
 8001144:	e794      	b.n	8001070 <_vfprintf_r+0x628>
 8001146:	bf00      	nop
 8001148:	7fefffff 	.word	0x7fefffff
 800114c:	0801c0c4 	.word	0x0801c0c4
 8001150:	0801c0c8 	.word	0x0801c0c8
 8001154:	0801c0e8 	.word	0x0801c0e8
 8001158:	0801c0d4 	.word	0x0801c0d4
 800115c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800115e:	9b05      	ldr	r3, [sp, #20]
 8001160:	f854 6b04 	ldr.w	r6, [r4], #4
 8001164:	2700      	movs	r7, #0
 8001166:	f88d 7057 	strb.w	r7, [sp, #87]	; 0x57
 800116a:	2e00      	cmp	r6, #0
 800116c:	f000 8427 	beq.w	80019be <_vfprintf_r+0xf76>
 8001170:	1c5a      	adds	r2, r3, #1
 8001172:	f000 8523 	beq.w	8001bbc <_vfprintf_r+0x1174>
 8001176:	461a      	mov	r2, r3
 8001178:	4639      	mov	r1, r7
 800117a:	4630      	mov	r0, r6
 800117c:	f003 f860 	bl	8004240 <memchr>
 8001180:	2800      	cmp	r0, #0
 8001182:	f000 8632 	beq.w	8001dea <_vfprintf_r+0x13a2>
 8001186:	1b83      	subs	r3, r0, r6
 8001188:	9308      	str	r3, [sp, #32]
 800118a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800118e:	9409      	str	r4, [sp, #36]	; 0x24
 8001190:	9705      	str	r7, [sp, #20]
 8001192:	f89d 4057 	ldrb.w	r4, [sp, #87]	; 0x57
 8001196:	f8cd b00c 	str.w	fp, [sp, #12]
 800119a:	9304      	str	r3, [sp, #16]
 800119c:	970a      	str	r7, [sp, #40]	; 0x28
 800119e:	e68c      	b.n	8000eba <_vfprintf_r+0x472>
 80011a0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	f43f aed0 	beq.w	8000f4a <_vfprintf_r+0x502>
 80011aa:	2b02      	cmp	r3, #2
 80011ac:	f000 8088 	beq.w	80012c0 <_vfprintf_r+0x878>
 80011b0:	ae2a      	add	r6, sp, #168	; 0xa8
 80011b2:	f000 0307 	and.w	r3, r0, #7
 80011b6:	08c0      	lsrs	r0, r0, #3
 80011b8:	ea40 7041 	orr.w	r0, r0, r1, lsl #29
 80011bc:	08c9      	lsrs	r1, r1, #3
 80011be:	3330      	adds	r3, #48	; 0x30
 80011c0:	ea50 0701 	orrs.w	r7, r0, r1
 80011c4:	4632      	mov	r2, r6
 80011c6:	f806 3d01 	strb.w	r3, [r6, #-1]!
 80011ca:	d1f2      	bne.n	80011b2 <_vfprintf_r+0x76a>
 80011cc:	f01b 0f01 	tst.w	fp, #1
 80011d0:	f000 8084 	beq.w	80012dc <_vfprintf_r+0x894>
 80011d4:	2b30      	cmp	r3, #48	; 0x30
 80011d6:	f000 8081 	beq.w	80012dc <_vfprintf_r+0x894>
 80011da:	2330      	movs	r3, #48	; 0x30
 80011dc:	3a02      	subs	r2, #2
 80011de:	f806 3c01 	strb.w	r3, [r6, #-1]
 80011e2:	ab2a      	add	r3, sp, #168	; 0xa8
 80011e4:	1a9b      	subs	r3, r3, r2
 80011e6:	f8cd b00c 	str.w	fp, [sp, #12]
 80011ea:	9308      	str	r3, [sp, #32]
 80011ec:	4616      	mov	r6, r2
 80011ee:	9b05      	ldr	r3, [sp, #20]
 80011f0:	9a08      	ldr	r2, [sp, #32]
 80011f2:	4293      	cmp	r3, r2
 80011f4:	bfb8      	it	lt
 80011f6:	4613      	movlt	r3, r2
 80011f8:	9304      	str	r3, [sp, #16]
 80011fa:	2300      	movs	r3, #0
 80011fc:	930a      	str	r3, [sp, #40]	; 0x28
 80011fe:	e65c      	b.n	8000eba <_vfprintf_r+0x472>
 8001200:	2d65      	cmp	r5, #101	; 0x65
 8001202:	f340 80f9 	ble.w	80013f8 <_vfprintf_r+0x9b0>
 8001206:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800120a:	2200      	movs	r2, #0
 800120c:	2300      	movs	r3, #0
 800120e:	f006 f999 	bl	8007544 <__aeabi_dcmpeq>
 8001212:	2800      	cmp	r0, #0
 8001214:	f000 81e9 	beq.w	80015ea <_vfprintf_r+0xba2>
 8001218:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800121a:	4ac5      	ldr	r2, [pc, #788]	; (8001530 <_vfprintf_r+0xae8>)
 800121c:	f8ca 2000 	str.w	r2, [sl]
 8001220:	3301      	adds	r3, #1
 8001222:	3401      	adds	r4, #1
 8001224:	2201      	movs	r2, #1
 8001226:	2b07      	cmp	r3, #7
 8001228:	941f      	str	r4, [sp, #124]	; 0x7c
 800122a:	931e      	str	r3, [sp, #120]	; 0x78
 800122c:	f8ca 2004 	str.w	r2, [sl, #4]
 8001230:	f300 846b 	bgt.w	8001b0a <_vfprintf_r+0x10c2>
 8001234:	f10a 0a08 	add.w	sl, sl, #8
 8001238:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800123a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800123c:	4293      	cmp	r3, r2
 800123e:	f280 82bc 	bge.w	80017ba <_vfprintf_r+0xd72>
 8001242:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001244:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8001246:	441c      	add	r4, r3
 8001248:	e9ca 2300 	strd	r2, r3, [sl]
 800124c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800124e:	941f      	str	r4, [sp, #124]	; 0x7c
 8001250:	3301      	adds	r3, #1
 8001252:	2b07      	cmp	r3, #7
 8001254:	931e      	str	r3, [sp, #120]	; 0x78
 8001256:	f300 83a5 	bgt.w	80019a4 <_vfprintf_r+0xf5c>
 800125a:	f10a 0a08 	add.w	sl, sl, #8
 800125e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001260:	1e5d      	subs	r5, r3, #1
 8001262:	2d00      	cmp	r5, #0
 8001264:	f77f adc0 	ble.w	8000de8 <_vfprintf_r+0x3a0>
 8001268:	2d10      	cmp	r5, #16
 800126a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800126c:	4fb1      	ldr	r7, [pc, #708]	; (8001534 <_vfprintf_r+0xaec>)
 800126e:	f340 8440 	ble.w	8001af2 <_vfprintf_r+0x10aa>
 8001272:	ee19 ba10 	vmov	fp, s18
 8001276:	2610      	movs	r6, #16
 8001278:	e005      	b.n	8001286 <_vfprintf_r+0x83e>
 800127a:	f10a 0a08 	add.w	sl, sl, #8
 800127e:	3d10      	subs	r5, #16
 8001280:	2d10      	cmp	r5, #16
 8001282:	f340 8436 	ble.w	8001af2 <_vfprintf_r+0x10aa>
 8001286:	3301      	adds	r3, #1
 8001288:	3410      	adds	r4, #16
 800128a:	2b07      	cmp	r3, #7
 800128c:	e9ca 7600 	strd	r7, r6, [sl]
 8001290:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
 8001294:	ddf1      	ble.n	800127a <_vfprintf_r+0x832>
 8001296:	aa1d      	add	r2, sp, #116	; 0x74
 8001298:	4641      	mov	r1, r8
 800129a:	4658      	mov	r0, fp
 800129c:	f004 f956 	bl	800554c <__sprint_r>
 80012a0:	2800      	cmp	r0, #0
 80012a2:	f47f ad25 	bne.w	8000cf0 <_vfprintf_r+0x2a8>
 80012a6:	e9dd 341e 	ldrd	r3, r4, [sp, #120]	; 0x78
 80012aa:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 80012ae:	e7e6      	b.n	800127e <_vfprintf_r+0x836>
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	f000 8548 	beq.w	8001d46 <_vfprintf_r+0x12fe>
 80012b6:	2b02      	cmp	r3, #2
 80012b8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80012bc:	f47f af78 	bne.w	80011b0 <_vfprintf_r+0x768>
 80012c0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80012c2:	ae2a      	add	r6, sp, #168	; 0xa8
 80012c4:	f000 030f 	and.w	r3, r0, #15
 80012c8:	0900      	lsrs	r0, r0, #4
 80012ca:	5cd3      	ldrb	r3, [r2, r3]
 80012cc:	f806 3d01 	strb.w	r3, [r6, #-1]!
 80012d0:	ea40 7001 	orr.w	r0, r0, r1, lsl #28
 80012d4:	0909      	lsrs	r1, r1, #4
 80012d6:	ea50 0301 	orrs.w	r3, r0, r1
 80012da:	d1f3      	bne.n	80012c4 <_vfprintf_r+0x87c>
 80012dc:	ab2a      	add	r3, sp, #168	; 0xa8
 80012de:	1b9b      	subs	r3, r3, r6
 80012e0:	f8cd b00c 	str.w	fp, [sp, #12]
 80012e4:	9308      	str	r3, [sp, #32]
 80012e6:	e782      	b.n	80011ee <_vfprintf_r+0x7a6>
 80012e8:	9b06      	ldr	r3, [sp, #24]
 80012ea:	9a04      	ldr	r2, [sp, #16]
 80012ec:	eba3 0b02 	sub.w	fp, r3, r2
 80012f0:	f1bb 0f00 	cmp.w	fp, #0
 80012f4:	f77f ad5d 	ble.w	8000db2 <_vfprintf_r+0x36a>
 80012f8:	f1bb 0f10 	cmp.w	fp, #16
 80012fc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80012fe:	4f8d      	ldr	r7, [pc, #564]	; (8001534 <_vfprintf_r+0xaec>)
 8001300:	dd27      	ble.n	8001352 <_vfprintf_r+0x90a>
 8001302:	4621      	mov	r1, r4
 8001304:	2310      	movs	r3, #16
 8001306:	ee19 4a10 	vmov	r4, s18
 800130a:	e006      	b.n	800131a <_vfprintf_r+0x8d2>
 800130c:	f1ab 0b10 	sub.w	fp, fp, #16
 8001310:	f1bb 0f10 	cmp.w	fp, #16
 8001314:	f10a 0a08 	add.w	sl, sl, #8
 8001318:	dd1a      	ble.n	8001350 <_vfprintf_r+0x908>
 800131a:	3201      	adds	r2, #1
 800131c:	3110      	adds	r1, #16
 800131e:	2a07      	cmp	r2, #7
 8001320:	e9ca 7300 	strd	r7, r3, [sl]
 8001324:	e9cd 211e 	strd	r2, r1, [sp, #120]	; 0x78
 8001328:	ddf0      	ble.n	800130c <_vfprintf_r+0x8c4>
 800132a:	aa1d      	add	r2, sp, #116	; 0x74
 800132c:	4641      	mov	r1, r8
 800132e:	4620      	mov	r0, r4
 8001330:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 8001334:	f004 f90a 	bl	800554c <__sprint_r>
 8001338:	2800      	cmp	r0, #0
 800133a:	f47f acd9 	bne.w	8000cf0 <_vfprintf_r+0x2a8>
 800133e:	f1ab 0b10 	sub.w	fp, fp, #16
 8001342:	f1bb 0f10 	cmp.w	fp, #16
 8001346:	e9dd 211e 	ldrd	r2, r1, [sp, #120]	; 0x78
 800134a:	f04f 0310 	mov.w	r3, #16
 800134e:	dce4      	bgt.n	800131a <_vfprintf_r+0x8d2>
 8001350:	460c      	mov	r4, r1
 8001352:	3201      	adds	r2, #1
 8001354:	445c      	add	r4, fp
 8001356:	2a07      	cmp	r2, #7
 8001358:	e9cd 241e 	strd	r2, r4, [sp, #120]	; 0x78
 800135c:	f8ca 7000 	str.w	r7, [sl]
 8001360:	f8ca b004 	str.w	fp, [sl, #4]
 8001364:	f300 83df 	bgt.w	8001b26 <_vfprintf_r+0x10de>
 8001368:	f10a 0a08 	add.w	sl, sl, #8
 800136c:	e521      	b.n	8000db2 <_vfprintf_r+0x36a>
 800136e:	f1bb 0f10 	cmp.w	fp, #16
 8001372:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8001374:	4f6f      	ldr	r7, [pc, #444]	; (8001534 <_vfprintf_r+0xaec>)
 8001376:	dd27      	ble.n	80013c8 <_vfprintf_r+0x980>
 8001378:	4621      	mov	r1, r4
 800137a:	2310      	movs	r3, #16
 800137c:	ee19 4a10 	vmov	r4, s18
 8001380:	e006      	b.n	8001390 <_vfprintf_r+0x948>
 8001382:	f1ab 0b10 	sub.w	fp, fp, #16
 8001386:	f1bb 0f10 	cmp.w	fp, #16
 800138a:	f10a 0a08 	add.w	sl, sl, #8
 800138e:	dd1a      	ble.n	80013c6 <_vfprintf_r+0x97e>
 8001390:	3201      	adds	r2, #1
 8001392:	3110      	adds	r1, #16
 8001394:	2a07      	cmp	r2, #7
 8001396:	e9ca 7300 	strd	r7, r3, [sl]
 800139a:	e9cd 211e 	strd	r2, r1, [sp, #120]	; 0x78
 800139e:	ddf0      	ble.n	8001382 <_vfprintf_r+0x93a>
 80013a0:	aa1d      	add	r2, sp, #116	; 0x74
 80013a2:	4641      	mov	r1, r8
 80013a4:	4620      	mov	r0, r4
 80013a6:	f004 f8d1 	bl	800554c <__sprint_r>
 80013aa:	2800      	cmp	r0, #0
 80013ac:	f47f aca0 	bne.w	8000cf0 <_vfprintf_r+0x2a8>
 80013b0:	f1ab 0b10 	sub.w	fp, fp, #16
 80013b4:	f1bb 0f10 	cmp.w	fp, #16
 80013b8:	e9dd 211e 	ldrd	r2, r1, [sp, #120]	; 0x78
 80013bc:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 80013c0:	f04f 0310 	mov.w	r3, #16
 80013c4:	dce4      	bgt.n	8001390 <_vfprintf_r+0x948>
 80013c6:	460c      	mov	r4, r1
 80013c8:	3201      	adds	r2, #1
 80013ca:	445c      	add	r4, fp
 80013cc:	2a07      	cmp	r2, #7
 80013ce:	e9cd 241e 	strd	r2, r4, [sp, #120]	; 0x78
 80013d2:	f8ca 7000 	str.w	r7, [sl]
 80013d6:	f8ca b004 	str.w	fp, [sl, #4]
 80013da:	f300 81cc 	bgt.w	8001776 <_vfprintf_r+0xd2e>
 80013de:	f10a 0a08 	add.w	sl, sl, #8
 80013e2:	e4ee      	b.n	8000dc2 <_vfprintf_r+0x37a>
 80013e4:	ee19 0a10 	vmov	r0, s18
 80013e8:	aa1d      	add	r2, sp, #116	; 0x74
 80013ea:	4641      	mov	r1, r8
 80013ec:	f004 f8ae 	bl	800554c <__sprint_r>
 80013f0:	2800      	cmp	r0, #0
 80013f2:	f43f ad0d 	beq.w	8000e10 <_vfprintf_r+0x3c8>
 80013f6:	e47b      	b.n	8000cf0 <_vfprintf_r+0x2a8>
 80013f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	f340 8171 	ble.w	80016e2 <_vfprintf_r+0xc9a>
 8001400:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 8001402:	f8ca 6000 	str.w	r6, [sl]
 8001406:	3501      	adds	r5, #1
 8001408:	3401      	adds	r4, #1
 800140a:	2301      	movs	r3, #1
 800140c:	2d07      	cmp	r5, #7
 800140e:	941f      	str	r4, [sp, #124]	; 0x7c
 8001410:	951e      	str	r5, [sp, #120]	; 0x78
 8001412:	f8ca 3004 	str.w	r3, [sl, #4]
 8001416:	f300 830c 	bgt.w	8001a32 <_vfprintf_r+0xfea>
 800141a:	f10a 0a08 	add.w	sl, sl, #8
 800141e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001420:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8001422:	3501      	adds	r5, #1
 8001424:	441c      	add	r4, r3
 8001426:	2d07      	cmp	r5, #7
 8001428:	e9ca 2300 	strd	r2, r3, [sl]
 800142c:	e9cd 541e 	strd	r5, r4, [sp, #120]	; 0x78
 8001430:	f300 830d 	bgt.w	8001a4e <_vfprintf_r+0x1006>
 8001434:	f10a 0a08 	add.w	sl, sl, #8
 8001438:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800143c:	2200      	movs	r2, #0
 800143e:	2300      	movs	r3, #0
 8001440:	f006 f880 	bl	8007544 <__aeabi_dcmpeq>
 8001444:	2800      	cmp	r0, #0
 8001446:	f040 816b 	bne.w	8001720 <_vfprintf_r+0xcd8>
 800144a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800144c:	3501      	adds	r5, #1
 800144e:	3b01      	subs	r3, #1
 8001450:	3601      	adds	r6, #1
 8001452:	441c      	add	r4, r3
 8001454:	2d07      	cmp	r5, #7
 8001456:	f8ca 6000 	str.w	r6, [sl]
 800145a:	951e      	str	r5, [sp, #120]	; 0x78
 800145c:	f8ca 3004 	str.w	r3, [sl, #4]
 8001460:	941f      	str	r4, [sp, #124]	; 0x7c
 8001462:	f300 814f 	bgt.w	8001704 <_vfprintf_r+0xcbc>
 8001466:	f10a 0a08 	add.w	sl, sl, #8
 800146a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800146c:	f8ca 3004 	str.w	r3, [sl, #4]
 8001470:	3501      	adds	r5, #1
 8001472:	441c      	add	r4, r3
 8001474:	2d07      	cmp	r5, #7
 8001476:	ab19      	add	r3, sp, #100	; 0x64
 8001478:	e9cd 541e 	strd	r5, r4, [sp, #120]	; 0x78
 800147c:	f8ca 3000 	str.w	r3, [sl]
 8001480:	f77f acb0 	ble.w	8000de4 <_vfprintf_r+0x39c>
 8001484:	ee19 0a10 	vmov	r0, s18
 8001488:	aa1d      	add	r2, sp, #116	; 0x74
 800148a:	4641      	mov	r1, r8
 800148c:	f004 f85e 	bl	800554c <__sprint_r>
 8001490:	2800      	cmp	r0, #0
 8001492:	f47f ac2d 	bne.w	8000cf0 <_vfprintf_r+0x2a8>
 8001496:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 8001498:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 800149c:	e4a4      	b.n	8000de8 <_vfprintf_r+0x3a0>
 800149e:	2f10      	cmp	r7, #16
 80014a0:	e9dd 211e 	ldrd	r2, r1, [sp, #120]	; 0x78
 80014a4:	dd34      	ble.n	8001510 <_vfprintf_r+0xac8>
 80014a6:	9312      	str	r3, [sp, #72]	; 0x48
 80014a8:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80014ac:	2410      	movs	r4, #16
 80014ae:	46b1      	mov	r9, r6
 80014b0:	460b      	mov	r3, r1
 80014b2:	4646      	mov	r6, r8
 80014b4:	46b8      	mov	r8, r7
 80014b6:	462f      	mov	r7, r5
 80014b8:	ee19 5a10 	vmov	r5, s18
 80014bc:	e006      	b.n	80014cc <_vfprintf_r+0xa84>
 80014be:	f1a8 0810 	sub.w	r8, r8, #16
 80014c2:	f1b8 0f10 	cmp.w	r8, #16
 80014c6:	f10a 0a08 	add.w	sl, sl, #8
 80014ca:	dd19      	ble.n	8001500 <_vfprintf_r+0xab8>
 80014cc:	3201      	adds	r2, #1
 80014ce:	491a      	ldr	r1, [pc, #104]	; (8001538 <_vfprintf_r+0xaf0>)
 80014d0:	3310      	adds	r3, #16
 80014d2:	2a07      	cmp	r2, #7
 80014d4:	e9ca 1400 	strd	r1, r4, [sl]
 80014d8:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
 80014dc:	ddef      	ble.n	80014be <_vfprintf_r+0xa76>
 80014de:	aa1d      	add	r2, sp, #116	; 0x74
 80014e0:	4631      	mov	r1, r6
 80014e2:	4628      	mov	r0, r5
 80014e4:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 80014e8:	f004 f830 	bl	800554c <__sprint_r>
 80014ec:	2800      	cmp	r0, #0
 80014ee:	f47f abfe 	bne.w	8000cee <_vfprintf_r+0x2a6>
 80014f2:	f1a8 0810 	sub.w	r8, r8, #16
 80014f6:	f1b8 0f10 	cmp.w	r8, #16
 80014fa:	e9dd 231e 	ldrd	r2, r3, [sp, #120]	; 0x78
 80014fe:	dce5      	bgt.n	80014cc <_vfprintf_r+0xa84>
 8001500:	463d      	mov	r5, r7
 8001502:	4619      	mov	r1, r3
 8001504:	4647      	mov	r7, r8
 8001506:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8001508:	46b0      	mov	r8, r6
 800150a:	464e      	mov	r6, r9
 800150c:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
 8001510:	f8ca 7004 	str.w	r7, [sl, #4]
 8001514:	3201      	adds	r2, #1
 8001516:	187c      	adds	r4, r7, r1
 8001518:	2a07      	cmp	r2, #7
 800151a:	4907      	ldr	r1, [pc, #28]	; (8001538 <_vfprintf_r+0xaf0>)
 800151c:	f8ca 1000 	str.w	r1, [sl]
 8001520:	e9cd 241e 	strd	r2, r4, [sp, #120]	; 0x78
 8001524:	f300 82d5 	bgt.w	8001ad2 <_vfprintf_r+0x108a>
 8001528:	f10a 0a08 	add.w	sl, sl, #8
 800152c:	e416      	b.n	8000d5c <_vfprintf_r+0x314>
 800152e:	bf00      	nop
 8001530:	0801c104 	.word	0x0801c104
 8001534:	0800ccfc 	.word	0x0800ccfc
 8001538:	0800ccec 	.word	0x0800ccec
 800153c:	ee19 0a10 	vmov	r0, s18
 8001540:	aa1d      	add	r2, sp, #116	; 0x74
 8001542:	4641      	mov	r1, r8
 8001544:	9312      	str	r3, [sp, #72]	; 0x48
 8001546:	f004 f801 	bl	800554c <__sprint_r>
 800154a:	2800      	cmp	r0, #0
 800154c:	f47f abd0 	bne.w	8000cf0 <_vfprintf_r+0x2a8>
 8001550:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 8001552:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8001554:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 8001558:	e415      	b.n	8000d86 <_vfprintf_r+0x33e>
 800155a:	ee19 0a10 	vmov	r0, s18
 800155e:	aa1d      	add	r2, sp, #116	; 0x74
 8001560:	4641      	mov	r1, r8
 8001562:	f003 fff3 	bl	800554c <__sprint_r>
 8001566:	2800      	cmp	r0, #0
 8001568:	f47f abc2 	bne.w	8000cf0 <_vfprintf_r+0x2a8>
 800156c:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 800156e:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 8001572:	e41a      	b.n	8000daa <_vfprintf_r+0x362>
 8001574:	2d10      	cmp	r5, #16
 8001576:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8001578:	dd20      	ble.n	80015bc <_vfprintf_r+0xb74>
 800157a:	ee19 7a10 	vmov	r7, s18
 800157e:	2610      	movs	r6, #16
 8001580:	e004      	b.n	800158c <_vfprintf_r+0xb44>
 8001582:	3d10      	subs	r5, #16
 8001584:	2d10      	cmp	r5, #16
 8001586:	f10a 0a08 	add.w	sl, sl, #8
 800158a:	dd17      	ble.n	80015bc <_vfprintf_r+0xb74>
 800158c:	3301      	adds	r3, #1
 800158e:	4a91      	ldr	r2, [pc, #580]	; (80017d4 <_vfprintf_r+0xd8c>)
 8001590:	3410      	adds	r4, #16
 8001592:	2b07      	cmp	r3, #7
 8001594:	e9ca 2600 	strd	r2, r6, [sl]
 8001598:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
 800159c:	ddf1      	ble.n	8001582 <_vfprintf_r+0xb3a>
 800159e:	aa1d      	add	r2, sp, #116	; 0x74
 80015a0:	4641      	mov	r1, r8
 80015a2:	4638      	mov	r0, r7
 80015a4:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 80015a8:	f003 ffd0 	bl	800554c <__sprint_r>
 80015ac:	2800      	cmp	r0, #0
 80015ae:	f47f ab9f 	bne.w	8000cf0 <_vfprintf_r+0x2a8>
 80015b2:	3d10      	subs	r5, #16
 80015b4:	2d10      	cmp	r5, #16
 80015b6:	e9dd 341e 	ldrd	r3, r4, [sp, #120]	; 0x78
 80015ba:	dce7      	bgt.n	800158c <_vfprintf_r+0xb44>
 80015bc:	3301      	adds	r3, #1
 80015be:	4a85      	ldr	r2, [pc, #532]	; (80017d4 <_vfprintf_r+0xd8c>)
 80015c0:	f8ca 5004 	str.w	r5, [sl, #4]
 80015c4:	442c      	add	r4, r5
 80015c6:	2b07      	cmp	r3, #7
 80015c8:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
 80015cc:	f8ca 2000 	str.w	r2, [sl]
 80015d0:	f77f ac13 	ble.w	8000dfa <_vfprintf_r+0x3b2>
 80015d4:	ee19 0a10 	vmov	r0, s18
 80015d8:	aa1d      	add	r2, sp, #116	; 0x74
 80015da:	4641      	mov	r1, r8
 80015dc:	f003 ffb6 	bl	800554c <__sprint_r>
 80015e0:	2800      	cmp	r0, #0
 80015e2:	f47f ab85 	bne.w	8000cf0 <_vfprintf_r+0x2a8>
 80015e6:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 80015e8:	e407      	b.n	8000dfa <_vfprintf_r+0x3b2>
 80015ea:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80015ec:	2900      	cmp	r1, #0
 80015ee:	f340 823c 	ble.w	8001a6a <_vfprintf_r+0x1022>
 80015f2:	e9dd 370a 	ldrd	r3, r7, [sp, #40]	; 0x28
 80015f6:	429f      	cmp	r7, r3
 80015f8:	bfa8      	it	ge
 80015fa:	461f      	movge	r7, r3
 80015fc:	2f00      	cmp	r7, #0
 80015fe:	dd0b      	ble.n	8001618 <_vfprintf_r+0xbd0>
 8001600:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8001602:	3301      	adds	r3, #1
 8001604:	443c      	add	r4, r7
 8001606:	2b07      	cmp	r3, #7
 8001608:	e9ca 6700 	strd	r6, r7, [sl]
 800160c:	941f      	str	r4, [sp, #124]	; 0x7c
 800160e:	931e      	str	r3, [sp, #120]	; 0x78
 8001610:	f300 83cb 	bgt.w	8001daa <_vfprintf_r+0x1362>
 8001614:	f10a 0a08 	add.w	sl, sl, #8
 8001618:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800161a:	2f00      	cmp	r7, #0
 800161c:	bfa8      	it	ge
 800161e:	1bed      	subge	r5, r5, r7
 8001620:	2d00      	cmp	r5, #0
 8001622:	f300 81d5 	bgt.w	80019d0 <_vfprintf_r+0xf88>
 8001626:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8001628:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800162a:	429d      	cmp	r5, r3
 800162c:	f280 81ae 	bge.w	800198c <_vfprintf_r+0xf44>
 8001630:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001632:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8001634:	441c      	add	r4, r3
 8001636:	e9ca 2300 	strd	r2, r3, [sl]
 800163a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800163c:	941f      	str	r4, [sp, #124]	; 0x7c
 800163e:	3301      	adds	r3, #1
 8001640:	2b07      	cmp	r3, #7
 8001642:	931e      	str	r3, [sp, #120]	; 0x78
 8001644:	f300 83a3 	bgt.w	8001d8e <_vfprintf_r+0x1346>
 8001648:	f10a 0a08 	add.w	sl, sl, #8
 800164c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800164e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001650:	1b5d      	subs	r5, r3, r5
 8001652:	1a9f      	subs	r7, r3, r2
 8001654:	42af      	cmp	r7, r5
 8001656:	bfa8      	it	ge
 8001658:	462f      	movge	r7, r5
 800165a:	2f00      	cmp	r7, #0
 800165c:	dd0e      	ble.n	800167c <_vfprintf_r+0xc34>
 800165e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8001660:	f8ca 7004 	str.w	r7, [sl, #4]
 8001664:	3301      	adds	r3, #1
 8001666:	4416      	add	r6, r2
 8001668:	443c      	add	r4, r7
 800166a:	2b07      	cmp	r3, #7
 800166c:	f8ca 6000 	str.w	r6, [sl]
 8001670:	941f      	str	r4, [sp, #124]	; 0x7c
 8001672:	931e      	str	r3, [sp, #120]	; 0x78
 8001674:	f300 83a6 	bgt.w	8001dc4 <_vfprintf_r+0x137c>
 8001678:	f10a 0a08 	add.w	sl, sl, #8
 800167c:	2f00      	cmp	r7, #0
 800167e:	bfa8      	it	ge
 8001680:	1bed      	subge	r5, r5, r7
 8001682:	2d00      	cmp	r5, #0
 8001684:	f77f abb0 	ble.w	8000de8 <_vfprintf_r+0x3a0>
 8001688:	2d10      	cmp	r5, #16
 800168a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800168c:	4f52      	ldr	r7, [pc, #328]	; (80017d8 <_vfprintf_r+0xd90>)
 800168e:	f340 8230 	ble.w	8001af2 <_vfprintf_r+0x10aa>
 8001692:	ee19 ba10 	vmov	fp, s18
 8001696:	2610      	movs	r6, #16
 8001698:	e005      	b.n	80016a6 <_vfprintf_r+0xc5e>
 800169a:	f10a 0a08 	add.w	sl, sl, #8
 800169e:	3d10      	subs	r5, #16
 80016a0:	2d10      	cmp	r5, #16
 80016a2:	f340 8226 	ble.w	8001af2 <_vfprintf_r+0x10aa>
 80016a6:	3301      	adds	r3, #1
 80016a8:	3410      	adds	r4, #16
 80016aa:	2b07      	cmp	r3, #7
 80016ac:	e9ca 7600 	strd	r7, r6, [sl]
 80016b0:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
 80016b4:	ddf1      	ble.n	800169a <_vfprintf_r+0xc52>
 80016b6:	aa1d      	add	r2, sp, #116	; 0x74
 80016b8:	4641      	mov	r1, r8
 80016ba:	4658      	mov	r0, fp
 80016bc:	f003 ff46 	bl	800554c <__sprint_r>
 80016c0:	2800      	cmp	r0, #0
 80016c2:	f47f ab15 	bne.w	8000cf0 <_vfprintf_r+0x2a8>
 80016c6:	e9dd 341e 	ldrd	r3, r4, [sp, #120]	; 0x78
 80016ca:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 80016ce:	e7e6      	b.n	800169e <_vfprintf_r+0xc56>
 80016d0:	9b05      	ldr	r3, [sp, #20]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	f040 8337 	bne.w	8001d46 <_vfprintf_r+0x12fe>
 80016d8:	2300      	movs	r3, #0
 80016da:	9305      	str	r3, [sp, #20]
 80016dc:	9308      	str	r3, [sp, #32]
 80016de:	ae2a      	add	r6, sp, #168	; 0xa8
 80016e0:	e585      	b.n	80011ee <_vfprintf_r+0x7a6>
 80016e2:	9b03      	ldr	r3, [sp, #12]
 80016e4:	07d9      	lsls	r1, r3, #31
 80016e6:	f53f ae8b 	bmi.w	8001400 <_vfprintf_r+0x9b8>
 80016ea:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 80016ec:	f8ca 6000 	str.w	r6, [sl]
 80016f0:	3501      	adds	r5, #1
 80016f2:	3401      	adds	r4, #1
 80016f4:	2301      	movs	r3, #1
 80016f6:	2d07      	cmp	r5, #7
 80016f8:	941f      	str	r4, [sp, #124]	; 0x7c
 80016fa:	951e      	str	r5, [sp, #120]	; 0x78
 80016fc:	f8ca 3004 	str.w	r3, [sl, #4]
 8001700:	f77f aeb1 	ble.w	8001466 <_vfprintf_r+0xa1e>
 8001704:	ee19 0a10 	vmov	r0, s18
 8001708:	aa1d      	add	r2, sp, #116	; 0x74
 800170a:	4641      	mov	r1, r8
 800170c:	f003 ff1e 	bl	800554c <__sprint_r>
 8001710:	2800      	cmp	r0, #0
 8001712:	f47f aaed 	bne.w	8000cf0 <_vfprintf_r+0x2a8>
 8001716:	e9dd 541e 	ldrd	r5, r4, [sp, #120]	; 0x78
 800171a:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 800171e:	e6a4      	b.n	800146a <_vfprintf_r+0xa22>
 8001720:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001722:	1e5e      	subs	r6, r3, #1
 8001724:	2e00      	cmp	r6, #0
 8001726:	f77f aea0 	ble.w	800146a <_vfprintf_r+0xa22>
 800172a:	2e10      	cmp	r6, #16
 800172c:	4f2a      	ldr	r7, [pc, #168]	; (80017d8 <_vfprintf_r+0xd90>)
 800172e:	f340 8257 	ble.w	8001be0 <_vfprintf_r+0x1198>
 8001732:	f8cd 9014 	str.w	r9, [sp, #20]
 8001736:	f04f 0b10 	mov.w	fp, #16
 800173a:	ee19 9a10 	vmov	r9, s18
 800173e:	e005      	b.n	800174c <_vfprintf_r+0xd04>
 8001740:	f10a 0a08 	add.w	sl, sl, #8
 8001744:	3e10      	subs	r6, #16
 8001746:	2e10      	cmp	r6, #16
 8001748:	f340 8248 	ble.w	8001bdc <_vfprintf_r+0x1194>
 800174c:	3501      	adds	r5, #1
 800174e:	3410      	adds	r4, #16
 8001750:	2d07      	cmp	r5, #7
 8001752:	e9ca 7b00 	strd	r7, fp, [sl]
 8001756:	e9cd 541e 	strd	r5, r4, [sp, #120]	; 0x78
 800175a:	ddf1      	ble.n	8001740 <_vfprintf_r+0xcf8>
 800175c:	aa1d      	add	r2, sp, #116	; 0x74
 800175e:	4641      	mov	r1, r8
 8001760:	4648      	mov	r0, r9
 8001762:	f003 fef3 	bl	800554c <__sprint_r>
 8001766:	2800      	cmp	r0, #0
 8001768:	f47f aac2 	bne.w	8000cf0 <_vfprintf_r+0x2a8>
 800176c:	e9dd 541e 	ldrd	r5, r4, [sp, #120]	; 0x78
 8001770:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 8001774:	e7e6      	b.n	8001744 <_vfprintf_r+0xcfc>
 8001776:	ee19 0a10 	vmov	r0, s18
 800177a:	aa1d      	add	r2, sp, #116	; 0x74
 800177c:	4641      	mov	r1, r8
 800177e:	f003 fee5 	bl	800554c <__sprint_r>
 8001782:	2800      	cmp	r0, #0
 8001784:	f47f aab4 	bne.w	8000cf0 <_vfprintf_r+0x2a8>
 8001788:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 800178a:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 800178e:	f7ff bb18 	b.w	8000dc2 <_vfprintf_r+0x37a>
 8001792:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001794:	f853 0b04 	ldr.w	r0, [r3], #4
 8001798:	9309      	str	r3, [sp, #36]	; 0x24
 800179a:	e469      	b.n	8001070 <_vfprintf_r+0x628>
 800179c:	17c1      	asrs	r1, r0, #31
 800179e:	460b      	mov	r3, r1
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	f6bf abc3 	bge.w	8000f2c <_vfprintf_r+0x4e4>
 80017a6:	4240      	negs	r0, r0
 80017a8:	f04f 042d 	mov.w	r4, #45	; 0x2d
 80017ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80017b0:	f88d 4057 	strb.w	r4, [sp, #87]	; 0x57
 80017b4:	2301      	movs	r3, #1
 80017b6:	f7ff ba60 	b.w	8000c7a <_vfprintf_r+0x232>
 80017ba:	9b03      	ldr	r3, [sp, #12]
 80017bc:	07dd      	lsls	r5, r3, #31
 80017be:	f57f ab13 	bpl.w	8000de8 <_vfprintf_r+0x3a0>
 80017c2:	e53e      	b.n	8001242 <_vfprintf_r+0x7fa>
 80017c4:	f899 5000 	ldrb.w	r5, [r9]
 80017c8:	9209      	str	r2, [sp, #36]	; 0x24
 80017ca:	f7ff b9a3 	b.w	8000b14 <_vfprintf_r+0xcc>
 80017ce:	ae2a      	add	r6, sp, #168	; 0xa8
 80017d0:	e50d      	b.n	80011ee <_vfprintf_r+0x7a6>
 80017d2:	bf00      	nop
 80017d4:	0800ccec 	.word	0x0800ccec
 80017d8:	0800ccfc 	.word	0x0800ccfc
 80017dc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80017e0:	4602      	mov	r2, r0
 80017e2:	460b      	mov	r3, r1
 80017e4:	f005 fee0 	bl	80075a8 <__aeabi_dcmpun>
 80017e8:	2800      	cmp	r0, #0
 80017ea:	f040 8365 	bne.w	8001eb8 <_vfprintf_r+0x1470>
 80017ee:	9b05      	ldr	r3, [sp, #20]
 80017f0:	3301      	adds	r3, #1
 80017f2:	f025 0720 	bic.w	r7, r5, #32
 80017f6:	f000 82f5 	beq.w	8001de4 <_vfprintf_r+0x139c>
 80017fa:	2f47      	cmp	r7, #71	; 0x47
 80017fc:	f000 8281 	beq.w	8001d02 <_vfprintf_r+0x12ba>
 8001800:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8001804:	f44b 7280 	orr.w	r2, fp, #256	; 0x100
 8001808:	2900      	cmp	r1, #0
 800180a:	9203      	str	r2, [sp, #12]
 800180c:	f2c0 824c 	blt.w	8001ca8 <_vfprintf_r+0x1260>
 8001810:	ed9d 7b0c 	vldr	d7, [sp, #48]	; 0x30
 8001814:	2300      	movs	r3, #0
 8001816:	9312      	str	r3, [sp, #72]	; 0x48
 8001818:	eeb0 aa47 	vmov.f32	s20, s14
 800181c:	eef0 aa67 	vmov.f32	s21, s15
 8001820:	2d66      	cmp	r5, #102	; 0x66
 8001822:	f000 81e9 	beq.w	8001bf8 <_vfprintf_r+0x11b0>
 8001826:	2d46      	cmp	r5, #70	; 0x46
 8001828:	f000 81e6 	beq.w	8001bf8 <_vfprintf_r+0x11b0>
 800182c:	eeb0 0a4a 	vmov.f32	s0, s20
 8001830:	eef0 0a6a 	vmov.f32	s1, s21
 8001834:	2f45      	cmp	r7, #69	; 0x45
 8001836:	bf0a      	itet	eq
 8001838:	9b05      	ldreq	r3, [sp, #20]
 800183a:	9c05      	ldrne	r4, [sp, #20]
 800183c:	1c5c      	addeq	r4, r3, #1
 800183e:	ab1b      	add	r3, sp, #108	; 0x6c
 8001840:	9301      	str	r3, [sp, #4]
 8001842:	ab18      	add	r3, sp, #96	; 0x60
 8001844:	9300      	str	r3, [sp, #0]
 8001846:	ee19 0a10 	vmov	r0, s18
 800184a:	ab17      	add	r3, sp, #92	; 0x5c
 800184c:	4622      	mov	r2, r4
 800184e:	2102      	movs	r1, #2
 8001850:	f000 fcfa 	bl	8002248 <_dtoa_r>
 8001854:	2d67      	cmp	r5, #103	; 0x67
 8001856:	4606      	mov	r6, r0
 8001858:	f040 823d 	bne.w	8001cd6 <_vfprintf_r+0x128e>
 800185c:	f01b 0f01 	tst.w	fp, #1
 8001860:	f040 823c 	bne.w	8001cdc <_vfprintf_r+0x1294>
 8001864:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8001866:	2f47      	cmp	r7, #71	; 0x47
 8001868:	eba3 0306 	sub.w	r3, r3, r6
 800186c:	930b      	str	r3, [sp, #44]	; 0x2c
 800186e:	f040 836e 	bne.w	8001f4e <_vfprintf_r+0x1506>
 8001872:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8001874:	930a      	str	r3, [sp, #40]	; 0x28
 8001876:	1cd9      	adds	r1, r3, #3
 8001878:	db03      	blt.n	8001882 <_vfprintf_r+0xe3a>
 800187a:	9a05      	ldr	r2, [sp, #20]
 800187c:	4293      	cmp	r3, r2
 800187e:	f340 8278 	ble.w	8001d72 <_vfprintf_r+0x132a>
 8001882:	3d02      	subs	r5, #2
 8001884:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001886:	f88d 5064 	strb.w	r5, [sp, #100]	; 0x64
 800188a:	1e53      	subs	r3, r2, #1
 800188c:	2b00      	cmp	r3, #0
 800188e:	9317      	str	r3, [sp, #92]	; 0x5c
 8001890:	bfb6      	itet	lt
 8001892:	f1c2 0301 	rsblt	r3, r2, #1
 8001896:	222b      	movge	r2, #43	; 0x2b
 8001898:	222d      	movlt	r2, #45	; 0x2d
 800189a:	2b09      	cmp	r3, #9
 800189c:	f88d 2065 	strb.w	r2, [sp, #101]	; 0x65
 80018a0:	f340 82f5 	ble.w	8001e8e <_vfprintf_r+0x1446>
 80018a4:	f10d 0473 	add.w	r4, sp, #115	; 0x73
 80018a8:	4fc0      	ldr	r7, [pc, #768]	; (8001bac <_vfprintf_r+0x1164>)
 80018aa:	4622      	mov	r2, r4
 80018ac:	4610      	mov	r0, r2
 80018ae:	fb87 2103 	smull	r2, r1, r7, r3
 80018b2:	17da      	asrs	r2, r3, #31
 80018b4:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
 80018b8:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 80018bc:	eba3 0141 	sub.w	r1, r3, r1, lsl #1
 80018c0:	3130      	adds	r1, #48	; 0x30
 80018c2:	f800 1c01 	strb.w	r1, [r0, #-1]
 80018c6:	4619      	mov	r1, r3
 80018c8:	2963      	cmp	r1, #99	; 0x63
 80018ca:	4613      	mov	r3, r2
 80018cc:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80018d0:	dcec      	bgt.n	80018ac <_vfprintf_r+0xe64>
 80018d2:	3330      	adds	r3, #48	; 0x30
 80018d4:	b2d9      	uxtb	r1, r3
 80018d6:	1e83      	subs	r3, r0, #2
 80018d8:	429c      	cmp	r4, r3
 80018da:	f802 1c01 	strb.w	r1, [r2, #-1]
 80018de:	f240 8327 	bls.w	8001f30 <_vfprintf_r+0x14e8>
 80018e2:	4613      	mov	r3, r2
 80018e4:	f10d 0266 	add.w	r2, sp, #102	; 0x66
 80018e8:	e001      	b.n	80018ee <_vfprintf_r+0xea6>
 80018ea:	f813 1b01 	ldrb.w	r1, [r3], #1
 80018ee:	f802 1b01 	strb.w	r1, [r2], #1
 80018f2:	429c      	cmp	r4, r3
 80018f4:	d1f9      	bne.n	80018ea <_vfprintf_r+0xea2>
 80018f6:	f10d 0375 	add.w	r3, sp, #117	; 0x75
 80018fa:	f10d 0266 	add.w	r2, sp, #102	; 0x66
 80018fe:	1a1b      	subs	r3, r3, r0
 8001900:	4413      	add	r3, r2
 8001902:	aa19      	add	r2, sp, #100	; 0x64
 8001904:	1a9b      	subs	r3, r3, r2
 8001906:	9311      	str	r3, [sp, #68]	; 0x44
 8001908:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800190a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800190c:	2a01      	cmp	r2, #1
 800190e:	4413      	add	r3, r2
 8001910:	9308      	str	r3, [sp, #32]
 8001912:	f340 82c8 	ble.w	8001ea6 <_vfprintf_r+0x145e>
 8001916:	9b08      	ldr	r3, [sp, #32]
 8001918:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800191a:	4413      	add	r3, r2
 800191c:	9308      	str	r3, [sp, #32]
 800191e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001922:	9304      	str	r3, [sp, #16]
 8001924:	2300      	movs	r3, #0
 8001926:	930a      	str	r3, [sp, #40]	; 0x28
 8001928:	e19e      	b.n	8001c68 <_vfprintf_r+0x1220>
 800192a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800192c:	9807      	ldr	r0, [sp, #28]
 800192e:	f853 1b04 	ldr.w	r1, [r3], #4
 8001932:	9309      	str	r3, [sp, #36]	; 0x24
 8001934:	17c2      	asrs	r2, r0, #31
 8001936:	e9c1 0200 	strd	r0, r2, [r1]
 800193a:	f7ff b8c9 	b.w	8000ad0 <_vfprintf_r+0x88>
 800193e:	280a      	cmp	r0, #10
 8001940:	f171 0300 	sbcs.w	r3, r1, #0
 8001944:	f89d 4057 	ldrb.w	r4, [sp, #87]	; 0x57
 8001948:	f4ff ab04 	bcc.w	8000f54 <_vfprintf_r+0x50c>
 800194c:	f8cd 900c 	str.w	r9, [sp, #12]
 8001950:	ae2a      	add	r6, sp, #168	; 0xa8
 8001952:	46a1      	mov	r9, r4
 8001954:	220a      	movs	r2, #10
 8001956:	2300      	movs	r3, #0
 8001958:	4604      	mov	r4, r0
 800195a:	460f      	mov	r7, r1
 800195c:	f005 fe62 	bl	8007624 <__aeabi_uldivmod>
 8001960:	3230      	adds	r2, #48	; 0x30
 8001962:	f806 2d01 	strb.w	r2, [r6, #-1]!
 8001966:	2300      	movs	r3, #0
 8001968:	4620      	mov	r0, r4
 800196a:	4639      	mov	r1, r7
 800196c:	220a      	movs	r2, #10
 800196e:	f005 fe59 	bl	8007624 <__aeabi_uldivmod>
 8001972:	2c0a      	cmp	r4, #10
 8001974:	f177 0300 	sbcs.w	r3, r7, #0
 8001978:	d2ec      	bcs.n	8001954 <_vfprintf_r+0xf0c>
 800197a:	ab2a      	add	r3, sp, #168	; 0xa8
 800197c:	1b9b      	subs	r3, r3, r6
 800197e:	464c      	mov	r4, r9
 8001980:	9308      	str	r3, [sp, #32]
 8001982:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8001986:	f8cd b00c 	str.w	fp, [sp, #12]
 800198a:	e430      	b.n	80011ee <_vfprintf_r+0x7a6>
 800198c:	9b03      	ldr	r3, [sp, #12]
 800198e:	07d8      	lsls	r0, r3, #31
 8001990:	f53f ae4e 	bmi.w	8001630 <_vfprintf_r+0xbe8>
 8001994:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8001998:	1a9f      	subs	r7, r3, r2
 800199a:	1b5d      	subs	r5, r3, r5
 800199c:	42af      	cmp	r7, r5
 800199e:	bfa8      	it	ge
 80019a0:	462f      	movge	r7, r5
 80019a2:	e66b      	b.n	800167c <_vfprintf_r+0xc34>
 80019a4:	ee19 0a10 	vmov	r0, s18
 80019a8:	aa1d      	add	r2, sp, #116	; 0x74
 80019aa:	4641      	mov	r1, r8
 80019ac:	f003 fdce 	bl	800554c <__sprint_r>
 80019b0:	2800      	cmp	r0, #0
 80019b2:	f47f a99d 	bne.w	8000cf0 <_vfprintf_r+0x2a8>
 80019b6:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 80019b8:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 80019bc:	e44f      	b.n	800125e <_vfprintf_r+0x816>
 80019be:	2b06      	cmp	r3, #6
 80019c0:	bf28      	it	cs
 80019c2:	2306      	movcs	r3, #6
 80019c4:	e9cd 3408 	strd	r3, r4, [sp, #32]
 80019c8:	4e79      	ldr	r6, [pc, #484]	; (8001bb0 <_vfprintf_r+0x1168>)
 80019ca:	9304      	str	r3, [sp, #16]
 80019cc:	f7ff b9af 	b.w	8000d2e <_vfprintf_r+0x2e6>
 80019d0:	2d10      	cmp	r5, #16
 80019d2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80019d4:	4f77      	ldr	r7, [pc, #476]	; (8001bb4 <_vfprintf_r+0x116c>)
 80019d6:	f340 8155 	ble.w	8001c84 <_vfprintf_r+0x123c>
 80019da:	463a      	mov	r2, r7
 80019dc:	9605      	str	r6, [sp, #20]
 80019de:	4647      	mov	r7, r8
 80019e0:	ee19 6a10 	vmov	r6, s18
 80019e4:	f04f 0b10 	mov.w	fp, #16
 80019e8:	4690      	mov	r8, r2
 80019ea:	e005      	b.n	80019f8 <_vfprintf_r+0xfb0>
 80019ec:	f10a 0a08 	add.w	sl, sl, #8
 80019f0:	3d10      	subs	r5, #16
 80019f2:	2d10      	cmp	r5, #16
 80019f4:	f340 8142 	ble.w	8001c7c <_vfprintf_r+0x1234>
 80019f8:	3301      	adds	r3, #1
 80019fa:	3410      	adds	r4, #16
 80019fc:	2b07      	cmp	r3, #7
 80019fe:	e9ca 8b00 	strd	r8, fp, [sl]
 8001a02:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
 8001a06:	ddf1      	ble.n	80019ec <_vfprintf_r+0xfa4>
 8001a08:	aa1d      	add	r2, sp, #116	; 0x74
 8001a0a:	4639      	mov	r1, r7
 8001a0c:	4630      	mov	r0, r6
 8001a0e:	f003 fd9d 	bl	800554c <__sprint_r>
 8001a12:	2800      	cmp	r0, #0
 8001a14:	f040 8244 	bne.w	8001ea0 <_vfprintf_r+0x1458>
 8001a18:	e9dd 341e 	ldrd	r3, r4, [sp, #120]	; 0x78
 8001a1c:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 8001a20:	e7e6      	b.n	80019f0 <_vfprintf_r+0xfa8>
 8001a22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001a24:	9907      	ldr	r1, [sp, #28]
 8001a26:	f853 2b04 	ldr.w	r2, [r3], #4
 8001a2a:	6011      	str	r1, [r2, #0]
 8001a2c:	9309      	str	r3, [sp, #36]	; 0x24
 8001a2e:	f7ff b84f 	b.w	8000ad0 <_vfprintf_r+0x88>
 8001a32:	ee19 0a10 	vmov	r0, s18
 8001a36:	aa1d      	add	r2, sp, #116	; 0x74
 8001a38:	4641      	mov	r1, r8
 8001a3a:	f003 fd87 	bl	800554c <__sprint_r>
 8001a3e:	2800      	cmp	r0, #0
 8001a40:	f47f a956 	bne.w	8000cf0 <_vfprintf_r+0x2a8>
 8001a44:	e9dd 541e 	ldrd	r5, r4, [sp, #120]	; 0x78
 8001a48:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 8001a4c:	e4e7      	b.n	800141e <_vfprintf_r+0x9d6>
 8001a4e:	ee19 0a10 	vmov	r0, s18
 8001a52:	aa1d      	add	r2, sp, #116	; 0x74
 8001a54:	4641      	mov	r1, r8
 8001a56:	f003 fd79 	bl	800554c <__sprint_r>
 8001a5a:	2800      	cmp	r0, #0
 8001a5c:	f47f a948 	bne.w	8000cf0 <_vfprintf_r+0x2a8>
 8001a60:	e9dd 541e 	ldrd	r5, r4, [sp, #120]	; 0x78
 8001a64:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 8001a68:	e4e6      	b.n	8001438 <_vfprintf_r+0x9f0>
 8001a6a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8001a6c:	4a52      	ldr	r2, [pc, #328]	; (8001bb8 <_vfprintf_r+0x1170>)
 8001a6e:	f8ca 2000 	str.w	r2, [sl]
 8001a72:	3301      	adds	r3, #1
 8001a74:	3401      	adds	r4, #1
 8001a76:	2201      	movs	r2, #1
 8001a78:	2b07      	cmp	r3, #7
 8001a7a:	941f      	str	r4, [sp, #124]	; 0x7c
 8001a7c:	931e      	str	r3, [sp, #120]	; 0x78
 8001a7e:	f8ca 2004 	str.w	r2, [sl, #4]
 8001a82:	f300 811a 	bgt.w	8001cba <_vfprintf_r+0x1272>
 8001a86:	f10a 0a08 	add.w	sl, sl, #8
 8001a8a:	2900      	cmp	r1, #0
 8001a8c:	d159      	bne.n	8001b42 <_vfprintf_r+0x10fa>
 8001a8e:	9b03      	ldr	r3, [sp, #12]
 8001a90:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001a92:	f003 0301 	and.w	r3, r3, #1
 8001a96:	4313      	orrs	r3, r2
 8001a98:	f43f a9a6 	beq.w	8000de8 <_vfprintf_r+0x3a0>
 8001a9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001a9e:	9910      	ldr	r1, [sp, #64]	; 0x40
 8001aa0:	191a      	adds	r2, r3, r4
 8001aa2:	e9ca 1300 	strd	r1, r3, [sl]
 8001aa6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8001aa8:	921f      	str	r2, [sp, #124]	; 0x7c
 8001aaa:	3301      	adds	r3, #1
 8001aac:	2b07      	cmp	r3, #7
 8001aae:	931e      	str	r3, [sp, #120]	; 0x78
 8001ab0:	f300 812d 	bgt.w	8001d0e <_vfprintf_r+0x12c6>
 8001ab4:	f10a 0a08 	add.w	sl, sl, #8
 8001ab8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8001aba:	f8ca 6000 	str.w	r6, [sl]
 8001abe:	3301      	adds	r3, #1
 8001ac0:	188c      	adds	r4, r1, r2
 8001ac2:	2b07      	cmp	r3, #7
 8001ac4:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
 8001ac8:	f8ca 1004 	str.w	r1, [sl, #4]
 8001acc:	f77f a98a 	ble.w	8000de4 <_vfprintf_r+0x39c>
 8001ad0:	e4d8      	b.n	8001484 <_vfprintf_r+0xa3c>
 8001ad2:	ee19 0a10 	vmov	r0, s18
 8001ad6:	aa1d      	add	r2, sp, #116	; 0x74
 8001ad8:	4641      	mov	r1, r8
 8001ada:	9312      	str	r3, [sp, #72]	; 0x48
 8001adc:	f003 fd36 	bl	800554c <__sprint_r>
 8001ae0:	2800      	cmp	r0, #0
 8001ae2:	f47f a905 	bne.w	8000cf0 <_vfprintf_r+0x2a8>
 8001ae6:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 8001ae8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8001aea:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 8001aee:	f7ff b935 	b.w	8000d5c <_vfprintf_r+0x314>
 8001af2:	3301      	adds	r3, #1
 8001af4:	442c      	add	r4, r5
 8001af6:	2b07      	cmp	r3, #7
 8001af8:	f8ca 7000 	str.w	r7, [sl]
 8001afc:	f8ca 5004 	str.w	r5, [sl, #4]
 8001b00:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
 8001b04:	f77f a96e 	ble.w	8000de4 <_vfprintf_r+0x39c>
 8001b08:	e4bc      	b.n	8001484 <_vfprintf_r+0xa3c>
 8001b0a:	ee19 0a10 	vmov	r0, s18
 8001b0e:	aa1d      	add	r2, sp, #116	; 0x74
 8001b10:	4641      	mov	r1, r8
 8001b12:	f003 fd1b 	bl	800554c <__sprint_r>
 8001b16:	2800      	cmp	r0, #0
 8001b18:	f47f a8ea 	bne.w	8000cf0 <_vfprintf_r+0x2a8>
 8001b1c:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 8001b1e:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 8001b22:	f7ff bb89 	b.w	8001238 <_vfprintf_r+0x7f0>
 8001b26:	ee19 0a10 	vmov	r0, s18
 8001b2a:	aa1d      	add	r2, sp, #116	; 0x74
 8001b2c:	4641      	mov	r1, r8
 8001b2e:	f003 fd0d 	bl	800554c <__sprint_r>
 8001b32:	2800      	cmp	r0, #0
 8001b34:	f47f a8dc 	bne.w	8000cf0 <_vfprintf_r+0x2a8>
 8001b38:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 8001b3a:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 8001b3e:	f7ff b938 	b.w	8000db2 <_vfprintf_r+0x36a>
 8001b42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001b44:	9810      	ldr	r0, [sp, #64]	; 0x40
 8001b46:	191a      	adds	r2, r3, r4
 8001b48:	e9ca 0300 	strd	r0, r3, [sl]
 8001b4c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8001b4e:	921f      	str	r2, [sp, #124]	; 0x7c
 8001b50:	3301      	adds	r3, #1
 8001b52:	2b07      	cmp	r3, #7
 8001b54:	931e      	str	r3, [sp, #120]	; 0x78
 8001b56:	f300 80da 	bgt.w	8001d0e <_vfprintf_r+0x12c6>
 8001b5a:	f10a 0a08 	add.w	sl, sl, #8
 8001b5e:	2900      	cmp	r1, #0
 8001b60:	daaa      	bge.n	8001ab8 <_vfprintf_r+0x1070>
 8001b62:	424d      	negs	r5, r1
 8001b64:	3110      	adds	r1, #16
 8001b66:	4f13      	ldr	r7, [pc, #76]	; (8001bb4 <_vfprintf_r+0x116c>)
 8001b68:	f280 8178 	bge.w	8001e5c <_vfprintf_r+0x1414>
 8001b6c:	ee19 ba10 	vmov	fp, s18
 8001b70:	2410      	movs	r4, #16
 8001b72:	e005      	b.n	8001b80 <_vfprintf_r+0x1138>
 8001b74:	f10a 0a08 	add.w	sl, sl, #8
 8001b78:	3d10      	subs	r5, #16
 8001b7a:	2d10      	cmp	r5, #16
 8001b7c:	f340 816e 	ble.w	8001e5c <_vfprintf_r+0x1414>
 8001b80:	3301      	adds	r3, #1
 8001b82:	3210      	adds	r2, #16
 8001b84:	2b07      	cmp	r3, #7
 8001b86:	e9ca 7400 	strd	r7, r4, [sl]
 8001b8a:	e9cd 321e 	strd	r3, r2, [sp, #120]	; 0x78
 8001b8e:	ddf1      	ble.n	8001b74 <_vfprintf_r+0x112c>
 8001b90:	aa1d      	add	r2, sp, #116	; 0x74
 8001b92:	4641      	mov	r1, r8
 8001b94:	4658      	mov	r0, fp
 8001b96:	f003 fcd9 	bl	800554c <__sprint_r>
 8001b9a:	2800      	cmp	r0, #0
 8001b9c:	f47f a8a8 	bne.w	8000cf0 <_vfprintf_r+0x2a8>
 8001ba0:	e9dd 321e 	ldrd	r3, r2, [sp, #120]	; 0x78
 8001ba4:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 8001ba8:	e7e6      	b.n	8001b78 <_vfprintf_r+0x1130>
 8001baa:	bf00      	nop
 8001bac:	66666667 	.word	0x66666667
 8001bb0:	0801c0fc 	.word	0x0801c0fc
 8001bb4:	0800ccfc 	.word	0x0800ccfc
 8001bb8:	0801c104 	.word	0x0801c104
 8001bbc:	4630      	mov	r0, r6
 8001bbe:	9409      	str	r4, [sp, #36]	; 0x24
 8001bc0:	9705      	str	r7, [sp, #20]
 8001bc2:	f8cd b00c 	str.w	fp, [sp, #12]
 8001bc6:	f7fe fddb 	bl	8000780 <strlen>
 8001bca:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
 8001bce:	f89d 4057 	ldrb.w	r4, [sp, #87]	; 0x57
 8001bd2:	9008      	str	r0, [sp, #32]
 8001bd4:	9304      	str	r3, [sp, #16]
 8001bd6:	970a      	str	r7, [sp, #40]	; 0x28
 8001bd8:	f7ff b96f 	b.w	8000eba <_vfprintf_r+0x472>
 8001bdc:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8001be0:	f8ca 7000 	str.w	r7, [sl]
 8001be4:	3501      	adds	r5, #1
 8001be6:	4434      	add	r4, r6
 8001be8:	2d07      	cmp	r5, #7
 8001bea:	e9cd 541e 	strd	r5, r4, [sp, #120]	; 0x78
 8001bee:	f8ca 6004 	str.w	r6, [sl, #4]
 8001bf2:	f77f ac38 	ble.w	8001466 <_vfprintf_r+0xa1e>
 8001bf6:	e585      	b.n	8001704 <_vfprintf_r+0xcbc>
 8001bf8:	9c05      	ldr	r4, [sp, #20]
 8001bfa:	eeb0 0a4a 	vmov.f32	s0, s20
 8001bfe:	eef0 0a6a 	vmov.f32	s1, s21
 8001c02:	ab1b      	add	r3, sp, #108	; 0x6c
 8001c04:	9301      	str	r3, [sp, #4]
 8001c06:	ab18      	add	r3, sp, #96	; 0x60
 8001c08:	9300      	str	r3, [sp, #0]
 8001c0a:	4622      	mov	r2, r4
 8001c0c:	ab17      	add	r3, sp, #92	; 0x5c
 8001c0e:	ee19 0a10 	vmov	r0, s18
 8001c12:	2103      	movs	r1, #3
 8001c14:	f000 fb18 	bl	8002248 <_dtoa_r>
 8001c18:	4606      	mov	r6, r0
 8001c1a:	1904      	adds	r4, r0, r4
 8001c1c:	7833      	ldrb	r3, [r6, #0]
 8001c1e:	2b30      	cmp	r3, #48	; 0x30
 8001c20:	d062      	beq.n	8001ce8 <_vfprintf_r+0x12a0>
 8001c22:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8001c24:	441c      	add	r4, r3
 8001c26:	ec51 0b1a 	vmov	r0, r1, d10
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	f005 fc89 	bl	8007544 <__aeabi_dcmpeq>
 8001c32:	2800      	cmp	r0, #0
 8001c34:	f000 808b 	beq.w	8001d4e <_vfprintf_r+0x1306>
 8001c38:	4623      	mov	r3, r4
 8001c3a:	1b9b      	subs	r3, r3, r6
 8001c3c:	2f47      	cmp	r7, #71	; 0x47
 8001c3e:	930b      	str	r3, [sp, #44]	; 0x2c
 8001c40:	f43f ae17 	beq.w	8001872 <_vfprintf_r+0xe2a>
 8001c44:	2d66      	cmp	r5, #102	; 0x66
 8001c46:	f040 8182 	bne.w	8001f4e <_vfprintf_r+0x1506>
 8001c4a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8001c4c:	9a05      	ldr	r2, [sp, #20]
 8001c4e:	930a      	str	r3, [sp, #40]	; 0x28
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	f00b 0b01 	and.w	fp, fp, #1
 8001c56:	f340 815c 	ble.w	8001f12 <_vfprintf_r+0x14ca>
 8001c5a:	ea5b 0102 	orrs.w	r1, fp, r2
 8001c5e:	f040 8145 	bne.w	8001eec <_vfprintf_r+0x14a4>
 8001c62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001c64:	9304      	str	r3, [sp, #16]
 8001c66:	9308      	str	r3, [sp, #32]
 8001c68:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d07b      	beq.n	8001d66 <_vfprintf_r+0x131e>
 8001c6e:	232d      	movs	r3, #45	; 0x2d
 8001c70:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
 8001c74:	2300      	movs	r3, #0
 8001c76:	9305      	str	r3, [sp, #20]
 8001c78:	f7ff b922 	b.w	8000ec0 <_vfprintf_r+0x478>
 8001c7c:	4642      	mov	r2, r8
 8001c7e:	9e05      	ldr	r6, [sp, #20]
 8001c80:	46b8      	mov	r8, r7
 8001c82:	4617      	mov	r7, r2
 8001c84:	3301      	adds	r3, #1
 8001c86:	442c      	add	r4, r5
 8001c88:	2b07      	cmp	r3, #7
 8001c8a:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
 8001c8e:	f8ca 7000 	str.w	r7, [sl]
 8001c92:	f8ca 5004 	str.w	r5, [sl, #4]
 8001c96:	dc49      	bgt.n	8001d2c <_vfprintf_r+0x12e4>
 8001c98:	f10a 0a08 	add.w	sl, sl, #8
 8001c9c:	e4c3      	b.n	8001626 <_vfprintf_r+0xbde>
 8001c9e:	242d      	movs	r4, #45	; 0x2d
 8001ca0:	f88d 4057 	strb.w	r4, [sp, #87]	; 0x57
 8001ca4:	f7ff b8fb 	b.w	8000e9e <_vfprintf_r+0x456>
 8001ca8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8001cac:	ee0a 3a90 	vmov	s21, r3
 8001cb0:	232d      	movs	r3, #45	; 0x2d
 8001cb2:	ee0a 0a10 	vmov	s20, r0
 8001cb6:	9312      	str	r3, [sp, #72]	; 0x48
 8001cb8:	e5b2      	b.n	8001820 <_vfprintf_r+0xdd8>
 8001cba:	ee19 0a10 	vmov	r0, s18
 8001cbe:	aa1d      	add	r2, sp, #116	; 0x74
 8001cc0:	4641      	mov	r1, r8
 8001cc2:	f003 fc43 	bl	800554c <__sprint_r>
 8001cc6:	2800      	cmp	r0, #0
 8001cc8:	f47f a812 	bne.w	8000cf0 <_vfprintf_r+0x2a8>
 8001ccc:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8001cce:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 8001cd0:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 8001cd4:	e6d9      	b.n	8001a8a <_vfprintf_r+0x1042>
 8001cd6:	2d47      	cmp	r5, #71	; 0x47
 8001cd8:	f43f adc0 	beq.w	800185c <_vfprintf_r+0xe14>
 8001cdc:	4434      	add	r4, r6
 8001cde:	e7a2      	b.n	8001c26 <_vfprintf_r+0x11de>
 8001ce0:	f88d 0057 	strb.w	r0, [sp, #87]	; 0x57
 8001ce4:	f7ff b817 	b.w	8000d16 <_vfprintf_r+0x2ce>
 8001ce8:	ec51 0b1a 	vmov	r0, r1, d10
 8001cec:	2200      	movs	r2, #0
 8001cee:	2300      	movs	r3, #0
 8001cf0:	f005 fc28 	bl	8007544 <__aeabi_dcmpeq>
 8001cf4:	2800      	cmp	r0, #0
 8001cf6:	d194      	bne.n	8001c22 <_vfprintf_r+0x11da>
 8001cf8:	9b05      	ldr	r3, [sp, #20]
 8001cfa:	f1c3 0301 	rsb	r3, r3, #1
 8001cfe:	9317      	str	r3, [sp, #92]	; 0x5c
 8001d00:	e790      	b.n	8001c24 <_vfprintf_r+0x11dc>
 8001d02:	9b05      	ldr	r3, [sp, #20]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	bf08      	it	eq
 8001d08:	2301      	moveq	r3, #1
 8001d0a:	9305      	str	r3, [sp, #20]
 8001d0c:	e578      	b.n	8001800 <_vfprintf_r+0xdb8>
 8001d0e:	ee19 0a10 	vmov	r0, s18
 8001d12:	aa1d      	add	r2, sp, #116	; 0x74
 8001d14:	4641      	mov	r1, r8
 8001d16:	f003 fc19 	bl	800554c <__sprint_r>
 8001d1a:	2800      	cmp	r0, #0
 8001d1c:	f47e afe8 	bne.w	8000cf0 <_vfprintf_r+0x2a8>
 8001d20:	e9dd 321e 	ldrd	r3, r2, [sp, #120]	; 0x78
 8001d24:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8001d26:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 8001d2a:	e718      	b.n	8001b5e <_vfprintf_r+0x1116>
 8001d2c:	ee19 0a10 	vmov	r0, s18
 8001d30:	aa1d      	add	r2, sp, #116	; 0x74
 8001d32:	4641      	mov	r1, r8
 8001d34:	f003 fc0a 	bl	800554c <__sprint_r>
 8001d38:	2800      	cmp	r0, #0
 8001d3a:	f47e afd9 	bne.w	8000cf0 <_vfprintf_r+0x2a8>
 8001d3e:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 8001d40:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 8001d44:	e46f      	b.n	8001626 <_vfprintf_r+0xbde>
 8001d46:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8001d4a:	f7ff b903 	b.w	8000f54 <_vfprintf_r+0x50c>
 8001d4e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8001d50:	42a3      	cmp	r3, r4
 8001d52:	f4bf af72 	bcs.w	8001c3a <_vfprintf_r+0x11f2>
 8001d56:	2130      	movs	r1, #48	; 0x30
 8001d58:	1c5a      	adds	r2, r3, #1
 8001d5a:	921b      	str	r2, [sp, #108]	; 0x6c
 8001d5c:	7019      	strb	r1, [r3, #0]
 8001d5e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8001d60:	429c      	cmp	r4, r3
 8001d62:	d8f9      	bhi.n	8001d58 <_vfprintf_r+0x1310>
 8001d64:	e769      	b.n	8001c3a <_vfprintf_r+0x11f2>
 8001d66:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8001d68:	f89d 4057 	ldrb.w	r4, [sp, #87]	; 0x57
 8001d6c:	9305      	str	r3, [sp, #20]
 8001d6e:	f7ff b8a4 	b.w	8000eba <_vfprintf_r+0x472>
 8001d72:	e9dd 320a 	ldrd	r3, r2, [sp, #40]	; 0x28
 8001d76:	4293      	cmp	r3, r2
 8001d78:	db43      	blt.n	8001e02 <_vfprintf_r+0x13ba>
 8001d7a:	f01b 0f01 	tst.w	fp, #1
 8001d7e:	f040 80ac 	bne.w	8001eda <_vfprintf_r+0x1492>
 8001d82:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 8001d86:	9204      	str	r2, [sp, #16]
 8001d88:	9308      	str	r3, [sp, #32]
 8001d8a:	2567      	movs	r5, #103	; 0x67
 8001d8c:	e76c      	b.n	8001c68 <_vfprintf_r+0x1220>
 8001d8e:	ee19 0a10 	vmov	r0, s18
 8001d92:	aa1d      	add	r2, sp, #116	; 0x74
 8001d94:	4641      	mov	r1, r8
 8001d96:	f003 fbd9 	bl	800554c <__sprint_r>
 8001d9a:	2800      	cmp	r0, #0
 8001d9c:	f47e afa8 	bne.w	8000cf0 <_vfprintf_r+0x2a8>
 8001da0:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8001da2:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 8001da4:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 8001da8:	e450      	b.n	800164c <_vfprintf_r+0xc04>
 8001daa:	ee19 0a10 	vmov	r0, s18
 8001dae:	aa1d      	add	r2, sp, #116	; 0x74
 8001db0:	4641      	mov	r1, r8
 8001db2:	f003 fbcb 	bl	800554c <__sprint_r>
 8001db6:	2800      	cmp	r0, #0
 8001db8:	f47e af9a 	bne.w	8000cf0 <_vfprintf_r+0x2a8>
 8001dbc:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 8001dbe:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 8001dc2:	e429      	b.n	8001618 <_vfprintf_r+0xbd0>
 8001dc4:	ee19 0a10 	vmov	r0, s18
 8001dc8:	aa1d      	add	r2, sp, #116	; 0x74
 8001dca:	4641      	mov	r1, r8
 8001dcc:	f003 fbbe 	bl	800554c <__sprint_r>
 8001dd0:	2800      	cmp	r0, #0
 8001dd2:	f47e af8d 	bne.w	8000cf0 <_vfprintf_r+0x2a8>
 8001dd6:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8001dd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001dda:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 8001ddc:	1b5d      	subs	r5, r3, r5
 8001dde:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 8001de2:	e44b      	b.n	800167c <_vfprintf_r+0xc34>
 8001de4:	2306      	movs	r3, #6
 8001de6:	9305      	str	r3, [sp, #20]
 8001de8:	e50a      	b.n	8001800 <_vfprintf_r+0xdb8>
 8001dea:	9b05      	ldr	r3, [sp, #20]
 8001dec:	9409      	str	r4, [sp, #36]	; 0x24
 8001dee:	f8cd b00c 	str.w	fp, [sp, #12]
 8001df2:	f89d 4057 	ldrb.w	r4, [sp, #87]	; 0x57
 8001df6:	9304      	str	r3, [sp, #16]
 8001df8:	9308      	str	r3, [sp, #32]
 8001dfa:	9005      	str	r0, [sp, #20]
 8001dfc:	900a      	str	r0, [sp, #40]	; 0x28
 8001dfe:	f7ff b85c 	b.w	8000eba <_vfprintf_r+0x472>
 8001e02:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8001e04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001e06:	4413      	add	r3, r2
 8001e08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001e0a:	9308      	str	r3, [sp, #32]
 8001e0c:	2a00      	cmp	r2, #0
 8001e0e:	dd75      	ble.n	8001efc <_vfprintf_r+0x14b4>
 8001e10:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001e14:	9304      	str	r3, [sp, #16]
 8001e16:	2567      	movs	r5, #103	; 0x67
 8001e18:	e726      	b.n	8001c68 <_vfprintf_r+0x1220>
 8001e1a:	f88d 0057 	strb.w	r0, [sp, #87]	; 0x57
 8001e1e:	f7ff b91a 	b.w	8001056 <_vfprintf_r+0x60e>
 8001e22:	2200      	movs	r2, #0
 8001e24:	9205      	str	r2, [sp, #20]
 8001e26:	f7fe be77 	b.w	8000b18 <_vfprintf_r+0xd0>
 8001e2a:	f88d 0057 	strb.w	r0, [sp, #87]	; 0x57
 8001e2e:	f7ff b806 	b.w	8000e3e <_vfprintf_r+0x3f6>
 8001e32:	f88d 0057 	strb.w	r0, [sp, #87]	; 0x57
 8001e36:	f7ff b94f 	b.w	80010d8 <_vfprintf_r+0x690>
 8001e3a:	f88d 0057 	strb.w	r0, [sp, #87]	; 0x57
 8001e3e:	f7ff b8cc 	b.w	8000fda <_vfprintf_r+0x592>
 8001e42:	f88d 0057 	strb.w	r0, [sp, #87]	; 0x57
 8001e46:	f7ff b96a 	b.w	800111e <_vfprintf_r+0x6d6>
 8001e4a:	f88d 0057 	strb.w	r0, [sp, #87]	; 0x57
 8001e4e:	f7ff b85d 	b.w	8000f0c <_vfprintf_r+0x4c4>
 8001e52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e56:	9307      	str	r3, [sp, #28]
 8001e58:	f7fe bf4f 	b.w	8000cfa <_vfprintf_r+0x2b2>
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	442a      	add	r2, r5
 8001e60:	2b07      	cmp	r3, #7
 8001e62:	e9cd 321e 	strd	r3, r2, [sp, #120]	; 0x78
 8001e66:	f8ca 7000 	str.w	r7, [sl]
 8001e6a:	f8ca 5004 	str.w	r5, [sl, #4]
 8001e6e:	f77f ae21 	ble.w	8001ab4 <_vfprintf_r+0x106c>
 8001e72:	ee19 0a10 	vmov	r0, s18
 8001e76:	aa1d      	add	r2, sp, #116	; 0x74
 8001e78:	4641      	mov	r1, r8
 8001e7a:	f003 fb67 	bl	800554c <__sprint_r>
 8001e7e:	2800      	cmp	r0, #0
 8001e80:	f47e af36 	bne.w	8000cf0 <_vfprintf_r+0x2a8>
 8001e84:	e9dd 321e 	ldrd	r3, r2, [sp, #120]	; 0x78
 8001e88:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 8001e8c:	e614      	b.n	8001ab8 <_vfprintf_r+0x1070>
 8001e8e:	3330      	adds	r3, #48	; 0x30
 8001e90:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8001e94:	2330      	movs	r3, #48	; 0x30
 8001e96:	f88d 3066 	strb.w	r3, [sp, #102]	; 0x66
 8001e9a:	2304      	movs	r3, #4
 8001e9c:	9311      	str	r3, [sp, #68]	; 0x44
 8001e9e:	e533      	b.n	8001908 <_vfprintf_r+0xec0>
 8001ea0:	46b8      	mov	r8, r7
 8001ea2:	f7fe bf25 	b.w	8000cf0 <_vfprintf_r+0x2a8>
 8001ea6:	f01b 0201 	ands.w	r2, fp, #1
 8001eaa:	920a      	str	r2, [sp, #40]	; 0x28
 8001eac:	f47f ad33 	bne.w	8001916 <_vfprintf_r+0xece>
 8001eb0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001eb4:	9304      	str	r3, [sp, #16]
 8001eb6:	e6d7      	b.n	8001c68 <_vfprintf_r+0x1220>
 8001eb8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001eba:	4e26      	ldr	r6, [pc, #152]	; (8001f54 <_vfprintf_r+0x150c>)
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	bfb8      	it	lt
 8001ec0:	242d      	movlt	r4, #45	; 0x2d
 8001ec2:	f02b 0380 	bic.w	r3, fp, #128	; 0x80
 8001ec6:	9303      	str	r3, [sp, #12]
 8001ec8:	bfa8      	it	ge
 8001eca:	f89d 4057 	ldrbge.w	r4, [sp, #87]	; 0x57
 8001ece:	4b22      	ldr	r3, [pc, #136]	; (8001f58 <_vfprintf_r+0x1510>)
 8001ed0:	bfb8      	it	lt
 8001ed2:	f88d 4057 	strblt.w	r4, [sp, #87]	; 0x57
 8001ed6:	f7fe bfe7 	b.w	8000ea8 <_vfprintf_r+0x460>
 8001eda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001edc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8001ede:	4413      	add	r3, r2
 8001ee0:	9308      	str	r3, [sp, #32]
 8001ee2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001ee6:	9304      	str	r3, [sp, #16]
 8001ee8:	2567      	movs	r5, #103	; 0x67
 8001eea:	e6bd      	b.n	8001c68 <_vfprintf_r+0x1220>
 8001eec:	990e      	ldr	r1, [sp, #56]	; 0x38
 8001eee:	440b      	add	r3, r1
 8001ef0:	441a      	add	r2, r3
 8001ef2:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8001ef6:	9208      	str	r2, [sp, #32]
 8001ef8:	9304      	str	r3, [sp, #16]
 8001efa:	e6b5      	b.n	8001c68 <_vfprintf_r+0x1220>
 8001efc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001efe:	9a08      	ldr	r2, [sp, #32]
 8001f00:	f1c3 0301 	rsb	r3, r3, #1
 8001f04:	441a      	add	r2, r3
 8001f06:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8001f0a:	9208      	str	r2, [sp, #32]
 8001f0c:	9304      	str	r3, [sp, #16]
 8001f0e:	2567      	movs	r5, #103	; 0x67
 8001f10:	e6aa      	b.n	8001c68 <_vfprintf_r+0x1220>
 8001f12:	ea5b 0302 	orrs.w	r3, fp, r2
 8001f16:	d103      	bne.n	8001f20 <_vfprintf_r+0x14d8>
 8001f18:	2301      	movs	r3, #1
 8001f1a:	9304      	str	r3, [sp, #16]
 8001f1c:	9308      	str	r3, [sp, #32]
 8001f1e:	e6a3      	b.n	8001c68 <_vfprintf_r+0x1220>
 8001f20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001f22:	3301      	adds	r3, #1
 8001f24:	441a      	add	r2, r3
 8001f26:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8001f2a:	9208      	str	r2, [sp, #32]
 8001f2c:	9304      	str	r3, [sp, #16]
 8001f2e:	e69b      	b.n	8001c68 <_vfprintf_r+0x1220>
 8001f30:	2302      	movs	r3, #2
 8001f32:	9311      	str	r3, [sp, #68]	; 0x44
 8001f34:	e4e8      	b.n	8001908 <_vfprintf_r+0xec0>
 8001f36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001f38:	f899 5001 	ldrb.w	r5, [r9, #1]
 8001f3c:	4689      	mov	r9, r1
 8001f3e:	f852 1b04 	ldr.w	r1, [r2], #4
 8001f42:	9209      	str	r2, [sp, #36]	; 0x24
 8001f44:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
 8001f48:	9105      	str	r1, [sp, #20]
 8001f4a:	f7fe bde3 	b.w	8000b14 <_vfprintf_r+0xcc>
 8001f4e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8001f50:	930a      	str	r3, [sp, #40]	; 0x28
 8001f52:	e497      	b.n	8001884 <_vfprintf_r+0xe3c>
 8001f54:	0801c0cc 	.word	0x0801c0cc
 8001f58:	0801c0d0 	.word	0x0801c0d0

08001f5c <vfprintf>:
 8001f5c:	b410      	push	{r4}
 8001f5e:	4c05      	ldr	r4, [pc, #20]	; (8001f74 <vfprintf+0x18>)
 8001f60:	4684      	mov	ip, r0
 8001f62:	4613      	mov	r3, r2
 8001f64:	6820      	ldr	r0, [r4, #0]
 8001f66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001f6a:	460a      	mov	r2, r1
 8001f6c:	4661      	mov	r1, ip
 8001f6e:	f7fe bd6b 	b.w	8000a48 <_vfprintf_r>
 8001f72:	bf00      	nop
 8001f74:	20000008 	.word	0x20000008

08001f78 <__sbprintf>:
 8001f78:	b570      	push	{r4, r5, r6, lr}
 8001f7a:	460c      	mov	r4, r1
 8001f7c:	8989      	ldrh	r1, [r1, #12]
 8001f7e:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
 8001f82:	f021 0102 	bic.w	r1, r1, #2
 8001f86:	f8ad 100c 	strh.w	r1, [sp, #12]
 8001f8a:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8001f8c:	9119      	str	r1, [sp, #100]	; 0x64
 8001f8e:	89e1      	ldrh	r1, [r4, #14]
 8001f90:	f8ad 100e 	strh.w	r1, [sp, #14]
 8001f94:	69e1      	ldr	r1, [r4, #28]
 8001f96:	9107      	str	r1, [sp, #28]
 8001f98:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001f9a:	9109      	str	r1, [sp, #36]	; 0x24
 8001f9c:	a91a      	add	r1, sp, #104	; 0x68
 8001f9e:	9100      	str	r1, [sp, #0]
 8001fa0:	9104      	str	r1, [sp, #16]
 8001fa2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fa6:	9102      	str	r1, [sp, #8]
 8001fa8:	9105      	str	r1, [sp, #20]
 8001faa:	2100      	movs	r1, #0
 8001fac:	9106      	str	r1, [sp, #24]
 8001fae:	4669      	mov	r1, sp
 8001fb0:	4606      	mov	r6, r0
 8001fb2:	f7fe fd49 	bl	8000a48 <_vfprintf_r>
 8001fb6:	1e05      	subs	r5, r0, #0
 8001fb8:	db07      	blt.n	8001fca <__sbprintf+0x52>
 8001fba:	4669      	mov	r1, sp
 8001fbc:	4630      	mov	r0, r6
 8001fbe:	f001 f979 	bl	80032b4 <_fflush_r>
 8001fc2:	2800      	cmp	r0, #0
 8001fc4:	bf18      	it	ne
 8001fc6:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 8001fca:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8001fce:	065b      	lsls	r3, r3, #25
 8001fd0:	d503      	bpl.n	8001fda <__sbprintf+0x62>
 8001fd2:	89a3      	ldrh	r3, [r4, #12]
 8001fd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001fd8:	81a3      	strh	r3, [r4, #12]
 8001fda:	4628      	mov	r0, r5
 8001fdc:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
 8001fe0:	bd70      	pop	{r4, r5, r6, pc}
 8001fe2:	bf00      	nop

08001fe4 <__swsetup_r>:
 8001fe4:	b538      	push	{r3, r4, r5, lr}
 8001fe6:	4b33      	ldr	r3, [pc, #204]	; (80020b4 <__swsetup_r+0xd0>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4605      	mov	r5, r0
 8001fec:	460c      	mov	r4, r1
 8001fee:	b10b      	cbz	r3, 8001ff4 <__swsetup_r+0x10>
 8001ff0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ff2:	b312      	cbz	r2, 800203a <__swsetup_r+0x56>
 8001ff4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001ff8:	0718      	lsls	r0, r3, #28
 8001ffa:	b29a      	uxth	r2, r3
 8001ffc:	d525      	bpl.n	800204a <__swsetup_r+0x66>
 8001ffe:	6921      	ldr	r1, [r4, #16]
 8002000:	2900      	cmp	r1, #0
 8002002:	d02d      	beq.n	8002060 <__swsetup_r+0x7c>
 8002004:	f012 0001 	ands.w	r0, r2, #1
 8002008:	d007      	beq.n	800201a <__swsetup_r+0x36>
 800200a:	2000      	movs	r0, #0
 800200c:	60a0      	str	r0, [r4, #8]
 800200e:	6960      	ldr	r0, [r4, #20]
 8002010:	4240      	negs	r0, r0
 8002012:	61a0      	str	r0, [r4, #24]
 8002014:	b139      	cbz	r1, 8002026 <__swsetup_r+0x42>
 8002016:	2000      	movs	r0, #0
 8002018:	bd38      	pop	{r3, r4, r5, pc}
 800201a:	0795      	lsls	r5, r2, #30
 800201c:	bf58      	it	pl
 800201e:	6960      	ldrpl	r0, [r4, #20]
 8002020:	60a0      	str	r0, [r4, #8]
 8002022:	2900      	cmp	r1, #0
 8002024:	d1f7      	bne.n	8002016 <__swsetup_r+0x32>
 8002026:	0612      	lsls	r2, r2, #24
 8002028:	bf58      	it	pl
 800202a:	4608      	movpl	r0, r1
 800202c:	d5f4      	bpl.n	8002018 <__swsetup_r+0x34>
 800202e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002032:	81a3      	strh	r3, [r4, #12]
 8002034:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002038:	bd38      	pop	{r3, r4, r5, pc}
 800203a:	4618      	mov	r0, r3
 800203c:	f001 fa64 	bl	8003508 <__sinit>
 8002040:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002044:	0718      	lsls	r0, r3, #28
 8002046:	b29a      	uxth	r2, r3
 8002048:	d4d9      	bmi.n	8001ffe <__swsetup_r+0x1a>
 800204a:	06d1      	lsls	r1, r2, #27
 800204c:	d52a      	bpl.n	80020a4 <__swsetup_r+0xc0>
 800204e:	0752      	lsls	r2, r2, #29
 8002050:	d414      	bmi.n	800207c <__swsetup_r+0x98>
 8002052:	6921      	ldr	r1, [r4, #16]
 8002054:	f043 0308 	orr.w	r3, r3, #8
 8002058:	81a3      	strh	r3, [r4, #12]
 800205a:	b29a      	uxth	r2, r3
 800205c:	2900      	cmp	r1, #0
 800205e:	d1d1      	bne.n	8002004 <__swsetup_r+0x20>
 8002060:	f402 7020 	and.w	r0, r2, #640	; 0x280
 8002064:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8002068:	d0cc      	beq.n	8002004 <__swsetup_r+0x20>
 800206a:	4621      	mov	r1, r4
 800206c:	4628      	mov	r0, r5
 800206e:	f001 fd87 	bl	8003b80 <__smakebuf_r>
 8002072:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002076:	6921      	ldr	r1, [r4, #16]
 8002078:	b29a      	uxth	r2, r3
 800207a:	e7c3      	b.n	8002004 <__swsetup_r+0x20>
 800207c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800207e:	b151      	cbz	r1, 8002096 <__swsetup_r+0xb2>
 8002080:	f104 0240 	add.w	r2, r4, #64	; 0x40
 8002084:	4291      	cmp	r1, r2
 8002086:	d004      	beq.n	8002092 <__swsetup_r+0xae>
 8002088:	4628      	mov	r0, r5
 800208a:	f001 faad 	bl	80035e8 <_free_r>
 800208e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002092:	2200      	movs	r2, #0
 8002094:	6322      	str	r2, [r4, #48]	; 0x30
 8002096:	6921      	ldr	r1, [r4, #16]
 8002098:	2200      	movs	r2, #0
 800209a:	e9c4 1200 	strd	r1, r2, [r4]
 800209e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80020a2:	e7d7      	b.n	8002054 <__swsetup_r+0x70>
 80020a4:	2209      	movs	r2, #9
 80020a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020aa:	602a      	str	r2, [r5, #0]
 80020ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80020b0:	81a3      	strh	r3, [r4, #12]
 80020b2:	bd38      	pop	{r3, r4, r5, pc}
 80020b4:	20000008 	.word	0x20000008

080020b8 <__register_exitproc>:
 80020b8:	b470      	push	{r4, r5, r6}
 80020ba:	4c18      	ldr	r4, [pc, #96]	; (800211c <__register_exitproc+0x64>)
 80020bc:	6825      	ldr	r5, [r4, #0]
 80020be:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
 80020c2:	b31c      	cbz	r4, 800210c <__register_exitproc+0x54>
 80020c4:	6865      	ldr	r5, [r4, #4]
 80020c6:	2d1f      	cmp	r5, #31
 80020c8:	dc25      	bgt.n	8002116 <__register_exitproc+0x5e>
 80020ca:	b938      	cbnz	r0, 80020dc <__register_exitproc+0x24>
 80020cc:	1cab      	adds	r3, r5, #2
 80020ce:	3501      	adds	r5, #1
 80020d0:	6065      	str	r5, [r4, #4]
 80020d2:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
 80020d6:	2000      	movs	r0, #0
 80020d8:	bc70      	pop	{r4, r5, r6}
 80020da:	4770      	bx	lr
 80020dc:	eb04 0c85 	add.w	ip, r4, r5, lsl #2
 80020e0:	2802      	cmp	r0, #2
 80020e2:	f8cc 2088 	str.w	r2, [ip, #136]	; 0x88
 80020e6:	f8d4 6188 	ldr.w	r6, [r4, #392]	; 0x188
 80020ea:	f04f 0201 	mov.w	r2, #1
 80020ee:	fa02 f205 	lsl.w	r2, r2, r5
 80020f2:	ea46 0602 	orr.w	r6, r6, r2
 80020f6:	f8c4 6188 	str.w	r6, [r4, #392]	; 0x188
 80020fa:	f8cc 3108 	str.w	r3, [ip, #264]	; 0x108
 80020fe:	d1e5      	bne.n	80020cc <__register_exitproc+0x14>
 8002100:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
 8002104:	4313      	orrs	r3, r2
 8002106:	f8c4 318c 	str.w	r3, [r4, #396]	; 0x18c
 800210a:	e7df      	b.n	80020cc <__register_exitproc+0x14>
 800210c:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
 8002110:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 8002114:	e7d6      	b.n	80020c4 <__register_exitproc+0xc>
 8002116:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800211a:	e7dd      	b.n	80020d8 <__register_exitproc+0x20>
 800211c:	0800cce8 	.word	0x0800cce8

08002120 <quorem>:
 8002120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002124:	6903      	ldr	r3, [r0, #16]
 8002126:	690c      	ldr	r4, [r1, #16]
 8002128:	42a3      	cmp	r3, r4
 800212a:	b083      	sub	sp, #12
 800212c:	f2c0 8087 	blt.w	800223e <quorem+0x11e>
 8002130:	3c01      	subs	r4, #1
 8002132:	f101 0514 	add.w	r5, r1, #20
 8002136:	00a3      	lsls	r3, r4, #2
 8002138:	f100 0814 	add.w	r8, r0, #20
 800213c:	9300      	str	r3, [sp, #0]
 800213e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8002142:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
 8002146:	3301      	adds	r3, #1
 8002148:	4681      	mov	r9, r0
 800214a:	429a      	cmp	r2, r3
 800214c:	eb08 0084 	add.w	r0, r8, r4, lsl #2
 8002150:	eb05 0784 	add.w	r7, r5, r4, lsl #2
 8002154:	9001      	str	r0, [sp, #4]
 8002156:	fbb2 f6f3 	udiv	r6, r2, r3
 800215a:	d33b      	bcc.n	80021d4 <quorem+0xb4>
 800215c:	2300      	movs	r3, #0
 800215e:	46ae      	mov	lr, r5
 8002160:	4640      	mov	r0, r8
 8002162:	469b      	mov	fp, r3
 8002164:	f85e ab04 	ldr.w	sl, [lr], #4
 8002168:	6802      	ldr	r2, [r0, #0]
 800216a:	fa1f fc8a 	uxth.w	ip, sl
 800216e:	fb06 330c 	mla	r3, r6, ip, r3
 8002172:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8002176:	ea4f 4a1a 	mov.w	sl, sl, lsr #16
 800217a:	fb06 ca0a 	mla	sl, r6, sl, ip
 800217e:	fa1f fc83 	uxth.w	ip, r3
 8002182:	ebab 0c0c 	sub.w	ip, fp, ip
 8002186:	fa1f f38a 	uxth.w	r3, sl
 800218a:	fa1c fc82 	uxtah	ip, ip, r2
 800218e:	ebc3 4212 	rsb	r2, r3, r2, lsr #16
 8002192:	eb02 422c 	add.w	r2, r2, ip, asr #16
 8002196:	fa1f fc8c 	uxth.w	ip, ip
 800219a:	ea4c 4302 	orr.w	r3, ip, r2, lsl #16
 800219e:	4577      	cmp	r7, lr
 80021a0:	f840 3b04 	str.w	r3, [r0], #4
 80021a4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80021a8:	ea4f 431a 	mov.w	r3, sl, lsr #16
 80021ac:	d2da      	bcs.n	8002164 <quorem+0x44>
 80021ae:	9b00      	ldr	r3, [sp, #0]
 80021b0:	f858 3003 	ldr.w	r3, [r8, r3]
 80021b4:	b973      	cbnz	r3, 80021d4 <quorem+0xb4>
 80021b6:	9b01      	ldr	r3, [sp, #4]
 80021b8:	3b04      	subs	r3, #4
 80021ba:	4598      	cmp	r8, r3
 80021bc:	d304      	bcc.n	80021c8 <quorem+0xa8>
 80021be:	e007      	b.n	80021d0 <quorem+0xb0>
 80021c0:	4598      	cmp	r8, r3
 80021c2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80021c6:	d203      	bcs.n	80021d0 <quorem+0xb0>
 80021c8:	f853 2904 	ldr.w	r2, [r3], #-4
 80021cc:	2a00      	cmp	r2, #0
 80021ce:	d0f7      	beq.n	80021c0 <quorem+0xa0>
 80021d0:	f8c9 4010 	str.w	r4, [r9, #16]
 80021d4:	4648      	mov	r0, r9
 80021d6:	f002 fc7f 	bl	8004ad8 <__mcmp>
 80021da:	2800      	cmp	r0, #0
 80021dc:	db2b      	blt.n	8002236 <quorem+0x116>
 80021de:	3601      	adds	r6, #1
 80021e0:	4640      	mov	r0, r8
 80021e2:	2300      	movs	r3, #0
 80021e4:	f855 1b04 	ldr.w	r1, [r5], #4
 80021e8:	f8d0 c000 	ldr.w	ip, [r0]
 80021ec:	b28a      	uxth	r2, r1
 80021ee:	1a9a      	subs	r2, r3, r2
 80021f0:	0c0b      	lsrs	r3, r1, #16
 80021f2:	fa12 f28c 	uxtah	r2, r2, ip
 80021f6:	ebc3 431c 	rsb	r3, r3, ip, lsr #16
 80021fa:	eb03 4322 	add.w	r3, r3, r2, asr #16
 80021fe:	b292      	uxth	r2, r2
 8002200:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8002204:	42af      	cmp	r7, r5
 8002206:	f840 2b04 	str.w	r2, [r0], #4
 800220a:	ea4f 4323 	mov.w	r3, r3, asr #16
 800220e:	d2e9      	bcs.n	80021e4 <quorem+0xc4>
 8002210:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
 8002214:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 8002218:	b96a      	cbnz	r2, 8002236 <quorem+0x116>
 800221a:	3b04      	subs	r3, #4
 800221c:	4598      	cmp	r8, r3
 800221e:	d304      	bcc.n	800222a <quorem+0x10a>
 8002220:	e007      	b.n	8002232 <quorem+0x112>
 8002222:	4598      	cmp	r8, r3
 8002224:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8002228:	d203      	bcs.n	8002232 <quorem+0x112>
 800222a:	f853 2904 	ldr.w	r2, [r3], #-4
 800222e:	2a00      	cmp	r2, #0
 8002230:	d0f7      	beq.n	8002222 <quorem+0x102>
 8002232:	f8c9 4010 	str.w	r4, [r9, #16]
 8002236:	4630      	mov	r0, r6
 8002238:	b003      	add	sp, #12
 800223a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800223e:	2000      	movs	r0, #0
 8002240:	b003      	add	sp, #12
 8002242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002246:	bf00      	nop

08002248 <_dtoa_r>:
 8002248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800224c:	ed2d 8b06 	vpush	{d8-d10}
 8002250:	b095      	sub	sp, #84	; 0x54
 8002252:	ed8d 0b02 	vstr	d0, [sp, #8]
 8002256:	9101      	str	r1, [sp, #4]
 8002258:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800225a:	9d24      	ldr	r5, [sp, #144]	; 0x90
 800225c:	9209      	str	r2, [sp, #36]	; 0x24
 800225e:	ec59 8b10 	vmov	r8, r9, d0
 8002262:	4604      	mov	r4, r0
 8002264:	9306      	str	r3, [sp, #24]
 8002266:	b141      	cbz	r1, 800227a <_dtoa_r+0x32>
 8002268:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800226a:	604a      	str	r2, [r1, #4]
 800226c:	2301      	movs	r3, #1
 800226e:	4093      	lsls	r3, r2
 8002270:	608b      	str	r3, [r1, #8]
 8002272:	f002 f975 	bl	8004560 <_Bfree>
 8002276:	2300      	movs	r3, #0
 8002278:	6423      	str	r3, [r4, #64]	; 0x40
 800227a:	f1b9 0a00 	subs.w	sl, r9, #0
 800227e:	bfb4      	ite	lt
 8002280:	2301      	movlt	r3, #1
 8002282:	2300      	movge	r3, #0
 8002284:	602b      	str	r3, [r5, #0]
 8002286:	4b7c      	ldr	r3, [pc, #496]	; (8002478 <_dtoa_r+0x230>)
 8002288:	bfbc      	itt	lt
 800228a:	f02a 4a00 	biclt.w	sl, sl, #2147483648	; 0x80000000
 800228e:	f8cd a00c 	strlt.w	sl, [sp, #12]
 8002292:	ea33 030a 	bics.w	r3, r3, sl
 8002296:	f000 80b2 	beq.w	80023fe <_dtoa_r+0x1b6>
 800229a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800229e:	2200      	movs	r2, #0
 80022a0:	ec51 0b17 	vmov	r0, r1, d7
 80022a4:	eeb0 9a47 	vmov.f32	s18, s14
 80022a8:	eef0 9a67 	vmov.f32	s19, s15
 80022ac:	2300      	movs	r3, #0
 80022ae:	f005 f949 	bl	8007544 <__aeabi_dcmpeq>
 80022b2:	4607      	mov	r7, r0
 80022b4:	b180      	cbz	r0, 80022d8 <_dtoa_r+0x90>
 80022b6:	9a06      	ldr	r2, [sp, #24]
 80022b8:	2301      	movs	r3, #1
 80022ba:	6013      	str	r3, [r2, #0]
 80022bc:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80022be:	2b00      	cmp	r3, #0
 80022c0:	f000 82db 	beq.w	800287a <_dtoa_r+0x632>
 80022c4:	486d      	ldr	r0, [pc, #436]	; (800247c <_dtoa_r+0x234>)
 80022c6:	6018      	str	r0, [r3, #0]
 80022c8:	1e43      	subs	r3, r0, #1
 80022ca:	9300      	str	r3, [sp, #0]
 80022cc:	9800      	ldr	r0, [sp, #0]
 80022ce:	b015      	add	sp, #84	; 0x54
 80022d0:	ecbd 8b06 	vpop	{d8-d10}
 80022d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80022d8:	aa12      	add	r2, sp, #72	; 0x48
 80022da:	a913      	add	r1, sp, #76	; 0x4c
 80022dc:	4620      	mov	r0, r4
 80022de:	eeb0 0a49 	vmov.f32	s0, s18
 80022e2:	eef0 0a69 	vmov.f32	s1, s19
 80022e6:	f002 fd4f 	bl	8004d88 <__d2b>
 80022ea:	eeb0 8a49 	vmov.f32	s16, s18
 80022ee:	eef0 8a69 	vmov.f32	s17, s19
 80022f2:	ea5f 561a 	movs.w	r6, sl, lsr #20
 80022f6:	4605      	mov	r5, r0
 80022f8:	f040 8099 	bne.w	800242e <_dtoa_r+0x1e6>
 80022fc:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
 8002300:	443e      	add	r6, r7
 8002302:	f206 4032 	addw	r0, r6, #1074	; 0x432
 8002306:	2820      	cmp	r0, #32
 8002308:	f340 83ab 	ble.w	8002a62 <_dtoa_r+0x81a>
 800230c:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8002310:	fa0a fa00 	lsl.w	sl, sl, r0
 8002314:	f206 4012 	addw	r0, r6, #1042	; 0x412
 8002318:	fa28 f000 	lsr.w	r0, r8, r0
 800231c:	ea4a 0000 	orr.w	r0, sl, r0
 8002320:	f004 fe2e 	bl	8006f80 <__aeabi_ui2d>
 8002324:	2301      	movs	r3, #1
 8002326:	3e01      	subs	r6, #1
 8002328:	930d      	str	r3, [sp, #52]	; 0x34
 800232a:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800232e:	4b54      	ldr	r3, [pc, #336]	; (8002480 <_dtoa_r+0x238>)
 8002330:	2200      	movs	r2, #0
 8002332:	f004 fce7 	bl	8006d04 <__aeabi_dsub>
 8002336:	a34a      	add	r3, pc, #296	; (adr r3, 8002460 <_dtoa_r+0x218>)
 8002338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800233c:	f004 fe9a 	bl	8007074 <__aeabi_dmul>
 8002340:	a349      	add	r3, pc, #292	; (adr r3, 8002468 <_dtoa_r+0x220>)
 8002342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002346:	f004 fcdf 	bl	8006d08 <__adddf3>
 800234a:	4680      	mov	r8, r0
 800234c:	4630      	mov	r0, r6
 800234e:	4689      	mov	r9, r1
 8002350:	f004 fe26 	bl	8006fa0 <__aeabi_i2d>
 8002354:	a346      	add	r3, pc, #280	; (adr r3, 8002470 <_dtoa_r+0x228>)
 8002356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800235a:	f004 fe8b 	bl	8007074 <__aeabi_dmul>
 800235e:	4602      	mov	r2, r0
 8002360:	460b      	mov	r3, r1
 8002362:	4640      	mov	r0, r8
 8002364:	4649      	mov	r1, r9
 8002366:	f004 fccf 	bl	8006d08 <__adddf3>
 800236a:	4680      	mov	r8, r0
 800236c:	4689      	mov	r9, r1
 800236e:	f005 f931 	bl	80075d4 <__aeabi_d2iz>
 8002372:	2200      	movs	r2, #0
 8002374:	4683      	mov	fp, r0
 8002376:	2300      	movs	r3, #0
 8002378:	4640      	mov	r0, r8
 800237a:	4649      	mov	r1, r9
 800237c:	f005 f8ec 	bl	8007558 <__aeabi_dcmplt>
 8002380:	2800      	cmp	r0, #0
 8002382:	f040 826d 	bne.w	8002860 <_dtoa_r+0x618>
 8002386:	f1bb 0f16 	cmp.w	fp, #22
 800238a:	f200 825c 	bhi.w	8002846 <_dtoa_r+0x5fe>
 800238e:	4b3d      	ldr	r3, [pc, #244]	; (8002484 <_dtoa_r+0x23c>)
 8002390:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8002394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002398:	ec51 0b19 	vmov	r0, r1, d9
 800239c:	f005 f8dc 	bl	8007558 <__aeabi_dcmplt>
 80023a0:	2800      	cmp	r0, #0
 80023a2:	d075      	beq.n	8002490 <_dtoa_r+0x248>
 80023a4:	2300      	movs	r3, #0
 80023a6:	1bbe      	subs	r6, r7, r6
 80023a8:	930c      	str	r3, [sp, #48]	; 0x30
 80023aa:	1e73      	subs	r3, r6, #1
 80023ac:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80023b0:	9304      	str	r3, [sp, #16]
 80023b2:	f100 824f 	bmi.w	8002854 <_dtoa_r+0x60c>
 80023b6:	2300      	movs	r3, #0
 80023b8:	9308      	str	r3, [sp, #32]
 80023ba:	f1bb 0f00 	cmp.w	fp, #0
 80023be:	da6e      	bge.n	800249e <_dtoa_r+0x256>
 80023c0:	9b08      	ldr	r3, [sp, #32]
 80023c2:	f8cd b014 	str.w	fp, [sp, #20]
 80023c6:	eba3 030b 	sub.w	r3, r3, fp
 80023ca:	9308      	str	r3, [sp, #32]
 80023cc:	f1cb 0300 	rsb	r3, fp, #0
 80023d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80023d2:	9b01      	ldr	r3, [sp, #4]
 80023d4:	2b09      	cmp	r3, #9
 80023d6:	f04f 0b00 	mov.w	fp, #0
 80023da:	d869      	bhi.n	80024b0 <_dtoa_r+0x268>
 80023dc:	2b05      	cmp	r3, #5
 80023de:	f340 833e 	ble.w	8002a5e <_dtoa_r+0x816>
 80023e2:	3b04      	subs	r3, #4
 80023e4:	9301      	str	r3, [sp, #4]
 80023e6:	2600      	movs	r6, #0
 80023e8:	9b01      	ldr	r3, [sp, #4]
 80023ea:	3b02      	subs	r3, #2
 80023ec:	2b03      	cmp	r3, #3
 80023ee:	f200 8699 	bhi.w	8003124 <_dtoa_r+0xedc>
 80023f2:	e8df f013 	tbh	[pc, r3, lsl #1]
 80023f6:	044e      	.short	0x044e
 80023f8:	0443044b 	.word	0x0443044b
 80023fc:	0426      	.short	0x0426
 80023fe:	9a06      	ldr	r2, [sp, #24]
 8002400:	f242 730f 	movw	r3, #9999	; 0x270f
 8002404:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8002408:	6013      	str	r3, [r2, #0]
 800240a:	ea5a 0308 	orrs.w	r3, sl, r8
 800240e:	d11d      	bne.n	800244c <_dtoa_r+0x204>
 8002410:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8002412:	2b00      	cmp	r3, #0
 8002414:	f000 867d 	beq.w	8003112 <_dtoa_r+0xeca>
 8002418:	4b1b      	ldr	r3, [pc, #108]	; (8002488 <_dtoa_r+0x240>)
 800241a:	9300      	str	r3, [sp, #0]
 800241c:	3308      	adds	r3, #8
 800241e:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8002420:	9800      	ldr	r0, [sp, #0]
 8002422:	6013      	str	r3, [r2, #0]
 8002424:	b015      	add	sp, #84	; 0x54
 8002426:	ecbd 8b06 	vpop	{d8-d10}
 800242a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800242e:	ee18 3a90 	vmov	r3, s17
 8002432:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002436:	ec51 0b19 	vmov	r0, r1, d9
 800243a:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800243e:	970d      	str	r7, [sp, #52]	; 0x34
 8002440:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
 8002444:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8002446:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800244a:	e770      	b.n	800232e <_dtoa_r+0xe6>
 800244c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800244e:	2b00      	cmp	r3, #0
 8002450:	f040 83db 	bne.w	8002c0a <_dtoa_r+0x9c2>
 8002454:	4b0d      	ldr	r3, [pc, #52]	; (800248c <_dtoa_r+0x244>)
 8002456:	9300      	str	r3, [sp, #0]
 8002458:	e738      	b.n	80022cc <_dtoa_r+0x84>
 800245a:	bf00      	nop
 800245c:	f3af 8000 	nop.w
 8002460:	636f4361 	.word	0x636f4361
 8002464:	3fd287a7 	.word	0x3fd287a7
 8002468:	8b60c8b3 	.word	0x8b60c8b3
 800246c:	3fc68a28 	.word	0x3fc68a28
 8002470:	509f79fb 	.word	0x509f79fb
 8002474:	3fd34413 	.word	0x3fd34413
 8002478:	7ff00000 	.word	0x7ff00000
 800247c:	0801c105 	.word	0x0801c105
 8002480:	3ff80000 	.word	0x3ff80000
 8002484:	0800cd20 	.word	0x0800cd20
 8002488:	0801c10c 	.word	0x0801c10c
 800248c:	0801c108 	.word	0x0801c108
 8002490:	1bbe      	subs	r6, r7, r6
 8002492:	1e73      	subs	r3, r6, #1
 8002494:	9304      	str	r3, [sp, #16]
 8002496:	f100 849a 	bmi.w	8002dce <_dtoa_r+0xb86>
 800249a:	900c      	str	r0, [sp, #48]	; 0x30
 800249c:	9008      	str	r0, [sp, #32]
 800249e:	9b04      	ldr	r3, [sp, #16]
 80024a0:	445b      	add	r3, fp
 80024a2:	e9cd 3b04 	strd	r3, fp, [sp, #16]
 80024a6:	2300      	movs	r3, #0
 80024a8:	930b      	str	r3, [sp, #44]	; 0x2c
 80024aa:	9b01      	ldr	r3, [sp, #4]
 80024ac:	2b09      	cmp	r3, #9
 80024ae:	d995      	bls.n	80023dc <_dtoa_r+0x194>
 80024b0:	2300      	movs	r3, #0
 80024b2:	2601      	movs	r6, #1
 80024b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80024b8:	9301      	str	r3, [sp, #4]
 80024ba:	960a      	str	r6, [sp, #40]	; 0x28
 80024bc:	9207      	str	r2, [sp, #28]
 80024be:	9309      	str	r3, [sp, #36]	; 0x24
 80024c0:	9b07      	ldr	r3, [sp, #28]
 80024c2:	930f      	str	r3, [sp, #60]	; 0x3c
 80024c4:	2100      	movs	r1, #0
 80024c6:	6461      	str	r1, [r4, #68]	; 0x44
 80024c8:	4620      	mov	r0, r4
 80024ca:	f002 f823 	bl	8004514 <_Balloc>
 80024ce:	9000      	str	r0, [sp, #0]
 80024d0:	2800      	cmp	r0, #0
 80024d2:	f000 862f 	beq.w	8003134 <_dtoa_r+0xeec>
 80024d6:	9b00      	ldr	r3, [sp, #0]
 80024d8:	6423      	str	r3, [r4, #64]	; 0x40
 80024da:	9b07      	ldr	r3, [sp, #28]
 80024dc:	2b0e      	cmp	r3, #14
 80024de:	f200 80f9 	bhi.w	80026d4 <_dtoa_r+0x48c>
 80024e2:	2e00      	cmp	r6, #0
 80024e4:	f000 80f6 	beq.w	80026d4 <_dtoa_r+0x48c>
 80024e8:	9905      	ldr	r1, [sp, #20]
 80024ea:	2900      	cmp	r1, #0
 80024ec:	f340 8471 	ble.w	8002dd2 <_dtoa_r+0xb8a>
 80024f0:	4bbd      	ldr	r3, [pc, #756]	; (80027e8 <_dtoa_r+0x5a0>)
 80024f2:	f001 020f 	and.w	r2, r1, #15
 80024f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80024fa:	ea4f 1821 	mov.w	r8, r1, asr #4
 80024fe:	05c9      	lsls	r1, r1, #23
 8002500:	e9d3 6700 	ldrd	r6, r7, [r3]
 8002504:	f140 8403 	bpl.w	8002d0e <_dtoa_r+0xac6>
 8002508:	4bb8      	ldr	r3, [pc, #736]	; (80027ec <_dtoa_r+0x5a4>)
 800250a:	ec51 0b19 	vmov	r0, r1, d9
 800250e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002512:	f004 fed9 	bl	80072c8 <__aeabi_ddiv>
 8002516:	ec41 0b18 	vmov	d8, r0, r1
 800251a:	f008 080f 	and.w	r8, r8, #15
 800251e:	f04f 0a03 	mov.w	sl, #3
 8002522:	f1b8 0f00 	cmp.w	r8, #0
 8002526:	d013      	beq.n	8002550 <_dtoa_r+0x308>
 8002528:	f8df 92c0 	ldr.w	r9, [pc, #704]	; 80027ec <_dtoa_r+0x5a4>
 800252c:	f018 0f01 	tst.w	r8, #1
 8002530:	d009      	beq.n	8002546 <_dtoa_r+0x2fe>
 8002532:	4630      	mov	r0, r6
 8002534:	4639      	mov	r1, r7
 8002536:	e9d9 2300 	ldrd	r2, r3, [r9]
 800253a:	f004 fd9b 	bl	8007074 <__aeabi_dmul>
 800253e:	f10a 0a01 	add.w	sl, sl, #1
 8002542:	4606      	mov	r6, r0
 8002544:	460f      	mov	r7, r1
 8002546:	ea5f 0868 	movs.w	r8, r8, asr #1
 800254a:	f109 0908 	add.w	r9, r9, #8
 800254e:	d1ed      	bne.n	800252c <_dtoa_r+0x2e4>
 8002550:	ec51 0b18 	vmov	r0, r1, d8
 8002554:	4632      	mov	r2, r6
 8002556:	463b      	mov	r3, r7
 8002558:	f004 feb6 	bl	80072c8 <__aeabi_ddiv>
 800255c:	ec41 0b1a 	vmov	d10, r0, r1
 8002560:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002562:	b15b      	cbz	r3, 800257c <_dtoa_r+0x334>
 8002564:	ec57 6b1a 	vmov	r6, r7, d10
 8002568:	4ba1      	ldr	r3, [pc, #644]	; (80027f0 <_dtoa_r+0x5a8>)
 800256a:	ee1a 0a10 	vmov	r0, s20
 800256e:	2200      	movs	r2, #0
 8002570:	4639      	mov	r1, r7
 8002572:	f004 fff1 	bl	8007558 <__aeabi_dcmplt>
 8002576:	2800      	cmp	r0, #0
 8002578:	f040 8552 	bne.w	8003020 <_dtoa_r+0xdd8>
 800257c:	4650      	mov	r0, sl
 800257e:	f004 fd0f 	bl	8006fa0 <__aeabi_i2d>
 8002582:	ec53 2b1a 	vmov	r2, r3, d10
 8002586:	f004 fd75 	bl	8007074 <__aeabi_dmul>
 800258a:	4b9a      	ldr	r3, [pc, #616]	; (80027f4 <_dtoa_r+0x5ac>)
 800258c:	2200      	movs	r2, #0
 800258e:	f004 fbbb 	bl	8006d08 <__adddf3>
 8002592:	9b07      	ldr	r3, [sp, #28]
 8002594:	4680      	mov	r8, r0
 8002596:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 800259a:	2b00      	cmp	r3, #0
 800259c:	f000 83f3 	beq.w	8002d86 <_dtoa_r+0xb3e>
 80025a0:	9b05      	ldr	r3, [sp, #20]
 80025a2:	9310      	str	r3, [sp, #64]	; 0x40
 80025a4:	9b07      	ldr	r3, [sp, #28]
 80025a6:	930e      	str	r3, [sp, #56]	; 0x38
 80025a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	f000 84c0 	beq.w	8002f30 <_dtoa_r+0xce8>
 80025b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80025b2:	4b8d      	ldr	r3, [pc, #564]	; (80027e8 <_dtoa_r+0x5a0>)
 80025b4:	4990      	ldr	r1, [pc, #576]	; (80027f8 <_dtoa_r+0x5b0>)
 80025b6:	f8dd a000 	ldr.w	sl, [sp]
 80025ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80025be:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80025c2:	2000      	movs	r0, #0
 80025c4:	f004 fe80 	bl	80072c8 <__aeabi_ddiv>
 80025c8:	4642      	mov	r2, r8
 80025ca:	464b      	mov	r3, r9
 80025cc:	f004 fb9a 	bl	8006d04 <__aeabi_dsub>
 80025d0:	ec59 8b1a 	vmov	r8, r9, d10
 80025d4:	ec41 0b18 	vmov	d8, r0, r1
 80025d8:	4649      	mov	r1, r9
 80025da:	ee1a 0a10 	vmov	r0, s20
 80025de:	f004 fff9 	bl	80075d4 <__aeabi_d2iz>
 80025e2:	4607      	mov	r7, r0
 80025e4:	f004 fcdc 	bl	8006fa0 <__aeabi_i2d>
 80025e8:	4602      	mov	r2, r0
 80025ea:	460b      	mov	r3, r1
 80025ec:	ee1a 0a10 	vmov	r0, s20
 80025f0:	4649      	mov	r1, r9
 80025f2:	f004 fb87 	bl	8006d04 <__aeabi_dsub>
 80025f6:	3730      	adds	r7, #48	; 0x30
 80025f8:	f80a 7b01 	strb.w	r7, [sl], #1
 80025fc:	ec53 2b18 	vmov	r2, r3, d8
 8002600:	4606      	mov	r6, r0
 8002602:	460f      	mov	r7, r1
 8002604:	f004 ffa8 	bl	8007558 <__aeabi_dcmplt>
 8002608:	2800      	cmp	r0, #0
 800260a:	f040 8555 	bne.w	80030b8 <_dtoa_r+0xe70>
 800260e:	f04f 0800 	mov.w	r8, #0
 8002612:	ee0a 5a10 	vmov	s20, r5
 8002616:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800261a:	4655      	mov	r5, sl
 800261c:	ec5b ab18 	vmov	sl, fp, d8
 8002620:	ee08 4a10 	vmov	s16, r4
 8002624:	4644      	mov	r4, r8
 8002626:	e02a      	b.n	800267e <_dtoa_r+0x436>
 8002628:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800262a:	3401      	adds	r4, #1
 800262c:	429c      	cmp	r4, r3
 800262e:	da4b      	bge.n	80026c8 <_dtoa_r+0x480>
 8002630:	4b72      	ldr	r3, [pc, #456]	; (80027fc <_dtoa_r+0x5b4>)
 8002632:	4650      	mov	r0, sl
 8002634:	4659      	mov	r1, fp
 8002636:	2200      	movs	r2, #0
 8002638:	f004 fd1c 	bl	8007074 <__aeabi_dmul>
 800263c:	4b6f      	ldr	r3, [pc, #444]	; (80027fc <_dtoa_r+0x5b4>)
 800263e:	2200      	movs	r2, #0
 8002640:	4682      	mov	sl, r0
 8002642:	468b      	mov	fp, r1
 8002644:	4630      	mov	r0, r6
 8002646:	4639      	mov	r1, r7
 8002648:	f004 fd14 	bl	8007074 <__aeabi_dmul>
 800264c:	4689      	mov	r9, r1
 800264e:	4680      	mov	r8, r0
 8002650:	f004 ffc0 	bl	80075d4 <__aeabi_d2iz>
 8002654:	4607      	mov	r7, r0
 8002656:	f004 fca3 	bl	8006fa0 <__aeabi_i2d>
 800265a:	4602      	mov	r2, r0
 800265c:	460b      	mov	r3, r1
 800265e:	4640      	mov	r0, r8
 8002660:	4649      	mov	r1, r9
 8002662:	f004 fb4f 	bl	8006d04 <__aeabi_dsub>
 8002666:	3730      	adds	r7, #48	; 0x30
 8002668:	f805 7b01 	strb.w	r7, [r5], #1
 800266c:	4652      	mov	r2, sl
 800266e:	465b      	mov	r3, fp
 8002670:	4606      	mov	r6, r0
 8002672:	460f      	mov	r7, r1
 8002674:	f004 ff70 	bl	8007558 <__aeabi_dcmplt>
 8002678:	2800      	cmp	r0, #0
 800267a:	f040 8518 	bne.w	80030ae <_dtoa_r+0xe66>
 800267e:	4632      	mov	r2, r6
 8002680:	463b      	mov	r3, r7
 8002682:	495b      	ldr	r1, [pc, #364]	; (80027f0 <_dtoa_r+0x5a8>)
 8002684:	2000      	movs	r0, #0
 8002686:	f004 fb3d 	bl	8006d04 <__aeabi_dsub>
 800268a:	4652      	mov	r2, sl
 800268c:	465b      	mov	r3, fp
 800268e:	f004 ff63 	bl	8007558 <__aeabi_dcmplt>
 8002692:	2800      	cmp	r0, #0
 8002694:	d0c8      	beq.n	8002628 <_dtoa_r+0x3e0>
 8002696:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002698:	9a00      	ldr	r2, [sp, #0]
 800269a:	9305      	str	r3, [sp, #20]
 800269c:	46aa      	mov	sl, r5
 800269e:	ee18 4a10 	vmov	r4, s16
 80026a2:	ee1a 5a10 	vmov	r5, s20
 80026a6:	e002      	b.n	80026ae <_dtoa_r+0x466>
 80026a8:	4592      	cmp	sl, r2
 80026aa:	f000 84ea 	beq.w	8003082 <_dtoa_r+0xe3a>
 80026ae:	46d1      	mov	r9, sl
 80026b0:	f81a 3d01 	ldrb.w	r3, [sl, #-1]!
 80026b4:	2b39      	cmp	r3, #57	; 0x39
 80026b6:	d0f7      	beq.n	80026a8 <_dtoa_r+0x460>
 80026b8:	3301      	adds	r3, #1
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	f88a 3000 	strb.w	r3, [sl]
 80026c0:	9b05      	ldr	r3, [sp, #20]
 80026c2:	3301      	adds	r3, #1
 80026c4:	9305      	str	r3, [sp, #20]
 80026c6:	e1ab      	b.n	8002a20 <_dtoa_r+0x7d8>
 80026c8:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 80026cc:	ee1a 5a10 	vmov	r5, s20
 80026d0:	ee18 4a10 	vmov	r4, s16
 80026d4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	f2c0 8094 	blt.w	8002804 <_dtoa_r+0x5bc>
 80026dc:	9a05      	ldr	r2, [sp, #20]
 80026de:	2a0e      	cmp	r2, #14
 80026e0:	f300 8090 	bgt.w	8002804 <_dtoa_r+0x5bc>
 80026e4:	4b40      	ldr	r3, [pc, #256]	; (80027e8 <_dtoa_r+0x5a0>)
 80026e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80026ea:	e9d3 8900 	ldrd	r8, r9, [r3]
 80026ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	da1b      	bge.n	800272c <_dtoa_r+0x4e4>
 80026f4:	9b07      	ldr	r3, [sp, #28]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	dc18      	bgt.n	800272c <_dtoa_r+0x4e4>
 80026fa:	f040 835d 	bne.w	8002db8 <_dtoa_r+0xb70>
 80026fe:	4b40      	ldr	r3, [pc, #256]	; (8002800 <_dtoa_r+0x5b8>)
 8002700:	2200      	movs	r2, #0
 8002702:	4640      	mov	r0, r8
 8002704:	4649      	mov	r1, r9
 8002706:	f004 fcb5 	bl	8007074 <__aeabi_dmul>
 800270a:	4602      	mov	r2, r0
 800270c:	460b      	mov	r3, r1
 800270e:	ec51 0b19 	vmov	r0, r1, d9
 8002712:	f004 ff2b 	bl	800756c <__aeabi_dcmple>
 8002716:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800271a:	4656      	mov	r6, sl
 800271c:	2800      	cmp	r0, #0
 800271e:	f000 82d0 	beq.w	8002cc2 <_dtoa_r+0xa7a>
 8002722:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002724:	f8dd 8000 	ldr.w	r8, [sp]
 8002728:	43df      	mvns	r7, r3
 800272a:	e2d2      	b.n	8002cd2 <_dtoa_r+0xa8a>
 800272c:	4642      	mov	r2, r8
 800272e:	464b      	mov	r3, r9
 8002730:	ec51 0b19 	vmov	r0, r1, d9
 8002734:	f004 fdc8 	bl	80072c8 <__aeabi_ddiv>
 8002738:	f004 ff4c 	bl	80075d4 <__aeabi_d2iz>
 800273c:	4606      	mov	r6, r0
 800273e:	4683      	mov	fp, r0
 8002740:	f004 fc2e 	bl	8006fa0 <__aeabi_i2d>
 8002744:	4642      	mov	r2, r8
 8002746:	464b      	mov	r3, r9
 8002748:	f004 fc94 	bl	8007074 <__aeabi_dmul>
 800274c:	460b      	mov	r3, r1
 800274e:	4602      	mov	r2, r0
 8002750:	ec51 0b19 	vmov	r0, r1, d9
 8002754:	f004 fad6 	bl	8006d04 <__aeabi_dsub>
 8002758:	f8dd a000 	ldr.w	sl, [sp]
 800275c:	4633      	mov	r3, r6
 800275e:	3330      	adds	r3, #48	; 0x30
 8002760:	f80a 3b01 	strb.w	r3, [sl], #1
 8002764:	9b07      	ldr	r3, [sp, #28]
 8002766:	2b01      	cmp	r3, #1
 8002768:	f000 838e 	beq.w	8002e88 <_dtoa_r+0xc40>
 800276c:	f04f 0b01 	mov.w	fp, #1
 8002770:	ee08 5a10 	vmov	s16, r5
 8002774:	ee08 4a90 	vmov	s17, r4
 8002778:	461d      	mov	r5, r3
 800277a:	4654      	mov	r4, sl
 800277c:	46da      	mov	sl, fp
 800277e:	e01d      	b.n	80027bc <_dtoa_r+0x574>
 8002780:	4642      	mov	r2, r8
 8002782:	464b      	mov	r3, r9
 8002784:	4630      	mov	r0, r6
 8002786:	4639      	mov	r1, r7
 8002788:	f004 fd9e 	bl	80072c8 <__aeabi_ddiv>
 800278c:	f004 ff22 	bl	80075d4 <__aeabi_d2iz>
 8002790:	4683      	mov	fp, r0
 8002792:	f004 fc05 	bl	8006fa0 <__aeabi_i2d>
 8002796:	4642      	mov	r2, r8
 8002798:	464b      	mov	r3, r9
 800279a:	f004 fc6b 	bl	8007074 <__aeabi_dmul>
 800279e:	f10a 0a01 	add.w	sl, sl, #1
 80027a2:	460b      	mov	r3, r1
 80027a4:	4602      	mov	r2, r0
 80027a6:	4639      	mov	r1, r7
 80027a8:	4630      	mov	r0, r6
 80027aa:	f004 faab 	bl	8006d04 <__aeabi_dsub>
 80027ae:	f10b 0330 	add.w	r3, fp, #48	; 0x30
 80027b2:	45aa      	cmp	sl, r5
 80027b4:	f804 3b01 	strb.w	r3, [r4], #1
 80027b8:	f000 8361 	beq.w	8002e7e <_dtoa_r+0xc36>
 80027bc:	4b0f      	ldr	r3, [pc, #60]	; (80027fc <_dtoa_r+0x5b4>)
 80027be:	2200      	movs	r2, #0
 80027c0:	f004 fc58 	bl	8007074 <__aeabi_dmul>
 80027c4:	2200      	movs	r2, #0
 80027c6:	2300      	movs	r3, #0
 80027c8:	4606      	mov	r6, r0
 80027ca:	460f      	mov	r7, r1
 80027cc:	f004 feba 	bl	8007544 <__aeabi_dcmpeq>
 80027d0:	2800      	cmp	r0, #0
 80027d2:	d0d5      	beq.n	8002780 <_dtoa_r+0x538>
 80027d4:	46a2      	mov	sl, r4
 80027d6:	ee18 5a10 	vmov	r5, s16
 80027da:	ee18 4a90 	vmov	r4, s17
 80027de:	9b05      	ldr	r3, [sp, #20]
 80027e0:	3301      	adds	r3, #1
 80027e2:	9305      	str	r3, [sp, #20]
 80027e4:	46d1      	mov	r9, sl
 80027e6:	e11b      	b.n	8002a20 <_dtoa_r+0x7d8>
 80027e8:	0800cd20 	.word	0x0800cd20
 80027ec:	0800ce10 	.word	0x0800ce10
 80027f0:	3ff00000 	.word	0x3ff00000
 80027f4:	401c0000 	.word	0x401c0000
 80027f8:	3fe00000 	.word	0x3fe00000
 80027fc:	40240000 	.word	0x40240000
 8002800:	40140000 	.word	0x40140000
 8002804:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002806:	2a00      	cmp	r2, #0
 8002808:	d03f      	beq.n	800288a <_dtoa_r+0x642>
 800280a:	9a01      	ldr	r2, [sp, #4]
 800280c:	2a01      	cmp	r2, #1
 800280e:	f340 829c 	ble.w	8002d4a <_dtoa_r+0xb02>
 8002812:	9b07      	ldr	r3, [sp, #28]
 8002814:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8002818:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800281a:	4543      	cmp	r3, r8
 800281c:	f2c0 826e 	blt.w	8002cfc <_dtoa_r+0xab4>
 8002820:	eba3 0808 	sub.w	r8, r3, r8
 8002824:	9b07      	ldr	r3, [sp, #28]
 8002826:	2b00      	cmp	r3, #0
 8002828:	f2c0 8366 	blt.w	8002ef8 <_dtoa_r+0xcb0>
 800282c:	9a04      	ldr	r2, [sp, #16]
 800282e:	441a      	add	r2, r3
 8002830:	9204      	str	r2, [sp, #16]
 8002832:	9a08      	ldr	r2, [sp, #32]
 8002834:	4617      	mov	r7, r2
 8002836:	441a      	add	r2, r3
 8002838:	9208      	str	r2, [sp, #32]
 800283a:	2101      	movs	r1, #1
 800283c:	4620      	mov	r0, r4
 800283e:	f001 ff97 	bl	8004770 <__i2b>
 8002842:	4606      	mov	r6, r0
 8002844:	e025      	b.n	8002892 <_dtoa_r+0x64a>
 8002846:	2301      	movs	r3, #1
 8002848:	1bbe      	subs	r6, r7, r6
 800284a:	930c      	str	r3, [sp, #48]	; 0x30
 800284c:	1e73      	subs	r3, r6, #1
 800284e:	9304      	str	r3, [sp, #16]
 8002850:	f57f adb1 	bpl.w	80023b6 <_dtoa_r+0x16e>
 8002854:	f1c6 0301 	rsb	r3, r6, #1
 8002858:	9308      	str	r3, [sp, #32]
 800285a:	2300      	movs	r3, #0
 800285c:	9304      	str	r3, [sp, #16]
 800285e:	e5ac      	b.n	80023ba <_dtoa_r+0x172>
 8002860:	4658      	mov	r0, fp
 8002862:	f004 fb9d 	bl	8006fa0 <__aeabi_i2d>
 8002866:	4642      	mov	r2, r8
 8002868:	464b      	mov	r3, r9
 800286a:	f004 fe6b 	bl	8007544 <__aeabi_dcmpeq>
 800286e:	2800      	cmp	r0, #0
 8002870:	f47f ad89 	bne.w	8002386 <_dtoa_r+0x13e>
 8002874:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8002878:	e585      	b.n	8002386 <_dtoa_r+0x13e>
 800287a:	4b87      	ldr	r3, [pc, #540]	; (8002a98 <_dtoa_r+0x850>)
 800287c:	9300      	str	r3, [sp, #0]
 800287e:	9800      	ldr	r0, [sp, #0]
 8002880:	b015      	add	sp, #84	; 0x54
 8002882:	ecbd 8b06 	vpop	{d8-d10}
 8002886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800288a:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800288e:	9f08      	ldr	r7, [sp, #32]
 8002890:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8002892:	2f00      	cmp	r7, #0
 8002894:	dd0c      	ble.n	80028b0 <_dtoa_r+0x668>
 8002896:	9a04      	ldr	r2, [sp, #16]
 8002898:	2a00      	cmp	r2, #0
 800289a:	dd09      	ble.n	80028b0 <_dtoa_r+0x668>
 800289c:	9908      	ldr	r1, [sp, #32]
 800289e:	42ba      	cmp	r2, r7
 80028a0:	4613      	mov	r3, r2
 80028a2:	bfa8      	it	ge
 80028a4:	463b      	movge	r3, r7
 80028a6:	1ac9      	subs	r1, r1, r3
 80028a8:	1aff      	subs	r7, r7, r3
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	9108      	str	r1, [sp, #32]
 80028ae:	9304      	str	r3, [sp, #16]
 80028b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80028b2:	b1db      	cbz	r3, 80028ec <_dtoa_r+0x6a4>
 80028b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	f000 8282 	beq.w	8002dc0 <_dtoa_r+0xb78>
 80028bc:	f1b8 0f00 	cmp.w	r8, #0
 80028c0:	dd0f      	ble.n	80028e2 <_dtoa_r+0x69a>
 80028c2:	4631      	mov	r1, r6
 80028c4:	4642      	mov	r2, r8
 80028c6:	4620      	mov	r0, r4
 80028c8:	f002 f82e 	bl	8004928 <__pow5mult>
 80028cc:	462a      	mov	r2, r5
 80028ce:	4601      	mov	r1, r0
 80028d0:	4606      	mov	r6, r0
 80028d2:	4620      	mov	r0, r4
 80028d4:	f001 ff7a 	bl	80047cc <__multiply>
 80028d8:	4629      	mov	r1, r5
 80028da:	4605      	mov	r5, r0
 80028dc:	4620      	mov	r0, r4
 80028de:	f001 fe3f 	bl	8004560 <_Bfree>
 80028e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80028e4:	ebb3 0208 	subs.w	r2, r3, r8
 80028e8:	f040 8300 	bne.w	8002eec <_dtoa_r+0xca4>
 80028ec:	2101      	movs	r1, #1
 80028ee:	4620      	mov	r0, r4
 80028f0:	f001 ff3e 	bl	8004770 <__i2b>
 80028f4:	f1bb 0f00 	cmp.w	fp, #0
 80028f8:	4682      	mov	sl, r0
 80028fa:	f300 80b7 	bgt.w	8002a6c <_dtoa_r+0x824>
 80028fe:	9b01      	ldr	r3, [sp, #4]
 8002900:	2b01      	cmp	r3, #1
 8002902:	f340 8186 	ble.w	8002c12 <_dtoa_r+0x9ca>
 8002906:	f04f 0800 	mov.w	r8, #0
 800290a:	2001      	movs	r0, #1
 800290c:	f1bb 0f00 	cmp.w	fp, #0
 8002910:	f040 80b8 	bne.w	8002a84 <_dtoa_r+0x83c>
 8002914:	9a04      	ldr	r2, [sp, #16]
 8002916:	4410      	add	r0, r2
 8002918:	f010 001f 	ands.w	r0, r0, #31
 800291c:	f000 8096 	beq.w	8002a4c <_dtoa_r+0x804>
 8002920:	f1c0 0320 	rsb	r3, r0, #32
 8002924:	2b04      	cmp	r3, #4
 8002926:	f340 83f8 	ble.w	800311a <_dtoa_r+0xed2>
 800292a:	9b08      	ldr	r3, [sp, #32]
 800292c:	f1c0 001c 	rsb	r0, r0, #28
 8002930:	4403      	add	r3, r0
 8002932:	4402      	add	r2, r0
 8002934:	9308      	str	r3, [sp, #32]
 8002936:	4407      	add	r7, r0
 8002938:	9204      	str	r2, [sp, #16]
 800293a:	9b08      	ldr	r3, [sp, #32]
 800293c:	2b00      	cmp	r3, #0
 800293e:	dd05      	ble.n	800294c <_dtoa_r+0x704>
 8002940:	4629      	mov	r1, r5
 8002942:	461a      	mov	r2, r3
 8002944:	4620      	mov	r0, r4
 8002946:	f002 f84f 	bl	80049e8 <__lshift>
 800294a:	4605      	mov	r5, r0
 800294c:	9b04      	ldr	r3, [sp, #16]
 800294e:	2b00      	cmp	r3, #0
 8002950:	dd05      	ble.n	800295e <_dtoa_r+0x716>
 8002952:	4651      	mov	r1, sl
 8002954:	461a      	mov	r2, r3
 8002956:	4620      	mov	r0, r4
 8002958:	f002 f846 	bl	80049e8 <__lshift>
 800295c:	4682      	mov	sl, r0
 800295e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002960:	2b00      	cmp	r3, #0
 8002962:	f040 8137 	bne.w	8002bd4 <_dtoa_r+0x98c>
 8002966:	9b07      	ldr	r3, [sp, #28]
 8002968:	2b00      	cmp	r3, #0
 800296a:	f340 811e 	ble.w	8002baa <_dtoa_r+0x962>
 800296e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002970:	2b00      	cmp	r3, #0
 8002972:	f040 80a1 	bne.w	8002ab8 <_dtoa_r+0x870>
 8002976:	9b05      	ldr	r3, [sp, #20]
 8002978:	3301      	adds	r3, #1
 800297a:	9305      	str	r3, [sp, #20]
 800297c:	f8dd 8000 	ldr.w	r8, [sp]
 8002980:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8002984:	2701      	movs	r7, #1
 8002986:	e007      	b.n	8002998 <_dtoa_r+0x750>
 8002988:	4629      	mov	r1, r5
 800298a:	2300      	movs	r3, #0
 800298c:	220a      	movs	r2, #10
 800298e:	4620      	mov	r0, r4
 8002990:	f001 fdf0 	bl	8004574 <__multadd>
 8002994:	3701      	adds	r7, #1
 8002996:	4605      	mov	r5, r0
 8002998:	4651      	mov	r1, sl
 800299a:	4628      	mov	r0, r5
 800299c:	f7ff fbc0 	bl	8002120 <quorem>
 80029a0:	454f      	cmp	r7, r9
 80029a2:	f100 0030 	add.w	r0, r0, #48	; 0x30
 80029a6:	f808 0b01 	strb.w	r0, [r8], #1
 80029aa:	dbed      	blt.n	8002988 <_dtoa_r+0x740>
 80029ac:	9a07      	ldr	r2, [sp, #28]
 80029ae:	2a00      	cmp	r2, #0
 80029b0:	bfc8      	it	gt
 80029b2:	4693      	movgt	fp, r2
 80029b4:	9a00      	ldr	r2, [sp, #0]
 80029b6:	bfd8      	it	le
 80029b8:	f04f 0b01 	movle.w	fp, #1
 80029bc:	4603      	mov	r3, r0
 80029be:	4493      	add	fp, r2
 80029c0:	2700      	movs	r7, #0
 80029c2:	4629      	mov	r1, r5
 80029c4:	2201      	movs	r2, #1
 80029c6:	4620      	mov	r0, r4
 80029c8:	9301      	str	r3, [sp, #4]
 80029ca:	f002 f80d 	bl	80049e8 <__lshift>
 80029ce:	4651      	mov	r1, sl
 80029d0:	4605      	mov	r5, r0
 80029d2:	f002 f881 	bl	8004ad8 <__mcmp>
 80029d6:	2800      	cmp	r0, #0
 80029d8:	f340 81a5 	ble.w	8002d26 <_dtoa_r+0xade>
 80029dc:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
 80029e0:	9a00      	ldr	r2, [sp, #0]
 80029e2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80029e6:	e004      	b.n	80029f2 <_dtoa_r+0x7aa>
 80029e8:	455a      	cmp	r2, fp
 80029ea:	f000 81a7 	beq.w	8002d3c <_dtoa_r+0xaf4>
 80029ee:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
 80029f2:	2b39      	cmp	r3, #57	; 0x39
 80029f4:	f10b 0901 	add.w	r9, fp, #1
 80029f8:	d0f6      	beq.n	80029e8 <_dtoa_r+0x7a0>
 80029fa:	3301      	adds	r3, #1
 80029fc:	f88b 3000 	strb.w	r3, [fp]
 8002a00:	4651      	mov	r1, sl
 8002a02:	4620      	mov	r0, r4
 8002a04:	f001 fdac 	bl	8004560 <_Bfree>
 8002a08:	b156      	cbz	r6, 8002a20 <_dtoa_r+0x7d8>
 8002a0a:	b12f      	cbz	r7, 8002a18 <_dtoa_r+0x7d0>
 8002a0c:	42b7      	cmp	r7, r6
 8002a0e:	d003      	beq.n	8002a18 <_dtoa_r+0x7d0>
 8002a10:	4639      	mov	r1, r7
 8002a12:	4620      	mov	r0, r4
 8002a14:	f001 fda4 	bl	8004560 <_Bfree>
 8002a18:	4631      	mov	r1, r6
 8002a1a:	4620      	mov	r0, r4
 8002a1c:	f001 fda0 	bl	8004560 <_Bfree>
 8002a20:	4629      	mov	r1, r5
 8002a22:	4620      	mov	r0, r4
 8002a24:	f001 fd9c 	bl	8004560 <_Bfree>
 8002a28:	2300      	movs	r3, #0
 8002a2a:	f889 3000 	strb.w	r3, [r9]
 8002a2e:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 8002a32:	601a      	str	r2, [r3, #0]
 8002a34:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	f43f ac48 	beq.w	80022cc <_dtoa_r+0x84>
 8002a3c:	9800      	ldr	r0, [sp, #0]
 8002a3e:	f8c3 9000 	str.w	r9, [r3]
 8002a42:	b015      	add	sp, #84	; 0x54
 8002a44:	ecbd 8b06 	vpop	{d8-d10}
 8002a48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a4c:	201c      	movs	r0, #28
 8002a4e:	9b08      	ldr	r3, [sp, #32]
 8002a50:	4403      	add	r3, r0
 8002a52:	9308      	str	r3, [sp, #32]
 8002a54:	9b04      	ldr	r3, [sp, #16]
 8002a56:	4403      	add	r3, r0
 8002a58:	4407      	add	r7, r0
 8002a5a:	9304      	str	r3, [sp, #16]
 8002a5c:	e76d      	b.n	800293a <_dtoa_r+0x6f2>
 8002a5e:	2601      	movs	r6, #1
 8002a60:	e4c2      	b.n	80023e8 <_dtoa_r+0x1a0>
 8002a62:	f1c0 0020 	rsb	r0, r0, #32
 8002a66:	fa08 f000 	lsl.w	r0, r8, r0
 8002a6a:	e459      	b.n	8002320 <_dtoa_r+0xd8>
 8002a6c:	4601      	mov	r1, r0
 8002a6e:	465a      	mov	r2, fp
 8002a70:	4620      	mov	r0, r4
 8002a72:	f001 ff59 	bl	8004928 <__pow5mult>
 8002a76:	9b01      	ldr	r3, [sp, #4]
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	4682      	mov	sl, r0
 8002a7c:	f340 81d5 	ble.w	8002e2a <_dtoa_r+0xbe2>
 8002a80:	f04f 0800 	mov.w	r8, #0
 8002a84:	f8da 3010 	ldr.w	r3, [sl, #16]
 8002a88:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 8002a8c:	6918      	ldr	r0, [r3, #16]
 8002a8e:	f001 fe1f 	bl	80046d0 <__hi0bits>
 8002a92:	f1c0 0020 	rsb	r0, r0, #32
 8002a96:	e73d      	b.n	8002914 <_dtoa_r+0x6cc>
 8002a98:	0801c104 	.word	0x0801c104
 8002a9c:	4631      	mov	r1, r6
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	220a      	movs	r2, #10
 8002aa2:	4620      	mov	r0, r4
 8002aa4:	f001 fd66 	bl	8004574 <__multadd>
 8002aa8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	4606      	mov	r6, r0
 8002aae:	f340 8323 	ble.w	80030f8 <_dtoa_r+0xeb0>
 8002ab2:	f8cd 9014 	str.w	r9, [sp, #20]
 8002ab6:	9307      	str	r3, [sp, #28]
 8002ab8:	2f00      	cmp	r7, #0
 8002aba:	f300 8118 	bgt.w	8002cee <_dtoa_r+0xaa6>
 8002abe:	f1b8 0f00 	cmp.w	r8, #0
 8002ac2:	f040 81fc 	bne.w	8002ebe <_dtoa_r+0xc76>
 8002ac6:	46b0      	mov	r8, r6
 8002ac8:	9b02      	ldr	r3, [sp, #8]
 8002aca:	9f00      	ldr	r7, [sp, #0]
 8002acc:	9907      	ldr	r1, [sp, #28]
 8002ace:	f003 0201 	and.w	r2, r3, #1
 8002ad2:	1e7b      	subs	r3, r7, #1
 8002ad4:	4419      	add	r1, r3
 8002ad6:	9b01      	ldr	r3, [sp, #4]
 8002ad8:	920a      	str	r2, [sp, #40]	; 0x28
 8002ada:	4313      	orrs	r3, r2
 8002adc:	9108      	str	r1, [sp, #32]
 8002ade:	9309      	str	r3, [sp, #36]	; 0x24
 8002ae0:	4651      	mov	r1, sl
 8002ae2:	4628      	mov	r0, r5
 8002ae4:	f7ff fb1c 	bl	8002120 <quorem>
 8002ae8:	4631      	mov	r1, r6
 8002aea:	4683      	mov	fp, r0
 8002aec:	4628      	mov	r0, r5
 8002aee:	f001 fff3 	bl	8004ad8 <__mcmp>
 8002af2:	4642      	mov	r2, r8
 8002af4:	4651      	mov	r1, sl
 8002af6:	4681      	mov	r9, r0
 8002af8:	4620      	mov	r0, r4
 8002afa:	f002 f80f 	bl	8004b1c <__mdiff>
 8002afe:	68c2      	ldr	r2, [r0, #12]
 8002b00:	4601      	mov	r1, r0
 8002b02:	f10b 0330 	add.w	r3, fp, #48	; 0x30
 8002b06:	2a00      	cmp	r2, #0
 8002b08:	d142      	bne.n	8002b90 <_dtoa_r+0x948>
 8002b0a:	9004      	str	r0, [sp, #16]
 8002b0c:	4628      	mov	r0, r5
 8002b0e:	9307      	str	r3, [sp, #28]
 8002b10:	f001 ffe2 	bl	8004ad8 <__mcmp>
 8002b14:	9904      	ldr	r1, [sp, #16]
 8002b16:	9002      	str	r0, [sp, #8]
 8002b18:	4620      	mov	r0, r4
 8002b1a:	f001 fd21 	bl	8004560 <_Bfree>
 8002b1e:	9a02      	ldr	r2, [sp, #8]
 8002b20:	9b07      	ldr	r3, [sp, #28]
 8002b22:	b91a      	cbnz	r2, 8002b2c <_dtoa_r+0x8e4>
 8002b24:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002b26:	2900      	cmp	r1, #0
 8002b28:	f000 82d6 	beq.w	80030d8 <_dtoa_r+0xe90>
 8002b2c:	f1b9 0f00 	cmp.w	r9, #0
 8002b30:	f2c0 8187 	blt.w	8002e42 <_dtoa_r+0xbfa>
 8002b34:	9901      	ldr	r1, [sp, #4]
 8002b36:	ea49 0901 	orr.w	r9, r9, r1
 8002b3a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002b3c:	ea51 0109 	orrs.w	r1, r1, r9
 8002b40:	f000 817f 	beq.w	8002e42 <_dtoa_r+0xbfa>
 8002b44:	2a00      	cmp	r2, #0
 8002b46:	f300 81e7 	bgt.w	8002f18 <_dtoa_r+0xcd0>
 8002b4a:	9a08      	ldr	r2, [sp, #32]
 8002b4c:	703b      	strb	r3, [r7, #0]
 8002b4e:	f107 0901 	add.w	r9, r7, #1
 8002b52:	4297      	cmp	r7, r2
 8002b54:	46cb      	mov	fp, r9
 8002b56:	f000 81e5 	beq.w	8002f24 <_dtoa_r+0xcdc>
 8002b5a:	4629      	mov	r1, r5
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	220a      	movs	r2, #10
 8002b60:	4620      	mov	r0, r4
 8002b62:	f001 fd07 	bl	8004574 <__multadd>
 8002b66:	4546      	cmp	r6, r8
 8002b68:	4605      	mov	r5, r0
 8002b6a:	4631      	mov	r1, r6
 8002b6c:	f04f 0300 	mov.w	r3, #0
 8002b70:	f04f 020a 	mov.w	r2, #10
 8002b74:	4620      	mov	r0, r4
 8002b76:	d012      	beq.n	8002b9e <_dtoa_r+0x956>
 8002b78:	f001 fcfc 	bl	8004574 <__multadd>
 8002b7c:	4641      	mov	r1, r8
 8002b7e:	4606      	mov	r6, r0
 8002b80:	2300      	movs	r3, #0
 8002b82:	220a      	movs	r2, #10
 8002b84:	4620      	mov	r0, r4
 8002b86:	f001 fcf5 	bl	8004574 <__multadd>
 8002b8a:	464f      	mov	r7, r9
 8002b8c:	4680      	mov	r8, r0
 8002b8e:	e7a7      	b.n	8002ae0 <_dtoa_r+0x898>
 8002b90:	4620      	mov	r0, r4
 8002b92:	9302      	str	r3, [sp, #8]
 8002b94:	f001 fce4 	bl	8004560 <_Bfree>
 8002b98:	9b02      	ldr	r3, [sp, #8]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	e7c6      	b.n	8002b2c <_dtoa_r+0x8e4>
 8002b9e:	f001 fce9 	bl	8004574 <__multadd>
 8002ba2:	464f      	mov	r7, r9
 8002ba4:	4606      	mov	r6, r0
 8002ba6:	4680      	mov	r8, r0
 8002ba8:	e79a      	b.n	8002ae0 <_dtoa_r+0x898>
 8002baa:	9b01      	ldr	r3, [sp, #4]
 8002bac:	2b02      	cmp	r3, #2
 8002bae:	dc77      	bgt.n	8002ca0 <_dtoa_r+0xa58>
 8002bb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d180      	bne.n	8002ab8 <_dtoa_r+0x870>
 8002bb6:	9b05      	ldr	r3, [sp, #20]
 8002bb8:	4651      	mov	r1, sl
 8002bba:	3301      	adds	r3, #1
 8002bbc:	4628      	mov	r0, r5
 8002bbe:	9305      	str	r3, [sp, #20]
 8002bc0:	f7ff faae 	bl	8002120 <quorem>
 8002bc4:	f8dd b000 	ldr.w	fp, [sp]
 8002bc8:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8002bcc:	f80b 3b01 	strb.w	r3, [fp], #1
 8002bd0:	2700      	movs	r7, #0
 8002bd2:	e6f6      	b.n	80029c2 <_dtoa_r+0x77a>
 8002bd4:	4651      	mov	r1, sl
 8002bd6:	4628      	mov	r0, r5
 8002bd8:	f001 ff7e 	bl	8004ad8 <__mcmp>
 8002bdc:	2800      	cmp	r0, #0
 8002bde:	f6bf aec2 	bge.w	8002966 <_dtoa_r+0x71e>
 8002be2:	4629      	mov	r1, r5
 8002be4:	2300      	movs	r3, #0
 8002be6:	220a      	movs	r2, #10
 8002be8:	4620      	mov	r0, r4
 8002bea:	f001 fcc3 	bl	8004574 <__multadd>
 8002bee:	9b05      	ldr	r3, [sp, #20]
 8002bf0:	f103 39ff 	add.w	r9, r3, #4294967295	; 0xffffffff
 8002bf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002bf6:	4605      	mov	r5, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	f47f af4f 	bne.w	8002a9c <_dtoa_r+0x854>
 8002bfe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	f340 8270 	ble.w	80030e6 <_dtoa_r+0xe9e>
 8002c06:	9307      	str	r3, [sp, #28]
 8002c08:	e6b8      	b.n	800297c <_dtoa_r+0x734>
 8002c0a:	4bbd      	ldr	r3, [pc, #756]	; (8002f00 <_dtoa_r+0xcb8>)
 8002c0c:	9300      	str	r3, [sp, #0]
 8002c0e:	3303      	adds	r3, #3
 8002c10:	e405      	b.n	800241e <_dtoa_r+0x1d6>
 8002c12:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8002c16:	2900      	cmp	r1, #0
 8002c18:	f47f ae75 	bne.w	8002906 <_dtoa_r+0x6be>
 8002c1c:	f3c2 0313 	ubfx	r3, r2, #0, #20
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	f47f ae70 	bne.w	8002906 <_dtoa_r+0x6be>
 8002c26:	4bb7      	ldr	r3, [pc, #732]	; (8002f04 <_dtoa_r+0xcbc>)
 8002c28:	4013      	ands	r3, r2
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	f000 823d 	beq.w	80030aa <_dtoa_r+0xe62>
 8002c30:	9b08      	ldr	r3, [sp, #32]
 8002c32:	3301      	adds	r3, #1
 8002c34:	9308      	str	r3, [sp, #32]
 8002c36:	9b04      	ldr	r3, [sp, #16]
 8002c38:	3301      	adds	r3, #1
 8002c3a:	9304      	str	r3, [sp, #16]
 8002c3c:	f04f 0801 	mov.w	r8, #1
 8002c40:	e663      	b.n	800290a <_dtoa_r+0x6c2>
 8002c42:	2301      	movs	r3, #1
 8002c44:	930a      	str	r3, [sp, #40]	; 0x28
 8002c46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002c48:	9a05      	ldr	r2, [sp, #20]
 8002c4a:	4413      	add	r3, r2
 8002c4c:	930f      	str	r3, [sp, #60]	; 0x3c
 8002c4e:	3301      	adds	r3, #1
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	461f      	mov	r7, r3
 8002c54:	9307      	str	r3, [sp, #28]
 8002c56:	bfb8      	it	lt
 8002c58:	2701      	movlt	r7, #1
 8002c5a:	2100      	movs	r1, #0
 8002c5c:	2f17      	cmp	r7, #23
 8002c5e:	6461      	str	r1, [r4, #68]	; 0x44
 8002c60:	f77f ac32 	ble.w	80024c8 <_dtoa_r+0x280>
 8002c64:	2201      	movs	r2, #1
 8002c66:	2304      	movs	r3, #4
 8002c68:	005b      	lsls	r3, r3, #1
 8002c6a:	f103 0014 	add.w	r0, r3, #20
 8002c6e:	42b8      	cmp	r0, r7
 8002c70:	4611      	mov	r1, r2
 8002c72:	f102 0201 	add.w	r2, r2, #1
 8002c76:	d9f7      	bls.n	8002c68 <_dtoa_r+0xa20>
 8002c78:	6461      	str	r1, [r4, #68]	; 0x44
 8002c7a:	e425      	b.n	80024c8 <_dtoa_r+0x280>
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	930a      	str	r3, [sp, #40]	; 0x28
 8002c80:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8002c82:	2f00      	cmp	r7, #0
 8002c84:	dd4a      	ble.n	8002d1c <_dtoa_r+0xad4>
 8002c86:	970f      	str	r7, [sp, #60]	; 0x3c
 8002c88:	9707      	str	r7, [sp, #28]
 8002c8a:	e7e6      	b.n	8002c5a <_dtoa_r+0xa12>
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	930a      	str	r3, [sp, #40]	; 0x28
 8002c90:	e7d9      	b.n	8002c46 <_dtoa_r+0x9fe>
 8002c92:	2300      	movs	r3, #0
 8002c94:	930a      	str	r3, [sp, #40]	; 0x28
 8002c96:	e7f3      	b.n	8002c80 <_dtoa_r+0xa38>
 8002c98:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002c9a:	f8cd 9014 	str.w	r9, [sp, #20]
 8002c9e:	9307      	str	r3, [sp, #28]
 8002ca0:	9b07      	ldr	r3, [sp, #28]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	f47f ad3d 	bne.w	8002722 <_dtoa_r+0x4da>
 8002ca8:	4651      	mov	r1, sl
 8002caa:	2205      	movs	r2, #5
 8002cac:	4620      	mov	r0, r4
 8002cae:	f001 fc61 	bl	8004574 <__multadd>
 8002cb2:	4601      	mov	r1, r0
 8002cb4:	4682      	mov	sl, r0
 8002cb6:	4628      	mov	r0, r5
 8002cb8:	f001 ff0e 	bl	8004ad8 <__mcmp>
 8002cbc:	2800      	cmp	r0, #0
 8002cbe:	f77f ad30 	ble.w	8002722 <_dtoa_r+0x4da>
 8002cc2:	9800      	ldr	r0, [sp, #0]
 8002cc4:	9f05      	ldr	r7, [sp, #20]
 8002cc6:	2331      	movs	r3, #49	; 0x31
 8002cc8:	4680      	mov	r8, r0
 8002cca:	f800 3b01 	strb.w	r3, [r0], #1
 8002cce:	3701      	adds	r7, #1
 8002cd0:	9000      	str	r0, [sp, #0]
 8002cd2:	4651      	mov	r1, sl
 8002cd4:	4620      	mov	r0, r4
 8002cd6:	f001 fc43 	bl	8004560 <_Bfree>
 8002cda:	1c7b      	adds	r3, r7, #1
 8002cdc:	f8dd 9000 	ldr.w	r9, [sp]
 8002ce0:	9305      	str	r3, [sp, #20]
 8002ce2:	f8cd 8000 	str.w	r8, [sp]
 8002ce6:	2e00      	cmp	r6, #0
 8002ce8:	f47f ae96 	bne.w	8002a18 <_dtoa_r+0x7d0>
 8002cec:	e698      	b.n	8002a20 <_dtoa_r+0x7d8>
 8002cee:	4631      	mov	r1, r6
 8002cf0:	463a      	mov	r2, r7
 8002cf2:	4620      	mov	r0, r4
 8002cf4:	f001 fe78 	bl	80049e8 <__lshift>
 8002cf8:	4606      	mov	r6, r0
 8002cfa:	e6e0      	b.n	8002abe <_dtoa_r+0x876>
 8002cfc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002cfe:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8002d02:	eba8 0303 	sub.w	r3, r8, r3
 8002d06:	449b      	add	fp, r3
 8002d08:	f04f 0800 	mov.w	r8, #0
 8002d0c:	e58a      	b.n	8002824 <_dtoa_r+0x5dc>
 8002d0e:	f04f 0a02 	mov.w	sl, #2
 8002d12:	eeb0 8a49 	vmov.f32	s16, s18
 8002d16:	eef0 8a69 	vmov.f32	s17, s19
 8002d1a:	e402      	b.n	8002522 <_dtoa_r+0x2da>
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	9309      	str	r3, [sp, #36]	; 0x24
 8002d20:	9307      	str	r3, [sp, #28]
 8002d22:	f7ff bbcd 	b.w	80024c0 <_dtoa_r+0x278>
 8002d26:	d103      	bne.n	8002d30 <_dtoa_r+0xae8>
 8002d28:	9b01      	ldr	r3, [sp, #4]
 8002d2a:	07db      	lsls	r3, r3, #31
 8002d2c:	f53f ae56 	bmi.w	80029dc <_dtoa_r+0x794>
 8002d30:	46d9      	mov	r9, fp
 8002d32:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
 8002d36:	2b30      	cmp	r3, #48	; 0x30
 8002d38:	d0fa      	beq.n	8002d30 <_dtoa_r+0xae8>
 8002d3a:	e661      	b.n	8002a00 <_dtoa_r+0x7b8>
 8002d3c:	9b05      	ldr	r3, [sp, #20]
 8002d3e:	9a00      	ldr	r2, [sp, #0]
 8002d40:	3301      	adds	r3, #1
 8002d42:	9305      	str	r3, [sp, #20]
 8002d44:	2331      	movs	r3, #49	; 0x31
 8002d46:	7013      	strb	r3, [r2, #0]
 8002d48:	e65a      	b.n	8002a00 <_dtoa_r+0x7b8>
 8002d4a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8002d4c:	2a00      	cmp	r2, #0
 8002d4e:	f000 8163 	beq.w	8003018 <_dtoa_r+0xdd0>
 8002d52:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8002d56:	9a04      	ldr	r2, [sp, #16]
 8002d58:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8002d5c:	441a      	add	r2, r3
 8002d5e:	9204      	str	r2, [sp, #16]
 8002d60:	9a08      	ldr	r2, [sp, #32]
 8002d62:	4617      	mov	r7, r2
 8002d64:	441a      	add	r2, r3
 8002d66:	9208      	str	r2, [sp, #32]
 8002d68:	e567      	b.n	800283a <_dtoa_r+0x5f2>
 8002d6a:	4650      	mov	r0, sl
 8002d6c:	f004 f918 	bl	8006fa0 <__aeabi_i2d>
 8002d70:	ec53 2b1a 	vmov	r2, r3, d10
 8002d74:	f004 f97e 	bl	8007074 <__aeabi_dmul>
 8002d78:	4b63      	ldr	r3, [pc, #396]	; (8002f08 <_dtoa_r+0xcc0>)
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f003 ffc4 	bl	8006d08 <__adddf3>
 8002d80:	4680      	mov	r8, r0
 8002d82:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 8002d86:	4b61      	ldr	r3, [pc, #388]	; (8002f0c <_dtoa_r+0xcc4>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	ec51 0b1a 	vmov	r0, r1, d10
 8002d8e:	f003 ffb9 	bl	8006d04 <__aeabi_dsub>
 8002d92:	4642      	mov	r2, r8
 8002d94:	464b      	mov	r3, r9
 8002d96:	4606      	mov	r6, r0
 8002d98:	460f      	mov	r7, r1
 8002d9a:	f004 fbfb 	bl	8007594 <__aeabi_dcmpgt>
 8002d9e:	2800      	cmp	r0, #0
 8002da0:	f040 817f 	bne.w	80030a2 <_dtoa_r+0xe5a>
 8002da4:	4630      	mov	r0, r6
 8002da6:	4639      	mov	r1, r7
 8002da8:	4642      	mov	r2, r8
 8002daa:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8002dae:	f004 fbd3 	bl	8007558 <__aeabi_dcmplt>
 8002db2:	2800      	cmp	r0, #0
 8002db4:	f43f ac8e 	beq.w	80026d4 <_dtoa_r+0x48c>
 8002db8:	f04f 0a00 	mov.w	sl, #0
 8002dbc:	4656      	mov	r6, sl
 8002dbe:	e4b0      	b.n	8002722 <_dtoa_r+0x4da>
 8002dc0:	4629      	mov	r1, r5
 8002dc2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002dc4:	4620      	mov	r0, r4
 8002dc6:	f001 fdaf 	bl	8004928 <__pow5mult>
 8002dca:	4605      	mov	r5, r0
 8002dcc:	e58e      	b.n	80028ec <_dtoa_r+0x6a4>
 8002dce:	900c      	str	r0, [sp, #48]	; 0x30
 8002dd0:	e540      	b.n	8002854 <_dtoa_r+0x60c>
 8002dd2:	f000 814e 	beq.w	8003072 <_dtoa_r+0xe2a>
 8002dd6:	9a05      	ldr	r2, [sp, #20]
 8002dd8:	4b4d      	ldr	r3, [pc, #308]	; (8002f10 <_dtoa_r+0xcc8>)
 8002dda:	4256      	negs	r6, r2
 8002ddc:	f006 020f 	and.w	r2, r6, #15
 8002de0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002de8:	ec51 0b19 	vmov	r0, r1, d9
 8002dec:	f004 f942 	bl	8007074 <__aeabi_dmul>
 8002df0:	1136      	asrs	r6, r6, #4
 8002df2:	ec41 0b1a 	vmov	d10, r0, r1
 8002df6:	f000 8188 	beq.w	800310a <_dtoa_r+0xec2>
 8002dfa:	4f46      	ldr	r7, [pc, #280]	; (8002f14 <_dtoa_r+0xccc>)
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	f04f 0a02 	mov.w	sl, #2
 8002e02:	07f2      	lsls	r2, r6, #31
 8002e04:	d506      	bpl.n	8002e14 <_dtoa_r+0xbcc>
 8002e06:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002e0a:	f004 f933 	bl	8007074 <__aeabi_dmul>
 8002e0e:	f10a 0a01 	add.w	sl, sl, #1
 8002e12:	2301      	movs	r3, #1
 8002e14:	1076      	asrs	r6, r6, #1
 8002e16:	f107 0708 	add.w	r7, r7, #8
 8002e1a:	d1f2      	bne.n	8002e02 <_dtoa_r+0xbba>
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	f43f ab9f 	beq.w	8002560 <_dtoa_r+0x318>
 8002e22:	ec41 0b1a 	vmov	d10, r0, r1
 8002e26:	f7ff bb9b 	b.w	8002560 <_dtoa_r+0x318>
 8002e2a:	9b02      	ldr	r3, [sp, #8]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	f47f ae27 	bne.w	8002a80 <_dtoa_r+0x838>
 8002e32:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8002e36:	f3c2 0313 	ubfx	r3, r2, #0, #20
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	f43f aef3 	beq.w	8002c26 <_dtoa_r+0x9de>
 8002e40:	e61e      	b.n	8002a80 <_dtoa_r+0x838>
 8002e42:	2a00      	cmp	r2, #0
 8002e44:	dd12      	ble.n	8002e6c <_dtoa_r+0xc24>
 8002e46:	4629      	mov	r1, r5
 8002e48:	2201      	movs	r2, #1
 8002e4a:	4620      	mov	r0, r4
 8002e4c:	9301      	str	r3, [sp, #4]
 8002e4e:	f001 fdcb 	bl	80049e8 <__lshift>
 8002e52:	4651      	mov	r1, sl
 8002e54:	4605      	mov	r5, r0
 8002e56:	f001 fe3f 	bl	8004ad8 <__mcmp>
 8002e5a:	2800      	cmp	r0, #0
 8002e5c:	9b01      	ldr	r3, [sp, #4]
 8002e5e:	f340 8135 	ble.w	80030cc <_dtoa_r+0xe84>
 8002e62:	2b39      	cmp	r3, #57	; 0x39
 8002e64:	f000 8113 	beq.w	800308e <_dtoa_r+0xe46>
 8002e68:	f10b 0331 	add.w	r3, fp, #49	; 0x31
 8002e6c:	46b9      	mov	r9, r7
 8002e6e:	f809 3b01 	strb.w	r3, [r9], #1
 8002e72:	9b05      	ldr	r3, [sp, #20]
 8002e74:	3301      	adds	r3, #1
 8002e76:	4637      	mov	r7, r6
 8002e78:	9305      	str	r3, [sp, #20]
 8002e7a:	4646      	mov	r6, r8
 8002e7c:	e5c0      	b.n	8002a00 <_dtoa_r+0x7b8>
 8002e7e:	46a2      	mov	sl, r4
 8002e80:	ee18 5a10 	vmov	r5, s16
 8002e84:	ee18 4a90 	vmov	r4, s17
 8002e88:	4602      	mov	r2, r0
 8002e8a:	460b      	mov	r3, r1
 8002e8c:	f003 ff3c 	bl	8006d08 <__adddf3>
 8002e90:	4642      	mov	r2, r8
 8002e92:	464b      	mov	r3, r9
 8002e94:	4606      	mov	r6, r0
 8002e96:	460f      	mov	r7, r1
 8002e98:	f004 fb7c 	bl	8007594 <__aeabi_dcmpgt>
 8002e9c:	b960      	cbnz	r0, 8002eb8 <_dtoa_r+0xc70>
 8002e9e:	4642      	mov	r2, r8
 8002ea0:	464b      	mov	r3, r9
 8002ea2:	4630      	mov	r0, r6
 8002ea4:	4639      	mov	r1, r7
 8002ea6:	f004 fb4d 	bl	8007544 <__aeabi_dcmpeq>
 8002eaa:	2800      	cmp	r0, #0
 8002eac:	f43f ac97 	beq.w	80027de <_dtoa_r+0x596>
 8002eb0:	ea5f 71cb 	movs.w	r1, fp, lsl #31
 8002eb4:	f57f ac93 	bpl.w	80027de <_dtoa_r+0x596>
 8002eb8:	9a00      	ldr	r2, [sp, #0]
 8002eba:	f7ff bbf8 	b.w	80026ae <_dtoa_r+0x466>
 8002ebe:	6871      	ldr	r1, [r6, #4]
 8002ec0:	4620      	mov	r0, r4
 8002ec2:	f001 fb27 	bl	8004514 <_Balloc>
 8002ec6:	4607      	mov	r7, r0
 8002ec8:	2800      	cmp	r0, #0
 8002eca:	f000 813a 	beq.w	8003142 <_dtoa_r+0xefa>
 8002ece:	6933      	ldr	r3, [r6, #16]
 8002ed0:	3302      	adds	r3, #2
 8002ed2:	009a      	lsls	r2, r3, #2
 8002ed4:	f106 010c 	add.w	r1, r6, #12
 8002ed8:	300c      	adds	r0, #12
 8002eda:	f001 fa01 	bl	80042e0 <memcpy>
 8002ede:	4639      	mov	r1, r7
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	4620      	mov	r0, r4
 8002ee4:	f001 fd80 	bl	80049e8 <__lshift>
 8002ee8:	4680      	mov	r8, r0
 8002eea:	e5ed      	b.n	8002ac8 <_dtoa_r+0x880>
 8002eec:	4629      	mov	r1, r5
 8002eee:	4620      	mov	r0, r4
 8002ef0:	f001 fd1a 	bl	8004928 <__pow5mult>
 8002ef4:	4605      	mov	r5, r0
 8002ef6:	e4f9      	b.n	80028ec <_dtoa_r+0x6a4>
 8002ef8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8002efc:	1a9f      	subs	r7, r3, r2
 8002efe:	e49c      	b.n	800283a <_dtoa_r+0x5f2>
 8002f00:	0801c108 	.word	0x0801c108
 8002f04:	7ff00000 	.word	0x7ff00000
 8002f08:	401c0000 	.word	0x401c0000
 8002f0c:	40140000 	.word	0x40140000
 8002f10:	0800cd20 	.word	0x0800cd20
 8002f14:	0800ce10 	.word	0x0800ce10
 8002f18:	2b39      	cmp	r3, #57	; 0x39
 8002f1a:	f000 80b8 	beq.w	800308e <_dtoa_r+0xe46>
 8002f1e:	46b9      	mov	r9, r7
 8002f20:	3301      	adds	r3, #1
 8002f22:	e7a4      	b.n	8002e6e <_dtoa_r+0xc26>
 8002f24:	9a05      	ldr	r2, [sp, #20]
 8002f26:	3201      	adds	r2, #1
 8002f28:	4637      	mov	r7, r6
 8002f2a:	9205      	str	r2, [sp, #20]
 8002f2c:	4646      	mov	r6, r8
 8002f2e:	e548      	b.n	80029c2 <_dtoa_r+0x77a>
 8002f30:	980e      	ldr	r0, [sp, #56]	; 0x38
 8002f32:	498d      	ldr	r1, [pc, #564]	; (8003168 <_dtoa_r+0xf20>)
 8002f34:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8002f38:	4642      	mov	r2, r8
 8002f3a:	464b      	mov	r3, r9
 8002f3c:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8002f40:	f004 f898 	bl	8007074 <__aeabi_dmul>
 8002f44:	ec5a 9b1a 	vmov	r9, sl, d10
 8002f48:	ec41 0b18 	vmov	d8, r0, r1
 8002f4c:	4651      	mov	r1, sl
 8002f4e:	ee1a 0a10 	vmov	r0, s20
 8002f52:	f004 fb3f 	bl	80075d4 <__aeabi_d2iz>
 8002f56:	4607      	mov	r7, r0
 8002f58:	f004 f822 	bl	8006fa0 <__aeabi_i2d>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	460b      	mov	r3, r1
 8002f60:	ee1a 0a10 	vmov	r0, s20
 8002f64:	4651      	mov	r1, sl
 8002f66:	f003 fecd 	bl	8006d04 <__aeabi_dsub>
 8002f6a:	4606      	mov	r6, r0
 8002f6c:	980e      	ldr	r0, [sp, #56]	; 0x38
 8002f6e:	f8dd 8000 	ldr.w	r8, [sp]
 8002f72:	3730      	adds	r7, #48	; 0x30
 8002f74:	2801      	cmp	r0, #1
 8002f76:	f808 7b01 	strb.w	r7, [r8], #1
 8002f7a:	460f      	mov	r7, r1
 8002f7c:	f000 80ba 	beq.w	80030f4 <_dtoa_r+0xeac>
 8002f80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002f82:	9a00      	ldr	r2, [sp, #0]
 8002f84:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8002f88:	4413      	add	r3, r2
 8002f8a:	469b      	mov	fp, r3
 8002f8c:	46c2      	mov	sl, r8
 8002f8e:	4b77      	ldr	r3, [pc, #476]	; (800316c <_dtoa_r+0xf24>)
 8002f90:	2200      	movs	r2, #0
 8002f92:	4630      	mov	r0, r6
 8002f94:	4639      	mov	r1, r7
 8002f96:	f004 f86d 	bl	8007074 <__aeabi_dmul>
 8002f9a:	4689      	mov	r9, r1
 8002f9c:	4680      	mov	r8, r0
 8002f9e:	f004 fb19 	bl	80075d4 <__aeabi_d2iz>
 8002fa2:	4607      	mov	r7, r0
 8002fa4:	f003 fffc 	bl	8006fa0 <__aeabi_i2d>
 8002fa8:	3730      	adds	r7, #48	; 0x30
 8002faa:	4602      	mov	r2, r0
 8002fac:	460b      	mov	r3, r1
 8002fae:	4640      	mov	r0, r8
 8002fb0:	4649      	mov	r1, r9
 8002fb2:	f003 fea7 	bl	8006d04 <__aeabi_dsub>
 8002fb6:	f80a 7b01 	strb.w	r7, [sl], #1
 8002fba:	45da      	cmp	sl, fp
 8002fbc:	4606      	mov	r6, r0
 8002fbe:	460f      	mov	r7, r1
 8002fc0:	d1e5      	bne.n	8002f8e <_dtoa_r+0xd46>
 8002fc2:	46da      	mov	sl, fp
 8002fc4:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 8002fc8:	4b69      	ldr	r3, [pc, #420]	; (8003170 <_dtoa_r+0xf28>)
 8002fca:	ec59 8b18 	vmov	r8, r9, d8
 8002fce:	2200      	movs	r2, #0
 8002fd0:	ee18 0a10 	vmov	r0, s16
 8002fd4:	4649      	mov	r1, r9
 8002fd6:	f003 fe97 	bl	8006d08 <__adddf3>
 8002fda:	4632      	mov	r2, r6
 8002fdc:	463b      	mov	r3, r7
 8002fde:	f004 fabb 	bl	8007558 <__aeabi_dcmplt>
 8002fe2:	2800      	cmp	r0, #0
 8002fe4:	d16d      	bne.n	80030c2 <_dtoa_r+0xe7a>
 8002fe6:	ee18 2a10 	vmov	r2, s16
 8002fea:	464b      	mov	r3, r9
 8002fec:	4960      	ldr	r1, [pc, #384]	; (8003170 <_dtoa_r+0xf28>)
 8002fee:	2000      	movs	r0, #0
 8002ff0:	f003 fe88 	bl	8006d04 <__aeabi_dsub>
 8002ff4:	4632      	mov	r2, r6
 8002ff6:	463b      	mov	r3, r7
 8002ff8:	f004 facc 	bl	8007594 <__aeabi_dcmpgt>
 8002ffc:	2800      	cmp	r0, #0
 8002ffe:	f43f ab69 	beq.w	80026d4 <_dtoa_r+0x48c>
 8003002:	46d1      	mov	r9, sl
 8003004:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8003008:	f819 3c01 	ldrb.w	r3, [r9, #-1]
 800300c:	2b30      	cmp	r3, #48	; 0x30
 800300e:	d0f8      	beq.n	8003002 <_dtoa_r+0xdba>
 8003010:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003012:	3301      	adds	r3, #1
 8003014:	9305      	str	r3, [sp, #20]
 8003016:	e503      	b.n	8002a20 <_dtoa_r+0x7d8>
 8003018:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800301a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800301e:	e69a      	b.n	8002d56 <_dtoa_r+0xb0e>
 8003020:	9b07      	ldr	r3, [sp, #28]
 8003022:	2b00      	cmp	r3, #0
 8003024:	f43f aea1 	beq.w	8002d6a <_dtoa_r+0xb22>
 8003028:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800302a:	2b00      	cmp	r3, #0
 800302c:	f77f ab52 	ble.w	80026d4 <_dtoa_r+0x48c>
 8003030:	9a05      	ldr	r2, [sp, #20]
 8003032:	930e      	str	r3, [sp, #56]	; 0x38
 8003034:	3a01      	subs	r2, #1
 8003036:	4b4d      	ldr	r3, [pc, #308]	; (800316c <_dtoa_r+0xf24>)
 8003038:	9210      	str	r2, [sp, #64]	; 0x40
 800303a:	ee1a 0a10 	vmov	r0, s20
 800303e:	4639      	mov	r1, r7
 8003040:	2200      	movs	r2, #0
 8003042:	f004 f817 	bl	8007074 <__aeabi_dmul>
 8003046:	4602      	mov	r2, r0
 8003048:	4616      	mov	r6, r2
 800304a:	460f      	mov	r7, r1
 800304c:	f10a 0001 	add.w	r0, sl, #1
 8003050:	f003 ffa6 	bl	8006fa0 <__aeabi_i2d>
 8003054:	4632      	mov	r2, r6
 8003056:	463b      	mov	r3, r7
 8003058:	f004 f80c 	bl	8007074 <__aeabi_dmul>
 800305c:	4b45      	ldr	r3, [pc, #276]	; (8003174 <_dtoa_r+0xf2c>)
 800305e:	2200      	movs	r2, #0
 8003060:	f003 fe52 	bl	8006d08 <__adddf3>
 8003064:	ec47 6b1a 	vmov	d10, r6, r7
 8003068:	4680      	mov	r8, r0
 800306a:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 800306e:	f7ff ba9b 	b.w	80025a8 <_dtoa_r+0x360>
 8003072:	f04f 0a02 	mov.w	sl, #2
 8003076:	eeb0 aa49 	vmov.f32	s20, s18
 800307a:	eef0 aa69 	vmov.f32	s21, s19
 800307e:	f7ff ba6f 	b.w	8002560 <_dtoa_r+0x318>
 8003082:	9b05      	ldr	r3, [sp, #20]
 8003084:	3301      	adds	r3, #1
 8003086:	9305      	str	r3, [sp, #20]
 8003088:	2331      	movs	r3, #49	; 0x31
 800308a:	f7ff bb17 	b.w	80026bc <_dtoa_r+0x474>
 800308e:	9b05      	ldr	r3, [sp, #20]
 8003090:	46bb      	mov	fp, r7
 8003092:	3301      	adds	r3, #1
 8003094:	9305      	str	r3, [sp, #20]
 8003096:	2339      	movs	r3, #57	; 0x39
 8003098:	4637      	mov	r7, r6
 800309a:	f80b 3b01 	strb.w	r3, [fp], #1
 800309e:	4646      	mov	r6, r8
 80030a0:	e49e      	b.n	80029e0 <_dtoa_r+0x798>
 80030a2:	f04f 0a00 	mov.w	sl, #0
 80030a6:	4656      	mov	r6, sl
 80030a8:	e60b      	b.n	8002cc2 <_dtoa_r+0xa7a>
 80030aa:	4698      	mov	r8, r3
 80030ac:	e42d      	b.n	800290a <_dtoa_r+0x6c2>
 80030ae:	46aa      	mov	sl, r5
 80030b0:	ee18 4a10 	vmov	r4, s16
 80030b4:	ee1a 5a10 	vmov	r5, s20
 80030b8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80030ba:	3301      	adds	r3, #1
 80030bc:	9305      	str	r3, [sp, #20]
 80030be:	46d1      	mov	r9, sl
 80030c0:	e4ae      	b.n	8002a20 <_dtoa_r+0x7d8>
 80030c2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80030c4:	9a00      	ldr	r2, [sp, #0]
 80030c6:	9305      	str	r3, [sp, #20]
 80030c8:	f7ff baf1 	b.w	80026ae <_dtoa_r+0x466>
 80030cc:	f47f aece 	bne.w	8002e6c <_dtoa_r+0xc24>
 80030d0:	07da      	lsls	r2, r3, #31
 80030d2:	f57f aecb 	bpl.w	8002e6c <_dtoa_r+0xc24>
 80030d6:	e6c4      	b.n	8002e62 <_dtoa_r+0xc1a>
 80030d8:	2b39      	cmp	r3, #57	; 0x39
 80030da:	d0d8      	beq.n	800308e <_dtoa_r+0xe46>
 80030dc:	f1b9 0f00 	cmp.w	r9, #0
 80030e0:	f73f aec2 	bgt.w	8002e68 <_dtoa_r+0xc20>
 80030e4:	e6c2      	b.n	8002e6c <_dtoa_r+0xc24>
 80030e6:	9b01      	ldr	r3, [sp, #4]
 80030e8:	2b02      	cmp	r3, #2
 80030ea:	f73f add5 	bgt.w	8002c98 <_dtoa_r+0xa50>
 80030ee:	f8cd 9014 	str.w	r9, [sp, #20]
 80030f2:	e560      	b.n	8002bb6 <_dtoa_r+0x96e>
 80030f4:	46c2      	mov	sl, r8
 80030f6:	e767      	b.n	8002fc8 <_dtoa_r+0xd80>
 80030f8:	9b01      	ldr	r3, [sp, #4]
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	f73f adcc 	bgt.w	8002c98 <_dtoa_r+0xa50>
 8003100:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003102:	f8cd 9014 	str.w	r9, [sp, #20]
 8003106:	9307      	str	r3, [sp, #28]
 8003108:	e4d6      	b.n	8002ab8 <_dtoa_r+0x870>
 800310a:	f04f 0a02 	mov.w	sl, #2
 800310e:	f7ff ba27 	b.w	8002560 <_dtoa_r+0x318>
 8003112:	4b19      	ldr	r3, [pc, #100]	; (8003178 <_dtoa_r+0xf30>)
 8003114:	9300      	str	r3, [sp, #0]
 8003116:	f7ff b8d9 	b.w	80022cc <_dtoa_r+0x84>
 800311a:	f43f ac0e 	beq.w	800293a <_dtoa_r+0x6f2>
 800311e:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
 8003122:	e494      	b.n	8002a4e <_dtoa_r+0x806>
 8003124:	2600      	movs	r6, #0
 8003126:	6466      	str	r6, [r4, #68]	; 0x44
 8003128:	4631      	mov	r1, r6
 800312a:	4620      	mov	r0, r4
 800312c:	f001 f9f2 	bl	8004514 <_Balloc>
 8003130:	9000      	str	r0, [sp, #0]
 8003132:	b968      	cbnz	r0, 8003150 <_dtoa_r+0xf08>
 8003134:	4b11      	ldr	r3, [pc, #68]	; (800317c <_dtoa_r+0xf34>)
 8003136:	4812      	ldr	r0, [pc, #72]	; (8003180 <_dtoa_r+0xf38>)
 8003138:	2200      	movs	r2, #0
 800313a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800313e:	f003 f8cf 	bl	80062e0 <__assert_func>
 8003142:	4b0e      	ldr	r3, [pc, #56]	; (800317c <_dtoa_r+0xf34>)
 8003144:	480e      	ldr	r0, [pc, #56]	; (8003180 <_dtoa_r+0xf38>)
 8003146:	463a      	mov	r2, r7
 8003148:	f240 21ea 	movw	r1, #746	; 0x2ea
 800314c:	f003 f8c8 	bl	80062e0 <__assert_func>
 8003150:	9b00      	ldr	r3, [sp, #0]
 8003152:	6423      	str	r3, [r4, #64]	; 0x40
 8003154:	2201      	movs	r2, #1
 8003156:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800315a:	9609      	str	r6, [sp, #36]	; 0x24
 800315c:	930f      	str	r3, [sp, #60]	; 0x3c
 800315e:	920a      	str	r2, [sp, #40]	; 0x28
 8003160:	9307      	str	r3, [sp, #28]
 8003162:	f7ff bab7 	b.w	80026d4 <_dtoa_r+0x48c>
 8003166:	bf00      	nop
 8003168:	0800cd20 	.word	0x0800cd20
 800316c:	40240000 	.word	0x40240000
 8003170:	3fe00000 	.word	0x3fe00000
 8003174:	401c0000 	.word	0x401c0000
 8003178:	0801c10c 	.word	0x0801c10c
 800317c:	0801c118 	.word	0x0801c118
 8003180:	0801c12c 	.word	0x0801c12c

08003184 <__sflush_r>:
 8003184:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800318c:	460c      	mov	r4, r1
 800318e:	0711      	lsls	r1, r2, #28
 8003190:	4680      	mov	r8, r0
 8003192:	d447      	bmi.n	8003224 <__sflush_r+0xa0>
 8003194:	6863      	ldr	r3, [r4, #4]
 8003196:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800319a:	2b00      	cmp	r3, #0
 800319c:	81a2      	strh	r2, [r4, #12]
 800319e:	dd5e      	ble.n	800325e <__sflush_r+0xda>
 80031a0:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 80031a2:	2d00      	cmp	r5, #0
 80031a4:	d058      	beq.n	8003258 <__sflush_r+0xd4>
 80031a6:	2300      	movs	r3, #0
 80031a8:	f8d8 6000 	ldr.w	r6, [r8]
 80031ac:	f8c8 3000 	str.w	r3, [r8]
 80031b0:	b293      	uxth	r3, r2
 80031b2:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80031b6:	d156      	bne.n	8003266 <__sflush_r+0xe2>
 80031b8:	2301      	movs	r3, #1
 80031ba:	69e1      	ldr	r1, [r4, #28]
 80031bc:	4640      	mov	r0, r8
 80031be:	47a8      	blx	r5
 80031c0:	1c43      	adds	r3, r0, #1
 80031c2:	d067      	beq.n	8003294 <__sflush_r+0x110>
 80031c4:	89a3      	ldrh	r3, [r4, #12]
 80031c6:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 80031c8:	075f      	lsls	r7, r3, #29
 80031ca:	d505      	bpl.n	80031d8 <__sflush_r+0x54>
 80031cc:	6863      	ldr	r3, [r4, #4]
 80031ce:	1ac0      	subs	r0, r0, r3
 80031d0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80031d2:	b10b      	cbz	r3, 80031d8 <__sflush_r+0x54>
 80031d4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80031d6:	1ac0      	subs	r0, r0, r3
 80031d8:	69e1      	ldr	r1, [r4, #28]
 80031da:	4602      	mov	r2, r0
 80031dc:	2300      	movs	r3, #0
 80031de:	4640      	mov	r0, r8
 80031e0:	47a8      	blx	r5
 80031e2:	1c41      	adds	r1, r0, #1
 80031e4:	d141      	bne.n	800326a <__sflush_r+0xe6>
 80031e6:	f8d8 3000 	ldr.w	r3, [r8]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d03d      	beq.n	800326a <__sflush_r+0xe6>
 80031ee:	2b1d      	cmp	r3, #29
 80031f0:	d001      	beq.n	80031f6 <__sflush_r+0x72>
 80031f2:	2b16      	cmp	r3, #22
 80031f4:	d156      	bne.n	80032a4 <__sflush_r+0x120>
 80031f6:	89a3      	ldrh	r3, [r4, #12]
 80031f8:	6922      	ldr	r2, [r4, #16]
 80031fa:	6022      	str	r2, [r4, #0]
 80031fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003200:	2100      	movs	r1, #0
 8003202:	6061      	str	r1, [r4, #4]
 8003204:	81a3      	strh	r3, [r4, #12]
 8003206:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003208:	f8c8 6000 	str.w	r6, [r8]
 800320c:	b321      	cbz	r1, 8003258 <__sflush_r+0xd4>
 800320e:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8003212:	4299      	cmp	r1, r3
 8003214:	d002      	beq.n	800321c <__sflush_r+0x98>
 8003216:	4640      	mov	r0, r8
 8003218:	f000 f9e6 	bl	80035e8 <_free_r>
 800321c:	2000      	movs	r0, #0
 800321e:	6320      	str	r0, [r4, #48]	; 0x30
 8003220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003224:	6926      	ldr	r6, [r4, #16]
 8003226:	b1be      	cbz	r6, 8003258 <__sflush_r+0xd4>
 8003228:	b293      	uxth	r3, r2
 800322a:	6825      	ldr	r5, [r4, #0]
 800322c:	6026      	str	r6, [r4, #0]
 800322e:	079a      	lsls	r2, r3, #30
 8003230:	bf0c      	ite	eq
 8003232:	6963      	ldreq	r3, [r4, #20]
 8003234:	2300      	movne	r3, #0
 8003236:	1bad      	subs	r5, r5, r6
 8003238:	60a3      	str	r3, [r4, #8]
 800323a:	e00b      	b.n	8003254 <__sflush_r+0xd0>
 800323c:	462b      	mov	r3, r5
 800323e:	4632      	mov	r2, r6
 8003240:	69e1      	ldr	r1, [r4, #28]
 8003242:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8003244:	4640      	mov	r0, r8
 8003246:	47b8      	blx	r7
 8003248:	f1b0 0c00 	subs.w	ip, r0, #0
 800324c:	eba5 050c 	sub.w	r5, r5, ip
 8003250:	4466      	add	r6, ip
 8003252:	dd17      	ble.n	8003284 <__sflush_r+0x100>
 8003254:	2d00      	cmp	r5, #0
 8003256:	dcf1      	bgt.n	800323c <__sflush_r+0xb8>
 8003258:	2000      	movs	r0, #0
 800325a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800325e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003260:	2b00      	cmp	r3, #0
 8003262:	dc9d      	bgt.n	80031a0 <__sflush_r+0x1c>
 8003264:	e7f8      	b.n	8003258 <__sflush_r+0xd4>
 8003266:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8003268:	e7ae      	b.n	80031c8 <__sflush_r+0x44>
 800326a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800326e:	6922      	ldr	r2, [r4, #16]
 8003270:	6022      	str	r2, [r4, #0]
 8003272:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003276:	81a3      	strh	r3, [r4, #12]
 8003278:	2200      	movs	r2, #0
 800327a:	04db      	lsls	r3, r3, #19
 800327c:	6062      	str	r2, [r4, #4]
 800327e:	d5c2      	bpl.n	8003206 <__sflush_r+0x82>
 8003280:	6520      	str	r0, [r4, #80]	; 0x50
 8003282:	e7c0      	b.n	8003206 <__sflush_r+0x82>
 8003284:	89a3      	ldrh	r3, [r4, #12]
 8003286:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800328a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800328e:	81a3      	strh	r3, [r4, #12]
 8003290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003294:	f8d8 3000 	ldr.w	r3, [r8]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d093      	beq.n	80031c4 <__sflush_r+0x40>
 800329c:	2b1d      	cmp	r3, #29
 800329e:	d006      	beq.n	80032ae <__sflush_r+0x12a>
 80032a0:	2b16      	cmp	r3, #22
 80032a2:	d004      	beq.n	80032ae <__sflush_r+0x12a>
 80032a4:	89a3      	ldrh	r3, [r4, #12]
 80032a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032aa:	81a3      	strh	r3, [r4, #12]
 80032ac:	e7d5      	b.n	800325a <__sflush_r+0xd6>
 80032ae:	f8c8 6000 	str.w	r6, [r8]
 80032b2:	e7d1      	b.n	8003258 <__sflush_r+0xd4>

080032b4 <_fflush_r>:
 80032b4:	b538      	push	{r3, r4, r5, lr}
 80032b6:	460d      	mov	r5, r1
 80032b8:	4604      	mov	r4, r0
 80032ba:	b108      	cbz	r0, 80032c0 <_fflush_r+0xc>
 80032bc:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80032be:	b11b      	cbz	r3, 80032c8 <_fflush_r+0x14>
 80032c0:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
 80032c4:	b930      	cbnz	r0, 80032d4 <_fflush_r+0x20>
 80032c6:	bd38      	pop	{r3, r4, r5, pc}
 80032c8:	f000 f91e 	bl	8003508 <__sinit>
 80032cc:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
 80032d0:	2800      	cmp	r0, #0
 80032d2:	d0f8      	beq.n	80032c6 <_fflush_r+0x12>
 80032d4:	4629      	mov	r1, r5
 80032d6:	4620      	mov	r0, r4
 80032d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80032dc:	f7ff bf52 	b.w	8003184 <__sflush_r>

080032e0 <fflush>:
 80032e0:	b538      	push	{r3, r4, r5, lr}
 80032e2:	b1b8      	cbz	r0, 8003314 <fflush+0x34>
 80032e4:	4b0f      	ldr	r3, [pc, #60]	; (8003324 <fflush+0x44>)
 80032e6:	681d      	ldr	r5, [r3, #0]
 80032e8:	4604      	mov	r4, r0
 80032ea:	b10d      	cbz	r5, 80032f0 <fflush+0x10>
 80032ec:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80032ee:	b14b      	cbz	r3, 8003304 <fflush+0x24>
 80032f0:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 80032f4:	b900      	cbnz	r0, 80032f8 <fflush+0x18>
 80032f6:	bd38      	pop	{r3, r4, r5, pc}
 80032f8:	4621      	mov	r1, r4
 80032fa:	4628      	mov	r0, r5
 80032fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003300:	f7ff bf40 	b.w	8003184 <__sflush_r>
 8003304:	4628      	mov	r0, r5
 8003306:	f000 f8ff 	bl	8003508 <__sinit>
 800330a:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 800330e:	2800      	cmp	r0, #0
 8003310:	d0f1      	beq.n	80032f6 <fflush+0x16>
 8003312:	e7f1      	b.n	80032f8 <fflush+0x18>
 8003314:	4b04      	ldr	r3, [pc, #16]	; (8003328 <fflush+0x48>)
 8003316:	4905      	ldr	r1, [pc, #20]	; (800332c <fflush+0x4c>)
 8003318:	6818      	ldr	r0, [r3, #0]
 800331a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800331e:	f000 bc01 	b.w	8003b24 <_fwalk_reent>
 8003322:	bf00      	nop
 8003324:	20000008 	.word	0x20000008
 8003328:	0800cce8 	.word	0x0800cce8
 800332c:	080032b5 	.word	0x080032b5

08003330 <__fp_lock>:
 8003330:	2000      	movs	r0, #0
 8003332:	4770      	bx	lr

08003334 <_cleanup_r>:
 8003334:	4901      	ldr	r1, [pc, #4]	; (800333c <_cleanup_r+0x8>)
 8003336:	f000 bbf5 	b.w	8003b24 <_fwalk_reent>
 800333a:	bf00      	nop
 800333c:	080063f1 	.word	0x080063f1

08003340 <__fp_unlock>:
 8003340:	2000      	movs	r0, #0
 8003342:	4770      	bx	lr

08003344 <__sinit.part.0>:
 8003344:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003348:	4a2d      	ldr	r2, [pc, #180]	; (8003400 <__sinit.part.0+0xbc>)
 800334a:	6846      	ldr	r6, [r0, #4]
 800334c:	63c2      	str	r2, [r0, #60]	; 0x3c
 800334e:	2400      	movs	r4, #0
 8003350:	2303      	movs	r3, #3
 8003352:	e9c0 43b8 	strd	r4, r3, [r0, #736]	; 0x2e0
 8003356:	4607      	mov	r7, r0
 8003358:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
 800335c:	2304      	movs	r3, #4
 800335e:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
 8003362:	4621      	mov	r1, r4
 8003364:	e9c6 4302 	strd	r4, r3, [r6, #8]
 8003368:	2208      	movs	r2, #8
 800336a:	e9c6 4400 	strd	r4, r4, [r6]
 800336e:	e9c6 4404 	strd	r4, r4, [r6, #16]
 8003372:	6674      	str	r4, [r6, #100]	; 0x64
 8003374:	61b4      	str	r4, [r6, #24]
 8003376:	f106 005c 	add.w	r0, r6, #92	; 0x5c
 800337a:	f7fc fffd 	bl	8000378 <memset>
 800337e:	f8df b08c 	ldr.w	fp, [pc, #140]	; 800340c <__sinit.part.0+0xc8>
 8003382:	68bd      	ldr	r5, [r7, #8]
 8003384:	f8df a088 	ldr.w	sl, [pc, #136]	; 8003410 <__sinit.part.0+0xcc>
 8003388:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8003414 <__sinit.part.0+0xd0>
 800338c:	f8df 8088 	ldr.w	r8, [pc, #136]	; 8003418 <__sinit.part.0+0xd4>
 8003390:	4b1c      	ldr	r3, [pc, #112]	; (8003404 <__sinit.part.0+0xc0>)
 8003392:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
 8003396:	e9c6 6b07 	strd	r6, fp, [r6, #28]
 800339a:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
 800339e:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
 80033a2:	2208      	movs	r2, #8
 80033a4:	60eb      	str	r3, [r5, #12]
 80033a6:	e9c5 4400 	strd	r4, r4, [r5]
 80033aa:	e9c5 4404 	strd	r4, r4, [r5, #16]
 80033ae:	666c      	str	r4, [r5, #100]	; 0x64
 80033b0:	60ac      	str	r4, [r5, #8]
 80033b2:	61ac      	str	r4, [r5, #24]
 80033b4:	4621      	mov	r1, r4
 80033b6:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 80033ba:	f7fc ffdd 	bl	8000378 <memset>
 80033be:	e9c5 5b07 	strd	r5, fp, [r5, #28]
 80033c2:	e9c5 a909 	strd	sl, r9, [r5, #36]	; 0x24
 80033c6:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 80033ca:	68fd      	ldr	r5, [r7, #12]
 80033cc:	4b0e      	ldr	r3, [pc, #56]	; (8003408 <__sinit.part.0+0xc4>)
 80033ce:	60eb      	str	r3, [r5, #12]
 80033d0:	e9c5 4400 	strd	r4, r4, [r5]
 80033d4:	e9c5 4404 	strd	r4, r4, [r5, #16]
 80033d8:	666c      	str	r4, [r5, #100]	; 0x64
 80033da:	60ac      	str	r4, [r5, #8]
 80033dc:	61ac      	str	r4, [r5, #24]
 80033de:	4621      	mov	r1, r4
 80033e0:	2208      	movs	r2, #8
 80033e2:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 80033e6:	f7fc ffc7 	bl	8000378 <memset>
 80033ea:	2301      	movs	r3, #1
 80033ec:	e9c5 5b07 	strd	r5, fp, [r5, #28]
 80033f0:	e9c5 980a 	strd	r9, r8, [r5, #40]	; 0x28
 80033f4:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 80033f8:	63bb      	str	r3, [r7, #56]	; 0x38
 80033fa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033fe:	bf00      	nop
 8003400:	08003335 	.word	0x08003335
 8003404:	00010009 	.word	0x00010009
 8003408:	00020012 	.word	0x00020012
 800340c:	08005445 	.word	0x08005445
 8003410:	0800546d 	.word	0x0800546d
 8003414:	080054ad 	.word	0x080054ad
 8003418:	080054cd 	.word	0x080054cd

0800341c <__sfmoreglue>:
 800341c:	b570      	push	{r4, r5, r6, lr}
 800341e:	2268      	movs	r2, #104	; 0x68
 8003420:	1e4d      	subs	r5, r1, #1
 8003422:	fb02 f505 	mul.w	r5, r2, r5
 8003426:	460e      	mov	r6, r1
 8003428:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800342c:	f000 fc58 	bl	8003ce0 <_malloc_r>
 8003430:	4604      	mov	r4, r0
 8003432:	b140      	cbz	r0, 8003446 <__sfmoreglue+0x2a>
 8003434:	2100      	movs	r1, #0
 8003436:	300c      	adds	r0, #12
 8003438:	e9c4 1600 	strd	r1, r6, [r4]
 800343c:	60a0      	str	r0, [r4, #8]
 800343e:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003442:	f7fc ff99 	bl	8000378 <memset>
 8003446:	4620      	mov	r0, r4
 8003448:	bd70      	pop	{r4, r5, r6, pc}
 800344a:	bf00      	nop

0800344c <__sfp>:
 800344c:	4b27      	ldr	r3, [pc, #156]	; (80034ec <__sfp+0xa0>)
 800344e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003452:	681e      	ldr	r6, [r3, #0]
 8003454:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8003456:	4607      	mov	r7, r0
 8003458:	b35b      	cbz	r3, 80034b2 <__sfp+0x66>
 800345a:	f506 7638 	add.w	r6, r6, #736	; 0x2e0
 800345e:	f04f 0804 	mov.w	r8, #4
 8003462:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003466:	3b01      	subs	r3, #1
 8003468:	d504      	bpl.n	8003474 <__sfp+0x28>
 800346a:	e01e      	b.n	80034aa <__sfp+0x5e>
 800346c:	1c5a      	adds	r2, r3, #1
 800346e:	f104 0468 	add.w	r4, r4, #104	; 0x68
 8003472:	d01a      	beq.n	80034aa <__sfp+0x5e>
 8003474:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003478:	3b01      	subs	r3, #1
 800347a:	2d00      	cmp	r5, #0
 800347c:	d1f6      	bne.n	800346c <__sfp+0x20>
 800347e:	4b1c      	ldr	r3, [pc, #112]	; (80034f0 <__sfp+0xa4>)
 8003480:	6665      	str	r5, [r4, #100]	; 0x64
 8003482:	e9c4 5500 	strd	r5, r5, [r4]
 8003486:	e9c4 5302 	strd	r5, r3, [r4, #8]
 800348a:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800348e:	61a5      	str	r5, [r4, #24]
 8003490:	2208      	movs	r2, #8
 8003492:	4629      	mov	r1, r5
 8003494:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003498:	f7fc ff6e 	bl	8000378 <memset>
 800349c:	e9c4 550c 	strd	r5, r5, [r4, #48]	; 0x30
 80034a0:	e9c4 5511 	strd	r5, r5, [r4, #68]	; 0x44
 80034a4:	4620      	mov	r0, r4
 80034a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80034aa:	6835      	ldr	r5, [r6, #0]
 80034ac:	b12d      	cbz	r5, 80034ba <__sfp+0x6e>
 80034ae:	462e      	mov	r6, r5
 80034b0:	e7d7      	b.n	8003462 <__sfp+0x16>
 80034b2:	4630      	mov	r0, r6
 80034b4:	f7ff ff46 	bl	8003344 <__sinit.part.0>
 80034b8:	e7cf      	b.n	800345a <__sfp+0xe>
 80034ba:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 80034be:	4638      	mov	r0, r7
 80034c0:	f000 fc0e 	bl	8003ce0 <_malloc_r>
 80034c4:	4604      	mov	r4, r0
 80034c6:	b168      	cbz	r0, 80034e4 <__sfp+0x98>
 80034c8:	6005      	str	r5, [r0, #0]
 80034ca:	f8c0 8004 	str.w	r8, [r0, #4]
 80034ce:	300c      	adds	r0, #12
 80034d0:	4629      	mov	r1, r5
 80034d2:	60a0      	str	r0, [r4, #8]
 80034d4:	4625      	mov	r5, r4
 80034d6:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 80034da:	f7fc ff4d 	bl	8000378 <memset>
 80034de:	6034      	str	r4, [r6, #0]
 80034e0:	462e      	mov	r6, r5
 80034e2:	e7be      	b.n	8003462 <__sfp+0x16>
 80034e4:	230c      	movs	r3, #12
 80034e6:	6030      	str	r0, [r6, #0]
 80034e8:	603b      	str	r3, [r7, #0]
 80034ea:	e7db      	b.n	80034a4 <__sfp+0x58>
 80034ec:	0800cce8 	.word	0x0800cce8
 80034f0:	ffff0001 	.word	0xffff0001

080034f4 <_cleanup>:
 80034f4:	4b02      	ldr	r3, [pc, #8]	; (8003500 <_cleanup+0xc>)
 80034f6:	4903      	ldr	r1, [pc, #12]	; (8003504 <_cleanup+0x10>)
 80034f8:	6818      	ldr	r0, [r3, #0]
 80034fa:	f000 bb13 	b.w	8003b24 <_fwalk_reent>
 80034fe:	bf00      	nop
 8003500:	0800cce8 	.word	0x0800cce8
 8003504:	080063f1 	.word	0x080063f1

08003508 <__sinit>:
 8003508:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800350a:	b103      	cbz	r3, 800350e <__sinit+0x6>
 800350c:	4770      	bx	lr
 800350e:	e719      	b.n	8003344 <__sinit.part.0>

08003510 <__sfp_lock_acquire>:
 8003510:	4770      	bx	lr
 8003512:	bf00      	nop

08003514 <__sfp_lock_release>:
 8003514:	4770      	bx	lr
 8003516:	bf00      	nop

08003518 <__sinit_lock_acquire>:
 8003518:	4770      	bx	lr
 800351a:	bf00      	nop

0800351c <__sinit_lock_release>:
 800351c:	4770      	bx	lr
 800351e:	bf00      	nop

08003520 <__fp_lock_all>:
 8003520:	4b02      	ldr	r3, [pc, #8]	; (800352c <__fp_lock_all+0xc>)
 8003522:	4903      	ldr	r1, [pc, #12]	; (8003530 <__fp_lock_all+0x10>)
 8003524:	6818      	ldr	r0, [r3, #0]
 8003526:	f000 badd 	b.w	8003ae4 <_fwalk>
 800352a:	bf00      	nop
 800352c:	20000008 	.word	0x20000008
 8003530:	08003331 	.word	0x08003331

08003534 <__fp_unlock_all>:
 8003534:	4b02      	ldr	r3, [pc, #8]	; (8003540 <__fp_unlock_all+0xc>)
 8003536:	4903      	ldr	r1, [pc, #12]	; (8003544 <__fp_unlock_all+0x10>)
 8003538:	6818      	ldr	r0, [r3, #0]
 800353a:	f000 bad3 	b.w	8003ae4 <_fwalk>
 800353e:	bf00      	nop
 8003540:	20000008 	.word	0x20000008
 8003544:	08003341 	.word	0x08003341

08003548 <_malloc_trim_r>:
 8003548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800354a:	4f24      	ldr	r7, [pc, #144]	; (80035dc <_malloc_trim_r+0x94>)
 800354c:	460c      	mov	r4, r1
 800354e:	4606      	mov	r6, r0
 8003550:	f000 ffdc 	bl	800450c <__malloc_lock>
 8003554:	68ba      	ldr	r2, [r7, #8]
 8003556:	6855      	ldr	r5, [r2, #4]
 8003558:	f5c4 637e 	rsb	r3, r4, #4064	; 0xfe0
 800355c:	330f      	adds	r3, #15
 800355e:	f025 0503 	bic.w	r5, r5, #3
 8003562:	442b      	add	r3, r5
 8003564:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8003568:	f023 030f 	bic.w	r3, r3, #15
 800356c:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
 8003570:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 8003574:	db07      	blt.n	8003586 <_malloc_trim_r+0x3e>
 8003576:	2100      	movs	r1, #0
 8003578:	4630      	mov	r0, r6
 800357a:	f004 fd05 	bl	8007f88 <_sbrk_r>
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	442b      	add	r3, r5
 8003582:	4298      	cmp	r0, r3
 8003584:	d004      	beq.n	8003590 <_malloc_trim_r+0x48>
 8003586:	4630      	mov	r0, r6
 8003588:	f000 ffc2 	bl	8004510 <__malloc_unlock>
 800358c:	2000      	movs	r0, #0
 800358e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003590:	4261      	negs	r1, r4
 8003592:	4630      	mov	r0, r6
 8003594:	f004 fcf8 	bl	8007f88 <_sbrk_r>
 8003598:	3001      	adds	r0, #1
 800359a:	d00d      	beq.n	80035b8 <_malloc_trim_r+0x70>
 800359c:	4a10      	ldr	r2, [pc, #64]	; (80035e0 <_malloc_trim_r+0x98>)
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	1b2d      	subs	r5, r5, r4
 80035a2:	f045 0501 	orr.w	r5, r5, #1
 80035a6:	605d      	str	r5, [r3, #4]
 80035a8:	6813      	ldr	r3, [r2, #0]
 80035aa:	4630      	mov	r0, r6
 80035ac:	1b1b      	subs	r3, r3, r4
 80035ae:	6013      	str	r3, [r2, #0]
 80035b0:	f000 ffae 	bl	8004510 <__malloc_unlock>
 80035b4:	2001      	movs	r0, #1
 80035b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80035b8:	2100      	movs	r1, #0
 80035ba:	4630      	mov	r0, r6
 80035bc:	f004 fce4 	bl	8007f88 <_sbrk_r>
 80035c0:	68ba      	ldr	r2, [r7, #8]
 80035c2:	1a83      	subs	r3, r0, r2
 80035c4:	2b0f      	cmp	r3, #15
 80035c6:	ddde      	ble.n	8003586 <_malloc_trim_r+0x3e>
 80035c8:	f043 0301 	orr.w	r3, r3, #1
 80035cc:	6053      	str	r3, [r2, #4]
 80035ce:	4b05      	ldr	r3, [pc, #20]	; (80035e4 <_malloc_trim_r+0x9c>)
 80035d0:	4903      	ldr	r1, [pc, #12]	; (80035e0 <_malloc_trim_r+0x98>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	1ac0      	subs	r0, r0, r3
 80035d6:	6008      	str	r0, [r1, #0]
 80035d8:	e7d5      	b.n	8003586 <_malloc_trim_r+0x3e>
 80035da:	bf00      	nop
 80035dc:	20000438 	.word	0x20000438
 80035e0:	20000c44 	.word	0x20000c44
 80035e4:	20000840 	.word	0x20000840

080035e8 <_free_r>:
 80035e8:	2900      	cmp	r1, #0
 80035ea:	d061      	beq.n	80036b0 <_free_r+0xc8>
 80035ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035ee:	460c      	mov	r4, r1
 80035f0:	4606      	mov	r6, r0
 80035f2:	f000 ff8b 	bl	800450c <__malloc_lock>
 80035f6:	f854 2c04 	ldr.w	r2, [r4, #-4]
 80035fa:	4f7b      	ldr	r7, [pc, #492]	; (80037e8 <_free_r+0x200>)
 80035fc:	f1a4 0508 	sub.w	r5, r4, #8
 8003600:	f022 0101 	bic.w	r1, r2, #1
 8003604:	eb05 0c01 	add.w	ip, r5, r1
 8003608:	68b8      	ldr	r0, [r7, #8]
 800360a:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800360e:	4560      	cmp	r0, ip
 8003610:	f023 0303 	bic.w	r3, r3, #3
 8003614:	f000 808b 	beq.w	800372e <_free_r+0x146>
 8003618:	07d2      	lsls	r2, r2, #31
 800361a:	f8cc 3004 	str.w	r3, [ip, #4]
 800361e:	d432      	bmi.n	8003686 <_free_r+0x9e>
 8003620:	f854 2c08 	ldr.w	r2, [r4, #-8]
 8003624:	1aad      	subs	r5, r5, r2
 8003626:	4411      	add	r1, r2
 8003628:	68aa      	ldr	r2, [r5, #8]
 800362a:	f107 0008 	add.w	r0, r7, #8
 800362e:	4282      	cmp	r2, r0
 8003630:	d06a      	beq.n	8003708 <_free_r+0x120>
 8003632:	eb0c 0403 	add.w	r4, ip, r3
 8003636:	f8d4 e004 	ldr.w	lr, [r4, #4]
 800363a:	68ec      	ldr	r4, [r5, #12]
 800363c:	60d4      	str	r4, [r2, #12]
 800363e:	f01e 0f01 	tst.w	lr, #1
 8003642:	60a2      	str	r2, [r4, #8]
 8003644:	f000 8097 	beq.w	8003776 <_free_r+0x18e>
 8003648:	f041 0301 	orr.w	r3, r1, #1
 800364c:	606b      	str	r3, [r5, #4]
 800364e:	f8cc 1000 	str.w	r1, [ip]
 8003652:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8003656:	d235      	bcs.n	80036c4 <_free_r+0xdc>
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	08cb      	lsrs	r3, r1, #3
 800365c:	0948      	lsrs	r0, r1, #5
 800365e:	2101      	movs	r1, #1
 8003660:	3301      	adds	r3, #1
 8003662:	4081      	lsls	r1, r0
 8003664:	4311      	orrs	r1, r2
 8003666:	6079      	str	r1, [r7, #4]
 8003668:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
 800366c:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
 8003670:	3a08      	subs	r2, #8
 8003672:	e9c5 1202 	strd	r1, r2, [r5, #8]
 8003676:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
 800367a:	60cd      	str	r5, [r1, #12]
 800367c:	4630      	mov	r0, r6
 800367e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003682:	f000 bf45 	b.w	8004510 <__malloc_unlock>
 8003686:	eb0c 0203 	add.w	r2, ip, r3
 800368a:	6852      	ldr	r2, [r2, #4]
 800368c:	07d0      	lsls	r0, r2, #31
 800368e:	d410      	bmi.n	80036b2 <_free_r+0xca>
 8003690:	4419      	add	r1, r3
 8003692:	f107 0008 	add.w	r0, r7, #8
 8003696:	f8dc 3008 	ldr.w	r3, [ip, #8]
 800369a:	4283      	cmp	r3, r0
 800369c:	d073      	beq.n	8003786 <_free_r+0x19e>
 800369e:	f8dc 200c 	ldr.w	r2, [ip, #12]
 80036a2:	60da      	str	r2, [r3, #12]
 80036a4:	6093      	str	r3, [r2, #8]
 80036a6:	f041 0301 	orr.w	r3, r1, #1
 80036aa:	606b      	str	r3, [r5, #4]
 80036ac:	5069      	str	r1, [r5, r1]
 80036ae:	e7d0      	b.n	8003652 <_free_r+0x6a>
 80036b0:	4770      	bx	lr
 80036b2:	f041 0301 	orr.w	r3, r1, #1
 80036b6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80036ba:	f844 3c04 	str.w	r3, [r4, #-4]
 80036be:	f8cc 1000 	str.w	r1, [ip]
 80036c2:	d3c9      	bcc.n	8003658 <_free_r+0x70>
 80036c4:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
 80036c8:	ea4f 2351 	mov.w	r3, r1, lsr #9
 80036cc:	d248      	bcs.n	8003760 <_free_r+0x178>
 80036ce:	098b      	lsrs	r3, r1, #6
 80036d0:	f103 0039 	add.w	r0, r3, #57	; 0x39
 80036d4:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80036d8:	00c3      	lsls	r3, r0, #3
 80036da:	18f8      	adds	r0, r7, r3
 80036dc:	58fb      	ldr	r3, [r7, r3]
 80036de:	3808      	subs	r0, #8
 80036e0:	4298      	cmp	r0, r3
 80036e2:	d059      	beq.n	8003798 <_free_r+0x1b0>
 80036e4:	685a      	ldr	r2, [r3, #4]
 80036e6:	f022 0203 	bic.w	r2, r2, #3
 80036ea:	428a      	cmp	r2, r1
 80036ec:	d902      	bls.n	80036f4 <_free_r+0x10c>
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	4298      	cmp	r0, r3
 80036f2:	d1f7      	bne.n	80036e4 <_free_r+0xfc>
 80036f4:	68d8      	ldr	r0, [r3, #12]
 80036f6:	e9c5 3002 	strd	r3, r0, [r5, #8]
 80036fa:	6085      	str	r5, [r0, #8]
 80036fc:	60dd      	str	r5, [r3, #12]
 80036fe:	4630      	mov	r0, r6
 8003700:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003704:	f000 bf04 	b.w	8004510 <__malloc_unlock>
 8003708:	eb0c 0203 	add.w	r2, ip, r3
 800370c:	6852      	ldr	r2, [r2, #4]
 800370e:	07d2      	lsls	r2, r2, #31
 8003710:	d463      	bmi.n	80037da <_free_r+0x1f2>
 8003712:	440b      	add	r3, r1
 8003714:	e9dc 1202 	ldrd	r1, r2, [ip, #8]
 8003718:	60ca      	str	r2, [r1, #12]
 800371a:	6091      	str	r1, [r2, #8]
 800371c:	f043 0201 	orr.w	r2, r3, #1
 8003720:	606a      	str	r2, [r5, #4]
 8003722:	4630      	mov	r0, r6
 8003724:	50eb      	str	r3, [r5, r3]
 8003726:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800372a:	f000 bef1 	b.w	8004510 <__malloc_unlock>
 800372e:	440b      	add	r3, r1
 8003730:	07d1      	lsls	r1, r2, #31
 8003732:	d407      	bmi.n	8003744 <_free_r+0x15c>
 8003734:	f854 2c08 	ldr.w	r2, [r4, #-8]
 8003738:	1aad      	subs	r5, r5, r2
 800373a:	4413      	add	r3, r2
 800373c:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
 8003740:	60ca      	str	r2, [r1, #12]
 8003742:	6091      	str	r1, [r2, #8]
 8003744:	f043 0201 	orr.w	r2, r3, #1
 8003748:	606a      	str	r2, [r5, #4]
 800374a:	4a28      	ldr	r2, [pc, #160]	; (80037ec <_free_r+0x204>)
 800374c:	60bd      	str	r5, [r7, #8]
 800374e:	6812      	ldr	r2, [r2, #0]
 8003750:	429a      	cmp	r2, r3
 8003752:	d893      	bhi.n	800367c <_free_r+0x94>
 8003754:	4b26      	ldr	r3, [pc, #152]	; (80037f0 <_free_r+0x208>)
 8003756:	4630      	mov	r0, r6
 8003758:	6819      	ldr	r1, [r3, #0]
 800375a:	f7ff fef5 	bl	8003548 <_malloc_trim_r>
 800375e:	e78d      	b.n	800367c <_free_r+0x94>
 8003760:	2b14      	cmp	r3, #20
 8003762:	d90a      	bls.n	800377a <_free_r+0x192>
 8003764:	2b54      	cmp	r3, #84	; 0x54
 8003766:	d81f      	bhi.n	80037a8 <_free_r+0x1c0>
 8003768:	0b0b      	lsrs	r3, r1, #12
 800376a:	f103 006f 	add.w	r0, r3, #111	; 0x6f
 800376e:	f103 026e 	add.w	r2, r3, #110	; 0x6e
 8003772:	00c3      	lsls	r3, r0, #3
 8003774:	e7b1      	b.n	80036da <_free_r+0xf2>
 8003776:	4419      	add	r1, r3
 8003778:	e78d      	b.n	8003696 <_free_r+0xae>
 800377a:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 800377e:	f103 025b 	add.w	r2, r3, #91	; 0x5b
 8003782:	00c3      	lsls	r3, r0, #3
 8003784:	e7a9      	b.n	80036da <_free_r+0xf2>
 8003786:	f041 0301 	orr.w	r3, r1, #1
 800378a:	e9c7 5504 	strd	r5, r5, [r7, #16]
 800378e:	e9c5 0002 	strd	r0, r0, [r5, #8]
 8003792:	606b      	str	r3, [r5, #4]
 8003794:	5069      	str	r1, [r5, r1]
 8003796:	e771      	b.n	800367c <_free_r+0x94>
 8003798:	6879      	ldr	r1, [r7, #4]
 800379a:	1092      	asrs	r2, r2, #2
 800379c:	2401      	movs	r4, #1
 800379e:	fa04 f202 	lsl.w	r2, r4, r2
 80037a2:	430a      	orrs	r2, r1
 80037a4:	607a      	str	r2, [r7, #4]
 80037a6:	e7a6      	b.n	80036f6 <_free_r+0x10e>
 80037a8:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 80037ac:	d806      	bhi.n	80037bc <_free_r+0x1d4>
 80037ae:	0bcb      	lsrs	r3, r1, #15
 80037b0:	f103 0078 	add.w	r0, r3, #120	; 0x78
 80037b4:	f103 0277 	add.w	r2, r3, #119	; 0x77
 80037b8:	00c3      	lsls	r3, r0, #3
 80037ba:	e78e      	b.n	80036da <_free_r+0xf2>
 80037bc:	f240 5254 	movw	r2, #1364	; 0x554
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d806      	bhi.n	80037d2 <_free_r+0x1ea>
 80037c4:	0c8b      	lsrs	r3, r1, #18
 80037c6:	f103 007d 	add.w	r0, r3, #125	; 0x7d
 80037ca:	f103 027c 	add.w	r2, r3, #124	; 0x7c
 80037ce:	00c3      	lsls	r3, r0, #3
 80037d0:	e783      	b.n	80036da <_free_r+0xf2>
 80037d2:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 80037d6:	227e      	movs	r2, #126	; 0x7e
 80037d8:	e77f      	b.n	80036da <_free_r+0xf2>
 80037da:	f041 0301 	orr.w	r3, r1, #1
 80037de:	606b      	str	r3, [r5, #4]
 80037e0:	f8cc 1000 	str.w	r1, [ip]
 80037e4:	e74a      	b.n	800367c <_free_r+0x94>
 80037e6:	bf00      	nop
 80037e8:	20000438 	.word	0x20000438
 80037ec:	20000844 	.word	0x20000844
 80037f0:	20000c40 	.word	0x20000c40

080037f4 <__sfvwrite_r>:
 80037f4:	6893      	ldr	r3, [r2, #8]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	f000 8085 	beq.w	8003906 <__sfvwrite_r+0x112>
 80037fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003800:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 8003804:	460c      	mov	r4, r1
 8003806:	0719      	lsls	r1, r3, #28
 8003808:	4680      	mov	r8, r0
 800380a:	b083      	sub	sp, #12
 800380c:	4617      	mov	r7, r2
 800380e:	b298      	uxth	r0, r3
 8003810:	d525      	bpl.n	800385e <__sfvwrite_r+0x6a>
 8003812:	6923      	ldr	r3, [r4, #16]
 8003814:	b31b      	cbz	r3, 800385e <__sfvwrite_r+0x6a>
 8003816:	f010 0302 	ands.w	r3, r0, #2
 800381a:	683d      	ldr	r5, [r7, #0]
 800381c:	d02d      	beq.n	800387a <__sfvwrite_r+0x86>
 800381e:	f04f 0a00 	mov.w	sl, #0
 8003822:	f8df b2bc 	ldr.w	fp, [pc, #700]	; 8003ae0 <__sfvwrite_r+0x2ec>
 8003826:	4656      	mov	r6, sl
 8003828:	46b9      	mov	r9, r7
 800382a:	455e      	cmp	r6, fp
 800382c:	4633      	mov	r3, r6
 800382e:	4652      	mov	r2, sl
 8003830:	bf28      	it	cs
 8003832:	465b      	movcs	r3, fp
 8003834:	4640      	mov	r0, r8
 8003836:	2e00      	cmp	r6, #0
 8003838:	d052      	beq.n	80038e0 <__sfvwrite_r+0xec>
 800383a:	69e1      	ldr	r1, [r4, #28]
 800383c:	6a67      	ldr	r7, [r4, #36]	; 0x24
 800383e:	47b8      	blx	r7
 8003840:	2800      	cmp	r0, #0
 8003842:	dd56      	ble.n	80038f2 <__sfvwrite_r+0xfe>
 8003844:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8003848:	1a1b      	subs	r3, r3, r0
 800384a:	4482      	add	sl, r0
 800384c:	1a36      	subs	r6, r6, r0
 800384e:	f8c9 3008 	str.w	r3, [r9, #8]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d1e9      	bne.n	800382a <__sfvwrite_r+0x36>
 8003856:	2000      	movs	r0, #0
 8003858:	b003      	add	sp, #12
 800385a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800385e:	4621      	mov	r1, r4
 8003860:	4640      	mov	r0, r8
 8003862:	f7fe fbbf 	bl	8001fe4 <__swsetup_r>
 8003866:	2800      	cmp	r0, #0
 8003868:	f040 8136 	bne.w	8003ad8 <__sfvwrite_r+0x2e4>
 800386c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003870:	683d      	ldr	r5, [r7, #0]
 8003872:	b298      	uxth	r0, r3
 8003874:	f010 0302 	ands.w	r3, r0, #2
 8003878:	d1d1      	bne.n	800381e <__sfvwrite_r+0x2a>
 800387a:	f010 0901 	ands.w	r9, r0, #1
 800387e:	d144      	bne.n	800390a <__sfvwrite_r+0x116>
 8003880:	464e      	mov	r6, r9
 8003882:	9700      	str	r7, [sp, #0]
 8003884:	b346      	cbz	r6, 80038d8 <__sfvwrite_r+0xe4>
 8003886:	0582      	lsls	r2, r0, #22
 8003888:	f8d4 b008 	ldr.w	fp, [r4, #8]
 800388c:	f140 8083 	bpl.w	8003996 <__sfvwrite_r+0x1a2>
 8003890:	45b3      	cmp	fp, r6
 8003892:	465a      	mov	r2, fp
 8003894:	f200 80b2 	bhi.w	80039fc <__sfvwrite_r+0x208>
 8003898:	f410 6f90 	tst.w	r0, #1152	; 0x480
 800389c:	f040 80bf 	bne.w	8003a1e <__sfvwrite_r+0x22a>
 80038a0:	6820      	ldr	r0, [r4, #0]
 80038a2:	9201      	str	r2, [sp, #4]
 80038a4:	4649      	mov	r1, r9
 80038a6:	f000 fdb5 	bl	8004414 <memmove>
 80038aa:	68a3      	ldr	r3, [r4, #8]
 80038ac:	9a01      	ldr	r2, [sp, #4]
 80038ae:	eba3 010b 	sub.w	r1, r3, fp
 80038b2:	6823      	ldr	r3, [r4, #0]
 80038b4:	60a1      	str	r1, [r4, #8]
 80038b6:	4413      	add	r3, r2
 80038b8:	46b2      	mov	sl, r6
 80038ba:	6023      	str	r3, [r4, #0]
 80038bc:	2600      	movs	r6, #0
 80038be:	9b00      	ldr	r3, [sp, #0]
 80038c0:	6898      	ldr	r0, [r3, #8]
 80038c2:	eba0 000a 	sub.w	r0, r0, sl
 80038c6:	44d1      	add	r9, sl
 80038c8:	6098      	str	r0, [r3, #8]
 80038ca:	2800      	cmp	r0, #0
 80038cc:	d0c3      	beq.n	8003856 <__sfvwrite_r+0x62>
 80038ce:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 80038d2:	b280      	uxth	r0, r0
 80038d4:	2e00      	cmp	r6, #0
 80038d6:	d1d6      	bne.n	8003886 <__sfvwrite_r+0x92>
 80038d8:	e9d5 9600 	ldrd	r9, r6, [r5]
 80038dc:	3508      	adds	r5, #8
 80038de:	e7d1      	b.n	8003884 <__sfvwrite_r+0x90>
 80038e0:	e9d5 a600 	ldrd	sl, r6, [r5]
 80038e4:	3508      	adds	r5, #8
 80038e6:	e7a0      	b.n	800382a <__sfvwrite_r+0x36>
 80038e8:	4621      	mov	r1, r4
 80038ea:	4640      	mov	r0, r8
 80038ec:	f7ff fce2 	bl	80032b4 <_fflush_r>
 80038f0:	b380      	cbz	r0, 8003954 <__sfvwrite_r+0x160>
 80038f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80038f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80038fe:	81a3      	strh	r3, [r4, #12]
 8003900:	b003      	add	sp, #12
 8003902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003906:	2000      	movs	r0, #0
 8003908:	4770      	bx	lr
 800390a:	461e      	mov	r6, r3
 800390c:	46aa      	mov	sl, r5
 800390e:	4699      	mov	r9, r3
 8003910:	4618      	mov	r0, r3
 8003912:	461d      	mov	r5, r3
 8003914:	9700      	str	r7, [sp, #0]
 8003916:	b356      	cbz	r6, 800396e <__sfvwrite_r+0x17a>
 8003918:	b388      	cbz	r0, 800397e <__sfvwrite_r+0x18a>
 800391a:	464a      	mov	r2, r9
 800391c:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
 8003920:	6820      	ldr	r0, [r4, #0]
 8003922:	42b2      	cmp	r2, r6
 8003924:	bf28      	it	cs
 8003926:	4632      	movcs	r2, r6
 8003928:	4288      	cmp	r0, r1
 800392a:	d905      	bls.n	8003938 <__sfvwrite_r+0x144>
 800392c:	68a1      	ldr	r1, [r4, #8]
 800392e:	eb03 0b01 	add.w	fp, r3, r1
 8003932:	455a      	cmp	r2, fp
 8003934:	f300 80a6 	bgt.w	8003a84 <__sfvwrite_r+0x290>
 8003938:	4293      	cmp	r3, r2
 800393a:	dc63      	bgt.n	8003a04 <__sfvwrite_r+0x210>
 800393c:	69e1      	ldr	r1, [r4, #28]
 800393e:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8003940:	462a      	mov	r2, r5
 8003942:	4640      	mov	r0, r8
 8003944:	47b8      	blx	r7
 8003946:	f1b0 0b00 	subs.w	fp, r0, #0
 800394a:	ddd2      	ble.n	80038f2 <__sfvwrite_r+0xfe>
 800394c:	ebb9 090b 	subs.w	r9, r9, fp
 8003950:	d0ca      	beq.n	80038e8 <__sfvwrite_r+0xf4>
 8003952:	2001      	movs	r0, #1
 8003954:	9a00      	ldr	r2, [sp, #0]
 8003956:	6893      	ldr	r3, [r2, #8]
 8003958:	eba3 030b 	sub.w	r3, r3, fp
 800395c:	445d      	add	r5, fp
 800395e:	eba6 060b 	sub.w	r6, r6, fp
 8003962:	6093      	str	r3, [r2, #8]
 8003964:	2b00      	cmp	r3, #0
 8003966:	f43f af76 	beq.w	8003856 <__sfvwrite_r+0x62>
 800396a:	2e00      	cmp	r6, #0
 800396c:	d1d4      	bne.n	8003918 <__sfvwrite_r+0x124>
 800396e:	f10a 0308 	add.w	r3, sl, #8
 8003972:	e953 5602 	ldrd	r5, r6, [r3, #-8]
 8003976:	469a      	mov	sl, r3
 8003978:	3308      	adds	r3, #8
 800397a:	2e00      	cmp	r6, #0
 800397c:	d0f9      	beq.n	8003972 <__sfvwrite_r+0x17e>
 800397e:	4632      	mov	r2, r6
 8003980:	210a      	movs	r1, #10
 8003982:	4628      	mov	r0, r5
 8003984:	f000 fc5c 	bl	8004240 <memchr>
 8003988:	2800      	cmp	r0, #0
 800398a:	f000 809c 	beq.w	8003ac6 <__sfvwrite_r+0x2d2>
 800398e:	3001      	adds	r0, #1
 8003990:	eba0 0905 	sub.w	r9, r0, r5
 8003994:	e7c1      	b.n	800391a <__sfvwrite_r+0x126>
 8003996:	6820      	ldr	r0, [r4, #0]
 8003998:	6923      	ldr	r3, [r4, #16]
 800399a:	4298      	cmp	r0, r3
 800399c:	d816      	bhi.n	80039cc <__sfvwrite_r+0x1d8>
 800399e:	6963      	ldr	r3, [r4, #20]
 80039a0:	42b3      	cmp	r3, r6
 80039a2:	d813      	bhi.n	80039cc <__sfvwrite_r+0x1d8>
 80039a4:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80039a8:	42b2      	cmp	r2, r6
 80039aa:	bf28      	it	cs
 80039ac:	4632      	movcs	r2, r6
 80039ae:	69e1      	ldr	r1, [r4, #28]
 80039b0:	fb92 f2f3 	sdiv	r2, r2, r3
 80039b4:	6a67      	ldr	r7, [r4, #36]	; 0x24
 80039b6:	fb02 f303 	mul.w	r3, r2, r3
 80039ba:	4640      	mov	r0, r8
 80039bc:	464a      	mov	r2, r9
 80039be:	47b8      	blx	r7
 80039c0:	f1b0 0a00 	subs.w	sl, r0, #0
 80039c4:	dd95      	ble.n	80038f2 <__sfvwrite_r+0xfe>
 80039c6:	eba6 060a 	sub.w	r6, r6, sl
 80039ca:	e778      	b.n	80038be <__sfvwrite_r+0xca>
 80039cc:	45b3      	cmp	fp, r6
 80039ce:	46da      	mov	sl, fp
 80039d0:	bf28      	it	cs
 80039d2:	46b2      	movcs	sl, r6
 80039d4:	4652      	mov	r2, sl
 80039d6:	4649      	mov	r1, r9
 80039d8:	f000 fd1c 	bl	8004414 <memmove>
 80039dc:	68a3      	ldr	r3, [r4, #8]
 80039de:	6822      	ldr	r2, [r4, #0]
 80039e0:	eba3 030a 	sub.w	r3, r3, sl
 80039e4:	4452      	add	r2, sl
 80039e6:	60a3      	str	r3, [r4, #8]
 80039e8:	6022      	str	r2, [r4, #0]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d1eb      	bne.n	80039c6 <__sfvwrite_r+0x1d2>
 80039ee:	4621      	mov	r1, r4
 80039f0:	4640      	mov	r0, r8
 80039f2:	f7ff fc5f 	bl	80032b4 <_fflush_r>
 80039f6:	2800      	cmp	r0, #0
 80039f8:	d0e5      	beq.n	80039c6 <__sfvwrite_r+0x1d2>
 80039fa:	e77a      	b.n	80038f2 <__sfvwrite_r+0xfe>
 80039fc:	6820      	ldr	r0, [r4, #0]
 80039fe:	46b3      	mov	fp, r6
 8003a00:	4632      	mov	r2, r6
 8003a02:	e74e      	b.n	80038a2 <__sfvwrite_r+0xae>
 8003a04:	4629      	mov	r1, r5
 8003a06:	9201      	str	r2, [sp, #4]
 8003a08:	f000 fd04 	bl	8004414 <memmove>
 8003a0c:	9a01      	ldr	r2, [sp, #4]
 8003a0e:	68a3      	ldr	r3, [r4, #8]
 8003a10:	1a9b      	subs	r3, r3, r2
 8003a12:	60a3      	str	r3, [r4, #8]
 8003a14:	6823      	ldr	r3, [r4, #0]
 8003a16:	4413      	add	r3, r2
 8003a18:	6023      	str	r3, [r4, #0]
 8003a1a:	4693      	mov	fp, r2
 8003a1c:	e796      	b.n	800394c <__sfvwrite_r+0x158>
 8003a1e:	6823      	ldr	r3, [r4, #0]
 8003a20:	6921      	ldr	r1, [r4, #16]
 8003a22:	eba3 0b01 	sub.w	fp, r3, r1
 8003a26:	6963      	ldr	r3, [r4, #20]
 8003a28:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
 8003a2c:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
 8003a30:	f10b 0301 	add.w	r3, fp, #1
 8003a34:	ea4f 0a6a 	mov.w	sl, sl, asr #1
 8003a38:	4433      	add	r3, r6
 8003a3a:	4553      	cmp	r3, sl
 8003a3c:	4652      	mov	r2, sl
 8003a3e:	bf84      	itt	hi
 8003a40:	469a      	movhi	sl, r3
 8003a42:	4652      	movhi	r2, sl
 8003a44:	0543      	lsls	r3, r0, #21
 8003a46:	d52c      	bpl.n	8003aa2 <__sfvwrite_r+0x2ae>
 8003a48:	4611      	mov	r1, r2
 8003a4a:	4640      	mov	r0, r8
 8003a4c:	f000 f948 	bl	8003ce0 <_malloc_r>
 8003a50:	2800      	cmp	r0, #0
 8003a52:	d03b      	beq.n	8003acc <__sfvwrite_r+0x2d8>
 8003a54:	465a      	mov	r2, fp
 8003a56:	6921      	ldr	r1, [r4, #16]
 8003a58:	9001      	str	r0, [sp, #4]
 8003a5a:	f000 fc41 	bl	80042e0 <memcpy>
 8003a5e:	89a2      	ldrh	r2, [r4, #12]
 8003a60:	9b01      	ldr	r3, [sp, #4]
 8003a62:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8003a66:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003a6a:	81a2      	strh	r2, [r4, #12]
 8003a6c:	eb03 000b 	add.w	r0, r3, fp
 8003a70:	6123      	str	r3, [r4, #16]
 8003a72:	ebaa 030b 	sub.w	r3, sl, fp
 8003a76:	f8c4 a014 	str.w	sl, [r4, #20]
 8003a7a:	60a3      	str	r3, [r4, #8]
 8003a7c:	6020      	str	r0, [r4, #0]
 8003a7e:	46b3      	mov	fp, r6
 8003a80:	4632      	mov	r2, r6
 8003a82:	e70e      	b.n	80038a2 <__sfvwrite_r+0xae>
 8003a84:	4629      	mov	r1, r5
 8003a86:	465a      	mov	r2, fp
 8003a88:	f000 fcc4 	bl	8004414 <memmove>
 8003a8c:	6823      	ldr	r3, [r4, #0]
 8003a8e:	445b      	add	r3, fp
 8003a90:	6023      	str	r3, [r4, #0]
 8003a92:	4621      	mov	r1, r4
 8003a94:	4640      	mov	r0, r8
 8003a96:	f7ff fc0d 	bl	80032b4 <_fflush_r>
 8003a9a:	2800      	cmp	r0, #0
 8003a9c:	f43f af56 	beq.w	800394c <__sfvwrite_r+0x158>
 8003aa0:	e727      	b.n	80038f2 <__sfvwrite_r+0xfe>
 8003aa2:	4640      	mov	r0, r8
 8003aa4:	f001 fae2 	bl	800506c <_realloc_r>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2800      	cmp	r0, #0
 8003aac:	d1de      	bne.n	8003a6c <__sfvwrite_r+0x278>
 8003aae:	6921      	ldr	r1, [r4, #16]
 8003ab0:	4640      	mov	r0, r8
 8003ab2:	f7ff fd99 	bl	80035e8 <_free_r>
 8003ab6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003aba:	220c      	movs	r2, #12
 8003abc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ac0:	f8c8 2000 	str.w	r2, [r8]
 8003ac4:	e717      	b.n	80038f6 <__sfvwrite_r+0x102>
 8003ac6:	1c72      	adds	r2, r6, #1
 8003ac8:	4691      	mov	r9, r2
 8003aca:	e727      	b.n	800391c <__sfvwrite_r+0x128>
 8003acc:	220c      	movs	r2, #12
 8003ace:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ad2:	f8c8 2000 	str.w	r2, [r8]
 8003ad6:	e70e      	b.n	80038f6 <__sfvwrite_r+0x102>
 8003ad8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003adc:	e6bc      	b.n	8003858 <__sfvwrite_r+0x64>
 8003ade:	bf00      	nop
 8003ae0:	7ffffc00 	.word	0x7ffffc00

08003ae4 <_fwalk>:
 8003ae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ae8:	4688      	mov	r8, r1
 8003aea:	f500 7738 	add.w	r7, r0, #736	; 0x2e0
 8003aee:	2600      	movs	r6, #0
 8003af0:	e9d7 5401 	ldrd	r5, r4, [r7, #4]
 8003af4:	3d01      	subs	r5, #1
 8003af6:	d40f      	bmi.n	8003b18 <_fwalk+0x34>
 8003af8:	89a3      	ldrh	r3, [r4, #12]
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8003b00:	d906      	bls.n	8003b10 <_fwalk+0x2c>
 8003b02:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8003b06:	3301      	adds	r3, #1
 8003b08:	4620      	mov	r0, r4
 8003b0a:	d001      	beq.n	8003b10 <_fwalk+0x2c>
 8003b0c:	47c0      	blx	r8
 8003b0e:	4306      	orrs	r6, r0
 8003b10:	1c6b      	adds	r3, r5, #1
 8003b12:	f104 0468 	add.w	r4, r4, #104	; 0x68
 8003b16:	d1ef      	bne.n	8003af8 <_fwalk+0x14>
 8003b18:	683f      	ldr	r7, [r7, #0]
 8003b1a:	2f00      	cmp	r7, #0
 8003b1c:	d1e8      	bne.n	8003af0 <_fwalk+0xc>
 8003b1e:	4630      	mov	r0, r6
 8003b20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003b24 <_fwalk_reent>:
 8003b24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b28:	4607      	mov	r7, r0
 8003b2a:	4688      	mov	r8, r1
 8003b2c:	f500 7638 	add.w	r6, r0, #736	; 0x2e0
 8003b30:	f04f 0900 	mov.w	r9, #0
 8003b34:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
 8003b38:	3d01      	subs	r5, #1
 8003b3a:	d411      	bmi.n	8003b60 <_fwalk_reent+0x3c>
 8003b3c:	89a3      	ldrh	r3, [r4, #12]
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8003b44:	d908      	bls.n	8003b58 <_fwalk_reent+0x34>
 8003b46:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8003b4a:	3301      	adds	r3, #1
 8003b4c:	4621      	mov	r1, r4
 8003b4e:	d003      	beq.n	8003b58 <_fwalk_reent+0x34>
 8003b50:	4638      	mov	r0, r7
 8003b52:	47c0      	blx	r8
 8003b54:	ea49 0900 	orr.w	r9, r9, r0
 8003b58:	1c6b      	adds	r3, r5, #1
 8003b5a:	f104 0468 	add.w	r4, r4, #104	; 0x68
 8003b5e:	d1ed      	bne.n	8003b3c <_fwalk_reent+0x18>
 8003b60:	6836      	ldr	r6, [r6, #0]
 8003b62:	2e00      	cmp	r6, #0
 8003b64:	d1e6      	bne.n	8003b34 <_fwalk_reent+0x10>
 8003b66:	4648      	mov	r0, r9
 8003b68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08003b6c <__localeconv_l>:
 8003b6c:	30f0      	adds	r0, #240	; 0xf0
 8003b6e:	4770      	bx	lr

08003b70 <_localeconv_r>:
 8003b70:	4800      	ldr	r0, [pc, #0]	; (8003b74 <_localeconv_r+0x4>)
 8003b72:	4770      	bx	lr
 8003b74:	20000938 	.word	0x20000938

08003b78 <localeconv>:
 8003b78:	4800      	ldr	r0, [pc, #0]	; (8003b7c <localeconv+0x4>)
 8003b7a:	4770      	bx	lr
 8003b7c:	20000938 	.word	0x20000938

08003b80 <__smakebuf_r>:
 8003b80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b84:	898b      	ldrh	r3, [r1, #12]
 8003b86:	460c      	mov	r4, r1
 8003b88:	0799      	lsls	r1, r3, #30
 8003b8a:	b096      	sub	sp, #88	; 0x58
 8003b8c:	d508      	bpl.n	8003ba0 <__smakebuf_r+0x20>
 8003b8e:	f104 0343 	add.w	r3, r4, #67	; 0x43
 8003b92:	2201      	movs	r2, #1
 8003b94:	e9c4 3204 	strd	r3, r2, [r4, #16]
 8003b98:	6023      	str	r3, [r4, #0]
 8003b9a:	b016      	add	sp, #88	; 0x58
 8003b9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ba0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003ba4:	2900      	cmp	r1, #0
 8003ba6:	4606      	mov	r6, r0
 8003ba8:	db27      	blt.n	8003bfa <__smakebuf_r+0x7a>
 8003baa:	466a      	mov	r2, sp
 8003bac:	f004 fa07 	bl	8007fbe <_fstat_r>
 8003bb0:	2800      	cmp	r0, #0
 8003bb2:	db21      	blt.n	8003bf8 <__smakebuf_r+0x78>
 8003bb4:	9d01      	ldr	r5, [sp, #4]
 8003bb6:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
 8003bba:	f5a5 5500 	sub.w	r5, r5, #8192	; 0x2000
 8003bbe:	fab5 f585 	clz	r5, r5
 8003bc2:	f44f 6880 	mov.w	r8, #1024	; 0x400
 8003bc6:	096d      	lsrs	r5, r5, #5
 8003bc8:	f44f 6700 	mov.w	r7, #2048	; 0x800
 8003bcc:	4641      	mov	r1, r8
 8003bce:	4630      	mov	r0, r6
 8003bd0:	f000 f886 	bl	8003ce0 <_malloc_r>
 8003bd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003bd8:	b1f0      	cbz	r0, 8003c18 <__smakebuf_r+0x98>
 8003bda:	4a20      	ldr	r2, [pc, #128]	; (8003c5c <__smakebuf_r+0xdc>)
 8003bdc:	63f2      	str	r2, [r6, #60]	; 0x3c
 8003bde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003be2:	f8c4 8014 	str.w	r8, [r4, #20]
 8003be6:	81a3      	strh	r3, [r4, #12]
 8003be8:	6020      	str	r0, [r4, #0]
 8003bea:	6120      	str	r0, [r4, #16]
 8003bec:	bb35      	cbnz	r5, 8003c3c <__smakebuf_r+0xbc>
 8003bee:	433b      	orrs	r3, r7
 8003bf0:	81a3      	strh	r3, [r4, #12]
 8003bf2:	b016      	add	sp, #88	; 0x58
 8003bf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003bf8:	89a3      	ldrh	r3, [r4, #12]
 8003bfa:	f013 0580 	ands.w	r5, r3, #128	; 0x80
 8003bfe:	d019      	beq.n	8003c34 <__smakebuf_r+0xb4>
 8003c00:	f04f 0840 	mov.w	r8, #64	; 0x40
 8003c04:	4641      	mov	r1, r8
 8003c06:	4630      	mov	r0, r6
 8003c08:	f000 f86a 	bl	8003ce0 <_malloc_r>
 8003c0c:	2500      	movs	r5, #0
 8003c0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c12:	462f      	mov	r7, r5
 8003c14:	2800      	cmp	r0, #0
 8003c16:	d1e0      	bne.n	8003bda <__smakebuf_r+0x5a>
 8003c18:	059a      	lsls	r2, r3, #22
 8003c1a:	d4be      	bmi.n	8003b9a <__smakebuf_r+0x1a>
 8003c1c:	f023 0303 	bic.w	r3, r3, #3
 8003c20:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003c24:	f043 0302 	orr.w	r3, r3, #2
 8003c28:	2101      	movs	r1, #1
 8003c2a:	e9c4 2104 	strd	r2, r1, [r4, #16]
 8003c2e:	81a3      	strh	r3, [r4, #12]
 8003c30:	6022      	str	r2, [r4, #0]
 8003c32:	e7b2      	b.n	8003b9a <__smakebuf_r+0x1a>
 8003c34:	f44f 6880 	mov.w	r8, #1024	; 0x400
 8003c38:	462f      	mov	r7, r5
 8003c3a:	e7c7      	b.n	8003bcc <__smakebuf_r+0x4c>
 8003c3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003c40:	4630      	mov	r0, r6
 8003c42:	f004 f9c1 	bl	8007fc8 <_isatty_r>
 8003c46:	b910      	cbnz	r0, 8003c4e <__smakebuf_r+0xce>
 8003c48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c4c:	e7cf      	b.n	8003bee <__smakebuf_r+0x6e>
 8003c4e:	89a3      	ldrh	r3, [r4, #12]
 8003c50:	f023 0303 	bic.w	r3, r3, #3
 8003c54:	f043 0301 	orr.w	r3, r3, #1
 8003c58:	b21b      	sxth	r3, r3
 8003c5a:	e7c8      	b.n	8003bee <__smakebuf_r+0x6e>
 8003c5c:	08003335 	.word	0x08003335

08003c60 <__swhatbuf_r>:
 8003c60:	b570      	push	{r4, r5, r6, lr}
 8003c62:	460c      	mov	r4, r1
 8003c64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c68:	2900      	cmp	r1, #0
 8003c6a:	b096      	sub	sp, #88	; 0x58
 8003c6c:	4615      	mov	r5, r2
 8003c6e:	461e      	mov	r6, r3
 8003c70:	db14      	blt.n	8003c9c <__swhatbuf_r+0x3c>
 8003c72:	466a      	mov	r2, sp
 8003c74:	f004 f9a3 	bl	8007fbe <_fstat_r>
 8003c78:	2800      	cmp	r0, #0
 8003c7a:	db0f      	blt.n	8003c9c <__swhatbuf_r+0x3c>
 8003c7c:	9a01      	ldr	r2, [sp, #4]
 8003c7e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003c82:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
 8003c86:	fab2 f282 	clz	r2, r2
 8003c8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c8e:	0952      	lsrs	r2, r2, #5
 8003c90:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003c94:	6032      	str	r2, [r6, #0]
 8003c96:	602b      	str	r3, [r5, #0]
 8003c98:	b016      	add	sp, #88	; 0x58
 8003c9a:	bd70      	pop	{r4, r5, r6, pc}
 8003c9c:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	f011 0080 	ands.w	r0, r1, #128	; 0x80
 8003ca6:	6033      	str	r3, [r6, #0]
 8003ca8:	d004      	beq.n	8003cb4 <__swhatbuf_r+0x54>
 8003caa:	2240      	movs	r2, #64	; 0x40
 8003cac:	4618      	mov	r0, r3
 8003cae:	602a      	str	r2, [r5, #0]
 8003cb0:	b016      	add	sp, #88	; 0x58
 8003cb2:	bd70      	pop	{r4, r5, r6, pc}
 8003cb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003cb8:	602b      	str	r3, [r5, #0]
 8003cba:	b016      	add	sp, #88	; 0x58
 8003cbc:	bd70      	pop	{r4, r5, r6, pc}
 8003cbe:	bf00      	nop

08003cc0 <malloc>:
 8003cc0:	4b02      	ldr	r3, [pc, #8]	; (8003ccc <malloc+0xc>)
 8003cc2:	4601      	mov	r1, r0
 8003cc4:	6818      	ldr	r0, [r3, #0]
 8003cc6:	f000 b80b 	b.w	8003ce0 <_malloc_r>
 8003cca:	bf00      	nop
 8003ccc:	20000008 	.word	0x20000008

08003cd0 <free>:
 8003cd0:	4b02      	ldr	r3, [pc, #8]	; (8003cdc <free+0xc>)
 8003cd2:	4601      	mov	r1, r0
 8003cd4:	6818      	ldr	r0, [r3, #0]
 8003cd6:	f7ff bc87 	b.w	80035e8 <_free_r>
 8003cda:	bf00      	nop
 8003cdc:	20000008 	.word	0x20000008

08003ce0 <_malloc_r>:
 8003ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ce4:	f101 060b 	add.w	r6, r1, #11
 8003ce8:	2e16      	cmp	r6, #22
 8003cea:	b083      	sub	sp, #12
 8003cec:	4604      	mov	r4, r0
 8003cee:	d824      	bhi.n	8003d3a <_malloc_r+0x5a>
 8003cf0:	2910      	cmp	r1, #16
 8003cf2:	f200 80ba 	bhi.w	8003e6a <_malloc_r+0x18a>
 8003cf6:	f000 fc09 	bl	800450c <__malloc_lock>
 8003cfa:	2610      	movs	r6, #16
 8003cfc:	2218      	movs	r2, #24
 8003cfe:	2002      	movs	r0, #2
 8003d00:	4fb7      	ldr	r7, [pc, #732]	; (8003fe0 <_malloc_r+0x300>)
 8003d02:	443a      	add	r2, r7
 8003d04:	f1a2 0108 	sub.w	r1, r2, #8
 8003d08:	6853      	ldr	r3, [r2, #4]
 8003d0a:	428b      	cmp	r3, r1
 8003d0c:	f000 80ba 	beq.w	8003e84 <_malloc_r+0x1a4>
 8003d10:	685a      	ldr	r2, [r3, #4]
 8003d12:	68d9      	ldr	r1, [r3, #12]
 8003d14:	f022 0203 	bic.w	r2, r2, #3
 8003d18:	441a      	add	r2, r3
 8003d1a:	689d      	ldr	r5, [r3, #8]
 8003d1c:	60e9      	str	r1, [r5, #12]
 8003d1e:	608d      	str	r5, [r1, #8]
 8003d20:	6851      	ldr	r1, [r2, #4]
 8003d22:	f041 0101 	orr.w	r1, r1, #1
 8003d26:	4620      	mov	r0, r4
 8003d28:	6051      	str	r1, [r2, #4]
 8003d2a:	f103 0508 	add.w	r5, r3, #8
 8003d2e:	f000 fbef 	bl	8004510 <__malloc_unlock>
 8003d32:	4628      	mov	r0, r5
 8003d34:	b003      	add	sp, #12
 8003d36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d3a:	f036 0607 	bics.w	r6, r6, #7
 8003d3e:	f100 8094 	bmi.w	8003e6a <_malloc_r+0x18a>
 8003d42:	42b1      	cmp	r1, r6
 8003d44:	f200 8091 	bhi.w	8003e6a <_malloc_r+0x18a>
 8003d48:	f000 fbe0 	bl	800450c <__malloc_lock>
 8003d4c:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
 8003d50:	f0c0 8196 	bcc.w	8004080 <_malloc_r+0x3a0>
 8003d54:	0a73      	lsrs	r3, r6, #9
 8003d56:	f000 808f 	beq.w	8003e78 <_malloc_r+0x198>
 8003d5a:	2b04      	cmp	r3, #4
 8003d5c:	f200 816b 	bhi.w	8004036 <_malloc_r+0x356>
 8003d60:	09b3      	lsrs	r3, r6, #6
 8003d62:	f103 0039 	add.w	r0, r3, #57	; 0x39
 8003d66:	f103 0c38 	add.w	ip, r3, #56	; 0x38
 8003d6a:	00c3      	lsls	r3, r0, #3
 8003d6c:	4f9c      	ldr	r7, [pc, #624]	; (8003fe0 <_malloc_r+0x300>)
 8003d6e:	443b      	add	r3, r7
 8003d70:	f1a3 0508 	sub.w	r5, r3, #8
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	429d      	cmp	r5, r3
 8003d78:	d106      	bne.n	8003d88 <_malloc_r+0xa8>
 8003d7a:	e00c      	b.n	8003d96 <_malloc_r+0xb6>
 8003d7c:	2900      	cmp	r1, #0
 8003d7e:	f280 812b 	bge.w	8003fd8 <_malloc_r+0x2f8>
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	429d      	cmp	r5, r3
 8003d86:	d006      	beq.n	8003d96 <_malloc_r+0xb6>
 8003d88:	685a      	ldr	r2, [r3, #4]
 8003d8a:	f022 0203 	bic.w	r2, r2, #3
 8003d8e:	1b91      	subs	r1, r2, r6
 8003d90:	290f      	cmp	r1, #15
 8003d92:	ddf3      	ble.n	8003d7c <_malloc_r+0x9c>
 8003d94:	4660      	mov	r0, ip
 8003d96:	693d      	ldr	r5, [r7, #16]
 8003d98:	f8df c248 	ldr.w	ip, [pc, #584]	; 8003fe4 <_malloc_r+0x304>
 8003d9c:	4565      	cmp	r5, ip
 8003d9e:	d07c      	beq.n	8003e9a <_malloc_r+0x1ba>
 8003da0:	686a      	ldr	r2, [r5, #4]
 8003da2:	f022 0203 	bic.w	r2, r2, #3
 8003da6:	1b93      	subs	r3, r2, r6
 8003da8:	2b0f      	cmp	r3, #15
 8003daa:	f300 8177 	bgt.w	800409c <_malloc_r+0x3bc>
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	e9c7 cc04 	strd	ip, ip, [r7, #16]
 8003db4:	f280 8168 	bge.w	8004088 <_malloc_r+0x3a8>
 8003db8:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8003dbc:	f080 8116 	bcs.w	8003fec <_malloc_r+0x30c>
 8003dc0:	08d3      	lsrs	r3, r2, #3
 8003dc2:	6879      	ldr	r1, [r7, #4]
 8003dc4:	3301      	adds	r3, #1
 8003dc6:	ea4f 1e52 	mov.w	lr, r2, lsr #5
 8003dca:	2201      	movs	r2, #1
 8003dcc:	fa02 f20e 	lsl.w	r2, r2, lr
 8003dd0:	430a      	orrs	r2, r1
 8003dd2:	f857 e033 	ldr.w	lr, [r7, r3, lsl #3]
 8003dd6:	f8c5 e008 	str.w	lr, [r5, #8]
 8003dda:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
 8003dde:	3908      	subs	r1, #8
 8003de0:	60e9      	str	r1, [r5, #12]
 8003de2:	607a      	str	r2, [r7, #4]
 8003de4:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
 8003de8:	f8ce 500c 	str.w	r5, [lr, #12]
 8003dec:	1083      	asrs	r3, r0, #2
 8003dee:	2101      	movs	r1, #1
 8003df0:	4099      	lsls	r1, r3
 8003df2:	4291      	cmp	r1, r2
 8003df4:	d857      	bhi.n	8003ea6 <_malloc_r+0x1c6>
 8003df6:	4211      	tst	r1, r2
 8003df8:	d106      	bne.n	8003e08 <_malloc_r+0x128>
 8003dfa:	f020 0003 	bic.w	r0, r0, #3
 8003dfe:	0049      	lsls	r1, r1, #1
 8003e00:	4211      	tst	r1, r2
 8003e02:	f100 0004 	add.w	r0, r0, #4
 8003e06:	d0fa      	beq.n	8003dfe <_malloc_r+0x11e>
 8003e08:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
 8003e0c:	464d      	mov	r5, r9
 8003e0e:	4686      	mov	lr, r0
 8003e10:	f8d5 800c 	ldr.w	r8, [r5, #12]
 8003e14:	4545      	cmp	r5, r8
 8003e16:	d108      	bne.n	8003e2a <_malloc_r+0x14a>
 8003e18:	e119      	b.n	800404e <_malloc_r+0x36e>
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	f280 8120 	bge.w	8004060 <_malloc_r+0x380>
 8003e20:	f8d8 800c 	ldr.w	r8, [r8, #12]
 8003e24:	4545      	cmp	r5, r8
 8003e26:	f000 8112 	beq.w	800404e <_malloc_r+0x36e>
 8003e2a:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8003e2e:	f022 0203 	bic.w	r2, r2, #3
 8003e32:	1b93      	subs	r3, r2, r6
 8003e34:	2b0f      	cmp	r3, #15
 8003e36:	ddf0      	ble.n	8003e1a <_malloc_r+0x13a>
 8003e38:	4620      	mov	r0, r4
 8003e3a:	e9d8 5402 	ldrd	r5, r4, [r8, #8]
 8003e3e:	eb08 0106 	add.w	r1, r8, r6
 8003e42:	f046 0601 	orr.w	r6, r6, #1
 8003e46:	f8c8 6004 	str.w	r6, [r8, #4]
 8003e4a:	60ec      	str	r4, [r5, #12]
 8003e4c:	60a5      	str	r5, [r4, #8]
 8003e4e:	f043 0401 	orr.w	r4, r3, #1
 8003e52:	e9c7 1104 	strd	r1, r1, [r7, #16]
 8003e56:	e9c1 cc02 	strd	ip, ip, [r1, #8]
 8003e5a:	604c      	str	r4, [r1, #4]
 8003e5c:	f848 3002 	str.w	r3, [r8, r2]
 8003e60:	f000 fb56 	bl	8004510 <__malloc_unlock>
 8003e64:	f108 0508 	add.w	r5, r8, #8
 8003e68:	e002      	b.n	8003e70 <_malloc_r+0x190>
 8003e6a:	230c      	movs	r3, #12
 8003e6c:	6023      	str	r3, [r4, #0]
 8003e6e:	2500      	movs	r5, #0
 8003e70:	4628      	mov	r0, r5
 8003e72:	b003      	add	sp, #12
 8003e74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e7c:	2040      	movs	r0, #64	; 0x40
 8003e7e:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
 8003e82:	e773      	b.n	8003d6c <_malloc_r+0x8c>
 8003e84:	68d3      	ldr	r3, [r2, #12]
 8003e86:	429a      	cmp	r2, r3
 8003e88:	bf08      	it	eq
 8003e8a:	3002      	addeq	r0, #2
 8003e8c:	f47f af40 	bne.w	8003d10 <_malloc_r+0x30>
 8003e90:	693d      	ldr	r5, [r7, #16]
 8003e92:	f8df c150 	ldr.w	ip, [pc, #336]	; 8003fe4 <_malloc_r+0x304>
 8003e96:	4565      	cmp	r5, ip
 8003e98:	d182      	bne.n	8003da0 <_malloc_r+0xc0>
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	1083      	asrs	r3, r0, #2
 8003e9e:	2101      	movs	r1, #1
 8003ea0:	4099      	lsls	r1, r3
 8003ea2:	4291      	cmp	r1, r2
 8003ea4:	d9a7      	bls.n	8003df6 <_malloc_r+0x116>
 8003ea6:	68bd      	ldr	r5, [r7, #8]
 8003ea8:	686b      	ldr	r3, [r5, #4]
 8003eaa:	f023 0803 	bic.w	r8, r3, #3
 8003eae:	4546      	cmp	r6, r8
 8003eb0:	d803      	bhi.n	8003eba <_malloc_r+0x1da>
 8003eb2:	eba8 0306 	sub.w	r3, r8, r6
 8003eb6:	2b0f      	cmp	r3, #15
 8003eb8:	dc7e      	bgt.n	8003fb8 <_malloc_r+0x2d8>
 8003eba:	f8df 912c 	ldr.w	r9, [pc, #300]	; 8003fe8 <_malloc_r+0x308>
 8003ebe:	f8d7 2408 	ldr.w	r2, [r7, #1032]	; 0x408
 8003ec2:	f8d9 3000 	ldr.w	r3, [r9]
 8003ec6:	3201      	adds	r2, #1
 8003ec8:	4433      	add	r3, r6
 8003eca:	eb05 0a08 	add.w	sl, r5, r8
 8003ece:	f000 812f 	beq.w	8004130 <_malloc_r+0x450>
 8003ed2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ed6:	330f      	adds	r3, #15
 8003ed8:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
 8003edc:	f02b 0b0f 	bic.w	fp, fp, #15
 8003ee0:	4659      	mov	r1, fp
 8003ee2:	4620      	mov	r0, r4
 8003ee4:	f004 f850 	bl	8007f88 <_sbrk_r>
 8003ee8:	1c41      	adds	r1, r0, #1
 8003eea:	4602      	mov	r2, r0
 8003eec:	f000 80ef 	beq.w	80040ce <_malloc_r+0x3ee>
 8003ef0:	4582      	cmp	sl, r0
 8003ef2:	f200 80ea 	bhi.w	80040ca <_malloc_r+0x3ea>
 8003ef6:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8003efa:	4459      	add	r1, fp
 8003efc:	f8c9 1004 	str.w	r1, [r9, #4]
 8003f00:	460b      	mov	r3, r1
 8003f02:	f000 814b 	beq.w	800419c <_malloc_r+0x4bc>
 8003f06:	f8d7 1408 	ldr.w	r1, [r7, #1032]	; 0x408
 8003f0a:	3101      	adds	r1, #1
 8003f0c:	bf1b      	ittet	ne
 8003f0e:	eba2 0a0a 	subne.w	sl, r2, sl
 8003f12:	4453      	addne	r3, sl
 8003f14:	f8c7 2408 	streq.w	r2, [r7, #1032]	; 0x408
 8003f18:	f8c9 3004 	strne.w	r3, [r9, #4]
 8003f1c:	f012 0307 	ands.w	r3, r2, #7
 8003f20:	f000 8112 	beq.w	8004148 <_malloc_r+0x468>
 8003f24:	f1c3 0108 	rsb	r1, r3, #8
 8003f28:	440a      	add	r2, r1
 8003f2a:	f5c3 5180 	rsb	r1, r3, #4096	; 0x1000
 8003f2e:	4493      	add	fp, r2
 8003f30:	3108      	adds	r1, #8
 8003f32:	eba1 010b 	sub.w	r1, r1, fp
 8003f36:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
 8003f3a:	4651      	mov	r1, sl
 8003f3c:	4620      	mov	r0, r4
 8003f3e:	9201      	str	r2, [sp, #4]
 8003f40:	9300      	str	r3, [sp, #0]
 8003f42:	f004 f821 	bl	8007f88 <_sbrk_r>
 8003f46:	1c42      	adds	r2, r0, #1
 8003f48:	e9dd 3200 	ldrd	r3, r2, [sp]
 8003f4c:	f000 814b 	beq.w	80041e6 <_malloc_r+0x506>
 8003f50:	1a83      	subs	r3, r0, r2
 8003f52:	eb03 0b0a 	add.w	fp, r3, sl
 8003f56:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8003f5a:	60ba      	str	r2, [r7, #8]
 8003f5c:	f04b 0301 	orr.w	r3, fp, #1
 8003f60:	eb0a 0100 	add.w	r1, sl, r0
 8003f64:	42bd      	cmp	r5, r7
 8003f66:	6053      	str	r3, [r2, #4]
 8003f68:	f8c9 1004 	str.w	r1, [r9, #4]
 8003f6c:	f000 8122 	beq.w	80041b4 <_malloc_r+0x4d4>
 8003f70:	f1b8 0f0f 	cmp.w	r8, #15
 8003f74:	f240 8120 	bls.w	80041b8 <_malloc_r+0x4d8>
 8003f78:	686b      	ldr	r3, [r5, #4]
 8003f7a:	f1a8 000c 	sub.w	r0, r8, #12
 8003f7e:	f020 0007 	bic.w	r0, r0, #7
 8003f82:	f003 0301 	and.w	r3, r3, #1
 8003f86:	4303      	orrs	r3, r0
 8003f88:	606b      	str	r3, [r5, #4]
 8003f8a:	f04f 0c05 	mov.w	ip, #5
 8003f8e:	182b      	adds	r3, r5, r0
 8003f90:	280f      	cmp	r0, #15
 8003f92:	e9c3 cc01 	strd	ip, ip, [r3, #4]
 8003f96:	f200 812d 	bhi.w	80041f4 <_malloc_r+0x514>
 8003f9a:	6853      	ldr	r3, [r2, #4]
 8003f9c:	4615      	mov	r5, r2
 8003f9e:	f8d9 202c 	ldr.w	r2, [r9, #44]	; 0x2c
 8003fa2:	428a      	cmp	r2, r1
 8003fa4:	f8d9 2030 	ldr.w	r2, [r9, #48]	; 0x30
 8003fa8:	bf38      	it	cc
 8003faa:	f8c9 102c 	strcc.w	r1, [r9, #44]	; 0x2c
 8003fae:	428a      	cmp	r2, r1
 8003fb0:	bf38      	it	cc
 8003fb2:	f8c9 1030 	strcc.w	r1, [r9, #48]	; 0x30
 8003fb6:	e08c      	b.n	80040d2 <_malloc_r+0x3f2>
 8003fb8:	19aa      	adds	r2, r5, r6
 8003fba:	f043 0301 	orr.w	r3, r3, #1
 8003fbe:	f046 0601 	orr.w	r6, r6, #1
 8003fc2:	606e      	str	r6, [r5, #4]
 8003fc4:	4620      	mov	r0, r4
 8003fc6:	60ba      	str	r2, [r7, #8]
 8003fc8:	6053      	str	r3, [r2, #4]
 8003fca:	f000 faa1 	bl	8004510 <__malloc_unlock>
 8003fce:	3508      	adds	r5, #8
 8003fd0:	4628      	mov	r0, r5
 8003fd2:	b003      	add	sp, #12
 8003fd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fd8:	68d9      	ldr	r1, [r3, #12]
 8003fda:	441a      	add	r2, r3
 8003fdc:	e69d      	b.n	8003d1a <_malloc_r+0x3a>
 8003fde:	bf00      	nop
 8003fe0:	20000438 	.word	0x20000438
 8003fe4:	20000440 	.word	0x20000440
 8003fe8:	20000c40 	.word	0x20000c40
 8003fec:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
 8003ff0:	ea4f 2352 	mov.w	r3, r2, lsr #9
 8003ff4:	d363      	bcc.n	80040be <_malloc_r+0x3de>
 8003ff6:	2b14      	cmp	r3, #20
 8003ff8:	f200 80b8 	bhi.w	800416c <_malloc_r+0x48c>
 8003ffc:	f103 015c 	add.w	r1, r3, #92	; 0x5c
 8004000:	00c9      	lsls	r1, r1, #3
 8004002:	335b      	adds	r3, #91	; 0x5b
 8004004:	eb07 0e01 	add.w	lr, r7, r1
 8004008:	5879      	ldr	r1, [r7, r1]
 800400a:	f1ae 0e08 	sub.w	lr, lr, #8
 800400e:	458e      	cmp	lr, r1
 8004010:	f000 8091 	beq.w	8004136 <_malloc_r+0x456>
 8004014:	684b      	ldr	r3, [r1, #4]
 8004016:	f023 0303 	bic.w	r3, r3, #3
 800401a:	4293      	cmp	r3, r2
 800401c:	d902      	bls.n	8004024 <_malloc_r+0x344>
 800401e:	6889      	ldr	r1, [r1, #8]
 8004020:	458e      	cmp	lr, r1
 8004022:	d1f7      	bne.n	8004014 <_malloc_r+0x334>
 8004024:	f8d1 e00c 	ldr.w	lr, [r1, #12]
 8004028:	687a      	ldr	r2, [r7, #4]
 800402a:	e9c5 1e02 	strd	r1, lr, [r5, #8]
 800402e:	f8ce 5008 	str.w	r5, [lr, #8]
 8004032:	60cd      	str	r5, [r1, #12]
 8004034:	e6da      	b.n	8003dec <_malloc_r+0x10c>
 8004036:	2b14      	cmp	r3, #20
 8004038:	d959      	bls.n	80040ee <_malloc_r+0x40e>
 800403a:	2b54      	cmp	r3, #84	; 0x54
 800403c:	f200 809e 	bhi.w	800417c <_malloc_r+0x49c>
 8004040:	0b33      	lsrs	r3, r6, #12
 8004042:	f103 006f 	add.w	r0, r3, #111	; 0x6f
 8004046:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
 800404a:	00c3      	lsls	r3, r0, #3
 800404c:	e68e      	b.n	8003d6c <_malloc_r+0x8c>
 800404e:	f10e 0e01 	add.w	lr, lr, #1
 8004052:	f01e 0f03 	tst.w	lr, #3
 8004056:	f105 0508 	add.w	r5, r5, #8
 800405a:	f47f aed9 	bne.w	8003e10 <_malloc_r+0x130>
 800405e:	e051      	b.n	8004104 <_malloc_r+0x424>
 8004060:	4442      	add	r2, r8
 8004062:	4645      	mov	r5, r8
 8004064:	6853      	ldr	r3, [r2, #4]
 8004066:	f8d8 100c 	ldr.w	r1, [r8, #12]
 800406a:	f043 0301 	orr.w	r3, r3, #1
 800406e:	6053      	str	r3, [r2, #4]
 8004070:	f855 3f08 	ldr.w	r3, [r5, #8]!
 8004074:	4620      	mov	r0, r4
 8004076:	60d9      	str	r1, [r3, #12]
 8004078:	608b      	str	r3, [r1, #8]
 800407a:	f000 fa49 	bl	8004510 <__malloc_unlock>
 800407e:	e6f7      	b.n	8003e70 <_malloc_r+0x190>
 8004080:	08f0      	lsrs	r0, r6, #3
 8004082:	f106 0208 	add.w	r2, r6, #8
 8004086:	e63b      	b.n	8003d00 <_malloc_r+0x20>
 8004088:	442a      	add	r2, r5
 800408a:	4620      	mov	r0, r4
 800408c:	6853      	ldr	r3, [r2, #4]
 800408e:	f043 0301 	orr.w	r3, r3, #1
 8004092:	6053      	str	r3, [r2, #4]
 8004094:	3508      	adds	r5, #8
 8004096:	f000 fa3b 	bl	8004510 <__malloc_unlock>
 800409a:	e6e9      	b.n	8003e70 <_malloc_r+0x190>
 800409c:	19a9      	adds	r1, r5, r6
 800409e:	4620      	mov	r0, r4
 80040a0:	f046 0601 	orr.w	r6, r6, #1
 80040a4:	f043 0401 	orr.w	r4, r3, #1
 80040a8:	606e      	str	r6, [r5, #4]
 80040aa:	e9c7 1104 	strd	r1, r1, [r7, #16]
 80040ae:	e9c1 cc02 	strd	ip, ip, [r1, #8]
 80040b2:	604c      	str	r4, [r1, #4]
 80040b4:	50ab      	str	r3, [r5, r2]
 80040b6:	f000 fa2b 	bl	8004510 <__malloc_unlock>
 80040ba:	3508      	adds	r5, #8
 80040bc:	e6d8      	b.n	8003e70 <_malloc_r+0x190>
 80040be:	0993      	lsrs	r3, r2, #6
 80040c0:	f103 0139 	add.w	r1, r3, #57	; 0x39
 80040c4:	00c9      	lsls	r1, r1, #3
 80040c6:	3338      	adds	r3, #56	; 0x38
 80040c8:	e79c      	b.n	8004004 <_malloc_r+0x324>
 80040ca:	42bd      	cmp	r5, r7
 80040cc:	d060      	beq.n	8004190 <_malloc_r+0x4b0>
 80040ce:	68bd      	ldr	r5, [r7, #8]
 80040d0:	686b      	ldr	r3, [r5, #4]
 80040d2:	f023 0b03 	bic.w	fp, r3, #3
 80040d6:	455e      	cmp	r6, fp
 80040d8:	ebab 0306 	sub.w	r3, fp, r6
 80040dc:	d802      	bhi.n	80040e4 <_malloc_r+0x404>
 80040de:	2b0f      	cmp	r3, #15
 80040e0:	f73f af6a 	bgt.w	8003fb8 <_malloc_r+0x2d8>
 80040e4:	4620      	mov	r0, r4
 80040e6:	f000 fa13 	bl	8004510 <__malloc_unlock>
 80040ea:	2500      	movs	r5, #0
 80040ec:	e6c0      	b.n	8003e70 <_malloc_r+0x190>
 80040ee:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 80040f2:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
 80040f6:	00c3      	lsls	r3, r0, #3
 80040f8:	e638      	b.n	8003d6c <_malloc_r+0x8c>
 80040fa:	f859 3908 	ldr.w	r3, [r9], #-8
 80040fe:	454b      	cmp	r3, r9
 8004100:	f040 8096 	bne.w	8004230 <_malloc_r+0x550>
 8004104:	f010 0f03 	tst.w	r0, #3
 8004108:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 800410c:	d1f5      	bne.n	80040fa <_malloc_r+0x41a>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	ea23 0301 	bic.w	r3, r3, r1
 8004114:	607b      	str	r3, [r7, #4]
 8004116:	0049      	lsls	r1, r1, #1
 8004118:	4299      	cmp	r1, r3
 800411a:	f63f aec4 	bhi.w	8003ea6 <_malloc_r+0x1c6>
 800411e:	b919      	cbnz	r1, 8004128 <_malloc_r+0x448>
 8004120:	e6c1      	b.n	8003ea6 <_malloc_r+0x1c6>
 8004122:	0049      	lsls	r1, r1, #1
 8004124:	f10e 0e04 	add.w	lr, lr, #4
 8004128:	4219      	tst	r1, r3
 800412a:	d0fa      	beq.n	8004122 <_malloc_r+0x442>
 800412c:	4670      	mov	r0, lr
 800412e:	e66b      	b.n	8003e08 <_malloc_r+0x128>
 8004130:	f103 0b10 	add.w	fp, r3, #16
 8004134:	e6d4      	b.n	8003ee0 <_malloc_r+0x200>
 8004136:	109a      	asrs	r2, r3, #2
 8004138:	f04f 0801 	mov.w	r8, #1
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	fa08 f202 	lsl.w	r2, r8, r2
 8004142:	431a      	orrs	r2, r3
 8004144:	607a      	str	r2, [r7, #4]
 8004146:	e770      	b.n	800402a <_malloc_r+0x34a>
 8004148:	eb02 010b 	add.w	r1, r2, fp
 800414c:	4249      	negs	r1, r1
 800414e:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
 8004152:	4651      	mov	r1, sl
 8004154:	4620      	mov	r0, r4
 8004156:	9301      	str	r3, [sp, #4]
 8004158:	9200      	str	r2, [sp, #0]
 800415a:	f003 ff15 	bl	8007f88 <_sbrk_r>
 800415e:	1c43      	adds	r3, r0, #1
 8004160:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004164:	f47f aef4 	bne.w	8003f50 <_malloc_r+0x270>
 8004168:	469a      	mov	sl, r3
 800416a:	e6f4      	b.n	8003f56 <_malloc_r+0x276>
 800416c:	2b54      	cmp	r3, #84	; 0x54
 800416e:	d826      	bhi.n	80041be <_malloc_r+0x4de>
 8004170:	0b13      	lsrs	r3, r2, #12
 8004172:	f103 016f 	add.w	r1, r3, #111	; 0x6f
 8004176:	00c9      	lsls	r1, r1, #3
 8004178:	336e      	adds	r3, #110	; 0x6e
 800417a:	e743      	b.n	8004004 <_malloc_r+0x324>
 800417c:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8004180:	d826      	bhi.n	80041d0 <_malloc_r+0x4f0>
 8004182:	0bf3      	lsrs	r3, r6, #15
 8004184:	f103 0078 	add.w	r0, r3, #120	; 0x78
 8004188:	f103 0c77 	add.w	ip, r3, #119	; 0x77
 800418c:	00c3      	lsls	r3, r0, #3
 800418e:	e5ed      	b.n	8003d6c <_malloc_r+0x8c>
 8004190:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8004194:	445b      	add	r3, fp
 8004196:	f8c9 3004 	str.w	r3, [r9, #4]
 800419a:	e6b4      	b.n	8003f06 <_malloc_r+0x226>
 800419c:	f3ca 000b 	ubfx	r0, sl, #0, #12
 80041a0:	2800      	cmp	r0, #0
 80041a2:	f47f aeb0 	bne.w	8003f06 <_malloc_r+0x226>
 80041a6:	68bd      	ldr	r5, [r7, #8]
 80041a8:	eb08 030b 	add.w	r3, r8, fp
 80041ac:	f043 0301 	orr.w	r3, r3, #1
 80041b0:	606b      	str	r3, [r5, #4]
 80041b2:	e6f4      	b.n	8003f9e <_malloc_r+0x2be>
 80041b4:	4615      	mov	r5, r2
 80041b6:	e6f2      	b.n	8003f9e <_malloc_r+0x2be>
 80041b8:	2301      	movs	r3, #1
 80041ba:	6053      	str	r3, [r2, #4]
 80041bc:	e792      	b.n	80040e4 <_malloc_r+0x404>
 80041be:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 80041c2:	d821      	bhi.n	8004208 <_malloc_r+0x528>
 80041c4:	0bd3      	lsrs	r3, r2, #15
 80041c6:	f103 0178 	add.w	r1, r3, #120	; 0x78
 80041ca:	00c9      	lsls	r1, r1, #3
 80041cc:	3377      	adds	r3, #119	; 0x77
 80041ce:	e719      	b.n	8004004 <_malloc_r+0x324>
 80041d0:	f240 5254 	movw	r2, #1364	; 0x554
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d821      	bhi.n	800421c <_malloc_r+0x53c>
 80041d8:	0cb3      	lsrs	r3, r6, #18
 80041da:	f103 007d 	add.w	r0, r3, #125	; 0x7d
 80041de:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
 80041e2:	00c3      	lsls	r3, r0, #3
 80041e4:	e5c2      	b.n	8003d6c <_malloc_r+0x8c>
 80041e6:	3b08      	subs	r3, #8
 80041e8:	449b      	add	fp, r3
 80041ea:	ebab 0b02 	sub.w	fp, fp, r2
 80041ee:	f04f 0a00 	mov.w	sl, #0
 80041f2:	e6b0      	b.n	8003f56 <_malloc_r+0x276>
 80041f4:	f105 0108 	add.w	r1, r5, #8
 80041f8:	4620      	mov	r0, r4
 80041fa:	f7ff f9f5 	bl	80035e8 <_free_r>
 80041fe:	68bd      	ldr	r5, [r7, #8]
 8004200:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8004204:	686b      	ldr	r3, [r5, #4]
 8004206:	e6ca      	b.n	8003f9e <_malloc_r+0x2be>
 8004208:	f240 5154 	movw	r1, #1364	; 0x554
 800420c:	428b      	cmp	r3, r1
 800420e:	d80b      	bhi.n	8004228 <_malloc_r+0x548>
 8004210:	0c93      	lsrs	r3, r2, #18
 8004212:	f103 017d 	add.w	r1, r3, #125	; 0x7d
 8004216:	00c9      	lsls	r1, r1, #3
 8004218:	337c      	adds	r3, #124	; 0x7c
 800421a:	e6f3      	b.n	8004004 <_malloc_r+0x324>
 800421c:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 8004220:	207f      	movs	r0, #127	; 0x7f
 8004222:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
 8004226:	e5a1      	b.n	8003d6c <_malloc_r+0x8c>
 8004228:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 800422c:	237e      	movs	r3, #126	; 0x7e
 800422e:	e6e9      	b.n	8004004 <_malloc_r+0x324>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	e770      	b.n	8004116 <_malloc_r+0x436>
	...

08004240 <memchr>:
 8004240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8004244:	2a10      	cmp	r2, #16
 8004246:	db2b      	blt.n	80042a0 <memchr+0x60>
 8004248:	f010 0f07 	tst.w	r0, #7
 800424c:	d008      	beq.n	8004260 <memchr+0x20>
 800424e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8004252:	3a01      	subs	r2, #1
 8004254:	428b      	cmp	r3, r1
 8004256:	d02d      	beq.n	80042b4 <memchr+0x74>
 8004258:	f010 0f07 	tst.w	r0, #7
 800425c:	b342      	cbz	r2, 80042b0 <memchr+0x70>
 800425e:	d1f6      	bne.n	800424e <memchr+0xe>
 8004260:	b4f0      	push	{r4, r5, r6, r7}
 8004262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8004266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800426a:	f022 0407 	bic.w	r4, r2, #7
 800426e:	f07f 0700 	mvns.w	r7, #0
 8004272:	2300      	movs	r3, #0
 8004274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8004278:	3c08      	subs	r4, #8
 800427a:	ea85 0501 	eor.w	r5, r5, r1
 800427e:	ea86 0601 	eor.w	r6, r6, r1
 8004282:	fa85 f547 	uadd8	r5, r5, r7
 8004286:	faa3 f587 	sel	r5, r3, r7
 800428a:	fa86 f647 	uadd8	r6, r6, r7
 800428e:	faa5 f687 	sel	r6, r5, r7
 8004292:	b98e      	cbnz	r6, 80042b8 <memchr+0x78>
 8004294:	d1ee      	bne.n	8004274 <memchr+0x34>
 8004296:	bcf0      	pop	{r4, r5, r6, r7}
 8004298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800429c:	f002 0207 	and.w	r2, r2, #7
 80042a0:	b132      	cbz	r2, 80042b0 <memchr+0x70>
 80042a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80042a6:	3a01      	subs	r2, #1
 80042a8:	ea83 0301 	eor.w	r3, r3, r1
 80042ac:	b113      	cbz	r3, 80042b4 <memchr+0x74>
 80042ae:	d1f8      	bne.n	80042a2 <memchr+0x62>
 80042b0:	2000      	movs	r0, #0
 80042b2:	4770      	bx	lr
 80042b4:	3801      	subs	r0, #1
 80042b6:	4770      	bx	lr
 80042b8:	2d00      	cmp	r5, #0
 80042ba:	bf06      	itte	eq
 80042bc:	4635      	moveq	r5, r6
 80042be:	3803      	subeq	r0, #3
 80042c0:	3807      	subne	r0, #7
 80042c2:	f015 0f01 	tst.w	r5, #1
 80042c6:	d107      	bne.n	80042d8 <memchr+0x98>
 80042c8:	3001      	adds	r0, #1
 80042ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80042ce:	bf02      	ittt	eq
 80042d0:	3001      	addeq	r0, #1
 80042d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80042d6:	3001      	addeq	r0, #1
 80042d8:	bcf0      	pop	{r4, r5, r6, r7}
 80042da:	3801      	subs	r0, #1
 80042dc:	4770      	bx	lr
 80042de:	bf00      	nop

080042e0 <memcpy>:
 80042e0:	4684      	mov	ip, r0
 80042e2:	ea41 0300 	orr.w	r3, r1, r0
 80042e6:	f013 0303 	ands.w	r3, r3, #3
 80042ea:	d16d      	bne.n	80043c8 <memcpy+0xe8>
 80042ec:	3a40      	subs	r2, #64	; 0x40
 80042ee:	d341      	bcc.n	8004374 <memcpy+0x94>
 80042f0:	f851 3b04 	ldr.w	r3, [r1], #4
 80042f4:	f840 3b04 	str.w	r3, [r0], #4
 80042f8:	f851 3b04 	ldr.w	r3, [r1], #4
 80042fc:	f840 3b04 	str.w	r3, [r0], #4
 8004300:	f851 3b04 	ldr.w	r3, [r1], #4
 8004304:	f840 3b04 	str.w	r3, [r0], #4
 8004308:	f851 3b04 	ldr.w	r3, [r1], #4
 800430c:	f840 3b04 	str.w	r3, [r0], #4
 8004310:	f851 3b04 	ldr.w	r3, [r1], #4
 8004314:	f840 3b04 	str.w	r3, [r0], #4
 8004318:	f851 3b04 	ldr.w	r3, [r1], #4
 800431c:	f840 3b04 	str.w	r3, [r0], #4
 8004320:	f851 3b04 	ldr.w	r3, [r1], #4
 8004324:	f840 3b04 	str.w	r3, [r0], #4
 8004328:	f851 3b04 	ldr.w	r3, [r1], #4
 800432c:	f840 3b04 	str.w	r3, [r0], #4
 8004330:	f851 3b04 	ldr.w	r3, [r1], #4
 8004334:	f840 3b04 	str.w	r3, [r0], #4
 8004338:	f851 3b04 	ldr.w	r3, [r1], #4
 800433c:	f840 3b04 	str.w	r3, [r0], #4
 8004340:	f851 3b04 	ldr.w	r3, [r1], #4
 8004344:	f840 3b04 	str.w	r3, [r0], #4
 8004348:	f851 3b04 	ldr.w	r3, [r1], #4
 800434c:	f840 3b04 	str.w	r3, [r0], #4
 8004350:	f851 3b04 	ldr.w	r3, [r1], #4
 8004354:	f840 3b04 	str.w	r3, [r0], #4
 8004358:	f851 3b04 	ldr.w	r3, [r1], #4
 800435c:	f840 3b04 	str.w	r3, [r0], #4
 8004360:	f851 3b04 	ldr.w	r3, [r1], #4
 8004364:	f840 3b04 	str.w	r3, [r0], #4
 8004368:	f851 3b04 	ldr.w	r3, [r1], #4
 800436c:	f840 3b04 	str.w	r3, [r0], #4
 8004370:	3a40      	subs	r2, #64	; 0x40
 8004372:	d2bd      	bcs.n	80042f0 <memcpy+0x10>
 8004374:	3230      	adds	r2, #48	; 0x30
 8004376:	d311      	bcc.n	800439c <memcpy+0xbc>
 8004378:	f851 3b04 	ldr.w	r3, [r1], #4
 800437c:	f840 3b04 	str.w	r3, [r0], #4
 8004380:	f851 3b04 	ldr.w	r3, [r1], #4
 8004384:	f840 3b04 	str.w	r3, [r0], #4
 8004388:	f851 3b04 	ldr.w	r3, [r1], #4
 800438c:	f840 3b04 	str.w	r3, [r0], #4
 8004390:	f851 3b04 	ldr.w	r3, [r1], #4
 8004394:	f840 3b04 	str.w	r3, [r0], #4
 8004398:	3a10      	subs	r2, #16
 800439a:	d2ed      	bcs.n	8004378 <memcpy+0x98>
 800439c:	320c      	adds	r2, #12
 800439e:	d305      	bcc.n	80043ac <memcpy+0xcc>
 80043a0:	f851 3b04 	ldr.w	r3, [r1], #4
 80043a4:	f840 3b04 	str.w	r3, [r0], #4
 80043a8:	3a04      	subs	r2, #4
 80043aa:	d2f9      	bcs.n	80043a0 <memcpy+0xc0>
 80043ac:	3204      	adds	r2, #4
 80043ae:	d008      	beq.n	80043c2 <memcpy+0xe2>
 80043b0:	07d2      	lsls	r2, r2, #31
 80043b2:	bf1c      	itt	ne
 80043b4:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80043b8:	f800 3b01 	strbne.w	r3, [r0], #1
 80043bc:	d301      	bcc.n	80043c2 <memcpy+0xe2>
 80043be:	880b      	ldrh	r3, [r1, #0]
 80043c0:	8003      	strh	r3, [r0, #0]
 80043c2:	4660      	mov	r0, ip
 80043c4:	4770      	bx	lr
 80043c6:	bf00      	nop
 80043c8:	2a08      	cmp	r2, #8
 80043ca:	d313      	bcc.n	80043f4 <memcpy+0x114>
 80043cc:	078b      	lsls	r3, r1, #30
 80043ce:	d08d      	beq.n	80042ec <memcpy+0xc>
 80043d0:	f010 0303 	ands.w	r3, r0, #3
 80043d4:	d08a      	beq.n	80042ec <memcpy+0xc>
 80043d6:	f1c3 0304 	rsb	r3, r3, #4
 80043da:	1ad2      	subs	r2, r2, r3
 80043dc:	07db      	lsls	r3, r3, #31
 80043de:	bf1c      	itt	ne
 80043e0:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80043e4:	f800 3b01 	strbne.w	r3, [r0], #1
 80043e8:	d380      	bcc.n	80042ec <memcpy+0xc>
 80043ea:	f831 3b02 	ldrh.w	r3, [r1], #2
 80043ee:	f820 3b02 	strh.w	r3, [r0], #2
 80043f2:	e77b      	b.n	80042ec <memcpy+0xc>
 80043f4:	3a04      	subs	r2, #4
 80043f6:	d3d9      	bcc.n	80043ac <memcpy+0xcc>
 80043f8:	3a01      	subs	r2, #1
 80043fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80043fe:	f800 3b01 	strb.w	r3, [r0], #1
 8004402:	d2f9      	bcs.n	80043f8 <memcpy+0x118>
 8004404:	780b      	ldrb	r3, [r1, #0]
 8004406:	7003      	strb	r3, [r0, #0]
 8004408:	784b      	ldrb	r3, [r1, #1]
 800440a:	7043      	strb	r3, [r0, #1]
 800440c:	788b      	ldrb	r3, [r1, #2]
 800440e:	7083      	strb	r3, [r0, #2]
 8004410:	4660      	mov	r0, ip
 8004412:	4770      	bx	lr

08004414 <memmove>:
 8004414:	4288      	cmp	r0, r1
 8004416:	d90d      	bls.n	8004434 <memmove+0x20>
 8004418:	188b      	adds	r3, r1, r2
 800441a:	4283      	cmp	r3, r0
 800441c:	d90a      	bls.n	8004434 <memmove+0x20>
 800441e:	eb00 0c02 	add.w	ip, r0, r2
 8004422:	b1ba      	cbz	r2, 8004454 <memmove+0x40>
 8004424:	4662      	mov	r2, ip
 8004426:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
 800442a:	f802 cd01 	strb.w	ip, [r2, #-1]!
 800442e:	4299      	cmp	r1, r3
 8004430:	d1f9      	bne.n	8004426 <memmove+0x12>
 8004432:	4770      	bx	lr
 8004434:	2a0f      	cmp	r2, #15
 8004436:	d80e      	bhi.n	8004456 <memmove+0x42>
 8004438:	4603      	mov	r3, r0
 800443a:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
 800443e:	b14a      	cbz	r2, 8004454 <memmove+0x40>
 8004440:	f10c 0c01 	add.w	ip, ip, #1
 8004444:	3b01      	subs	r3, #1
 8004446:	448c      	add	ip, r1
 8004448:	f811 2b01 	ldrb.w	r2, [r1], #1
 800444c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004450:	4561      	cmp	r1, ip
 8004452:	d1f9      	bne.n	8004448 <memmove+0x34>
 8004454:	4770      	bx	lr
 8004456:	ea40 0301 	orr.w	r3, r0, r1
 800445a:	079b      	lsls	r3, r3, #30
 800445c:	d150      	bne.n	8004500 <memmove+0xec>
 800445e:	f1a2 0310 	sub.w	r3, r2, #16
 8004462:	b570      	push	{r4, r5, r6, lr}
 8004464:	f101 0c20 	add.w	ip, r1, #32
 8004468:	f023 050f 	bic.w	r5, r3, #15
 800446c:	f101 0e10 	add.w	lr, r1, #16
 8004470:	f100 0410 	add.w	r4, r0, #16
 8004474:	44ac      	add	ip, r5
 8004476:	091b      	lsrs	r3, r3, #4
 8004478:	f85e 5c10 	ldr.w	r5, [lr, #-16]
 800447c:	f844 5c10 	str.w	r5, [r4, #-16]
 8004480:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
 8004484:	f844 5c0c 	str.w	r5, [r4, #-12]
 8004488:	f85e 5c08 	ldr.w	r5, [lr, #-8]
 800448c:	f844 5c08 	str.w	r5, [r4, #-8]
 8004490:	f85e 5c04 	ldr.w	r5, [lr, #-4]
 8004494:	f844 5c04 	str.w	r5, [r4, #-4]
 8004498:	f10e 0e10 	add.w	lr, lr, #16
 800449c:	45e6      	cmp	lr, ip
 800449e:	f104 0410 	add.w	r4, r4, #16
 80044a2:	d1e9      	bne.n	8004478 <memmove+0x64>
 80044a4:	3301      	adds	r3, #1
 80044a6:	f012 0f0c 	tst.w	r2, #12
 80044aa:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 80044ae:	f002 040f 	and.w	r4, r2, #15
 80044b2:	eb00 1303 	add.w	r3, r0, r3, lsl #4
 80044b6:	d027      	beq.n	8004508 <memmove+0xf4>
 80044b8:	3c04      	subs	r4, #4
 80044ba:	f024 0603 	bic.w	r6, r4, #3
 80044be:	ea4f 0c94 	mov.w	ip, r4, lsr #2
 80044c2:	441e      	add	r6, r3
 80044c4:	1f1c      	subs	r4, r3, #4
 80044c6:	468e      	mov	lr, r1
 80044c8:	f85e 5b04 	ldr.w	r5, [lr], #4
 80044cc:	f844 5f04 	str.w	r5, [r4, #4]!
 80044d0:	42b4      	cmp	r4, r6
 80044d2:	d1f9      	bne.n	80044c8 <memmove+0xb4>
 80044d4:	f10c 0401 	add.w	r4, ip, #1
 80044d8:	f002 0203 	and.w	r2, r2, #3
 80044dc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80044e0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80044e4:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
 80044e8:	b14a      	cbz	r2, 80044fe <memmove+0xea>
 80044ea:	f10c 0c01 	add.w	ip, ip, #1
 80044ee:	3b01      	subs	r3, #1
 80044f0:	448c      	add	ip, r1
 80044f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80044f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80044fa:	4561      	cmp	r1, ip
 80044fc:	d1f9      	bne.n	80044f2 <memmove+0xde>
 80044fe:	bd70      	pop	{r4, r5, r6, pc}
 8004500:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
 8004504:	4603      	mov	r3, r0
 8004506:	e79b      	b.n	8004440 <memmove+0x2c>
 8004508:	4622      	mov	r2, r4
 800450a:	e7eb      	b.n	80044e4 <memmove+0xd0>

0800450c <__malloc_lock>:
 800450c:	4770      	bx	lr
 800450e:	bf00      	nop

08004510 <__malloc_unlock>:
 8004510:	4770      	bx	lr
 8004512:	bf00      	nop

08004514 <_Balloc>:
 8004514:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8004516:	b570      	push	{r4, r5, r6, lr}
 8004518:	4605      	mov	r5, r0
 800451a:	460c      	mov	r4, r1
 800451c:	b14b      	cbz	r3, 8004532 <_Balloc+0x1e>
 800451e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004522:	b180      	cbz	r0, 8004546 <_Balloc+0x32>
 8004524:	6802      	ldr	r2, [r0, #0]
 8004526:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800452a:	2300      	movs	r3, #0
 800452c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004530:	bd70      	pop	{r4, r5, r6, pc}
 8004532:	2221      	movs	r2, #33	; 0x21
 8004534:	2104      	movs	r1, #4
 8004536:	f001 fef9 	bl	800632c <_calloc_r>
 800453a:	4603      	mov	r3, r0
 800453c:	64e8      	str	r0, [r5, #76]	; 0x4c
 800453e:	2800      	cmp	r0, #0
 8004540:	d1ed      	bne.n	800451e <_Balloc+0xa>
 8004542:	2000      	movs	r0, #0
 8004544:	bd70      	pop	{r4, r5, r6, pc}
 8004546:	2101      	movs	r1, #1
 8004548:	fa01 f604 	lsl.w	r6, r1, r4
 800454c:	1d72      	adds	r2, r6, #5
 800454e:	0092      	lsls	r2, r2, #2
 8004550:	4628      	mov	r0, r5
 8004552:	f001 feeb 	bl	800632c <_calloc_r>
 8004556:	2800      	cmp	r0, #0
 8004558:	d0f3      	beq.n	8004542 <_Balloc+0x2e>
 800455a:	e9c0 4601 	strd	r4, r6, [r0, #4]
 800455e:	e7e4      	b.n	800452a <_Balloc+0x16>

08004560 <_Bfree>:
 8004560:	b131      	cbz	r1, 8004570 <_Bfree+0x10>
 8004562:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8004564:	684a      	ldr	r2, [r1, #4]
 8004566:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800456a:	6008      	str	r0, [r1, #0]
 800456c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004570:	4770      	bx	lr
 8004572:	bf00      	nop

08004574 <__multadd>:
 8004574:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004576:	690c      	ldr	r4, [r1, #16]
 8004578:	4606      	mov	r6, r0
 800457a:	b083      	sub	sp, #12
 800457c:	460d      	mov	r5, r1
 800457e:	f101 0e14 	add.w	lr, r1, #20
 8004582:	2000      	movs	r0, #0
 8004584:	f8de 1000 	ldr.w	r1, [lr]
 8004588:	fa1f fc81 	uxth.w	ip, r1
 800458c:	fb02 330c 	mla	r3, r2, ip, r3
 8004590:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8004594:	0c09      	lsrs	r1, r1, #16
 8004596:	fb02 cc01 	mla	ip, r2, r1, ip
 800459a:	3001      	adds	r0, #1
 800459c:	b29b      	uxth	r3, r3
 800459e:	eb03 430c 	add.w	r3, r3, ip, lsl #16
 80045a2:	4284      	cmp	r4, r0
 80045a4:	f84e 3b04 	str.w	r3, [lr], #4
 80045a8:	ea4f 431c 	mov.w	r3, ip, lsr #16
 80045ac:	dcea      	bgt.n	8004584 <__multadd+0x10>
 80045ae:	b13b      	cbz	r3, 80045c0 <__multadd+0x4c>
 80045b0:	68aa      	ldr	r2, [r5, #8]
 80045b2:	42a2      	cmp	r2, r4
 80045b4:	dd07      	ble.n	80045c6 <__multadd+0x52>
 80045b6:	eb05 0284 	add.w	r2, r5, r4, lsl #2
 80045ba:	3401      	adds	r4, #1
 80045bc:	6153      	str	r3, [r2, #20]
 80045be:	612c      	str	r4, [r5, #16]
 80045c0:	4628      	mov	r0, r5
 80045c2:	b003      	add	sp, #12
 80045c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045c6:	6869      	ldr	r1, [r5, #4]
 80045c8:	9301      	str	r3, [sp, #4]
 80045ca:	3101      	adds	r1, #1
 80045cc:	4630      	mov	r0, r6
 80045ce:	f7ff ffa1 	bl	8004514 <_Balloc>
 80045d2:	9b01      	ldr	r3, [sp, #4]
 80045d4:	4607      	mov	r7, r0
 80045d6:	b1b8      	cbz	r0, 8004608 <__multadd+0x94>
 80045d8:	692a      	ldr	r2, [r5, #16]
 80045da:	9301      	str	r3, [sp, #4]
 80045dc:	3202      	adds	r2, #2
 80045de:	f105 010c 	add.w	r1, r5, #12
 80045e2:	0092      	lsls	r2, r2, #2
 80045e4:	300c      	adds	r0, #12
 80045e6:	f7ff fe7b 	bl	80042e0 <memcpy>
 80045ea:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
 80045ec:	6869      	ldr	r1, [r5, #4]
 80045ee:	9b01      	ldr	r3, [sp, #4]
 80045f0:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 80045f4:	6028      	str	r0, [r5, #0]
 80045f6:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
 80045fa:	463d      	mov	r5, r7
 80045fc:	eb05 0284 	add.w	r2, r5, r4, lsl #2
 8004600:	3401      	adds	r4, #1
 8004602:	6153      	str	r3, [r2, #20]
 8004604:	612c      	str	r4, [r5, #16]
 8004606:	e7db      	b.n	80045c0 <__multadd+0x4c>
 8004608:	4b02      	ldr	r3, [pc, #8]	; (8004614 <__multadd+0xa0>)
 800460a:	4803      	ldr	r0, [pc, #12]	; (8004618 <__multadd+0xa4>)
 800460c:	463a      	mov	r2, r7
 800460e:	21b5      	movs	r1, #181	; 0xb5
 8004610:	f001 fe66 	bl	80062e0 <__assert_func>
 8004614:	0801c118 	.word	0x0801c118
 8004618:	0801c160 	.word	0x0801c160

0800461c <__s2b>:
 800461c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004620:	460c      	mov	r4, r1
 8004622:	4928      	ldr	r1, [pc, #160]	; (80046c4 <__s2b+0xa8>)
 8004624:	461f      	mov	r7, r3
 8004626:	4616      	mov	r6, r2
 8004628:	f103 0208 	add.w	r2, r3, #8
 800462c:	fb81 3102 	smull	r3, r1, r1, r2
 8004630:	2f09      	cmp	r7, #9
 8004632:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8004636:	4605      	mov	r5, r0
 8004638:	ebc3 0361 	rsb	r3, r3, r1, asr #1
 800463c:	dd39      	ble.n	80046b2 <__s2b+0x96>
 800463e:	f04f 0c01 	mov.w	ip, #1
 8004642:	2100      	movs	r1, #0
 8004644:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8004648:	4563      	cmp	r3, ip
 800464a:	f101 0101 	add.w	r1, r1, #1
 800464e:	dcf9      	bgt.n	8004644 <__s2b+0x28>
 8004650:	4628      	mov	r0, r5
 8004652:	f7ff ff5f 	bl	8004514 <_Balloc>
 8004656:	4601      	mov	r1, r0
 8004658:	b368      	cbz	r0, 80046b6 <__s2b+0x9a>
 800465a:	9b08      	ldr	r3, [sp, #32]
 800465c:	6143      	str	r3, [r0, #20]
 800465e:	2e09      	cmp	r6, #9
 8004660:	f04f 0301 	mov.w	r3, #1
 8004664:	6103      	str	r3, [r0, #16]
 8004666:	dc12      	bgt.n	800468e <__s2b+0x72>
 8004668:	340a      	adds	r4, #10
 800466a:	2609      	movs	r6, #9
 800466c:	42b7      	cmp	r7, r6
 800466e:	dd0b      	ble.n	8004688 <__s2b+0x6c>
 8004670:	1bbe      	subs	r6, r7, r6
 8004672:	4426      	add	r6, r4
 8004674:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004678:	220a      	movs	r2, #10
 800467a:	3b30      	subs	r3, #48	; 0x30
 800467c:	4628      	mov	r0, r5
 800467e:	f7ff ff79 	bl	8004574 <__multadd>
 8004682:	42a6      	cmp	r6, r4
 8004684:	4601      	mov	r1, r0
 8004686:	d1f5      	bne.n	8004674 <__s2b+0x58>
 8004688:	4608      	mov	r0, r1
 800468a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800468e:	f104 0909 	add.w	r9, r4, #9
 8004692:	46c8      	mov	r8, r9
 8004694:	4434      	add	r4, r6
 8004696:	f818 3b01 	ldrb.w	r3, [r8], #1
 800469a:	220a      	movs	r2, #10
 800469c:	3b30      	subs	r3, #48	; 0x30
 800469e:	4628      	mov	r0, r5
 80046a0:	f7ff ff68 	bl	8004574 <__multadd>
 80046a4:	45a0      	cmp	r8, r4
 80046a6:	4601      	mov	r1, r0
 80046a8:	d1f5      	bne.n	8004696 <__s2b+0x7a>
 80046aa:	f1a6 0408 	sub.w	r4, r6, #8
 80046ae:	444c      	add	r4, r9
 80046b0:	e7dc      	b.n	800466c <__s2b+0x50>
 80046b2:	2100      	movs	r1, #0
 80046b4:	e7cc      	b.n	8004650 <__s2b+0x34>
 80046b6:	460a      	mov	r2, r1
 80046b8:	4b03      	ldr	r3, [pc, #12]	; (80046c8 <__s2b+0xac>)
 80046ba:	4804      	ldr	r0, [pc, #16]	; (80046cc <__s2b+0xb0>)
 80046bc:	21ce      	movs	r1, #206	; 0xce
 80046be:	f001 fe0f 	bl	80062e0 <__assert_func>
 80046c2:	bf00      	nop
 80046c4:	38e38e39 	.word	0x38e38e39
 80046c8:	0801c118 	.word	0x0801c118
 80046cc:	0801c160 	.word	0x0801c160

080046d0 <__hi0bits>:
 80046d0:	0c03      	lsrs	r3, r0, #16
 80046d2:	041b      	lsls	r3, r3, #16
 80046d4:	b9d3      	cbnz	r3, 800470c <__hi0bits+0x3c>
 80046d6:	0400      	lsls	r0, r0, #16
 80046d8:	2310      	movs	r3, #16
 80046da:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80046de:	bf04      	itt	eq
 80046e0:	0200      	lsleq	r0, r0, #8
 80046e2:	3308      	addeq	r3, #8
 80046e4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80046e8:	bf04      	itt	eq
 80046ea:	0100      	lsleq	r0, r0, #4
 80046ec:	3304      	addeq	r3, #4
 80046ee:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80046f2:	bf04      	itt	eq
 80046f4:	0080      	lsleq	r0, r0, #2
 80046f6:	3302      	addeq	r3, #2
 80046f8:	2800      	cmp	r0, #0
 80046fa:	db05      	blt.n	8004708 <__hi0bits+0x38>
 80046fc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8004700:	f103 0301 	add.w	r3, r3, #1
 8004704:	bf08      	it	eq
 8004706:	2320      	moveq	r3, #32
 8004708:	4618      	mov	r0, r3
 800470a:	4770      	bx	lr
 800470c:	2300      	movs	r3, #0
 800470e:	e7e4      	b.n	80046da <__hi0bits+0xa>

08004710 <__lo0bits>:
 8004710:	6803      	ldr	r3, [r0, #0]
 8004712:	f013 0207 	ands.w	r2, r3, #7
 8004716:	4601      	mov	r1, r0
 8004718:	d007      	beq.n	800472a <__lo0bits+0x1a>
 800471a:	07da      	lsls	r2, r3, #31
 800471c:	d41f      	bmi.n	800475e <__lo0bits+0x4e>
 800471e:	0798      	lsls	r0, r3, #30
 8004720:	d521      	bpl.n	8004766 <__lo0bits+0x56>
 8004722:	085b      	lsrs	r3, r3, #1
 8004724:	600b      	str	r3, [r1, #0]
 8004726:	2001      	movs	r0, #1
 8004728:	4770      	bx	lr
 800472a:	b298      	uxth	r0, r3
 800472c:	b1a0      	cbz	r0, 8004758 <__lo0bits+0x48>
 800472e:	4610      	mov	r0, r2
 8004730:	b2da      	uxtb	r2, r3
 8004732:	b90a      	cbnz	r2, 8004738 <__lo0bits+0x28>
 8004734:	3008      	adds	r0, #8
 8004736:	0a1b      	lsrs	r3, r3, #8
 8004738:	071a      	lsls	r2, r3, #28
 800473a:	bf04      	itt	eq
 800473c:	091b      	lsreq	r3, r3, #4
 800473e:	3004      	addeq	r0, #4
 8004740:	079a      	lsls	r2, r3, #30
 8004742:	bf04      	itt	eq
 8004744:	089b      	lsreq	r3, r3, #2
 8004746:	3002      	addeq	r0, #2
 8004748:	07da      	lsls	r2, r3, #31
 800474a:	d403      	bmi.n	8004754 <__lo0bits+0x44>
 800474c:	085b      	lsrs	r3, r3, #1
 800474e:	f100 0001 	add.w	r0, r0, #1
 8004752:	d006      	beq.n	8004762 <__lo0bits+0x52>
 8004754:	600b      	str	r3, [r1, #0]
 8004756:	4770      	bx	lr
 8004758:	0c1b      	lsrs	r3, r3, #16
 800475a:	2010      	movs	r0, #16
 800475c:	e7e8      	b.n	8004730 <__lo0bits+0x20>
 800475e:	2000      	movs	r0, #0
 8004760:	4770      	bx	lr
 8004762:	2020      	movs	r0, #32
 8004764:	4770      	bx	lr
 8004766:	089b      	lsrs	r3, r3, #2
 8004768:	600b      	str	r3, [r1, #0]
 800476a:	2002      	movs	r0, #2
 800476c:	4770      	bx	lr
 800476e:	bf00      	nop

08004770 <__i2b>:
 8004770:	b538      	push	{r3, r4, r5, lr}
 8004772:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8004774:	4604      	mov	r4, r0
 8004776:	460d      	mov	r5, r1
 8004778:	b14b      	cbz	r3, 800478e <__i2b+0x1e>
 800477a:	6858      	ldr	r0, [r3, #4]
 800477c:	b1b0      	cbz	r0, 80047ac <__i2b+0x3c>
 800477e:	6802      	ldr	r2, [r0, #0]
 8004780:	605a      	str	r2, [r3, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	2301      	movs	r3, #1
 8004786:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800478a:	60c2      	str	r2, [r0, #12]
 800478c:	bd38      	pop	{r3, r4, r5, pc}
 800478e:	2221      	movs	r2, #33	; 0x21
 8004790:	2104      	movs	r1, #4
 8004792:	f001 fdcb 	bl	800632c <_calloc_r>
 8004796:	4603      	mov	r3, r0
 8004798:	64e0      	str	r0, [r4, #76]	; 0x4c
 800479a:	2800      	cmp	r0, #0
 800479c:	d1ed      	bne.n	800477a <__i2b+0xa>
 800479e:	4b09      	ldr	r3, [pc, #36]	; (80047c4 <__i2b+0x54>)
 80047a0:	4809      	ldr	r0, [pc, #36]	; (80047c8 <__i2b+0x58>)
 80047a2:	2200      	movs	r2, #0
 80047a4:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80047a8:	f001 fd9a 	bl	80062e0 <__assert_func>
 80047ac:	221c      	movs	r2, #28
 80047ae:	2101      	movs	r1, #1
 80047b0:	4620      	mov	r0, r4
 80047b2:	f001 fdbb 	bl	800632c <_calloc_r>
 80047b6:	2800      	cmp	r0, #0
 80047b8:	d0f1      	beq.n	800479e <__i2b+0x2e>
 80047ba:	2201      	movs	r2, #1
 80047bc:	2302      	movs	r3, #2
 80047be:	e9c0 2301 	strd	r2, r3, [r0, #4]
 80047c2:	e7de      	b.n	8004782 <__i2b+0x12>
 80047c4:	0801c118 	.word	0x0801c118
 80047c8:	0801c160 	.word	0x0801c160

080047cc <__multiply>:
 80047cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047d0:	690e      	ldr	r6, [r1, #16]
 80047d2:	6915      	ldr	r5, [r2, #16]
 80047d4:	42ae      	cmp	r6, r5
 80047d6:	b085      	sub	sp, #20
 80047d8:	4688      	mov	r8, r1
 80047da:	4614      	mov	r4, r2
 80047dc:	db05      	blt.n	80047ea <__multiply+0x1e>
 80047de:	462a      	mov	r2, r5
 80047e0:	4623      	mov	r3, r4
 80047e2:	4635      	mov	r5, r6
 80047e4:	460c      	mov	r4, r1
 80047e6:	4616      	mov	r6, r2
 80047e8:	4698      	mov	r8, r3
 80047ea:	68a3      	ldr	r3, [r4, #8]
 80047ec:	6861      	ldr	r1, [r4, #4]
 80047ee:	19af      	adds	r7, r5, r6
 80047f0:	42bb      	cmp	r3, r7
 80047f2:	bfb8      	it	lt
 80047f4:	3101      	addlt	r1, #1
 80047f6:	f7ff fe8d 	bl	8004514 <_Balloc>
 80047fa:	9001      	str	r0, [sp, #4]
 80047fc:	2800      	cmp	r0, #0
 80047fe:	f000 8087 	beq.w	8004910 <__multiply+0x144>
 8004802:	9b01      	ldr	r3, [sp, #4]
 8004804:	f103 0914 	add.w	r9, r3, #20
 8004808:	eb09 0a87 	add.w	sl, r9, r7, lsl #2
 800480c:	45d1      	cmp	r9, sl
 800480e:	d205      	bcs.n	800481c <__multiply+0x50>
 8004810:	464b      	mov	r3, r9
 8004812:	2200      	movs	r2, #0
 8004814:	f843 2b04 	str.w	r2, [r3], #4
 8004818:	459a      	cmp	sl, r3
 800481a:	d8fb      	bhi.n	8004814 <__multiply+0x48>
 800481c:	f108 0814 	add.w	r8, r8, #20
 8004820:	eb08 0b86 	add.w	fp, r8, r6, lsl #2
 8004824:	f104 0314 	add.w	r3, r4, #20
 8004828:	45d8      	cmp	r8, fp
 800482a:	461a      	mov	r2, r3
 800482c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8004830:	d25f      	bcs.n	80048f2 <__multiply+0x126>
 8004832:	1b2b      	subs	r3, r5, r4
 8004834:	3b15      	subs	r3, #21
 8004836:	f023 0303 	bic.w	r3, r3, #3
 800483a:	3304      	adds	r3, #4
 800483c:	3415      	adds	r4, #21
 800483e:	42a5      	cmp	r5, r4
 8004840:	bf38      	it	cc
 8004842:	2304      	movcc	r3, #4
 8004844:	e9cd a702 	strd	sl, r7, [sp, #8]
 8004848:	46ac      	mov	ip, r5
 800484a:	461f      	mov	r7, r3
 800484c:	4692      	mov	sl, r2
 800484e:	e005      	b.n	800485c <__multiply+0x90>
 8004850:	0c00      	lsrs	r0, r0, #16
 8004852:	d129      	bne.n	80048a8 <__multiply+0xdc>
 8004854:	45c3      	cmp	fp, r8
 8004856:	f109 0904 	add.w	r9, r9, #4
 800485a:	d948      	bls.n	80048ee <__multiply+0x122>
 800485c:	f858 0b04 	ldr.w	r0, [r8], #4
 8004860:	b285      	uxth	r5, r0
 8004862:	2d00      	cmp	r5, #0
 8004864:	d0f4      	beq.n	8004850 <__multiply+0x84>
 8004866:	4656      	mov	r6, sl
 8004868:	464c      	mov	r4, r9
 800486a:	2300      	movs	r3, #0
 800486c:	f856 0b04 	ldr.w	r0, [r6], #4
 8004870:	6821      	ldr	r1, [r4, #0]
 8004872:	b282      	uxth	r2, r0
 8004874:	fa1f fe81 	uxth.w	lr, r1
 8004878:	fb05 ee02 	mla	lr, r5, r2, lr
 800487c:	0c00      	lsrs	r0, r0, #16
 800487e:	0c0a      	lsrs	r2, r1, #16
 8004880:	4473      	add	r3, lr
 8004882:	fb05 2200 	mla	r2, r5, r0, r2
 8004886:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800488a:	b29b      	uxth	r3, r3
 800488c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004890:	45b4      	cmp	ip, r6
 8004892:	f844 3b04 	str.w	r3, [r4], #4
 8004896:	ea4f 4312 	mov.w	r3, r2, lsr #16
 800489a:	d8e7      	bhi.n	800486c <__multiply+0xa0>
 800489c:	f849 3007 	str.w	r3, [r9, r7]
 80048a0:	f858 0c04 	ldr.w	r0, [r8, #-4]
 80048a4:	0c00      	lsrs	r0, r0, #16
 80048a6:	d0d5      	beq.n	8004854 <__multiply+0x88>
 80048a8:	f8d9 3000 	ldr.w	r3, [r9]
 80048ac:	4654      	mov	r4, sl
 80048ae:	4619      	mov	r1, r3
 80048b0:	464d      	mov	r5, r9
 80048b2:	2200      	movs	r2, #0
 80048b4:	8826      	ldrh	r6, [r4, #0]
 80048b6:	0c09      	lsrs	r1, r1, #16
 80048b8:	fb00 1106 	mla	r1, r0, r6, r1
 80048bc:	440a      	add	r2, r1
 80048be:	b29b      	uxth	r3, r3
 80048c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80048c4:	f845 3b04 	str.w	r3, [r5], #4
 80048c8:	f854 6b04 	ldr.w	r6, [r4], #4
 80048cc:	6829      	ldr	r1, [r5, #0]
 80048ce:	0c36      	lsrs	r6, r6, #16
 80048d0:	b28b      	uxth	r3, r1
 80048d2:	fb00 3306 	mla	r3, r0, r6, r3
 80048d6:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80048da:	45a4      	cmp	ip, r4
 80048dc:	ea4f 4213 	mov.w	r2, r3, lsr #16
 80048e0:	d8e8      	bhi.n	80048b4 <__multiply+0xe8>
 80048e2:	45c3      	cmp	fp, r8
 80048e4:	f849 3007 	str.w	r3, [r9, r7]
 80048e8:	f109 0904 	add.w	r9, r9, #4
 80048ec:	d8b6      	bhi.n	800485c <__multiply+0x90>
 80048ee:	e9dd a702 	ldrd	sl, r7, [sp, #8]
 80048f2:	2f00      	cmp	r7, #0
 80048f4:	dc02      	bgt.n	80048fc <__multiply+0x130>
 80048f6:	e005      	b.n	8004904 <__multiply+0x138>
 80048f8:	3f01      	subs	r7, #1
 80048fa:	d003      	beq.n	8004904 <__multiply+0x138>
 80048fc:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
 8004900:	2b00      	cmp	r3, #0
 8004902:	d0f9      	beq.n	80048f8 <__multiply+0x12c>
 8004904:	9b01      	ldr	r3, [sp, #4]
 8004906:	4618      	mov	r0, r3
 8004908:	611f      	str	r7, [r3, #16]
 800490a:	b005      	add	sp, #20
 800490c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004910:	4b03      	ldr	r3, [pc, #12]	; (8004920 <__multiply+0x154>)
 8004912:	4804      	ldr	r0, [pc, #16]	; (8004924 <__multiply+0x158>)
 8004914:	9a01      	ldr	r2, [sp, #4]
 8004916:	f240 115d 	movw	r1, #349	; 0x15d
 800491a:	f001 fce1 	bl	80062e0 <__assert_func>
 800491e:	bf00      	nop
 8004920:	0801c118 	.word	0x0801c118
 8004924:	0801c160 	.word	0x0801c160

08004928 <__pow5mult>:
 8004928:	f012 0303 	ands.w	r3, r2, #3
 800492c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004930:	4614      	mov	r4, r2
 8004932:	4606      	mov	r6, r0
 8004934:	d132      	bne.n	800499c <__pow5mult+0x74>
 8004936:	460d      	mov	r5, r1
 8004938:	10a4      	asrs	r4, r4, #2
 800493a:	d020      	beq.n	800497e <__pow5mult+0x56>
 800493c:	f8d6 8048 	ldr.w	r8, [r6, #72]	; 0x48
 8004940:	f1b8 0f00 	cmp.w	r8, #0
 8004944:	d033      	beq.n	80049ae <__pow5mult+0x86>
 8004946:	07e3      	lsls	r3, r4, #31
 8004948:	f04f 0700 	mov.w	r7, #0
 800494c:	d407      	bmi.n	800495e <__pow5mult+0x36>
 800494e:	1064      	asrs	r4, r4, #1
 8004950:	d015      	beq.n	800497e <__pow5mult+0x56>
 8004952:	f8d8 0000 	ldr.w	r0, [r8]
 8004956:	b1a8      	cbz	r0, 8004984 <__pow5mult+0x5c>
 8004958:	4680      	mov	r8, r0
 800495a:	07e3      	lsls	r3, r4, #31
 800495c:	d5f7      	bpl.n	800494e <__pow5mult+0x26>
 800495e:	4642      	mov	r2, r8
 8004960:	4629      	mov	r1, r5
 8004962:	4630      	mov	r0, r6
 8004964:	f7ff ff32 	bl	80047cc <__multiply>
 8004968:	b1b5      	cbz	r5, 8004998 <__pow5mult+0x70>
 800496a:	6869      	ldr	r1, [r5, #4]
 800496c:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 800496e:	1064      	asrs	r4, r4, #1
 8004970:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 8004974:	602a      	str	r2, [r5, #0]
 8004976:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
 800497a:	4605      	mov	r5, r0
 800497c:	d1e9      	bne.n	8004952 <__pow5mult+0x2a>
 800497e:	4628      	mov	r0, r5
 8004980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004984:	4642      	mov	r2, r8
 8004986:	4641      	mov	r1, r8
 8004988:	4630      	mov	r0, r6
 800498a:	f7ff ff1f 	bl	80047cc <__multiply>
 800498e:	f8c8 0000 	str.w	r0, [r8]
 8004992:	6007      	str	r7, [r0, #0]
 8004994:	4680      	mov	r8, r0
 8004996:	e7e0      	b.n	800495a <__pow5mult+0x32>
 8004998:	4605      	mov	r5, r0
 800499a:	e7d8      	b.n	800494e <__pow5mult+0x26>
 800499c:	3b01      	subs	r3, #1
 800499e:	4a0f      	ldr	r2, [pc, #60]	; (80049dc <__pow5mult+0xb4>)
 80049a0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80049a4:	2300      	movs	r3, #0
 80049a6:	f7ff fde5 	bl	8004574 <__multadd>
 80049aa:	4605      	mov	r5, r0
 80049ac:	e7c4      	b.n	8004938 <__pow5mult+0x10>
 80049ae:	2101      	movs	r1, #1
 80049b0:	4630      	mov	r0, r6
 80049b2:	f7ff fdaf 	bl	8004514 <_Balloc>
 80049b6:	4680      	mov	r8, r0
 80049b8:	b140      	cbz	r0, 80049cc <__pow5mult+0xa4>
 80049ba:	2301      	movs	r3, #1
 80049bc:	f240 2271 	movw	r2, #625	; 0x271
 80049c0:	e9c0 3204 	strd	r3, r2, [r0, #16]
 80049c4:	2300      	movs	r3, #0
 80049c6:	64b0      	str	r0, [r6, #72]	; 0x48
 80049c8:	6003      	str	r3, [r0, #0]
 80049ca:	e7bc      	b.n	8004946 <__pow5mult+0x1e>
 80049cc:	4b04      	ldr	r3, [pc, #16]	; (80049e0 <__pow5mult+0xb8>)
 80049ce:	4805      	ldr	r0, [pc, #20]	; (80049e4 <__pow5mult+0xbc>)
 80049d0:	4642      	mov	r2, r8
 80049d2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80049d6:	f001 fc83 	bl	80062e0 <__assert_func>
 80049da:	bf00      	nop
 80049dc:	0800cd10 	.word	0x0800cd10
 80049e0:	0801c118 	.word	0x0801c118
 80049e4:	0801c160 	.word	0x0801c160

080049e8 <__lshift>:
 80049e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049ec:	460c      	mov	r4, r1
 80049ee:	4690      	mov	r8, r2
 80049f0:	6926      	ldr	r6, [r4, #16]
 80049f2:	68a3      	ldr	r3, [r4, #8]
 80049f4:	6849      	ldr	r1, [r1, #4]
 80049f6:	eb06 1662 	add.w	r6, r6, r2, asr #5
 80049fa:	1c75      	adds	r5, r6, #1
 80049fc:	429d      	cmp	r5, r3
 80049fe:	4607      	mov	r7, r0
 8004a00:	ea4f 1962 	mov.w	r9, r2, asr #5
 8004a04:	dd04      	ble.n	8004a10 <__lshift+0x28>
 8004a06:	005b      	lsls	r3, r3, #1
 8004a08:	429d      	cmp	r5, r3
 8004a0a:	f101 0101 	add.w	r1, r1, #1
 8004a0e:	dcfa      	bgt.n	8004a06 <__lshift+0x1e>
 8004a10:	4638      	mov	r0, r7
 8004a12:	f7ff fd7f 	bl	8004514 <_Balloc>
 8004a16:	4684      	mov	ip, r0
 8004a18:	2800      	cmp	r0, #0
 8004a1a:	d051      	beq.n	8004ac0 <__lshift+0xd8>
 8004a1c:	f1b9 0f00 	cmp.w	r9, #0
 8004a20:	f100 0014 	add.w	r0, r0, #20
 8004a24:	dd0e      	ble.n	8004a44 <__lshift+0x5c>
 8004a26:	f109 0205 	add.w	r2, r9, #5
 8004a2a:	ea4f 0e82 	mov.w	lr, r2, lsl #2
 8004a2e:	4603      	mov	r3, r0
 8004a30:	eb0c 0282 	add.w	r2, ip, r2, lsl #2
 8004a34:	2100      	movs	r1, #0
 8004a36:	f843 1b04 	str.w	r1, [r3], #4
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d1fb      	bne.n	8004a36 <__lshift+0x4e>
 8004a3e:	f1ae 0314 	sub.w	r3, lr, #20
 8004a42:	4418      	add	r0, r3
 8004a44:	6921      	ldr	r1, [r4, #16]
 8004a46:	f104 0314 	add.w	r3, r4, #20
 8004a4a:	f018 081f 	ands.w	r8, r8, #31
 8004a4e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8004a52:	d02d      	beq.n	8004ab0 <__lshift+0xc8>
 8004a54:	f1c8 0920 	rsb	r9, r8, #32
 8004a58:	4686      	mov	lr, r0
 8004a5a:	f04f 0a00 	mov.w	sl, #0
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	fa02 f208 	lsl.w	r2, r2, r8
 8004a64:	ea42 020a 	orr.w	r2, r2, sl
 8004a68:	f84e 2b04 	str.w	r2, [lr], #4
 8004a6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a70:	4299      	cmp	r1, r3
 8004a72:	fa22 fa09 	lsr.w	sl, r2, r9
 8004a76:	d8f2      	bhi.n	8004a5e <__lshift+0x76>
 8004a78:	1b0b      	subs	r3, r1, r4
 8004a7a:	3b15      	subs	r3, #21
 8004a7c:	f023 0303 	bic.w	r3, r3, #3
 8004a80:	3304      	adds	r3, #4
 8004a82:	f104 0215 	add.w	r2, r4, #21
 8004a86:	4291      	cmp	r1, r2
 8004a88:	bf38      	it	cc
 8004a8a:	2304      	movcc	r3, #4
 8004a8c:	f1ba 0f00 	cmp.w	sl, #0
 8004a90:	bf18      	it	ne
 8004a92:	462e      	movne	r6, r5
 8004a94:	f840 a003 	str.w	sl, [r0, r3]
 8004a98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a9a:	6862      	ldr	r2, [r4, #4]
 8004a9c:	f8cc 6010 	str.w	r6, [ip, #16]
 8004aa0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004aa4:	6021      	str	r1, [r4, #0]
 8004aa6:	4660      	mov	r0, ip
 8004aa8:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004aac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ab0:	3804      	subs	r0, #4
 8004ab2:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ab6:	f840 2f04 	str.w	r2, [r0, #4]!
 8004aba:	4299      	cmp	r1, r3
 8004abc:	d8f9      	bhi.n	8004ab2 <__lshift+0xca>
 8004abe:	e7eb      	b.n	8004a98 <__lshift+0xb0>
 8004ac0:	4b03      	ldr	r3, [pc, #12]	; (8004ad0 <__lshift+0xe8>)
 8004ac2:	4804      	ldr	r0, [pc, #16]	; (8004ad4 <__lshift+0xec>)
 8004ac4:	4662      	mov	r2, ip
 8004ac6:	f240 11d9 	movw	r1, #473	; 0x1d9
 8004aca:	f001 fc09 	bl	80062e0 <__assert_func>
 8004ace:	bf00      	nop
 8004ad0:	0801c118 	.word	0x0801c118
 8004ad4:	0801c160 	.word	0x0801c160

08004ad8 <__mcmp>:
 8004ad8:	690b      	ldr	r3, [r1, #16]
 8004ada:	4684      	mov	ip, r0
 8004adc:	6900      	ldr	r0, [r0, #16]
 8004ade:	1ac0      	subs	r0, r0, r3
 8004ae0:	d116      	bne.n	8004b10 <__mcmp+0x38>
 8004ae2:	f10c 0c14 	add.w	ip, ip, #20
 8004ae6:	3114      	adds	r1, #20
 8004ae8:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
 8004aec:	b410      	push	{r4}
 8004aee:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8004af2:	e001      	b.n	8004af8 <__mcmp+0x20>
 8004af4:	4594      	cmp	ip, r2
 8004af6:	d208      	bcs.n	8004b0a <__mcmp+0x32>
 8004af8:	f852 4d04 	ldr.w	r4, [r2, #-4]!
 8004afc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8004b00:	428c      	cmp	r4, r1
 8004b02:	d0f7      	beq.n	8004af4 <__mcmp+0x1c>
 8004b04:	d205      	bcs.n	8004b12 <__mcmp+0x3a>
 8004b06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004b0e:	4770      	bx	lr
 8004b10:	4770      	bx	lr
 8004b12:	2001      	movs	r0, #1
 8004b14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004b18:	4770      	bx	lr
 8004b1a:	bf00      	nop

08004b1c <__mdiff>:
 8004b1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b20:	690f      	ldr	r7, [r1, #16]
 8004b22:	6913      	ldr	r3, [r2, #16]
 8004b24:	1aff      	subs	r7, r7, r3
 8004b26:	2f00      	cmp	r7, #0
 8004b28:	460e      	mov	r6, r1
 8004b2a:	4690      	mov	r8, r2
 8004b2c:	d17a      	bne.n	8004c24 <__mdiff+0x108>
 8004b2e:	f101 0514 	add.w	r5, r1, #20
 8004b32:	3214      	adds	r2, #20
 8004b34:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8004b38:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8004b3c:	e001      	b.n	8004b42 <__mdiff+0x26>
 8004b3e:	429d      	cmp	r5, r3
 8004b40:	d273      	bcs.n	8004c2a <__mdiff+0x10e>
 8004b42:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8004b46:	f852 4d04 	ldr.w	r4, [r2, #-4]!
 8004b4a:	42a1      	cmp	r1, r4
 8004b4c:	d0f7      	beq.n	8004b3e <__mdiff+0x22>
 8004b4e:	d364      	bcc.n	8004c1a <__mdiff+0xfe>
 8004b50:	6871      	ldr	r1, [r6, #4]
 8004b52:	f7ff fcdf 	bl	8004514 <_Balloc>
 8004b56:	4681      	mov	r9, r0
 8004b58:	2800      	cmp	r0, #0
 8004b5a:	d072      	beq.n	8004c42 <__mdiff+0x126>
 8004b5c:	6935      	ldr	r5, [r6, #16]
 8004b5e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8004b62:	60c7      	str	r7, [r0, #12]
 8004b64:	f108 0e14 	add.w	lr, r8, #20
 8004b68:	f106 0014 	add.w	r0, r6, #20
 8004b6c:	f109 0a14 	add.w	sl, r9, #20
 8004b70:	f106 0c10 	add.w	ip, r6, #16
 8004b74:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
 8004b78:	eb00 0785 	add.w	r7, r0, r5, lsl #2
 8004b7c:	4656      	mov	r6, sl
 8004b7e:	2100      	movs	r1, #0
 8004b80:	f85e 4b04 	ldr.w	r4, [lr], #4
 8004b84:	f85c bf04 	ldr.w	fp, [ip, #4]!
 8004b88:	b2a3      	uxth	r3, r4
 8004b8a:	fa11 f18b 	uxtah	r1, r1, fp
 8004b8e:	1acb      	subs	r3, r1, r3
 8004b90:	0c21      	lsrs	r1, r4, #16
 8004b92:	ebc1 411b 	rsb	r1, r1, fp, lsr #16
 8004b96:	eb01 4123 	add.w	r1, r1, r3, asr #16
 8004b9a:	b29b      	uxth	r3, r3
 8004b9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8004ba0:	4572      	cmp	r2, lr
 8004ba2:	f846 3b04 	str.w	r3, [r6], #4
 8004ba6:	ea4f 4121 	mov.w	r1, r1, asr #16
 8004baa:	d8e9      	bhi.n	8004b80 <__mdiff+0x64>
 8004bac:	eba2 0408 	sub.w	r4, r2, r8
 8004bb0:	3c15      	subs	r4, #21
 8004bb2:	f108 0815 	add.w	r8, r8, #21
 8004bb6:	4542      	cmp	r2, r8
 8004bb8:	f024 0603 	bic.w	r6, r4, #3
 8004bbc:	f106 0604 	add.w	r6, r6, #4
 8004bc0:	bf38      	it	cc
 8004bc2:	2604      	movcc	r6, #4
 8004bc4:	4430      	add	r0, r6
 8004bc6:	f024 0203 	bic.w	r2, r4, #3
 8004bca:	bf38      	it	cc
 8004bcc:	2200      	movcc	r2, #0
 8004bce:	4287      	cmp	r7, r0
 8004bd0:	4452      	add	r2, sl
 8004bd2:	44b2      	add	sl, r6
 8004bd4:	d916      	bls.n	8004c04 <__mdiff+0xe8>
 8004bd6:	4656      	mov	r6, sl
 8004bd8:	4604      	mov	r4, r0
 8004bda:	f854 3b04 	ldr.w	r3, [r4], #4
 8004bde:	fa11 f183 	uxtah	r1, r1, r3
 8004be2:	140a      	asrs	r2, r1, #16
 8004be4:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8004be8:	b289      	uxth	r1, r1
 8004bea:	ea41 4302 	orr.w	r3, r1, r2, lsl #16
 8004bee:	42a7      	cmp	r7, r4
 8004bf0:	f846 3b04 	str.w	r3, [r6], #4
 8004bf4:	ea4f 4122 	mov.w	r1, r2, asr #16
 8004bf8:	d8ef      	bhi.n	8004bda <__mdiff+0xbe>
 8004bfa:	1e7a      	subs	r2, r7, #1
 8004bfc:	1a10      	subs	r0, r2, r0
 8004bfe:	f020 0203 	bic.w	r2, r0, #3
 8004c02:	4452      	add	r2, sl
 8004c04:	b923      	cbnz	r3, 8004c10 <__mdiff+0xf4>
 8004c06:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8004c0a:	3d01      	subs	r5, #1
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d0fa      	beq.n	8004c06 <__mdiff+0xea>
 8004c10:	f8c9 5010 	str.w	r5, [r9, #16]
 8004c14:	4648      	mov	r0, r9
 8004c16:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c1a:	4633      	mov	r3, r6
 8004c1c:	2701      	movs	r7, #1
 8004c1e:	4646      	mov	r6, r8
 8004c20:	4698      	mov	r8, r3
 8004c22:	e795      	b.n	8004b50 <__mdiff+0x34>
 8004c24:	dbf9      	blt.n	8004c1a <__mdiff+0xfe>
 8004c26:	2700      	movs	r7, #0
 8004c28:	e792      	b.n	8004b50 <__mdiff+0x34>
 8004c2a:	2100      	movs	r1, #0
 8004c2c:	f7ff fc72 	bl	8004514 <_Balloc>
 8004c30:	4681      	mov	r9, r0
 8004c32:	b168      	cbz	r0, 8004c50 <__mdiff+0x134>
 8004c34:	2201      	movs	r2, #1
 8004c36:	2300      	movs	r3, #0
 8004c38:	e9c9 2304 	strd	r2, r3, [r9, #16]
 8004c3c:	4648      	mov	r0, r9
 8004c3e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c42:	4b07      	ldr	r3, [pc, #28]	; (8004c60 <__mdiff+0x144>)
 8004c44:	4807      	ldr	r0, [pc, #28]	; (8004c64 <__mdiff+0x148>)
 8004c46:	464a      	mov	r2, r9
 8004c48:	f44f 7110 	mov.w	r1, #576	; 0x240
 8004c4c:	f001 fb48 	bl	80062e0 <__assert_func>
 8004c50:	4b03      	ldr	r3, [pc, #12]	; (8004c60 <__mdiff+0x144>)
 8004c52:	4804      	ldr	r0, [pc, #16]	; (8004c64 <__mdiff+0x148>)
 8004c54:	464a      	mov	r2, r9
 8004c56:	f240 2132 	movw	r1, #562	; 0x232
 8004c5a:	f001 fb41 	bl	80062e0 <__assert_func>
 8004c5e:	bf00      	nop
 8004c60:	0801c118 	.word	0x0801c118
 8004c64:	0801c160 	.word	0x0801c160

08004c68 <__ulp>:
 8004c68:	b082      	sub	sp, #8
 8004c6a:	ed8d 0b00 	vstr	d0, [sp]
 8004c6e:	4b15      	ldr	r3, [pc, #84]	; (8004cc4 <__ulp+0x5c>)
 8004c70:	9a01      	ldr	r2, [sp, #4]
 8004c72:	4013      	ands	r3, r2
 8004c74:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	dd05      	ble.n	8004c88 <__ulp+0x20>
 8004c7c:	2000      	movs	r0, #0
 8004c7e:	4619      	mov	r1, r3
 8004c80:	ec41 0b10 	vmov	d0, r0, r1
 8004c84:	b002      	add	sp, #8
 8004c86:	4770      	bx	lr
 8004c88:	425b      	negs	r3, r3
 8004c8a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8004c8e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8004c92:	da08      	bge.n	8004ca6 <__ulp+0x3e>
 8004c94:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004c98:	2000      	movs	r0, #0
 8004c9a:	fa43 f102 	asr.w	r1, r3, r2
 8004c9e:	ec41 0b10 	vmov	d0, r0, r1
 8004ca2:	b002      	add	sp, #8
 8004ca4:	4770      	bx	lr
 8004ca6:	3a14      	subs	r2, #20
 8004ca8:	2a1e      	cmp	r2, #30
 8004caa:	bfda      	itte	le
 8004cac:	f04f 4300 	movle.w	r3, #2147483648	; 0x80000000
 8004cb0:	fa23 f202 	lsrle.w	r2, r3, r2
 8004cb4:	2201      	movgt	r2, #1
 8004cb6:	2100      	movs	r1, #0
 8004cb8:	4610      	mov	r0, r2
 8004cba:	ec41 0b10 	vmov	d0, r0, r1
 8004cbe:	b002      	add	sp, #8
 8004cc0:	4770      	bx	lr
 8004cc2:	bf00      	nop
 8004cc4:	7ff00000 	.word	0x7ff00000

08004cc8 <__b2d>:
 8004cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cca:	6904      	ldr	r4, [r0, #16]
 8004ccc:	f100 0614 	add.w	r6, r0, #20
 8004cd0:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8004cd4:	1f27      	subs	r7, r4, #4
 8004cd6:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8004cda:	4628      	mov	r0, r5
 8004cdc:	f7ff fcf8 	bl	80046d0 <__hi0bits>
 8004ce0:	f1c0 0320 	rsb	r3, r0, #32
 8004ce4:	280a      	cmp	r0, #10
 8004ce6:	600b      	str	r3, [r1, #0]
 8004ce8:	dd31      	ble.n	8004d4e <__b2d+0x86>
 8004cea:	42be      	cmp	r6, r7
 8004cec:	d21b      	bcs.n	8004d26 <__b2d+0x5e>
 8004cee:	380b      	subs	r0, #11
 8004cf0:	f854 1c08 	ldr.w	r1, [r4, #-8]
 8004cf4:	d023      	beq.n	8004d3e <__b2d+0x76>
 8004cf6:	f1c0 0c20 	rsb	ip, r0, #32
 8004cfa:	4085      	lsls	r5, r0
 8004cfc:	fa21 f70c 	lsr.w	r7, r1, ip
 8004d00:	432f      	orrs	r7, r5
 8004d02:	f1a4 0508 	sub.w	r5, r4, #8
 8004d06:	f047 537f 	orr.w	r3, r7, #1069547520	; 0x3fc00000
 8004d0a:	42ae      	cmp	r6, r5
 8004d0c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8004d10:	d236      	bcs.n	8004d80 <__b2d+0xb8>
 8004d12:	4081      	lsls	r1, r0
 8004d14:	f854 0c0c 	ldr.w	r0, [r4, #-12]
 8004d18:	fa20 f00c 	lsr.w	r0, r0, ip
 8004d1c:	4308      	orrs	r0, r1
 8004d1e:	4602      	mov	r2, r0
 8004d20:	ec43 2b10 	vmov	d0, r2, r3
 8004d24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d26:	380b      	subs	r0, #11
 8004d28:	d008      	beq.n	8004d3c <__b2d+0x74>
 8004d2a:	fa05 f000 	lsl.w	r0, r5, r0
 8004d2e:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 8004d32:	2000      	movs	r0, #0
 8004d34:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8004d38:	4602      	mov	r2, r0
 8004d3a:	e7f1      	b.n	8004d20 <__b2d+0x58>
 8004d3c:	4601      	mov	r1, r0
 8004d3e:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8004d42:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8004d46:	460a      	mov	r2, r1
 8004d48:	ec43 2b10 	vmov	d0, r2, r3
 8004d4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d4e:	f1c0 0c0b 	rsb	ip, r0, #11
 8004d52:	fa25 f10c 	lsr.w	r1, r5, ip
 8004d56:	42be      	cmp	r6, r7
 8004d58:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
 8004d5c:	bf38      	it	cc
 8004d5e:	f854 1c08 	ldrcc.w	r1, [r4, #-8]
 8004d62:	f100 0015 	add.w	r0, r0, #21
 8004d66:	bf34      	ite	cc
 8004d68:	fa21 f10c 	lsrcc.w	r1, r1, ip
 8004d6c:	2100      	movcs	r1, #0
 8004d6e:	fa05 f000 	lsl.w	r0, r5, r0
 8004d72:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8004d76:	ea40 0201 	orr.w	r2, r0, r1
 8004d7a:	ec43 2b10 	vmov	d0, r2, r3
 8004d7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d80:	fa01 f000 	lsl.w	r0, r1, r0
 8004d84:	4602      	mov	r2, r0
 8004d86:	e7cb      	b.n	8004d20 <__b2d+0x58>

08004d88 <__d2b>:
 8004d88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004d8c:	4688      	mov	r8, r1
 8004d8e:	b083      	sub	sp, #12
 8004d90:	2101      	movs	r1, #1
 8004d92:	ec57 6b10 	vmov	r6, r7, d0
 8004d96:	4615      	mov	r5, r2
 8004d98:	f7ff fbbc 	bl	8004514 <_Balloc>
 8004d9c:	4604      	mov	r4, r0
 8004d9e:	2800      	cmp	r0, #0
 8004da0:	d04f      	beq.n	8004e42 <__d2b+0xba>
 8004da2:	f3c7 590a 	ubfx	r9, r7, #20, #11
 8004da6:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004daa:	f1b9 0f00 	cmp.w	r9, #0
 8004dae:	d001      	beq.n	8004db4 <__d2b+0x2c>
 8004db0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004db4:	2e00      	cmp	r6, #0
 8004db6:	9301      	str	r3, [sp, #4]
 8004db8:	d024      	beq.n	8004e04 <__d2b+0x7c>
 8004dba:	4668      	mov	r0, sp
 8004dbc:	9600      	str	r6, [sp, #0]
 8004dbe:	f7ff fca7 	bl	8004710 <__lo0bits>
 8004dc2:	2800      	cmp	r0, #0
 8004dc4:	d039      	beq.n	8004e3a <__d2b+0xb2>
 8004dc6:	e9dd 1300 	ldrd	r1, r3, [sp]
 8004dca:	f1c0 0220 	rsb	r2, r0, #32
 8004dce:	fa03 f202 	lsl.w	r2, r3, r2
 8004dd2:	430a      	orrs	r2, r1
 8004dd4:	40c3      	lsrs	r3, r0
 8004dd6:	6162      	str	r2, [r4, #20]
 8004dd8:	9301      	str	r3, [sp, #4]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	bf14      	ite	ne
 8004dde:	2202      	movne	r2, #2
 8004de0:	2201      	moveq	r2, #1
 8004de2:	61a3      	str	r3, [r4, #24]
 8004de4:	6122      	str	r2, [r4, #16]
 8004de6:	f1b9 0f00 	cmp.w	r9, #0
 8004dea:	d016      	beq.n	8004e1a <__d2b+0x92>
 8004dec:	f2a9 4333 	subw	r3, r9, #1075	; 0x433
 8004df0:	4403      	add	r3, r0
 8004df2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004df6:	f8c8 3000 	str.w	r3, [r8]
 8004dfa:	6028      	str	r0, [r5, #0]
 8004dfc:	4620      	mov	r0, r4
 8004dfe:	b003      	add	sp, #12
 8004e00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004e04:	a801      	add	r0, sp, #4
 8004e06:	f7ff fc83 	bl	8004710 <__lo0bits>
 8004e0a:	9b01      	ldr	r3, [sp, #4]
 8004e0c:	6163      	str	r3, [r4, #20]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	3020      	adds	r0, #32
 8004e12:	6122      	str	r2, [r4, #16]
 8004e14:	f1b9 0f00 	cmp.w	r9, #0
 8004e18:	d1e8      	bne.n	8004dec <__d2b+0x64>
 8004e1a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8004e1e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004e22:	f8c8 0000 	str.w	r0, [r8]
 8004e26:	6918      	ldr	r0, [r3, #16]
 8004e28:	f7ff fc52 	bl	80046d0 <__hi0bits>
 8004e2c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8004e30:	6028      	str	r0, [r5, #0]
 8004e32:	4620      	mov	r0, r4
 8004e34:	b003      	add	sp, #12
 8004e36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004e3a:	9b00      	ldr	r3, [sp, #0]
 8004e3c:	6163      	str	r3, [r4, #20]
 8004e3e:	9b01      	ldr	r3, [sp, #4]
 8004e40:	e7cb      	b.n	8004dda <__d2b+0x52>
 8004e42:	4b03      	ldr	r3, [pc, #12]	; (8004e50 <__d2b+0xc8>)
 8004e44:	4803      	ldr	r0, [pc, #12]	; (8004e54 <__d2b+0xcc>)
 8004e46:	4622      	mov	r2, r4
 8004e48:	f240 310a 	movw	r1, #778	; 0x30a
 8004e4c:	f001 fa48 	bl	80062e0 <__assert_func>
 8004e50:	0801c118 	.word	0x0801c118
 8004e54:	0801c160 	.word	0x0801c160

08004e58 <__ratio>:
 8004e58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004e5c:	b083      	sub	sp, #12
 8004e5e:	460e      	mov	r6, r1
 8004e60:	4669      	mov	r1, sp
 8004e62:	4607      	mov	r7, r0
 8004e64:	f7ff ff30 	bl	8004cc8 <__b2d>
 8004e68:	a901      	add	r1, sp, #4
 8004e6a:	4630      	mov	r0, r6
 8004e6c:	ec55 4b10 	vmov	r4, r5, d0
 8004e70:	f7ff ff2a 	bl	8004cc8 <__b2d>
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	6931      	ldr	r1, [r6, #16]
 8004e78:	1a59      	subs	r1, r3, r1
 8004e7a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004e7e:	1ad3      	subs	r3, r2, r3
 8004e80:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	ec51 0b10 	vmov	r0, r1, d0
 8004e8a:	dd0d      	ble.n	8004ea8 <__ratio+0x50>
 8004e8c:	eb05 5903 	add.w	r9, r5, r3, lsl #20
 8004e90:	464d      	mov	r5, r9
 8004e92:	4602      	mov	r2, r0
 8004e94:	460b      	mov	r3, r1
 8004e96:	4620      	mov	r0, r4
 8004e98:	4629      	mov	r1, r5
 8004e9a:	f002 fa15 	bl	80072c8 <__aeabi_ddiv>
 8004e9e:	ec41 0b10 	vmov	d0, r0, r1
 8004ea2:	b003      	add	sp, #12
 8004ea4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004ea8:	ebc3 3303 	rsb	r3, r3, r3, lsl #12
 8004eac:	eb01 5703 	add.w	r7, r1, r3, lsl #20
 8004eb0:	4639      	mov	r1, r7
 8004eb2:	e7ee      	b.n	8004e92 <__ratio+0x3a>

08004eb4 <_mprec_log10>:
 8004eb4:	2817      	cmp	r0, #23
 8004eb6:	b570      	push	{r4, r5, r6, lr}
 8004eb8:	4606      	mov	r6, r0
 8004eba:	dd0c      	ble.n	8004ed6 <_mprec_log10+0x22>
 8004ebc:	490a      	ldr	r1, [pc, #40]	; (8004ee8 <_mprec_log10+0x34>)
 8004ebe:	4d0b      	ldr	r5, [pc, #44]	; (8004eec <_mprec_log10+0x38>)
 8004ec0:	2000      	movs	r0, #0
 8004ec2:	2400      	movs	r4, #0
 8004ec4:	4622      	mov	r2, r4
 8004ec6:	462b      	mov	r3, r5
 8004ec8:	f002 f8d4 	bl	8007074 <__aeabi_dmul>
 8004ecc:	3e01      	subs	r6, #1
 8004ece:	d1f9      	bne.n	8004ec4 <_mprec_log10+0x10>
 8004ed0:	ec41 0b10 	vmov	d0, r0, r1
 8004ed4:	bd70      	pop	{r4, r5, r6, pc}
 8004ed6:	4b06      	ldr	r3, [pc, #24]	; (8004ef0 <_mprec_log10+0x3c>)
 8004ed8:	eb03 06c0 	add.w	r6, r3, r0, lsl #3
 8004edc:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
 8004ee0:	ec41 0b10 	vmov	d0, r0, r1
 8004ee4:	bd70      	pop	{r4, r5, r6, pc}
 8004ee6:	bf00      	nop
 8004ee8:	3ff00000 	.word	0x3ff00000
 8004eec:	40240000 	.word	0x40240000
 8004ef0:	0800cd10 	.word	0x0800cd10

08004ef4 <__copybits>:
 8004ef4:	3901      	subs	r1, #1
 8004ef6:	1149      	asrs	r1, r1, #5
 8004ef8:	f101 0c01 	add.w	ip, r1, #1
 8004efc:	6911      	ldr	r1, [r2, #16]
 8004efe:	f102 0314 	add.w	r3, r2, #20
 8004f02:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8004f06:	428b      	cmp	r3, r1
 8004f08:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8004f0c:	d216      	bcs.n	8004f3c <__copybits+0x48>
 8004f0e:	b510      	push	{r4, lr}
 8004f10:	f1a0 0e04 	sub.w	lr, r0, #4
 8004f14:	f853 4b04 	ldr.w	r4, [r3], #4
 8004f18:	f84e 4f04 	str.w	r4, [lr, #4]!
 8004f1c:	4299      	cmp	r1, r3
 8004f1e:	d8f9      	bhi.n	8004f14 <__copybits+0x20>
 8004f20:	1a8b      	subs	r3, r1, r2
 8004f22:	3b15      	subs	r3, #21
 8004f24:	f023 0303 	bic.w	r3, r3, #3
 8004f28:	3304      	adds	r3, #4
 8004f2a:	4418      	add	r0, r3
 8004f2c:	4584      	cmp	ip, r0
 8004f2e:	d904      	bls.n	8004f3a <__copybits+0x46>
 8004f30:	2300      	movs	r3, #0
 8004f32:	f840 3b04 	str.w	r3, [r0], #4
 8004f36:	4584      	cmp	ip, r0
 8004f38:	d8fb      	bhi.n	8004f32 <__copybits+0x3e>
 8004f3a:	bd10      	pop	{r4, pc}
 8004f3c:	4584      	cmp	ip, r0
 8004f3e:	d905      	bls.n	8004f4c <__copybits+0x58>
 8004f40:	2300      	movs	r3, #0
 8004f42:	f840 3b04 	str.w	r3, [r0], #4
 8004f46:	4584      	cmp	ip, r0
 8004f48:	d8fb      	bhi.n	8004f42 <__copybits+0x4e>
 8004f4a:	4770      	bx	lr
 8004f4c:	4770      	bx	lr
 8004f4e:	bf00      	nop

08004f50 <__any_on>:
 8004f50:	6903      	ldr	r3, [r0, #16]
 8004f52:	114a      	asrs	r2, r1, #5
 8004f54:	4293      	cmp	r3, r2
 8004f56:	f100 0014 	add.w	r0, r0, #20
 8004f5a:	da09      	bge.n	8004f70 <__any_on+0x20>
 8004f5c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8004f60:	e002      	b.n	8004f68 <__any_on+0x18>
 8004f62:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8004f66:	b9ca      	cbnz	r2, 8004f9c <__any_on+0x4c>
 8004f68:	4283      	cmp	r3, r0
 8004f6a:	d8fa      	bhi.n	8004f62 <__any_on+0x12>
 8004f6c:	2000      	movs	r0, #0
 8004f6e:	4770      	bx	lr
 8004f70:	dd11      	ble.n	8004f96 <__any_on+0x46>
 8004f72:	f011 011f 	ands.w	r1, r1, #31
 8004f76:	d00e      	beq.n	8004f96 <__any_on+0x46>
 8004f78:	b410      	push	{r4}
 8004f7a:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
 8004f7e:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 8004f82:	fa24 f201 	lsr.w	r2, r4, r1
 8004f86:	fa02 f101 	lsl.w	r1, r2, r1
 8004f8a:	428c      	cmp	r4, r1
 8004f8c:	d00c      	beq.n	8004fa8 <__any_on+0x58>
 8004f8e:	2001      	movs	r0, #1
 8004f90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004f94:	4770      	bx	lr
 8004f96:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 8004f9a:	e7e5      	b.n	8004f68 <__any_on+0x18>
 8004f9c:	2001      	movs	r0, #1
 8004f9e:	4770      	bx	lr
 8004fa0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8004fa4:	2a00      	cmp	r2, #0
 8004fa6:	d1f2      	bne.n	8004f8e <__any_on+0x3e>
 8004fa8:	4283      	cmp	r3, r0
 8004faa:	d8f9      	bhi.n	8004fa0 <__any_on+0x50>
 8004fac:	2000      	movs	r0, #0
 8004fae:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004fb2:	4770      	bx	lr

08004fb4 <_putc_r>:
 8004fb4:	b570      	push	{r4, r5, r6, lr}
 8004fb6:	460d      	mov	r5, r1
 8004fb8:	4616      	mov	r6, r2
 8004fba:	4604      	mov	r4, r0
 8004fbc:	b108      	cbz	r0, 8004fc2 <_putc_r+0xe>
 8004fbe:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004fc0:	b17b      	cbz	r3, 8004fe2 <_putc_r+0x2e>
 8004fc2:	68b3      	ldr	r3, [r6, #8]
 8004fc4:	3b01      	subs	r3, #1
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	60b3      	str	r3, [r6, #8]
 8004fca:	da11      	bge.n	8004ff0 <_putc_r+0x3c>
 8004fcc:	69b0      	ldr	r0, [r6, #24]
 8004fce:	4283      	cmp	r3, r0
 8004fd0:	db14      	blt.n	8004ffc <_putc_r+0x48>
 8004fd2:	b2e8      	uxtb	r0, r5
 8004fd4:	280a      	cmp	r0, #10
 8004fd6:	d011      	beq.n	8004ffc <_putc_r+0x48>
 8004fd8:	6833      	ldr	r3, [r6, #0]
 8004fda:	1c5c      	adds	r4, r3, #1
 8004fdc:	6034      	str	r4, [r6, #0]
 8004fde:	701d      	strb	r5, [r3, #0]
 8004fe0:	bd70      	pop	{r4, r5, r6, pc}
 8004fe2:	f7fe fa91 	bl	8003508 <__sinit>
 8004fe6:	68b3      	ldr	r3, [r6, #8]
 8004fe8:	3b01      	subs	r3, #1
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	60b3      	str	r3, [r6, #8]
 8004fee:	dbed      	blt.n	8004fcc <_putc_r+0x18>
 8004ff0:	6833      	ldr	r3, [r6, #0]
 8004ff2:	1c5c      	adds	r4, r3, #1
 8004ff4:	6034      	str	r4, [r6, #0]
 8004ff6:	701d      	strb	r5, [r3, #0]
 8004ff8:	b2e8      	uxtb	r0, r5
 8004ffa:	bd70      	pop	{r4, r5, r6, pc}
 8004ffc:	4632      	mov	r2, r6
 8004ffe:	4629      	mov	r1, r5
 8005000:	4620      	mov	r0, r4
 8005002:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005006:	f001 b907 	b.w	8006218 <__swbuf_r>
 800500a:	bf00      	nop

0800500c <putc>:
 800500c:	4b16      	ldr	r3, [pc, #88]	; (8005068 <putc+0x5c>)
 800500e:	b570      	push	{r4, r5, r6, lr}
 8005010:	681e      	ldr	r6, [r3, #0]
 8005012:	4605      	mov	r5, r0
 8005014:	460c      	mov	r4, r1
 8005016:	b10e      	cbz	r6, 800501c <putc+0x10>
 8005018:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 800501a:	b17b      	cbz	r3, 800503c <putc+0x30>
 800501c:	68a3      	ldr	r3, [r4, #8]
 800501e:	3b01      	subs	r3, #1
 8005020:	2b00      	cmp	r3, #0
 8005022:	60a3      	str	r3, [r4, #8]
 8005024:	da12      	bge.n	800504c <putc+0x40>
 8005026:	69a2      	ldr	r2, [r4, #24]
 8005028:	4293      	cmp	r3, r2
 800502a:	db15      	blt.n	8005058 <putc+0x4c>
 800502c:	b2e8      	uxtb	r0, r5
 800502e:	280a      	cmp	r0, #10
 8005030:	d012      	beq.n	8005058 <putc+0x4c>
 8005032:	6823      	ldr	r3, [r4, #0]
 8005034:	1c5a      	adds	r2, r3, #1
 8005036:	6022      	str	r2, [r4, #0]
 8005038:	701d      	strb	r5, [r3, #0]
 800503a:	bd70      	pop	{r4, r5, r6, pc}
 800503c:	4630      	mov	r0, r6
 800503e:	f7fe fa63 	bl	8003508 <__sinit>
 8005042:	68a3      	ldr	r3, [r4, #8]
 8005044:	3b01      	subs	r3, #1
 8005046:	2b00      	cmp	r3, #0
 8005048:	60a3      	str	r3, [r4, #8]
 800504a:	dbec      	blt.n	8005026 <putc+0x1a>
 800504c:	6823      	ldr	r3, [r4, #0]
 800504e:	1c5a      	adds	r2, r3, #1
 8005050:	6022      	str	r2, [r4, #0]
 8005052:	701d      	strb	r5, [r3, #0]
 8005054:	b2e8      	uxtb	r0, r5
 8005056:	bd70      	pop	{r4, r5, r6, pc}
 8005058:	4622      	mov	r2, r4
 800505a:	4629      	mov	r1, r5
 800505c:	4630      	mov	r0, r6
 800505e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005062:	f001 b8d9 	b.w	8006218 <__swbuf_r>
 8005066:	bf00      	nop
 8005068:	20000008 	.word	0x20000008

0800506c <_realloc_r>:
 800506c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005070:	4617      	mov	r7, r2
 8005072:	2900      	cmp	r1, #0
 8005074:	f000 8098 	beq.w	80051a8 <_realloc_r+0x13c>
 8005078:	f107 050b 	add.w	r5, r7, #11
 800507c:	4680      	mov	r8, r0
 800507e:	460c      	mov	r4, r1
 8005080:	f7ff fa44 	bl	800450c <__malloc_lock>
 8005084:	2d16      	cmp	r5, #22
 8005086:	d85d      	bhi.n	8005144 <_realloc_r+0xd8>
 8005088:	2510      	movs	r5, #16
 800508a:	462a      	mov	r2, r5
 800508c:	42af      	cmp	r7, r5
 800508e:	d85e      	bhi.n	800514e <_realloc_r+0xe2>
 8005090:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8005094:	f021 0603 	bic.w	r6, r1, #3
 8005098:	4296      	cmp	r6, r2
 800509a:	f1a4 0908 	sub.w	r9, r4, #8
 800509e:	da62      	bge.n	8005166 <_realloc_r+0xfa>
 80050a0:	4bbc      	ldr	r3, [pc, #752]	; (8005394 <_realloc_r+0x328>)
 80050a2:	f8d3 c008 	ldr.w	ip, [r3, #8]
 80050a6:	eb09 0006 	add.w	r0, r9, r6
 80050aa:	4584      	cmp	ip, r0
 80050ac:	f000 8097 	beq.w	80051de <_realloc_r+0x172>
 80050b0:	f8d0 c004 	ldr.w	ip, [r0, #4]
 80050b4:	f02c 0301 	bic.w	r3, ip, #1
 80050b8:	4403      	add	r3, r0
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	07db      	lsls	r3, r3, #31
 80050be:	d468      	bmi.n	8005192 <_realloc_r+0x126>
 80050c0:	f02c 0c03 	bic.w	ip, ip, #3
 80050c4:	eb06 030c 	add.w	r3, r6, ip
 80050c8:	4293      	cmp	r3, r2
 80050ca:	da47      	bge.n	800515c <_realloc_r+0xf0>
 80050cc:	07cb      	lsls	r3, r1, #31
 80050ce:	d410      	bmi.n	80050f2 <_realloc_r+0x86>
 80050d0:	f854 3c08 	ldr.w	r3, [r4, #-8]
 80050d4:	eba9 0a03 	sub.w	sl, r9, r3
 80050d8:	f8da 3004 	ldr.w	r3, [sl, #4]
 80050dc:	f023 0103 	bic.w	r1, r3, #3
 80050e0:	448c      	add	ip, r1
 80050e2:	44b4      	add	ip, r6
 80050e4:	4594      	cmp	ip, r2
 80050e6:	f280 8111 	bge.w	800530c <_realloc_r+0x2a0>
 80050ea:	1873      	adds	r3, r6, r1
 80050ec:	4293      	cmp	r3, r2
 80050ee:	f280 80e8 	bge.w	80052c2 <_realloc_r+0x256>
 80050f2:	4639      	mov	r1, r7
 80050f4:	4640      	mov	r0, r8
 80050f6:	f7fe fdf3 	bl	8003ce0 <_malloc_r>
 80050fa:	4607      	mov	r7, r0
 80050fc:	b1e0      	cbz	r0, 8005138 <_realloc_r+0xcc>
 80050fe:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8005102:	f023 0301 	bic.w	r3, r3, #1
 8005106:	444b      	add	r3, r9
 8005108:	f1a0 0208 	sub.w	r2, r0, #8
 800510c:	4293      	cmp	r3, r2
 800510e:	f000 80d2 	beq.w	80052b6 <_realloc_r+0x24a>
 8005112:	1f32      	subs	r2, r6, #4
 8005114:	2a24      	cmp	r2, #36	; 0x24
 8005116:	f200 80f5 	bhi.w	8005304 <_realloc_r+0x298>
 800511a:	2a13      	cmp	r2, #19
 800511c:	f200 80ac 	bhi.w	8005278 <_realloc_r+0x20c>
 8005120:	4603      	mov	r3, r0
 8005122:	4622      	mov	r2, r4
 8005124:	6811      	ldr	r1, [r2, #0]
 8005126:	6019      	str	r1, [r3, #0]
 8005128:	6851      	ldr	r1, [r2, #4]
 800512a:	6059      	str	r1, [r3, #4]
 800512c:	6892      	ldr	r2, [r2, #8]
 800512e:	609a      	str	r2, [r3, #8]
 8005130:	4621      	mov	r1, r4
 8005132:	4640      	mov	r0, r8
 8005134:	f7fe fa58 	bl	80035e8 <_free_r>
 8005138:	4640      	mov	r0, r8
 800513a:	f7ff f9e9 	bl	8004510 <__malloc_unlock>
 800513e:	4638      	mov	r0, r7
 8005140:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005144:	f025 0507 	bic.w	r5, r5, #7
 8005148:	2d00      	cmp	r5, #0
 800514a:	462a      	mov	r2, r5
 800514c:	da9e      	bge.n	800508c <_realloc_r+0x20>
 800514e:	230c      	movs	r3, #12
 8005150:	f8c8 3000 	str.w	r3, [r8]
 8005154:	2700      	movs	r7, #0
 8005156:	4638      	mov	r0, r7
 8005158:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800515c:	461e      	mov	r6, r3
 800515e:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 8005162:	60d3      	str	r3, [r2, #12]
 8005164:	609a      	str	r2, [r3, #8]
 8005166:	1b73      	subs	r3, r6, r5
 8005168:	2b0f      	cmp	r3, #15
 800516a:	d822      	bhi.n	80051b2 <_realloc_r+0x146>
 800516c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8005170:	f003 0301 	and.w	r3, r3, #1
 8005174:	4333      	orrs	r3, r6
 8005176:	444e      	add	r6, r9
 8005178:	f8c9 3004 	str.w	r3, [r9, #4]
 800517c:	6873      	ldr	r3, [r6, #4]
 800517e:	f043 0301 	orr.w	r3, r3, #1
 8005182:	6073      	str	r3, [r6, #4]
 8005184:	4640      	mov	r0, r8
 8005186:	4627      	mov	r7, r4
 8005188:	f7ff f9c2 	bl	8004510 <__malloc_unlock>
 800518c:	4638      	mov	r0, r7
 800518e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005192:	07c9      	lsls	r1, r1, #31
 8005194:	d4ad      	bmi.n	80050f2 <_realloc_r+0x86>
 8005196:	f854 3c08 	ldr.w	r3, [r4, #-8]
 800519a:	eba9 0a03 	sub.w	sl, r9, r3
 800519e:	f8da 1004 	ldr.w	r1, [sl, #4]
 80051a2:	f021 0103 	bic.w	r1, r1, #3
 80051a6:	e7a0      	b.n	80050ea <_realloc_r+0x7e>
 80051a8:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051ac:	4611      	mov	r1, r2
 80051ae:	f7fe bd97 	b.w	8003ce0 <_malloc_r>
 80051b2:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80051b6:	f001 0101 	and.w	r1, r1, #1
 80051ba:	4329      	orrs	r1, r5
 80051bc:	f8c9 1004 	str.w	r1, [r9, #4]
 80051c0:	eb09 0105 	add.w	r1, r9, r5
 80051c4:	444e      	add	r6, r9
 80051c6:	f043 0301 	orr.w	r3, r3, #1
 80051ca:	604b      	str	r3, [r1, #4]
 80051cc:	6873      	ldr	r3, [r6, #4]
 80051ce:	f043 0301 	orr.w	r3, r3, #1
 80051d2:	3108      	adds	r1, #8
 80051d4:	6073      	str	r3, [r6, #4]
 80051d6:	4640      	mov	r0, r8
 80051d8:	f7fe fa06 	bl	80035e8 <_free_r>
 80051dc:	e7d2      	b.n	8005184 <_realloc_r+0x118>
 80051de:	f8dc 0004 	ldr.w	r0, [ip, #4]
 80051e2:	f020 0b03 	bic.w	fp, r0, #3
 80051e6:	eb06 0c0b 	add.w	ip, r6, fp
 80051ea:	f105 0010 	add.w	r0, r5, #16
 80051ee:	4584      	cmp	ip, r0
 80051f0:	da4d      	bge.n	800528e <_realloc_r+0x222>
 80051f2:	07c9      	lsls	r1, r1, #31
 80051f4:	f53f af7d 	bmi.w	80050f2 <_realloc_r+0x86>
 80051f8:	f854 1c08 	ldr.w	r1, [r4, #-8]
 80051fc:	eba9 0a01 	sub.w	sl, r9, r1
 8005200:	f8da 1004 	ldr.w	r1, [sl, #4]
 8005204:	f021 0103 	bic.w	r1, r1, #3
 8005208:	448b      	add	fp, r1
 800520a:	44b3      	add	fp, r6
 800520c:	4558      	cmp	r0, fp
 800520e:	f73f af6c 	bgt.w	80050ea <_realloc_r+0x7e>
 8005212:	4657      	mov	r7, sl
 8005214:	f8da 100c 	ldr.w	r1, [sl, #12]
 8005218:	f857 0f08 	ldr.w	r0, [r7, #8]!
 800521c:	1f32      	subs	r2, r6, #4
 800521e:	2a24      	cmp	r2, #36	; 0x24
 8005220:	60c1      	str	r1, [r0, #12]
 8005222:	6088      	str	r0, [r1, #8]
 8005224:	f200 80db 	bhi.w	80053de <_realloc_r+0x372>
 8005228:	2a13      	cmp	r2, #19
 800522a:	f240 80d6 	bls.w	80053da <_realloc_r+0x36e>
 800522e:	6821      	ldr	r1, [r4, #0]
 8005230:	f8ca 1008 	str.w	r1, [sl, #8]
 8005234:	6861      	ldr	r1, [r4, #4]
 8005236:	f8ca 100c 	str.w	r1, [sl, #12]
 800523a:	2a1b      	cmp	r2, #27
 800523c:	f200 80df 	bhi.w	80053fe <_realloc_r+0x392>
 8005240:	3408      	adds	r4, #8
 8005242:	f10a 0210 	add.w	r2, sl, #16
 8005246:	6821      	ldr	r1, [r4, #0]
 8005248:	6011      	str	r1, [r2, #0]
 800524a:	6861      	ldr	r1, [r4, #4]
 800524c:	6051      	str	r1, [r2, #4]
 800524e:	68a1      	ldr	r1, [r4, #8]
 8005250:	6091      	str	r1, [r2, #8]
 8005252:	eb0a 0105 	add.w	r1, sl, r5
 8005256:	ebab 0205 	sub.w	r2, fp, r5
 800525a:	f042 0201 	orr.w	r2, r2, #1
 800525e:	6099      	str	r1, [r3, #8]
 8005260:	604a      	str	r2, [r1, #4]
 8005262:	f8da 3004 	ldr.w	r3, [sl, #4]
 8005266:	f003 0301 	and.w	r3, r3, #1
 800526a:	431d      	orrs	r5, r3
 800526c:	4640      	mov	r0, r8
 800526e:	f8ca 5004 	str.w	r5, [sl, #4]
 8005272:	f7ff f94d 	bl	8004510 <__malloc_unlock>
 8005276:	e76e      	b.n	8005156 <_realloc_r+0xea>
 8005278:	6823      	ldr	r3, [r4, #0]
 800527a:	6003      	str	r3, [r0, #0]
 800527c:	6863      	ldr	r3, [r4, #4]
 800527e:	6043      	str	r3, [r0, #4]
 8005280:	2a1b      	cmp	r2, #27
 8005282:	d868      	bhi.n	8005356 <_realloc_r+0x2ea>
 8005284:	f104 0208 	add.w	r2, r4, #8
 8005288:	f100 0308 	add.w	r3, r0, #8
 800528c:	e74a      	b.n	8005124 <_realloc_r+0xb8>
 800528e:	eb09 0205 	add.w	r2, r9, r5
 8005292:	609a      	str	r2, [r3, #8]
 8005294:	ebac 0305 	sub.w	r3, ip, r5
 8005298:	f043 0301 	orr.w	r3, r3, #1
 800529c:	6053      	str	r3, [r2, #4]
 800529e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80052a2:	f003 0301 	and.w	r3, r3, #1
 80052a6:	431d      	orrs	r5, r3
 80052a8:	4640      	mov	r0, r8
 80052aa:	f844 5c04 	str.w	r5, [r4, #-4]
 80052ae:	f7ff f92f 	bl	8004510 <__malloc_unlock>
 80052b2:	4627      	mov	r7, r4
 80052b4:	e74f      	b.n	8005156 <_realloc_r+0xea>
 80052b6:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80052ba:	f023 0303 	bic.w	r3, r3, #3
 80052be:	441e      	add	r6, r3
 80052c0:	e751      	b.n	8005166 <_realloc_r+0xfa>
 80052c2:	4657      	mov	r7, sl
 80052c4:	f8da 100c 	ldr.w	r1, [sl, #12]
 80052c8:	f857 0f08 	ldr.w	r0, [r7, #8]!
 80052cc:	1f32      	subs	r2, r6, #4
 80052ce:	2a24      	cmp	r2, #36	; 0x24
 80052d0:	60c1      	str	r1, [r0, #12]
 80052d2:	6088      	str	r0, [r1, #8]
 80052d4:	d84c      	bhi.n	8005370 <_realloc_r+0x304>
 80052d6:	2a13      	cmp	r2, #19
 80052d8:	d948      	bls.n	800536c <_realloc_r+0x300>
 80052da:	6821      	ldr	r1, [r4, #0]
 80052dc:	f8ca 1008 	str.w	r1, [sl, #8]
 80052e0:	6861      	ldr	r1, [r4, #4]
 80052e2:	f8ca 100c 	str.w	r1, [sl, #12]
 80052e6:	2a1b      	cmp	r2, #27
 80052e8:	d856      	bhi.n	8005398 <_realloc_r+0x32c>
 80052ea:	3408      	adds	r4, #8
 80052ec:	f10a 0210 	add.w	r2, sl, #16
 80052f0:	461e      	mov	r6, r3
 80052f2:	6823      	ldr	r3, [r4, #0]
 80052f4:	6013      	str	r3, [r2, #0]
 80052f6:	6863      	ldr	r3, [r4, #4]
 80052f8:	6053      	str	r3, [r2, #4]
 80052fa:	68a3      	ldr	r3, [r4, #8]
 80052fc:	6093      	str	r3, [r2, #8]
 80052fe:	46d1      	mov	r9, sl
 8005300:	463c      	mov	r4, r7
 8005302:	e730      	b.n	8005166 <_realloc_r+0xfa>
 8005304:	4621      	mov	r1, r4
 8005306:	f7ff f885 	bl	8004414 <memmove>
 800530a:	e711      	b.n	8005130 <_realloc_r+0xc4>
 800530c:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
 8005310:	4657      	mov	r7, sl
 8005312:	60cb      	str	r3, [r1, #12]
 8005314:	6099      	str	r1, [r3, #8]
 8005316:	f857 1f08 	ldr.w	r1, [r7, #8]!
 800531a:	f8da 300c 	ldr.w	r3, [sl, #12]
 800531e:	60cb      	str	r3, [r1, #12]
 8005320:	1f32      	subs	r2, r6, #4
 8005322:	2a24      	cmp	r2, #36	; 0x24
 8005324:	6099      	str	r1, [r3, #8]
 8005326:	d82d      	bhi.n	8005384 <_realloc_r+0x318>
 8005328:	2a13      	cmp	r2, #19
 800532a:	d929      	bls.n	8005380 <_realloc_r+0x314>
 800532c:	6823      	ldr	r3, [r4, #0]
 800532e:	f8ca 3008 	str.w	r3, [sl, #8]
 8005332:	6863      	ldr	r3, [r4, #4]
 8005334:	f8ca 300c 	str.w	r3, [sl, #12]
 8005338:	2a1b      	cmp	r2, #27
 800533a:	d842      	bhi.n	80053c2 <_realloc_r+0x356>
 800533c:	3408      	adds	r4, #8
 800533e:	f10a 0310 	add.w	r3, sl, #16
 8005342:	6822      	ldr	r2, [r4, #0]
 8005344:	601a      	str	r2, [r3, #0]
 8005346:	6862      	ldr	r2, [r4, #4]
 8005348:	605a      	str	r2, [r3, #4]
 800534a:	68a2      	ldr	r2, [r4, #8]
 800534c:	609a      	str	r2, [r3, #8]
 800534e:	4666      	mov	r6, ip
 8005350:	46d1      	mov	r9, sl
 8005352:	463c      	mov	r4, r7
 8005354:	e707      	b.n	8005166 <_realloc_r+0xfa>
 8005356:	68a3      	ldr	r3, [r4, #8]
 8005358:	6083      	str	r3, [r0, #8]
 800535a:	68e3      	ldr	r3, [r4, #12]
 800535c:	60c3      	str	r3, [r0, #12]
 800535e:	2a24      	cmp	r2, #36	; 0x24
 8005360:	d026      	beq.n	80053b0 <_realloc_r+0x344>
 8005362:	f104 0210 	add.w	r2, r4, #16
 8005366:	f100 0310 	add.w	r3, r0, #16
 800536a:	e6db      	b.n	8005124 <_realloc_r+0xb8>
 800536c:	463a      	mov	r2, r7
 800536e:	e7bf      	b.n	80052f0 <_realloc_r+0x284>
 8005370:	4621      	mov	r1, r4
 8005372:	4638      	mov	r0, r7
 8005374:	461e      	mov	r6, r3
 8005376:	46d1      	mov	r9, sl
 8005378:	f7ff f84c 	bl	8004414 <memmove>
 800537c:	463c      	mov	r4, r7
 800537e:	e6f2      	b.n	8005166 <_realloc_r+0xfa>
 8005380:	463b      	mov	r3, r7
 8005382:	e7de      	b.n	8005342 <_realloc_r+0x2d6>
 8005384:	4621      	mov	r1, r4
 8005386:	4638      	mov	r0, r7
 8005388:	4666      	mov	r6, ip
 800538a:	46d1      	mov	r9, sl
 800538c:	f7ff f842 	bl	8004414 <memmove>
 8005390:	463c      	mov	r4, r7
 8005392:	e6e8      	b.n	8005166 <_realloc_r+0xfa>
 8005394:	20000438 	.word	0x20000438
 8005398:	68a1      	ldr	r1, [r4, #8]
 800539a:	f8ca 1010 	str.w	r1, [sl, #16]
 800539e:	68e1      	ldr	r1, [r4, #12]
 80053a0:	f8ca 1014 	str.w	r1, [sl, #20]
 80053a4:	2a24      	cmp	r2, #36	; 0x24
 80053a6:	d020      	beq.n	80053ea <_realloc_r+0x37e>
 80053a8:	3410      	adds	r4, #16
 80053aa:	f10a 0218 	add.w	r2, sl, #24
 80053ae:	e79f      	b.n	80052f0 <_realloc_r+0x284>
 80053b0:	6923      	ldr	r3, [r4, #16]
 80053b2:	6103      	str	r3, [r0, #16]
 80053b4:	6961      	ldr	r1, [r4, #20]
 80053b6:	6141      	str	r1, [r0, #20]
 80053b8:	f104 0218 	add.w	r2, r4, #24
 80053bc:	f100 0318 	add.w	r3, r0, #24
 80053c0:	e6b0      	b.n	8005124 <_realloc_r+0xb8>
 80053c2:	68a3      	ldr	r3, [r4, #8]
 80053c4:	f8ca 3010 	str.w	r3, [sl, #16]
 80053c8:	68e3      	ldr	r3, [r4, #12]
 80053ca:	f8ca 3014 	str.w	r3, [sl, #20]
 80053ce:	2a24      	cmp	r2, #36	; 0x24
 80053d0:	d021      	beq.n	8005416 <_realloc_r+0x3aa>
 80053d2:	3410      	adds	r4, #16
 80053d4:	f10a 0318 	add.w	r3, sl, #24
 80053d8:	e7b3      	b.n	8005342 <_realloc_r+0x2d6>
 80053da:	463a      	mov	r2, r7
 80053dc:	e733      	b.n	8005246 <_realloc_r+0x1da>
 80053de:	4621      	mov	r1, r4
 80053e0:	4638      	mov	r0, r7
 80053e2:	f7ff f817 	bl	8004414 <memmove>
 80053e6:	4b16      	ldr	r3, [pc, #88]	; (8005440 <_realloc_r+0x3d4>)
 80053e8:	e733      	b.n	8005252 <_realloc_r+0x1e6>
 80053ea:	6922      	ldr	r2, [r4, #16]
 80053ec:	f8ca 2018 	str.w	r2, [sl, #24]
 80053f0:	6962      	ldr	r2, [r4, #20]
 80053f2:	f8ca 201c 	str.w	r2, [sl, #28]
 80053f6:	3418      	adds	r4, #24
 80053f8:	f10a 0220 	add.w	r2, sl, #32
 80053fc:	e778      	b.n	80052f0 <_realloc_r+0x284>
 80053fe:	68a1      	ldr	r1, [r4, #8]
 8005400:	f8ca 1010 	str.w	r1, [sl, #16]
 8005404:	68e1      	ldr	r1, [r4, #12]
 8005406:	f8ca 1014 	str.w	r1, [sl, #20]
 800540a:	2a24      	cmp	r2, #36	; 0x24
 800540c:	d00d      	beq.n	800542a <_realloc_r+0x3be>
 800540e:	3410      	adds	r4, #16
 8005410:	f10a 0218 	add.w	r2, sl, #24
 8005414:	e717      	b.n	8005246 <_realloc_r+0x1da>
 8005416:	6923      	ldr	r3, [r4, #16]
 8005418:	f8ca 3018 	str.w	r3, [sl, #24]
 800541c:	6963      	ldr	r3, [r4, #20]
 800541e:	f8ca 301c 	str.w	r3, [sl, #28]
 8005422:	3418      	adds	r4, #24
 8005424:	f10a 0320 	add.w	r3, sl, #32
 8005428:	e78b      	b.n	8005342 <_realloc_r+0x2d6>
 800542a:	6922      	ldr	r2, [r4, #16]
 800542c:	f8ca 2018 	str.w	r2, [sl, #24]
 8005430:	6962      	ldr	r2, [r4, #20]
 8005432:	f8ca 201c 	str.w	r2, [sl, #28]
 8005436:	3418      	adds	r4, #24
 8005438:	f10a 0220 	add.w	r2, sl, #32
 800543c:	e703      	b.n	8005246 <_realloc_r+0x1da>
 800543e:	bf00      	nop
 8005440:	20000438 	.word	0x20000438

08005444 <__sread>:
 8005444:	b510      	push	{r4, lr}
 8005446:	460c      	mov	r4, r1
 8005448:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800544c:	f002 fe88 	bl	8008160 <_read_r>
 8005450:	2800      	cmp	r0, #0
 8005452:	db03      	blt.n	800545c <__sread+0x18>
 8005454:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005456:	4403      	add	r3, r0
 8005458:	6523      	str	r3, [r4, #80]	; 0x50
 800545a:	bd10      	pop	{r4, pc}
 800545c:	89a3      	ldrh	r3, [r4, #12]
 800545e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005462:	81a3      	strh	r3, [r4, #12]
 8005464:	bd10      	pop	{r4, pc}
 8005466:	bf00      	nop

08005468 <__seofread>:
 8005468:	2000      	movs	r0, #0
 800546a:	4770      	bx	lr

0800546c <__swrite>:
 800546c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005470:	460c      	mov	r4, r1
 8005472:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
 8005476:	461f      	mov	r7, r3
 8005478:	05cb      	lsls	r3, r1, #23
 800547a:	4605      	mov	r5, r0
 800547c:	4616      	mov	r6, r2
 800547e:	d40b      	bmi.n	8005498 <__swrite+0x2c>
 8005480:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 8005484:	81a1      	strh	r1, [r4, #12]
 8005486:	463b      	mov	r3, r7
 8005488:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800548c:	4632      	mov	r2, r6
 800548e:	4628      	mov	r0, r5
 8005490:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005494:	f002 beee 	b.w	8008274 <_write_r>
 8005498:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800549c:	2302      	movs	r3, #2
 800549e:	2200      	movs	r2, #0
 80054a0:	f002 fd94 	bl	8007fcc <_lseek_r>
 80054a4:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 80054a8:	e7ea      	b.n	8005480 <__swrite+0x14>
 80054aa:	bf00      	nop

080054ac <__sseek>:
 80054ac:	b510      	push	{r4, lr}
 80054ae:	460c      	mov	r4, r1
 80054b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054b4:	f002 fd8a 	bl	8007fcc <_lseek_r>
 80054b8:	89a3      	ldrh	r3, [r4, #12]
 80054ba:	1c42      	adds	r2, r0, #1
 80054bc:	bf0e      	itee	eq
 80054be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80054c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80054c6:	6520      	strne	r0, [r4, #80]	; 0x50
 80054c8:	81a3      	strh	r3, [r4, #12]
 80054ca:	bd10      	pop	{r4, pc}

080054cc <__sclose>:
 80054cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054d0:	f002 bd72 	b.w	8007fb8 <_close_r>

080054d4 <__sprint_r.part.0>:
 80054d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054d8:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 80054da:	049c      	lsls	r4, r3, #18
 80054dc:	4690      	mov	r8, r2
 80054de:	d52d      	bpl.n	800553c <__sprint_r.part.0+0x68>
 80054e0:	6893      	ldr	r3, [r2, #8]
 80054e2:	6812      	ldr	r2, [r2, #0]
 80054e4:	b343      	cbz	r3, 8005538 <__sprint_r.part.0+0x64>
 80054e6:	468b      	mov	fp, r1
 80054e8:	4606      	mov	r6, r0
 80054ea:	f102 0908 	add.w	r9, r2, #8
 80054ee:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
 80054f2:	ea5f 079a 	movs.w	r7, sl, lsr #2
 80054f6:	d015      	beq.n	8005524 <__sprint_r.part.0+0x50>
 80054f8:	3d04      	subs	r5, #4
 80054fa:	2400      	movs	r4, #0
 80054fc:	e001      	b.n	8005502 <__sprint_r.part.0+0x2e>
 80054fe:	42a7      	cmp	r7, r4
 8005500:	d00e      	beq.n	8005520 <__sprint_r.part.0+0x4c>
 8005502:	f855 1f04 	ldr.w	r1, [r5, #4]!
 8005506:	465a      	mov	r2, fp
 8005508:	4630      	mov	r0, r6
 800550a:	f001 f81f 	bl	800654c <_fputwc_r>
 800550e:	1c43      	adds	r3, r0, #1
 8005510:	f104 0401 	add.w	r4, r4, #1
 8005514:	d1f3      	bne.n	80054fe <__sprint_r.part.0+0x2a>
 8005516:	2300      	movs	r3, #0
 8005518:	e9c8 3301 	strd	r3, r3, [r8, #4]
 800551c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005520:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005524:	f02a 0a03 	bic.w	sl, sl, #3
 8005528:	eba3 030a 	sub.w	r3, r3, sl
 800552c:	f8c8 3008 	str.w	r3, [r8, #8]
 8005530:	f109 0908 	add.w	r9, r9, #8
 8005534:	2b00      	cmp	r3, #0
 8005536:	d1da      	bne.n	80054ee <__sprint_r.part.0+0x1a>
 8005538:	2000      	movs	r0, #0
 800553a:	e7ec      	b.n	8005516 <__sprint_r.part.0+0x42>
 800553c:	f7fe f95a 	bl	80037f4 <__sfvwrite_r>
 8005540:	2300      	movs	r3, #0
 8005542:	e9c8 3301 	strd	r3, r3, [r8, #4]
 8005546:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800554a:	bf00      	nop

0800554c <__sprint_r>:
 800554c:	b410      	push	{r4}
 800554e:	6894      	ldr	r4, [r2, #8]
 8005550:	b114      	cbz	r4, 8005558 <__sprint_r+0xc>
 8005552:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005556:	e7bd      	b.n	80054d4 <__sprint_r.part.0>
 8005558:	4620      	mov	r0, r4
 800555a:	6054      	str	r4, [r2, #4]
 800555c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005560:	4770      	bx	lr
 8005562:	bf00      	nop

08005564 <_vfiprintf_r>:
 8005564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005568:	b0ab      	sub	sp, #172	; 0xac
 800556a:	461c      	mov	r4, r3
 800556c:	4688      	mov	r8, r1
 800556e:	4617      	mov	r7, r2
 8005570:	9306      	str	r3, [sp, #24]
 8005572:	4683      	mov	fp, r0
 8005574:	b118      	cbz	r0, 800557e <_vfiprintf_r+0x1a>
 8005576:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005578:	2b00      	cmp	r3, #0
 800557a:	f000 8225 	beq.w	80059c8 <_vfiprintf_r+0x464>
 800557e:	f9b8 100c 	ldrsh.w	r1, [r8, #12]
 8005582:	0488      	lsls	r0, r1, #18
 8005584:	b28a      	uxth	r2, r1
 8005586:	d40a      	bmi.n	800559e <_vfiprintf_r+0x3a>
 8005588:	f8d8 3064 	ldr.w	r3, [r8, #100]	; 0x64
 800558c:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
 8005590:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005594:	f8a8 200c 	strh.w	r2, [r8, #12]
 8005598:	f8c8 3064 	str.w	r3, [r8, #100]	; 0x64
 800559c:	b292      	uxth	r2, r2
 800559e:	0713      	lsls	r3, r2, #28
 80055a0:	f140 80a4 	bpl.w	80056ec <_vfiprintf_r+0x188>
 80055a4:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	f000 809f 	beq.w	80056ec <_vfiprintf_r+0x188>
 80055ae:	f002 021a 	and.w	r2, r2, #26
 80055b2:	2a0a      	cmp	r2, #10
 80055b4:	f000 80a8 	beq.w	8005708 <_vfiprintf_r+0x1a4>
 80055b8:	ab1a      	add	r3, sp, #104	; 0x68
 80055ba:	930d      	str	r3, [sp, #52]	; 0x34
 80055bc:	2300      	movs	r3, #0
 80055be:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
 80055c2:	9309      	str	r3, [sp, #36]	; 0x24
 80055c4:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 80055c8:	9305      	str	r3, [sp, #20]
 80055ca:	783b      	ldrb	r3, [r7, #0]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	f000 810d 	beq.w	80057ec <_vfiprintf_r+0x288>
 80055d2:	463c      	mov	r4, r7
 80055d4:	e004      	b.n	80055e0 <_vfiprintf_r+0x7c>
 80055d6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80055da:	2b00      	cmp	r3, #0
 80055dc:	f000 80e8 	beq.w	80057b0 <_vfiprintf_r+0x24c>
 80055e0:	2b25      	cmp	r3, #37	; 0x25
 80055e2:	d1f8      	bne.n	80055d6 <_vfiprintf_r+0x72>
 80055e4:	1be5      	subs	r5, r4, r7
 80055e6:	f040 80e5 	bne.w	80057b4 <_vfiprintf_r+0x250>
 80055ea:	7823      	ldrb	r3, [r4, #0]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	f000 80fd 	beq.w	80057ec <_vfiprintf_r+0x288>
 80055f2:	f04f 0200 	mov.w	r2, #0
 80055f6:	2100      	movs	r1, #0
 80055f8:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
 80055fc:	7863      	ldrb	r3, [r4, #1]
 80055fe:	9104      	str	r1, [sp, #16]
 8005600:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005604:	1c67      	adds	r7, r4, #1
 8005606:	4608      	mov	r0, r1
 8005608:	9202      	str	r2, [sp, #8]
 800560a:	468a      	mov	sl, r1
 800560c:	3701      	adds	r7, #1
 800560e:	f1a3 0220 	sub.w	r2, r3, #32
 8005612:	2a58      	cmp	r2, #88	; 0x58
 8005614:	f200 80f7 	bhi.w	8005806 <_vfiprintf_r+0x2a2>
 8005618:	e8df f012 	tbh	[pc, r2, lsl #1]
 800561c:	00f50233 	.word	0x00f50233
 8005620:	022f00f5 	.word	0x022f00f5
 8005624:	00f500f5 	.word	0x00f500f5
 8005628:	00f500f5 	.word	0x00f500f5
 800562c:	00f500f5 	.word	0x00f500f5
 8005630:	022b01e5 	.word	0x022b01e5
 8005634:	01f000f5 	.word	0x01f000f5
 8005638:	00f501f4 	.word	0x00f501f4
 800563c:	00590227 	.word	0x00590227
 8005640:	00590059 	.word	0x00590059
 8005644:	00590059 	.word	0x00590059
 8005648:	00590059 	.word	0x00590059
 800564c:	00590059 	.word	0x00590059
 8005650:	00f500f5 	.word	0x00f500f5
 8005654:	00f500f5 	.word	0x00f500f5
 8005658:	00f500f5 	.word	0x00f500f5
 800565c:	00f500f5 	.word	0x00f500f5
 8005660:	00f500f5 	.word	0x00f500f5
 8005664:	00f5020e 	.word	0x00f5020e
 8005668:	00f500f5 	.word	0x00f500f5
 800566c:	00f500f5 	.word	0x00f500f5
 8005670:	00f500f5 	.word	0x00f500f5
 8005674:	00f500f5 	.word	0x00f500f5
 8005678:	009400f5 	.word	0x009400f5
 800567c:	00f500f5 	.word	0x00f500f5
 8005680:	00f500f5 	.word	0x00f500f5
 8005684:	008400f5 	.word	0x008400f5
 8005688:	00f500f5 	.word	0x00f500f5
 800568c:	00f50248 	.word	0x00f50248
 8005690:	00f500f5 	.word	0x00f500f5
 8005694:	00f500f5 	.word	0x00f500f5
 8005698:	00f500f5 	.word	0x00f500f5
 800569c:	00f500f5 	.word	0x00f500f5
 80056a0:	023a00f5 	.word	0x023a00f5
 80056a4:	00f501a7 	.word	0x00f501a7
 80056a8:	00f500f5 	.word	0x00f500f5
 80056ac:	01a70289 	.word	0x01a70289
 80056b0:	00f500f5 	.word	0x00f500f5
 80056b4:	00f5027f 	.word	0x00f5027f
 80056b8:	00960269 	.word	0x00960269
 80056bc:	02c502c9 	.word	0x02c502c9
 80056c0:	02a400f5 	.word	0x02a400f5
 80056c4:	008600f5 	.word	0x008600f5
 80056c8:	00f500f5 	.word	0x00f500f5
 80056cc:	028d      	.short	0x028d
 80056ce:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80056d2:	2400      	movs	r4, #0
 80056d4:	f817 3b01 	ldrb.w	r3, [r7], #1
 80056d8:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80056dc:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80056e0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80056e4:	2a09      	cmp	r2, #9
 80056e6:	d9f5      	bls.n	80056d4 <_vfiprintf_r+0x170>
 80056e8:	9404      	str	r4, [sp, #16]
 80056ea:	e790      	b.n	800560e <_vfiprintf_r+0xaa>
 80056ec:	4641      	mov	r1, r8
 80056ee:	4658      	mov	r0, fp
 80056f0:	f7fc fc78 	bl	8001fe4 <__swsetup_r>
 80056f4:	2800      	cmp	r0, #0
 80056f6:	f040 8535 	bne.w	8006164 <_vfiprintf_r+0xc00>
 80056fa:	f8b8 200c 	ldrh.w	r2, [r8, #12]
 80056fe:	f002 021a 	and.w	r2, r2, #26
 8005702:	2a0a      	cmp	r2, #10
 8005704:	f47f af58 	bne.w	80055b8 <_vfiprintf_r+0x54>
 8005708:	f9b8 300e 	ldrsh.w	r3, [r8, #14]
 800570c:	2b00      	cmp	r3, #0
 800570e:	f6ff af53 	blt.w	80055b8 <_vfiprintf_r+0x54>
 8005712:	4623      	mov	r3, r4
 8005714:	463a      	mov	r2, r7
 8005716:	4641      	mov	r1, r8
 8005718:	4658      	mov	r0, fp
 800571a:	b02b      	add	sp, #172	; 0xac
 800571c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005720:	f000 bd44 	b.w	80061ac <__sbprintf>
 8005724:	f04a 0a10 	orr.w	sl, sl, #16
 8005728:	f01a 0120 	ands.w	r1, sl, #32
 800572c:	f000 810f 	beq.w	800594e <_vfiprintf_r+0x3ea>
 8005730:	9b06      	ldr	r3, [sp, #24]
 8005732:	3307      	adds	r3, #7
 8005734:	f023 0307 	bic.w	r3, r3, #7
 8005738:	6859      	ldr	r1, [r3, #4]
 800573a:	f853 0b08 	ldr.w	r0, [r3], #8
 800573e:	9306      	str	r3, [sp, #24]
 8005740:	2301      	movs	r3, #1
 8005742:	e00e      	b.n	8005762 <_vfiprintf_r+0x1fe>
 8005744:	f04a 0a10 	orr.w	sl, sl, #16
 8005748:	f01a 0120 	ands.w	r1, sl, #32
 800574c:	f000 80f2 	beq.w	8005934 <_vfiprintf_r+0x3d0>
 8005750:	9b06      	ldr	r3, [sp, #24]
 8005752:	3307      	adds	r3, #7
 8005754:	f023 0307 	bic.w	r3, r3, #7
 8005758:	6859      	ldr	r1, [r3, #4]
 800575a:	f853 0b08 	ldr.w	r0, [r3], #8
 800575e:	9306      	str	r3, [sp, #24]
 8005760:	2300      	movs	r3, #0
 8005762:	f04f 0200 	mov.w	r2, #0
 8005766:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
 800576a:	2200      	movs	r2, #0
 800576c:	9207      	str	r2, [sp, #28]
 800576e:	9a02      	ldr	r2, [sp, #8]
 8005770:	1c54      	adds	r4, r2, #1
 8005772:	f000 822f 	beq.w	8005bd4 <_vfiprintf_r+0x670>
 8005776:	f02a 0480 	bic.w	r4, sl, #128	; 0x80
 800577a:	9401      	str	r4, [sp, #4]
 800577c:	ea50 0401 	orrs.w	r4, r0, r1
 8005780:	f040 8226 	bne.w	8005bd0 <_vfiprintf_r+0x66c>
 8005784:	2a00      	cmp	r2, #0
 8005786:	f040 8495 	bne.w	80060b4 <_vfiprintf_r+0xb50>
 800578a:	2b00      	cmp	r3, #0
 800578c:	f040 840e 	bne.w	8005fac <_vfiprintf_r+0xa48>
 8005790:	f01a 0301 	ands.w	r3, sl, #1
 8005794:	9303      	str	r3, [sp, #12]
 8005796:	f040 843e 	bne.w	8006016 <_vfiprintf_r+0xab2>
 800579a:	ac1a      	add	r4, sp, #104	; 0x68
 800579c:	e9dd 6302 	ldrd	r6, r3, [sp, #8]
 80057a0:	429e      	cmp	r6, r3
 80057a2:	bfb8      	it	lt
 80057a4:	461e      	movlt	r6, r3
 80057a6:	9b07      	ldr	r3, [sp, #28]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d03e      	beq.n	800582a <_vfiprintf_r+0x2c6>
 80057ac:	3601      	adds	r6, #1
 80057ae:	e03c      	b.n	800582a <_vfiprintf_r+0x2c6>
 80057b0:	1be5      	subs	r5, r4, r7
 80057b2:	d01b      	beq.n	80057ec <_vfiprintf_r+0x288>
 80057b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80057b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80057b8:	3301      	adds	r3, #1
 80057ba:	442a      	add	r2, r5
 80057bc:	2b07      	cmp	r3, #7
 80057be:	e9c9 7500 	strd	r7, r5, [r9]
 80057c2:	920f      	str	r2, [sp, #60]	; 0x3c
 80057c4:	930e      	str	r3, [sp, #56]	; 0x38
 80057c6:	dc05      	bgt.n	80057d4 <_vfiprintf_r+0x270>
 80057c8:	f109 0908 	add.w	r9, r9, #8
 80057cc:	9b05      	ldr	r3, [sp, #20]
 80057ce:	442b      	add	r3, r5
 80057d0:	9305      	str	r3, [sp, #20]
 80057d2:	e70a      	b.n	80055ea <_vfiprintf_r+0x86>
 80057d4:	2a00      	cmp	r2, #0
 80057d6:	f000 83d1 	beq.w	8005f7c <_vfiprintf_r+0xa18>
 80057da:	aa0d      	add	r2, sp, #52	; 0x34
 80057dc:	4641      	mov	r1, r8
 80057de:	4658      	mov	r0, fp
 80057e0:	f7ff fe78 	bl	80054d4 <__sprint_r.part.0>
 80057e4:	b930      	cbnz	r0, 80057f4 <_vfiprintf_r+0x290>
 80057e6:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 80057ea:	e7ef      	b.n	80057cc <_vfiprintf_r+0x268>
 80057ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	f040 8485 	bne.w	80060fe <_vfiprintf_r+0xb9a>
 80057f4:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80057f8:	065b      	lsls	r3, r3, #25
 80057fa:	f100 84b3 	bmi.w	8006164 <_vfiprintf_r+0xc00>
 80057fe:	9805      	ldr	r0, [sp, #20]
 8005800:	b02b      	add	sp, #172	; 0xac
 8005802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005806:	2900      	cmp	r1, #0
 8005808:	f040 8475 	bne.w	80060f6 <_vfiprintf_r+0xb92>
 800580c:	2b00      	cmp	r3, #0
 800580e:	d0ed      	beq.n	80057ec <_vfiprintf_r+0x288>
 8005810:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 8005814:	2601      	movs	r6, #1
 8005816:	f04f 0300 	mov.w	r3, #0
 800581a:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
 800581e:	9603      	str	r6, [sp, #12]
 8005820:	ac10      	add	r4, sp, #64	; 0x40
 8005822:	2300      	movs	r3, #0
 8005824:	f8cd a004 	str.w	sl, [sp, #4]
 8005828:	9302      	str	r3, [sp, #8]
 800582a:	9b01      	ldr	r3, [sp, #4]
 800582c:	f013 0302 	ands.w	r3, r3, #2
 8005830:	9307      	str	r3, [sp, #28]
 8005832:	9b01      	ldr	r3, [sp, #4]
 8005834:	bf18      	it	ne
 8005836:	3602      	addne	r6, #2
 8005838:	f013 0384 	ands.w	r3, r3, #132	; 0x84
 800583c:	9308      	str	r3, [sp, #32]
 800583e:	d104      	bne.n	800584a <_vfiprintf_r+0x2e6>
 8005840:	9b04      	ldr	r3, [sp, #16]
 8005842:	1b9d      	subs	r5, r3, r6
 8005844:	2d00      	cmp	r5, #0
 8005846:	f300 82db 	bgt.w	8005e00 <_vfiprintf_r+0x89c>
 800584a:	e9dd 100e 	ldrd	r1, r0, [sp, #56]	; 0x38
 800584e:	f101 0c01 	add.w	ip, r1, #1
 8005852:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 8005856:	b193      	cbz	r3, 800587e <_vfiprintf_r+0x31a>
 8005858:	3001      	adds	r0, #1
 800585a:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 800585e:	2101      	movs	r1, #1
 8005860:	f1bc 0f07 	cmp.w	ip, #7
 8005864:	e9cd c00e 	strd	ip, r0, [sp, #56]	; 0x38
 8005868:	f8c9 3000 	str.w	r3, [r9]
 800586c:	f8c9 1004 	str.w	r1, [r9, #4]
 8005870:	f300 82a6 	bgt.w	8005dc0 <_vfiprintf_r+0x85c>
 8005874:	4661      	mov	r1, ip
 8005876:	f109 0908 	add.w	r9, r9, #8
 800587a:	f10c 0c01 	add.w	ip, ip, #1
 800587e:	9b07      	ldr	r3, [sp, #28]
 8005880:	b1eb      	cbz	r3, 80058be <_vfiprintf_r+0x35a>
 8005882:	ab0c      	add	r3, sp, #48	; 0x30
 8005884:	3002      	adds	r0, #2
 8005886:	f8c9 3000 	str.w	r3, [r9]
 800588a:	f1bc 0f07 	cmp.w	ip, #7
 800588e:	f04f 0302 	mov.w	r3, #2
 8005892:	e9cd c00e 	strd	ip, r0, [sp, #56]	; 0x38
 8005896:	f8c9 3004 	str.w	r3, [r9, #4]
 800589a:	f340 82ab 	ble.w	8005df4 <_vfiprintf_r+0x890>
 800589e:	2800      	cmp	r0, #0
 80058a0:	f000 8366 	beq.w	8005f70 <_vfiprintf_r+0xa0c>
 80058a4:	aa0d      	add	r2, sp, #52	; 0x34
 80058a6:	4641      	mov	r1, r8
 80058a8:	4658      	mov	r0, fp
 80058aa:	f7ff fe13 	bl	80054d4 <__sprint_r.part.0>
 80058ae:	2800      	cmp	r0, #0
 80058b0:	d1a0      	bne.n	80057f4 <_vfiprintf_r+0x290>
 80058b2:	e9dd 100e 	ldrd	r1, r0, [sp, #56]	; 0x38
 80058b6:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 80058ba:	f101 0c01 	add.w	ip, r1, #1
 80058be:	9b08      	ldr	r3, [sp, #32]
 80058c0:	2b80      	cmp	r3, #128	; 0x80
 80058c2:	f000 81c8 	beq.w	8005c56 <_vfiprintf_r+0x6f2>
 80058c6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80058ca:	1a9d      	subs	r5, r3, r2
 80058cc:	2d00      	cmp	r5, #0
 80058ce:	f300 821c 	bgt.w	8005d0a <_vfiprintf_r+0x7a6>
 80058d2:	9b03      	ldr	r3, [sp, #12]
 80058d4:	f8c9 4000 	str.w	r4, [r9]
 80058d8:	4418      	add	r0, r3
 80058da:	f1bc 0f07 	cmp.w	ip, #7
 80058de:	e9cd c00e 	strd	ip, r0, [sp, #56]	; 0x38
 80058e2:	f8c9 3004 	str.w	r3, [r9, #4]
 80058e6:	f340 81b3 	ble.w	8005c50 <_vfiprintf_r+0x6ec>
 80058ea:	2800      	cmp	r0, #0
 80058ec:	f000 82d2 	beq.w	8005e94 <_vfiprintf_r+0x930>
 80058f0:	aa0d      	add	r2, sp, #52	; 0x34
 80058f2:	4641      	mov	r1, r8
 80058f4:	4658      	mov	r0, fp
 80058f6:	f7ff fded 	bl	80054d4 <__sprint_r.part.0>
 80058fa:	2800      	cmp	r0, #0
 80058fc:	f47f af7a 	bne.w	80057f4 <_vfiprintf_r+0x290>
 8005900:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8005902:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 8005906:	9b01      	ldr	r3, [sp, #4]
 8005908:	075a      	lsls	r2, r3, #29
 800590a:	d504      	bpl.n	8005916 <_vfiprintf_r+0x3b2>
 800590c:	9b04      	ldr	r3, [sp, #16]
 800590e:	1b9c      	subs	r4, r3, r6
 8005910:	2c00      	cmp	r4, #0
 8005912:	f300 82c9 	bgt.w	8005ea8 <_vfiprintf_r+0x944>
 8005916:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800591a:	42b2      	cmp	r2, r6
 800591c:	bfac      	ite	ge
 800591e:	189b      	addge	r3, r3, r2
 8005920:	199b      	addlt	r3, r3, r6
 8005922:	9305      	str	r3, [sp, #20]
 8005924:	2800      	cmp	r0, #0
 8005926:	f040 8236 	bne.w	8005d96 <_vfiprintf_r+0x832>
 800592a:	2300      	movs	r3, #0
 800592c:	930e      	str	r3, [sp, #56]	; 0x38
 800592e:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 8005932:	e64a      	b.n	80055ca <_vfiprintf_r+0x66>
 8005934:	f01a 0310 	ands.w	r3, sl, #16
 8005938:	d149      	bne.n	80059ce <_vfiprintf_r+0x46a>
 800593a:	f01a 0140 	ands.w	r1, sl, #64	; 0x40
 800593e:	d046      	beq.n	80059ce <_vfiprintf_r+0x46a>
 8005940:	9a06      	ldr	r2, [sp, #24]
 8005942:	f852 0b04 	ldr.w	r0, [r2], #4
 8005946:	9206      	str	r2, [sp, #24]
 8005948:	4619      	mov	r1, r3
 800594a:	b280      	uxth	r0, r0
 800594c:	e709      	b.n	8005762 <_vfiprintf_r+0x1fe>
 800594e:	f01a 0310 	ands.w	r3, sl, #16
 8005952:	d142      	bne.n	80059da <_vfiprintf_r+0x476>
 8005954:	f01a 0140 	ands.w	r1, sl, #64	; 0x40
 8005958:	d03f      	beq.n	80059da <_vfiprintf_r+0x476>
 800595a:	9a06      	ldr	r2, [sp, #24]
 800595c:	f852 0b04 	ldr.w	r0, [r2], #4
 8005960:	9206      	str	r2, [sp, #24]
 8005962:	4619      	mov	r1, r3
 8005964:	b280      	uxth	r0, r0
 8005966:	2301      	movs	r3, #1
 8005968:	e6fb      	b.n	8005762 <_vfiprintf_r+0x1fe>
 800596a:	2900      	cmp	r1, #0
 800596c:	f040 83e1 	bne.w	8006132 <_vfiprintf_r+0xbce>
 8005970:	f01a 0f20 	tst.w	sl, #32
 8005974:	9b06      	ldr	r3, [sp, #24]
 8005976:	d068      	beq.n	8005a4a <_vfiprintf_r+0x4e6>
 8005978:	3307      	adds	r3, #7
 800597a:	f023 0307 	bic.w	r3, r3, #7
 800597e:	461a      	mov	r2, r3
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	f852 0b08 	ldr.w	r0, [r2], #8
 8005986:	9206      	str	r2, [sp, #24]
 8005988:	4619      	mov	r1, r3
 800598a:	2b00      	cmp	r3, #0
 800598c:	f2c0 8304 	blt.w	8005f98 <_vfiprintf_r+0xa34>
 8005990:	9b02      	ldr	r3, [sp, #8]
 8005992:	3301      	adds	r3, #1
 8005994:	f000 838a 	beq.w	80060ac <_vfiprintf_r+0xb48>
 8005998:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 800599c:	9307      	str	r3, [sp, #28]
 800599e:	ea50 0301 	orrs.w	r3, r0, r1
 80059a2:	f02a 0a80 	bic.w	sl, sl, #128	; 0x80
 80059a6:	f000 8354 	beq.w	8006052 <_vfiprintf_r+0xaee>
 80059aa:	280a      	cmp	r0, #10
 80059ac:	f171 0300 	sbcs.w	r3, r1, #0
 80059b0:	f080 8312 	bcs.w	8005fd8 <_vfiprintf_r+0xa74>
 80059b4:	3030      	adds	r0, #48	; 0x30
 80059b6:	2301      	movs	r3, #1
 80059b8:	f88d 0067 	strb.w	r0, [sp, #103]	; 0x67
 80059bc:	f8cd a004 	str.w	sl, [sp, #4]
 80059c0:	9303      	str	r3, [sp, #12]
 80059c2:	f10d 0467 	add.w	r4, sp, #103	; 0x67
 80059c6:	e6e9      	b.n	800579c <_vfiprintf_r+0x238>
 80059c8:	f7fd fd9e 	bl	8003508 <__sinit>
 80059cc:	e5d7      	b.n	800557e <_vfiprintf_r+0x1a>
 80059ce:	9b06      	ldr	r3, [sp, #24]
 80059d0:	f853 0b04 	ldr.w	r0, [r3], #4
 80059d4:	9306      	str	r3, [sp, #24]
 80059d6:	460b      	mov	r3, r1
 80059d8:	e6c3      	b.n	8005762 <_vfiprintf_r+0x1fe>
 80059da:	9b06      	ldr	r3, [sp, #24]
 80059dc:	f853 0b04 	ldr.w	r0, [r3], #4
 80059e0:	9306      	str	r3, [sp, #24]
 80059e2:	2301      	movs	r3, #1
 80059e4:	e6bd      	b.n	8005762 <_vfiprintf_r+0x1fe>
 80059e6:	9b06      	ldr	r3, [sp, #24]
 80059e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80059ec:	9204      	str	r2, [sp, #16]
 80059ee:	2a00      	cmp	r2, #0
 80059f0:	f280 830d 	bge.w	800600e <_vfiprintf_r+0xaaa>
 80059f4:	9a04      	ldr	r2, [sp, #16]
 80059f6:	9306      	str	r3, [sp, #24]
 80059f8:	4252      	negs	r2, r2
 80059fa:	9204      	str	r2, [sp, #16]
 80059fc:	783b      	ldrb	r3, [r7, #0]
 80059fe:	f04a 0a04 	orr.w	sl, sl, #4
 8005a02:	e603      	b.n	800560c <_vfiprintf_r+0xa8>
 8005a04:	463c      	mov	r4, r7
 8005a06:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005a0a:	2b2a      	cmp	r3, #42	; 0x2a
 8005a0c:	f000 83af 	beq.w	800616e <_vfiprintf_r+0xc0a>
 8005a10:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8005a14:	2a09      	cmp	r2, #9
 8005a16:	4627      	mov	r7, r4
 8005a18:	bf98      	it	ls
 8005a1a:	2400      	movls	r4, #0
 8005a1c:	f200 838f 	bhi.w	800613e <_vfiprintf_r+0xbda>
 8005a20:	f817 3b01 	ldrb.w	r3, [r7], #1
 8005a24:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8005a28:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8005a2c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8005a30:	2a09      	cmp	r2, #9
 8005a32:	d9f5      	bls.n	8005a20 <_vfiprintf_r+0x4bc>
 8005a34:	9402      	str	r4, [sp, #8]
 8005a36:	e5ea      	b.n	800560e <_vfiprintf_r+0xaa>
 8005a38:	2900      	cmp	r1, #0
 8005a3a:	f040 8384 	bne.w	8006146 <_vfiprintf_r+0xbe2>
 8005a3e:	f04a 0a10 	orr.w	sl, sl, #16
 8005a42:	f01a 0f20 	tst.w	sl, #32
 8005a46:	9b06      	ldr	r3, [sp, #24]
 8005a48:	d196      	bne.n	8005978 <_vfiprintf_r+0x414>
 8005a4a:	f853 0b04 	ldr.w	r0, [r3], #4
 8005a4e:	9306      	str	r3, [sp, #24]
 8005a50:	f01a 0f10 	tst.w	sl, #16
 8005a54:	f040 829b 	bne.w	8005f8e <_vfiprintf_r+0xa2a>
 8005a58:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8005a5c:	f000 8297 	beq.w	8005f8e <_vfiprintf_r+0xa2a>
 8005a60:	f340 31c0 	sbfx	r1, r0, #15, #1
 8005a64:	460b      	mov	r3, r1
 8005a66:	b200      	sxth	r0, r0
 8005a68:	e78f      	b.n	800598a <_vfiprintf_r+0x426>
 8005a6a:	783b      	ldrb	r3, [r7, #0]
 8005a6c:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 8005a70:	e5cc      	b.n	800560c <_vfiprintf_r+0xa8>
 8005a72:	783b      	ldrb	r3, [r7, #0]
 8005a74:	2101      	movs	r1, #1
 8005a76:	202b      	movs	r0, #43	; 0x2b
 8005a78:	e5c8      	b.n	800560c <_vfiprintf_r+0xa8>
 8005a7a:	783b      	ldrb	r3, [r7, #0]
 8005a7c:	f04a 0a01 	orr.w	sl, sl, #1
 8005a80:	e5c4      	b.n	800560c <_vfiprintf_r+0xa8>
 8005a82:	783b      	ldrb	r3, [r7, #0]
 8005a84:	2800      	cmp	r0, #0
 8005a86:	f47f adc1 	bne.w	800560c <_vfiprintf_r+0xa8>
 8005a8a:	2101      	movs	r1, #1
 8005a8c:	2020      	movs	r0, #32
 8005a8e:	e5bd      	b.n	800560c <_vfiprintf_r+0xa8>
 8005a90:	9b06      	ldr	r3, [sp, #24]
 8005a92:	f04f 0200 	mov.w	r2, #0
 8005a96:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
 8005a9a:	2601      	movs	r6, #1
 8005a9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005aa0:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
 8005aa4:	9306      	str	r3, [sp, #24]
 8005aa6:	9603      	str	r6, [sp, #12]
 8005aa8:	ac10      	add	r4, sp, #64	; 0x40
 8005aaa:	e6ba      	b.n	8005822 <_vfiprintf_r+0x2be>
 8005aac:	2900      	cmp	r1, #0
 8005aae:	f040 834d 	bne.w	800614c <_vfiprintf_r+0xbe8>
 8005ab2:	4abd      	ldr	r2, [pc, #756]	; (8005da8 <_vfiprintf_r+0x844>)
 8005ab4:	9209      	str	r2, [sp, #36]	; 0x24
 8005ab6:	f01a 0120 	ands.w	r1, sl, #32
 8005aba:	d044      	beq.n	8005b46 <_vfiprintf_r+0x5e2>
 8005abc:	9a06      	ldr	r2, [sp, #24]
 8005abe:	3207      	adds	r2, #7
 8005ac0:	f022 0207 	bic.w	r2, r2, #7
 8005ac4:	6851      	ldr	r1, [r2, #4]
 8005ac6:	f852 0b08 	ldr.w	r0, [r2], #8
 8005aca:	9206      	str	r2, [sp, #24]
 8005acc:	f01a 0f01 	tst.w	sl, #1
 8005ad0:	d00b      	beq.n	8005aea <_vfiprintf_r+0x586>
 8005ad2:	ea50 0201 	orrs.w	r2, r0, r1
 8005ad6:	d008      	beq.n	8005aea <_vfiprintf_r+0x586>
 8005ad8:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
 8005adc:	2330      	movs	r3, #48	; 0x30
 8005ade:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
 8005ae2:	f04a 0a02 	orr.w	sl, sl, #2
 8005ae6:	2302      	movs	r3, #2
 8005ae8:	e63b      	b.n	8005762 <_vfiprintf_r+0x1fe>
 8005aea:	2302      	movs	r3, #2
 8005aec:	e639      	b.n	8005762 <_vfiprintf_r+0x1fe>
 8005aee:	2900      	cmp	r1, #0
 8005af0:	f040 8322 	bne.w	8006138 <_vfiprintf_r+0xbd4>
 8005af4:	f01a 0f20 	tst.w	sl, #32
 8005af8:	f040 829a 	bne.w	8006030 <_vfiprintf_r+0xacc>
 8005afc:	f01a 0f10 	tst.w	sl, #16
 8005b00:	f040 82cc 	bne.w	800609c <_vfiprintf_r+0xb38>
 8005b04:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8005b08:	f000 82c8 	beq.w	800609c <_vfiprintf_r+0xb38>
 8005b0c:	9b06      	ldr	r3, [sp, #24]
 8005b0e:	9905      	ldr	r1, [sp, #20]
 8005b10:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b14:	9306      	str	r3, [sp, #24]
 8005b16:	8011      	strh	r1, [r2, #0]
 8005b18:	e557      	b.n	80055ca <_vfiprintf_r+0x66>
 8005b1a:	783b      	ldrb	r3, [r7, #0]
 8005b1c:	2b6c      	cmp	r3, #108	; 0x6c
 8005b1e:	bf03      	ittte	eq
 8005b20:	787b      	ldrbeq	r3, [r7, #1]
 8005b22:	f04a 0a20 	orreq.w	sl, sl, #32
 8005b26:	3701      	addeq	r7, #1
 8005b28:	f04a 0a10 	orrne.w	sl, sl, #16
 8005b2c:	e56e      	b.n	800560c <_vfiprintf_r+0xa8>
 8005b2e:	783b      	ldrb	r3, [r7, #0]
 8005b30:	f04a 0a40 	orr.w	sl, sl, #64	; 0x40
 8005b34:	e56a      	b.n	800560c <_vfiprintf_r+0xa8>
 8005b36:	2900      	cmp	r1, #0
 8005b38:	f040 82f8 	bne.w	800612c <_vfiprintf_r+0xbc8>
 8005b3c:	4a9b      	ldr	r2, [pc, #620]	; (8005dac <_vfiprintf_r+0x848>)
 8005b3e:	9209      	str	r2, [sp, #36]	; 0x24
 8005b40:	f01a 0120 	ands.w	r1, sl, #32
 8005b44:	d1ba      	bne.n	8005abc <_vfiprintf_r+0x558>
 8005b46:	f01a 0210 	ands.w	r2, sl, #16
 8005b4a:	f040 821b 	bne.w	8005f84 <_vfiprintf_r+0xa20>
 8005b4e:	f01a 0140 	ands.w	r1, sl, #64	; 0x40
 8005b52:	f000 8217 	beq.w	8005f84 <_vfiprintf_r+0xa20>
 8005b56:	9c06      	ldr	r4, [sp, #24]
 8005b58:	f854 0b04 	ldr.w	r0, [r4], #4
 8005b5c:	9406      	str	r4, [sp, #24]
 8005b5e:	4611      	mov	r1, r2
 8005b60:	b280      	uxth	r0, r0
 8005b62:	e7b3      	b.n	8005acc <_vfiprintf_r+0x568>
 8005b64:	9d06      	ldr	r5, [sp, #24]
 8005b66:	f855 4b04 	ldr.w	r4, [r5], #4
 8005b6a:	f04f 0300 	mov.w	r3, #0
 8005b6e:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
 8005b72:	2c00      	cmp	r4, #0
 8005b74:	f000 82a4 	beq.w	80060c0 <_vfiprintf_r+0xb5c>
 8005b78:	9b02      	ldr	r3, [sp, #8]
 8005b7a:	1c5e      	adds	r6, r3, #1
 8005b7c:	f000 8272 	beq.w	8006064 <_vfiprintf_r+0xb00>
 8005b80:	461a      	mov	r2, r3
 8005b82:	2100      	movs	r1, #0
 8005b84:	4620      	mov	r0, r4
 8005b86:	f7fe fb5b 	bl	8004240 <memchr>
 8005b8a:	2800      	cmp	r0, #0
 8005b8c:	f000 82be 	beq.w	800610c <_vfiprintf_r+0xba8>
 8005b90:	1b03      	subs	r3, r0, r4
 8005b92:	9303      	str	r3, [sp, #12]
 8005b94:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 8005b98:	9307      	str	r3, [sp, #28]
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	9506      	str	r5, [sp, #24]
 8005b9e:	f8cd a004 	str.w	sl, [sp, #4]
 8005ba2:	9302      	str	r3, [sp, #8]
 8005ba4:	e5fa      	b.n	800579c <_vfiprintf_r+0x238>
 8005ba6:	783b      	ldrb	r3, [r7, #0]
 8005ba8:	f04a 0a20 	orr.w	sl, sl, #32
 8005bac:	e52e      	b.n	800560c <_vfiprintf_r+0xa8>
 8005bae:	9b06      	ldr	r3, [sp, #24]
 8005bb0:	f853 0b04 	ldr.w	r0, [r3], #4
 8005bb4:	9306      	str	r3, [sp, #24]
 8005bb6:	2330      	movs	r3, #48	; 0x30
 8005bb8:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
 8005bbc:	2378      	movs	r3, #120	; 0x78
 8005bbe:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
 8005bc2:	4b7a      	ldr	r3, [pc, #488]	; (8005dac <_vfiprintf_r+0x848>)
 8005bc4:	9309      	str	r3, [sp, #36]	; 0x24
 8005bc6:	f04a 0a02 	orr.w	sl, sl, #2
 8005bca:	2100      	movs	r1, #0
 8005bcc:	2302      	movs	r3, #2
 8005bce:	e5c8      	b.n	8005762 <_vfiprintf_r+0x1fe>
 8005bd0:	f8dd a004 	ldr.w	sl, [sp, #4]
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	f43f aee8 	beq.w	80059aa <_vfiprintf_r+0x446>
 8005bda:	2b02      	cmp	r3, #2
 8005bdc:	ac1a      	add	r4, sp, #104	; 0x68
 8005bde:	d112      	bne.n	8005c06 <_vfiprintf_r+0x6a2>
 8005be0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005be2:	f000 030f 	and.w	r3, r0, #15
 8005be6:	0900      	lsrs	r0, r0, #4
 8005be8:	5cd3      	ldrb	r3, [r2, r3]
 8005bea:	f804 3d01 	strb.w	r3, [r4, #-1]!
 8005bee:	ea40 7001 	orr.w	r0, r0, r1, lsl #28
 8005bf2:	0909      	lsrs	r1, r1, #4
 8005bf4:	ea50 0301 	orrs.w	r3, r0, r1
 8005bf8:	d1f3      	bne.n	8005be2 <_vfiprintf_r+0x67e>
 8005bfa:	ab1a      	add	r3, sp, #104	; 0x68
 8005bfc:	1b1b      	subs	r3, r3, r4
 8005bfe:	f8cd a004 	str.w	sl, [sp, #4]
 8005c02:	9303      	str	r3, [sp, #12]
 8005c04:	e5ca      	b.n	800579c <_vfiprintf_r+0x238>
 8005c06:	f000 0307 	and.w	r3, r0, #7
 8005c0a:	08c0      	lsrs	r0, r0, #3
 8005c0c:	ea40 7041 	orr.w	r0, r0, r1, lsl #29
 8005c10:	08c9      	lsrs	r1, r1, #3
 8005c12:	3330      	adds	r3, #48	; 0x30
 8005c14:	ea50 0501 	orrs.w	r5, r0, r1
 8005c18:	4622      	mov	r2, r4
 8005c1a:	f804 3d01 	strb.w	r3, [r4, #-1]!
 8005c1e:	d1f2      	bne.n	8005c06 <_vfiprintf_r+0x6a2>
 8005c20:	f01a 0f01 	tst.w	sl, #1
 8005c24:	d0e9      	beq.n	8005bfa <_vfiprintf_r+0x696>
 8005c26:	2b30      	cmp	r3, #48	; 0x30
 8005c28:	d0e7      	beq.n	8005bfa <_vfiprintf_r+0x696>
 8005c2a:	2330      	movs	r3, #48	; 0x30
 8005c2c:	3a02      	subs	r2, #2
 8005c2e:	f804 3c01 	strb.w	r3, [r4, #-1]
 8005c32:	ab1a      	add	r3, sp, #104	; 0x68
 8005c34:	1a9b      	subs	r3, r3, r2
 8005c36:	f8cd a004 	str.w	sl, [sp, #4]
 8005c3a:	9303      	str	r3, [sp, #12]
 8005c3c:	4614      	mov	r4, r2
 8005c3e:	e5ad      	b.n	800579c <_vfiprintf_r+0x238>
 8005c40:	9803      	ldr	r0, [sp, #12]
 8005c42:	941a      	str	r4, [sp, #104]	; 0x68
 8005c44:	2301      	movs	r3, #1
 8005c46:	901b      	str	r0, [sp, #108]	; 0x6c
 8005c48:	900f      	str	r0, [sp, #60]	; 0x3c
 8005c4a:	930e      	str	r3, [sp, #56]	; 0x38
 8005c4c:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 8005c50:	f109 0908 	add.w	r9, r9, #8
 8005c54:	e657      	b.n	8005906 <_vfiprintf_r+0x3a2>
 8005c56:	9b04      	ldr	r3, [sp, #16]
 8005c58:	1b9d      	subs	r5, r3, r6
 8005c5a:	2d00      	cmp	r5, #0
 8005c5c:	f77f ae33 	ble.w	80058c6 <_vfiprintf_r+0x362>
 8005c60:	2d10      	cmp	r5, #16
 8005c62:	f340 827b 	ble.w	800615c <_vfiprintf_r+0xbf8>
 8005c66:	f8df a148 	ldr.w	sl, [pc, #328]	; 8005db0 <_vfiprintf_r+0x84c>
 8005c6a:	4652      	mov	r2, sl
 8005c6c:	2310      	movs	r3, #16
 8005c6e:	46a2      	mov	sl, r4
 8005c70:	4614      	mov	r4, r2
 8005c72:	e007      	b.n	8005c84 <_vfiprintf_r+0x720>
 8005c74:	f101 0e02 	add.w	lr, r1, #2
 8005c78:	f109 0908 	add.w	r9, r9, #8
 8005c7c:	4611      	mov	r1, r2
 8005c7e:	3d10      	subs	r5, #16
 8005c80:	2d10      	cmp	r5, #16
 8005c82:	dd1d      	ble.n	8005cc0 <_vfiprintf_r+0x75c>
 8005c84:	1c4a      	adds	r2, r1, #1
 8005c86:	3010      	adds	r0, #16
 8005c88:	2a07      	cmp	r2, #7
 8005c8a:	e9c9 4300 	strd	r4, r3, [r9]
 8005c8e:	e9cd 200e 	strd	r2, r0, [sp, #56]	; 0x38
 8005c92:	ddef      	ble.n	8005c74 <_vfiprintf_r+0x710>
 8005c94:	aa0d      	add	r2, sp, #52	; 0x34
 8005c96:	2800      	cmp	r0, #0
 8005c98:	f000 808c 	beq.w	8005db4 <_vfiprintf_r+0x850>
 8005c9c:	4641      	mov	r1, r8
 8005c9e:	4658      	mov	r0, fp
 8005ca0:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 8005ca4:	f7ff fc16 	bl	80054d4 <__sprint_r.part.0>
 8005ca8:	2800      	cmp	r0, #0
 8005caa:	f47f ada3 	bne.w	80057f4 <_vfiprintf_r+0x290>
 8005cae:	e9dd 100e 	ldrd	r1, r0, [sp, #56]	; 0x38
 8005cb2:	3d10      	subs	r5, #16
 8005cb4:	2d10      	cmp	r5, #16
 8005cb6:	f101 0e01 	add.w	lr, r1, #1
 8005cba:	f04f 0310 	mov.w	r3, #16
 8005cbe:	dce1      	bgt.n	8005c84 <_vfiprintf_r+0x720>
 8005cc0:	4623      	mov	r3, r4
 8005cc2:	4654      	mov	r4, sl
 8005cc4:	469a      	mov	sl, r3
 8005cc6:	4428      	add	r0, r5
 8005cc8:	f1be 0f07 	cmp.w	lr, #7
 8005ccc:	e9cd e00e 	strd	lr, r0, [sp, #56]	; 0x38
 8005cd0:	f8c9 a000 	str.w	sl, [r9]
 8005cd4:	f8c9 5004 	str.w	r5, [r9, #4]
 8005cd8:	f340 81a4 	ble.w	8006024 <_vfiprintf_r+0xac0>
 8005cdc:	2800      	cmp	r0, #0
 8005cde:	f000 81f8 	beq.w	80060d2 <_vfiprintf_r+0xb6e>
 8005ce2:	aa0d      	add	r2, sp, #52	; 0x34
 8005ce4:	4641      	mov	r1, r8
 8005ce6:	4658      	mov	r0, fp
 8005ce8:	f7ff fbf4 	bl	80054d4 <__sprint_r.part.0>
 8005cec:	2800      	cmp	r0, #0
 8005cee:	f47f ad81 	bne.w	80057f4 <_vfiprintf_r+0x290>
 8005cf2:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8005cf6:	e9dd 100e 	ldrd	r1, r0, [sp, #56]	; 0x38
 8005cfa:	1a9d      	subs	r5, r3, r2
 8005cfc:	2d00      	cmp	r5, #0
 8005cfe:	f101 0c01 	add.w	ip, r1, #1
 8005d02:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 8005d06:	f77f ade4 	ble.w	80058d2 <_vfiprintf_r+0x36e>
 8005d0a:	2d10      	cmp	r5, #16
 8005d0c:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 8005db0 <_vfiprintf_r+0x84c>
 8005d10:	dd2b      	ble.n	8005d6a <_vfiprintf_r+0x806>
 8005d12:	4652      	mov	r2, sl
 8005d14:	2310      	movs	r3, #16
 8005d16:	46a2      	mov	sl, r4
 8005d18:	4614      	mov	r4, r2
 8005d1a:	e007      	b.n	8005d2c <_vfiprintf_r+0x7c8>
 8005d1c:	f101 0c02 	add.w	ip, r1, #2
 8005d20:	f109 0908 	add.w	r9, r9, #8
 8005d24:	4611      	mov	r1, r2
 8005d26:	3d10      	subs	r5, #16
 8005d28:	2d10      	cmp	r5, #16
 8005d2a:	dd1b      	ble.n	8005d64 <_vfiprintf_r+0x800>
 8005d2c:	1c4a      	adds	r2, r1, #1
 8005d2e:	3010      	adds	r0, #16
 8005d30:	2a07      	cmp	r2, #7
 8005d32:	e9c9 4300 	strd	r4, r3, [r9]
 8005d36:	e9cd 200e 	strd	r2, r0, [sp, #56]	; 0x38
 8005d3a:	ddef      	ble.n	8005d1c <_vfiprintf_r+0x7b8>
 8005d3c:	aa0d      	add	r2, sp, #52	; 0x34
 8005d3e:	4641      	mov	r1, r8
 8005d40:	b318      	cbz	r0, 8005d8a <_vfiprintf_r+0x826>
 8005d42:	4658      	mov	r0, fp
 8005d44:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 8005d48:	f7ff fbc4 	bl	80054d4 <__sprint_r.part.0>
 8005d4c:	2800      	cmp	r0, #0
 8005d4e:	f47f ad51 	bne.w	80057f4 <_vfiprintf_r+0x290>
 8005d52:	e9dd 100e 	ldrd	r1, r0, [sp, #56]	; 0x38
 8005d56:	3d10      	subs	r5, #16
 8005d58:	2d10      	cmp	r5, #16
 8005d5a:	f101 0c01 	add.w	ip, r1, #1
 8005d5e:	f04f 0310 	mov.w	r3, #16
 8005d62:	dce3      	bgt.n	8005d2c <_vfiprintf_r+0x7c8>
 8005d64:	4623      	mov	r3, r4
 8005d66:	4654      	mov	r4, sl
 8005d68:	469a      	mov	sl, r3
 8005d6a:	4428      	add	r0, r5
 8005d6c:	f1bc 0f07 	cmp.w	ip, #7
 8005d70:	e9cd c00e 	strd	ip, r0, [sp, #56]	; 0x38
 8005d74:	f8c9 a000 	str.w	sl, [r9]
 8005d78:	f8c9 5004 	str.w	r5, [r9, #4]
 8005d7c:	f300 80e3 	bgt.w	8005f46 <_vfiprintf_r+0x9e2>
 8005d80:	f109 0908 	add.w	r9, r9, #8
 8005d84:	f10c 0c01 	add.w	ip, ip, #1
 8005d88:	e5a3      	b.n	80058d2 <_vfiprintf_r+0x36e>
 8005d8a:	f04f 0c01 	mov.w	ip, #1
 8005d8e:	4601      	mov	r1, r0
 8005d90:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 8005d94:	e7c7      	b.n	8005d26 <_vfiprintf_r+0x7c2>
 8005d96:	aa0d      	add	r2, sp, #52	; 0x34
 8005d98:	4641      	mov	r1, r8
 8005d9a:	4658      	mov	r0, fp
 8005d9c:	f7ff fb9a 	bl	80054d4 <__sprint_r.part.0>
 8005da0:	2800      	cmp	r0, #0
 8005da2:	f43f adc2 	beq.w	800592a <_vfiprintf_r+0x3c6>
 8005da6:	e525      	b.n	80057f4 <_vfiprintf_r+0x290>
 8005da8:	0801c0e8 	.word	0x0801c0e8
 8005dac:	0801c0d4 	.word	0x0801c0d4
 8005db0:	0800ce48 	.word	0x0800ce48
 8005db4:	f04f 0e01 	mov.w	lr, #1
 8005db8:	4601      	mov	r1, r0
 8005dba:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 8005dbe:	e75e      	b.n	8005c7e <_vfiprintf_r+0x71a>
 8005dc0:	2800      	cmp	r0, #0
 8005dc2:	f000 80d2 	beq.w	8005f6a <_vfiprintf_r+0xa06>
 8005dc6:	aa0d      	add	r2, sp, #52	; 0x34
 8005dc8:	4641      	mov	r1, r8
 8005dca:	4658      	mov	r0, fp
 8005dcc:	f7ff fb82 	bl	80054d4 <__sprint_r.part.0>
 8005dd0:	2800      	cmp	r0, #0
 8005dd2:	f47f ad0f 	bne.w	80057f4 <_vfiprintf_r+0x290>
 8005dd6:	e9dd 100e 	ldrd	r1, r0, [sp, #56]	; 0x38
 8005dda:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 8005dde:	f101 0c01 	add.w	ip, r1, #1
 8005de2:	e54c      	b.n	800587e <_vfiprintf_r+0x31a>
 8005de4:	2002      	movs	r0, #2
 8005de6:	ab0c      	add	r3, sp, #48	; 0x30
 8005de8:	901b      	str	r0, [sp, #108]	; 0x6c
 8005dea:	931a      	str	r3, [sp, #104]	; 0x68
 8005dec:	f04f 0c01 	mov.w	ip, #1
 8005df0:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 8005df4:	4661      	mov	r1, ip
 8005df6:	f109 0908 	add.w	r9, r9, #8
 8005dfa:	f101 0c01 	add.w	ip, r1, #1
 8005dfe:	e55e      	b.n	80058be <_vfiprintf_r+0x35a>
 8005e00:	2d10      	cmp	r5, #16
 8005e02:	f340 818d 	ble.w	8006120 <_vfiprintf_r+0xbbc>
 8005e06:	f8df a380 	ldr.w	sl, [pc, #896]	; 8006188 <_vfiprintf_r+0xc24>
 8005e0a:	e9dd c00e 	ldrd	ip, r0, [sp, #56]	; 0x38
 8005e0e:	4652      	mov	r2, sl
 8005e10:	2310      	movs	r3, #16
 8005e12:	46a2      	mov	sl, r4
 8005e14:	4661      	mov	r1, ip
 8005e16:	4614      	mov	r4, r2
 8005e18:	e007      	b.n	8005e2a <_vfiprintf_r+0x8c6>
 8005e1a:	f101 0c02 	add.w	ip, r1, #2
 8005e1e:	f109 0908 	add.w	r9, r9, #8
 8005e22:	4611      	mov	r1, r2
 8005e24:	3d10      	subs	r5, #16
 8005e26:	2d10      	cmp	r5, #16
 8005e28:	dd1b      	ble.n	8005e62 <_vfiprintf_r+0x8fe>
 8005e2a:	1c4a      	adds	r2, r1, #1
 8005e2c:	3010      	adds	r0, #16
 8005e2e:	2a07      	cmp	r2, #7
 8005e30:	e9c9 4300 	strd	r4, r3, [r9]
 8005e34:	e9cd 200e 	strd	r2, r0, [sp, #56]	; 0x38
 8005e38:	ddef      	ble.n	8005e1a <_vfiprintf_r+0x8b6>
 8005e3a:	aa0d      	add	r2, sp, #52	; 0x34
 8005e3c:	b320      	cbz	r0, 8005e88 <_vfiprintf_r+0x924>
 8005e3e:	4641      	mov	r1, r8
 8005e40:	4658      	mov	r0, fp
 8005e42:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 8005e46:	f7ff fb45 	bl	80054d4 <__sprint_r.part.0>
 8005e4a:	2800      	cmp	r0, #0
 8005e4c:	f47f acd2 	bne.w	80057f4 <_vfiprintf_r+0x290>
 8005e50:	e9dd 100e 	ldrd	r1, r0, [sp, #56]	; 0x38
 8005e54:	3d10      	subs	r5, #16
 8005e56:	2d10      	cmp	r5, #16
 8005e58:	f101 0c01 	add.w	ip, r1, #1
 8005e5c:	f04f 0310 	mov.w	r3, #16
 8005e60:	dce3      	bgt.n	8005e2a <_vfiprintf_r+0x8c6>
 8005e62:	4623      	mov	r3, r4
 8005e64:	4661      	mov	r1, ip
 8005e66:	4654      	mov	r4, sl
 8005e68:	469a      	mov	sl, r3
 8005e6a:	4428      	add	r0, r5
 8005e6c:	2907      	cmp	r1, #7
 8005e6e:	e9cd 100e 	strd	r1, r0, [sp, #56]	; 0x38
 8005e72:	f8c9 a000 	str.w	sl, [r9]
 8005e76:	f8c9 5004 	str.w	r5, [r9, #4]
 8005e7a:	f300 809c 	bgt.w	8005fb6 <_vfiprintf_r+0xa52>
 8005e7e:	f109 0908 	add.w	r9, r9, #8
 8005e82:	f101 0c01 	add.w	ip, r1, #1
 8005e86:	e4e4      	b.n	8005852 <_vfiprintf_r+0x2ee>
 8005e88:	4601      	mov	r1, r0
 8005e8a:	f04f 0c01 	mov.w	ip, #1
 8005e8e:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 8005e92:	e7c7      	b.n	8005e24 <_vfiprintf_r+0x8c0>
 8005e94:	9b01      	ldr	r3, [sp, #4]
 8005e96:	900e      	str	r0, [sp, #56]	; 0x38
 8005e98:	0759      	lsls	r1, r3, #29
 8005e9a:	d54c      	bpl.n	8005f36 <_vfiprintf_r+0x9d2>
 8005e9c:	9b04      	ldr	r3, [sp, #16]
 8005e9e:	1b9c      	subs	r4, r3, r6
 8005ea0:	2c00      	cmp	r4, #0
 8005ea2:	dd48      	ble.n	8005f36 <_vfiprintf_r+0x9d2>
 8005ea4:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 8005ea8:	2c10      	cmp	r4, #16
 8005eaa:	f340 8152 	ble.w	8006152 <_vfiprintf_r+0xbee>
 8005eae:	f8df a2d8 	ldr.w	sl, [pc, #728]	; 8006188 <_vfiprintf_r+0xc24>
 8005eb2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005eb4:	4653      	mov	r3, sl
 8005eb6:	2510      	movs	r5, #16
 8005eb8:	46b2      	mov	sl, r6
 8005eba:	461e      	mov	r6, r3
 8005ebc:	e006      	b.n	8005ecc <_vfiprintf_r+0x968>
 8005ebe:	1c91      	adds	r1, r2, #2
 8005ec0:	f109 0908 	add.w	r9, r9, #8
 8005ec4:	461a      	mov	r2, r3
 8005ec6:	3c10      	subs	r4, #16
 8005ec8:	2c10      	cmp	r4, #16
 8005eca:	dd19      	ble.n	8005f00 <_vfiprintf_r+0x99c>
 8005ecc:	1c53      	adds	r3, r2, #1
 8005ece:	3010      	adds	r0, #16
 8005ed0:	2b07      	cmp	r3, #7
 8005ed2:	e9c9 6500 	strd	r6, r5, [r9]
 8005ed6:	e9cd 300e 	strd	r3, r0, [sp, #56]	; 0x38
 8005eda:	ddf0      	ble.n	8005ebe <_vfiprintf_r+0x95a>
 8005edc:	aa0d      	add	r2, sp, #52	; 0x34
 8005ede:	b328      	cbz	r0, 8005f2c <_vfiprintf_r+0x9c8>
 8005ee0:	4641      	mov	r1, r8
 8005ee2:	4658      	mov	r0, fp
 8005ee4:	f7ff faf6 	bl	80054d4 <__sprint_r.part.0>
 8005ee8:	2800      	cmp	r0, #0
 8005eea:	f47f ac83 	bne.w	80057f4 <_vfiprintf_r+0x290>
 8005eee:	e9dd 200e 	ldrd	r2, r0, [sp, #56]	; 0x38
 8005ef2:	3c10      	subs	r4, #16
 8005ef4:	2c10      	cmp	r4, #16
 8005ef6:	f102 0101 	add.w	r1, r2, #1
 8005efa:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 8005efe:	dce5      	bgt.n	8005ecc <_vfiprintf_r+0x968>
 8005f00:	4633      	mov	r3, r6
 8005f02:	4656      	mov	r6, sl
 8005f04:	469a      	mov	sl, r3
 8005f06:	4420      	add	r0, r4
 8005f08:	2907      	cmp	r1, #7
 8005f0a:	e9c9 a400 	strd	sl, r4, [r9]
 8005f0e:	e9cd 100e 	strd	r1, r0, [sp, #56]	; 0x38
 8005f12:	f77f ad00 	ble.w	8005916 <_vfiprintf_r+0x3b2>
 8005f16:	b170      	cbz	r0, 8005f36 <_vfiprintf_r+0x9d2>
 8005f18:	aa0d      	add	r2, sp, #52	; 0x34
 8005f1a:	4641      	mov	r1, r8
 8005f1c:	4658      	mov	r0, fp
 8005f1e:	f7ff fad9 	bl	80054d4 <__sprint_r.part.0>
 8005f22:	2800      	cmp	r0, #0
 8005f24:	f47f ac66 	bne.w	80057f4 <_vfiprintf_r+0x290>
 8005f28:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8005f2a:	e4f4      	b.n	8005916 <_vfiprintf_r+0x3b2>
 8005f2c:	2101      	movs	r1, #1
 8005f2e:	4602      	mov	r2, r0
 8005f30:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 8005f34:	e7c7      	b.n	8005ec6 <_vfiprintf_r+0x962>
 8005f36:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f3a:	42b2      	cmp	r2, r6
 8005f3c:	bfac      	ite	ge
 8005f3e:	189b      	addge	r3, r3, r2
 8005f40:	199b      	addlt	r3, r3, r6
 8005f42:	9305      	str	r3, [sp, #20]
 8005f44:	e4f1      	b.n	800592a <_vfiprintf_r+0x3c6>
 8005f46:	2800      	cmp	r0, #0
 8005f48:	f43f ae7a 	beq.w	8005c40 <_vfiprintf_r+0x6dc>
 8005f4c:	aa0d      	add	r2, sp, #52	; 0x34
 8005f4e:	4641      	mov	r1, r8
 8005f50:	4658      	mov	r0, fp
 8005f52:	f7ff fabf 	bl	80054d4 <__sprint_r.part.0>
 8005f56:	2800      	cmp	r0, #0
 8005f58:	f47f ac4c 	bne.w	80057f4 <_vfiprintf_r+0x290>
 8005f5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f5e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8005f60:	f103 0c01 	add.w	ip, r3, #1
 8005f64:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 8005f68:	e4b3      	b.n	80058d2 <_vfiprintf_r+0x36e>
 8005f6a:	9b07      	ldr	r3, [sp, #28]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d169      	bne.n	8006044 <_vfiprintf_r+0xae0>
 8005f70:	f04f 0c01 	mov.w	ip, #1
 8005f74:	4601      	mov	r1, r0
 8005f76:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 8005f7a:	e4a0      	b.n	80058be <_vfiprintf_r+0x35a>
 8005f7c:	920e      	str	r2, [sp, #56]	; 0x38
 8005f7e:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 8005f82:	e423      	b.n	80057cc <_vfiprintf_r+0x268>
 8005f84:	9a06      	ldr	r2, [sp, #24]
 8005f86:	f852 0b04 	ldr.w	r0, [r2], #4
 8005f8a:	9206      	str	r2, [sp, #24]
 8005f8c:	e59e      	b.n	8005acc <_vfiprintf_r+0x568>
 8005f8e:	17c1      	asrs	r1, r0, #31
 8005f90:	460b      	mov	r3, r1
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	f6bf acfc 	bge.w	8005990 <_vfiprintf_r+0x42c>
 8005f98:	232d      	movs	r3, #45	; 0x2d
 8005f9a:	4240      	negs	r0, r0
 8005f9c:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
 8005fa0:	9307      	str	r3, [sp, #28]
 8005fa2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	f7ff bbe1 	b.w	800576e <_vfiprintf_r+0x20a>
 8005fac:	9b02      	ldr	r3, [sp, #8]
 8005fae:	9303      	str	r3, [sp, #12]
 8005fb0:	ac1a      	add	r4, sp, #104	; 0x68
 8005fb2:	f7ff bbf3 	b.w	800579c <_vfiprintf_r+0x238>
 8005fb6:	2800      	cmp	r0, #0
 8005fb8:	d062      	beq.n	8006080 <_vfiprintf_r+0xb1c>
 8005fba:	aa0d      	add	r2, sp, #52	; 0x34
 8005fbc:	4641      	mov	r1, r8
 8005fbe:	4658      	mov	r0, fp
 8005fc0:	f7ff fa88 	bl	80054d4 <__sprint_r.part.0>
 8005fc4:	2800      	cmp	r0, #0
 8005fc6:	f47f ac15 	bne.w	80057f4 <_vfiprintf_r+0x290>
 8005fca:	e9dd 100e 	ldrd	r1, r0, [sp, #56]	; 0x38
 8005fce:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 8005fd2:	f101 0c01 	add.w	ip, r1, #1
 8005fd6:	e43c      	b.n	8005852 <_vfiprintf_r+0x2ee>
 8005fd8:	ac1a      	add	r4, sp, #104	; 0x68
 8005fda:	220a      	movs	r2, #10
 8005fdc:	2300      	movs	r3, #0
 8005fde:	4606      	mov	r6, r0
 8005fe0:	460d      	mov	r5, r1
 8005fe2:	f001 fb1f 	bl	8007624 <__aeabi_uldivmod>
 8005fe6:	3230      	adds	r2, #48	; 0x30
 8005fe8:	f804 2d01 	strb.w	r2, [r4, #-1]!
 8005fec:	2300      	movs	r3, #0
 8005fee:	4630      	mov	r0, r6
 8005ff0:	4629      	mov	r1, r5
 8005ff2:	220a      	movs	r2, #10
 8005ff4:	f001 fb16 	bl	8007624 <__aeabi_uldivmod>
 8005ff8:	2e0a      	cmp	r6, #10
 8005ffa:	f175 0300 	sbcs.w	r3, r5, #0
 8005ffe:	d2ec      	bcs.n	8005fda <_vfiprintf_r+0xa76>
 8006000:	ab1a      	add	r3, sp, #104	; 0x68
 8006002:	1b1b      	subs	r3, r3, r4
 8006004:	f8cd a004 	str.w	sl, [sp, #4]
 8006008:	9303      	str	r3, [sp, #12]
 800600a:	f7ff bbc7 	b.w	800579c <_vfiprintf_r+0x238>
 800600e:	9306      	str	r3, [sp, #24]
 8006010:	783b      	ldrb	r3, [r7, #0]
 8006012:	f7ff bafb 	b.w	800560c <_vfiprintf_r+0xa8>
 8006016:	2330      	movs	r3, #48	; 0x30
 8006018:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 800601c:	f10d 0467 	add.w	r4, sp, #103	; 0x67
 8006020:	f7ff bbbc 	b.w	800579c <_vfiprintf_r+0x238>
 8006024:	f109 0908 	add.w	r9, r9, #8
 8006028:	f10e 0c01 	add.w	ip, lr, #1
 800602c:	4671      	mov	r1, lr
 800602e:	e44a      	b.n	80058c6 <_vfiprintf_r+0x362>
 8006030:	e9dd 0305 	ldrd	r0, r3, [sp, #20]
 8006034:	f853 1b04 	ldr.w	r1, [r3], #4
 8006038:	9306      	str	r3, [sp, #24]
 800603a:	17c2      	asrs	r2, r0, #31
 800603c:	e9c1 0200 	strd	r0, r2, [r1]
 8006040:	f7ff bac3 	b.w	80055ca <_vfiprintf_r+0x66>
 8006044:	2002      	movs	r0, #2
 8006046:	ab0c      	add	r3, sp, #48	; 0x30
 8006048:	901b      	str	r0, [sp, #108]	; 0x6c
 800604a:	931a      	str	r3, [sp, #104]	; 0x68
 800604c:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 8006050:	e6d1      	b.n	8005df6 <_vfiprintf_r+0x892>
 8006052:	9b02      	ldr	r3, [sp, #8]
 8006054:	2b00      	cmp	r3, #0
 8006056:	f47f acad 	bne.w	80059b4 <_vfiprintf_r+0x450>
 800605a:	f8cd a004 	str.w	sl, [sp, #4]
 800605e:	9303      	str	r3, [sp, #12]
 8006060:	f7ff bb9b 	b.w	800579a <_vfiprintf_r+0x236>
 8006064:	4620      	mov	r0, r4
 8006066:	9506      	str	r5, [sp, #24]
 8006068:	f8cd a004 	str.w	sl, [sp, #4]
 800606c:	f7fa fb88 	bl	8000780 <strlen>
 8006070:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 8006074:	9307      	str	r3, [sp, #28]
 8006076:	2300      	movs	r3, #0
 8006078:	9003      	str	r0, [sp, #12]
 800607a:	9302      	str	r3, [sp, #8]
 800607c:	f7ff bb8e 	b.w	800579c <_vfiprintf_r+0x238>
 8006080:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 8006084:	b363      	cbz	r3, 80060e0 <_vfiprintf_r+0xb7c>
 8006086:	2301      	movs	r3, #1
 8006088:	469c      	mov	ip, r3
 800608a:	931b      	str	r3, [sp, #108]	; 0x6c
 800608c:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 8006090:	931a      	str	r3, [sp, #104]	; 0x68
 8006092:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 8006096:	4660      	mov	r0, ip
 8006098:	f7ff bbec 	b.w	8005874 <_vfiprintf_r+0x310>
 800609c:	9b06      	ldr	r3, [sp, #24]
 800609e:	9905      	ldr	r1, [sp, #20]
 80060a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80060a4:	6011      	str	r1, [r2, #0]
 80060a6:	9306      	str	r3, [sp, #24]
 80060a8:	f7ff ba8f 	b.w	80055ca <_vfiprintf_r+0x66>
 80060ac:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 80060b0:	9307      	str	r3, [sp, #28]
 80060b2:	e47a      	b.n	80059aa <_vfiprintf_r+0x446>
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	f8dd a004 	ldr.w	sl, [sp, #4]
 80060ba:	f47f ad8e 	bne.w	8005bda <_vfiprintf_r+0x676>
 80060be:	e479      	b.n	80059b4 <_vfiprintf_r+0x450>
 80060c0:	9e02      	ldr	r6, [sp, #8]
 80060c2:	4c30      	ldr	r4, [pc, #192]	; (8006184 <_vfiprintf_r+0xc20>)
 80060c4:	9506      	str	r5, [sp, #24]
 80060c6:	2e06      	cmp	r6, #6
 80060c8:	bf28      	it	cs
 80060ca:	2606      	movcs	r6, #6
 80060cc:	9603      	str	r6, [sp, #12]
 80060ce:	f7ff bba8 	b.w	8005822 <_vfiprintf_r+0x2be>
 80060d2:	f04f 0c01 	mov.w	ip, #1
 80060d6:	4601      	mov	r1, r0
 80060d8:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 80060dc:	f7ff bbf3 	b.w	80058c6 <_vfiprintf_r+0x362>
 80060e0:	9b07      	ldr	r3, [sp, #28]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	f47f ae7e 	bne.w	8005de4 <_vfiprintf_r+0x880>
 80060e8:	4601      	mov	r1, r0
 80060ea:	f04f 0c01 	mov.w	ip, #1
 80060ee:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 80060f2:	f7ff bbe8 	b.w	80058c6 <_vfiprintf_r+0x362>
 80060f6:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
 80060fa:	f7ff bb87 	b.w	800580c <_vfiprintf_r+0x2a8>
 80060fe:	aa0d      	add	r2, sp, #52	; 0x34
 8006100:	4641      	mov	r1, r8
 8006102:	4658      	mov	r0, fp
 8006104:	f7ff f9e6 	bl	80054d4 <__sprint_r.part.0>
 8006108:	f7ff bb74 	b.w	80057f4 <_vfiprintf_r+0x290>
 800610c:	9b02      	ldr	r3, [sp, #8]
 800610e:	9303      	str	r3, [sp, #12]
 8006110:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 8006114:	9506      	str	r5, [sp, #24]
 8006116:	e9cd a001 	strd	sl, r0, [sp, #4]
 800611a:	9307      	str	r3, [sp, #28]
 800611c:	f7ff bb3e 	b.w	800579c <_vfiprintf_r+0x238>
 8006120:	990e      	ldr	r1, [sp, #56]	; 0x38
 8006122:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8006124:	f8df a060 	ldr.w	sl, [pc, #96]	; 8006188 <_vfiprintf_r+0xc24>
 8006128:	3101      	adds	r1, #1
 800612a:	e69e      	b.n	8005e6a <_vfiprintf_r+0x906>
 800612c:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
 8006130:	e504      	b.n	8005b3c <_vfiprintf_r+0x5d8>
 8006132:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
 8006136:	e41b      	b.n	8005970 <_vfiprintf_r+0x40c>
 8006138:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
 800613c:	e4da      	b.n	8005af4 <_vfiprintf_r+0x590>
 800613e:	2200      	movs	r2, #0
 8006140:	9202      	str	r2, [sp, #8]
 8006142:	f7ff ba64 	b.w	800560e <_vfiprintf_r+0xaa>
 8006146:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
 800614a:	e478      	b.n	8005a3e <_vfiprintf_r+0x4da>
 800614c:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
 8006150:	e4af      	b.n	8005ab2 <_vfiprintf_r+0x54e>
 8006152:	990e      	ldr	r1, [sp, #56]	; 0x38
 8006154:	f8df a030 	ldr.w	sl, [pc, #48]	; 8006188 <_vfiprintf_r+0xc24>
 8006158:	3101      	adds	r1, #1
 800615a:	e6d4      	b.n	8005f06 <_vfiprintf_r+0x9a2>
 800615c:	f8df a02c 	ldr.w	sl, [pc, #44]	; 800618c <_vfiprintf_r+0xc28>
 8006160:	46e6      	mov	lr, ip
 8006162:	e5b0      	b.n	8005cc6 <_vfiprintf_r+0x762>
 8006164:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006168:	9305      	str	r3, [sp, #20]
 800616a:	f7ff bb48 	b.w	80057fe <_vfiprintf_r+0x29a>
 800616e:	9a06      	ldr	r2, [sp, #24]
 8006170:	787b      	ldrb	r3, [r7, #1]
 8006172:	4627      	mov	r7, r4
 8006174:	f852 4b04 	ldr.w	r4, [r2], #4
 8006178:	9206      	str	r2, [sp, #24]
 800617a:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
 800617e:	9402      	str	r4, [sp, #8]
 8006180:	f7ff ba44 	b.w	800560c <_vfiprintf_r+0xa8>
 8006184:	0801c0fc 	.word	0x0801c0fc
 8006188:	0800ce38 	.word	0x0800ce38
 800618c:	0800ce48 	.word	0x0800ce48

08006190 <vfiprintf>:
 8006190:	b410      	push	{r4}
 8006192:	4c05      	ldr	r4, [pc, #20]	; (80061a8 <vfiprintf+0x18>)
 8006194:	4684      	mov	ip, r0
 8006196:	4613      	mov	r3, r2
 8006198:	6820      	ldr	r0, [r4, #0]
 800619a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800619e:	460a      	mov	r2, r1
 80061a0:	4661      	mov	r1, ip
 80061a2:	f7ff b9df 	b.w	8005564 <_vfiprintf_r>
 80061a6:	bf00      	nop
 80061a8:	20000008 	.word	0x20000008

080061ac <__sbprintf>:
 80061ac:	b570      	push	{r4, r5, r6, lr}
 80061ae:	460c      	mov	r4, r1
 80061b0:	8989      	ldrh	r1, [r1, #12]
 80061b2:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
 80061b6:	f021 0102 	bic.w	r1, r1, #2
 80061ba:	f8ad 100c 	strh.w	r1, [sp, #12]
 80061be:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80061c0:	9119      	str	r1, [sp, #100]	; 0x64
 80061c2:	89e1      	ldrh	r1, [r4, #14]
 80061c4:	f8ad 100e 	strh.w	r1, [sp, #14]
 80061c8:	69e1      	ldr	r1, [r4, #28]
 80061ca:	9107      	str	r1, [sp, #28]
 80061cc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80061ce:	9109      	str	r1, [sp, #36]	; 0x24
 80061d0:	a91a      	add	r1, sp, #104	; 0x68
 80061d2:	9100      	str	r1, [sp, #0]
 80061d4:	9104      	str	r1, [sp, #16]
 80061d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80061da:	9102      	str	r1, [sp, #8]
 80061dc:	9105      	str	r1, [sp, #20]
 80061de:	2100      	movs	r1, #0
 80061e0:	9106      	str	r1, [sp, #24]
 80061e2:	4669      	mov	r1, sp
 80061e4:	4606      	mov	r6, r0
 80061e6:	f7ff f9bd 	bl	8005564 <_vfiprintf_r>
 80061ea:	1e05      	subs	r5, r0, #0
 80061ec:	db07      	blt.n	80061fe <__sbprintf+0x52>
 80061ee:	4669      	mov	r1, sp
 80061f0:	4630      	mov	r0, r6
 80061f2:	f7fd f85f 	bl	80032b4 <_fflush_r>
 80061f6:	2800      	cmp	r0, #0
 80061f8:	bf18      	it	ne
 80061fa:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 80061fe:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8006202:	065b      	lsls	r3, r3, #25
 8006204:	d503      	bpl.n	800620e <__sbprintf+0x62>
 8006206:	89a3      	ldrh	r3, [r4, #12]
 8006208:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800620c:	81a3      	strh	r3, [r4, #12]
 800620e:	4628      	mov	r0, r5
 8006210:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
 8006214:	bd70      	pop	{r4, r5, r6, pc}
 8006216:	bf00      	nop

08006218 <__swbuf_r>:
 8006218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800621a:	460d      	mov	r5, r1
 800621c:	4614      	mov	r4, r2
 800621e:	4606      	mov	r6, r0
 8006220:	b110      	cbz	r0, 8006228 <__swbuf_r+0x10>
 8006222:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006224:	2b00      	cmp	r3, #0
 8006226:	d043      	beq.n	80062b0 <__swbuf_r+0x98>
 8006228:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800622c:	69a3      	ldr	r3, [r4, #24]
 800622e:	60a3      	str	r3, [r4, #8]
 8006230:	0717      	lsls	r7, r2, #28
 8006232:	b290      	uxth	r0, r2
 8006234:	d51b      	bpl.n	800626e <__swbuf_r+0x56>
 8006236:	6923      	ldr	r3, [r4, #16]
 8006238:	b1cb      	cbz	r3, 800626e <__swbuf_r+0x56>
 800623a:	b2ed      	uxtb	r5, r5
 800623c:	0481      	lsls	r1, r0, #18
 800623e:	462f      	mov	r7, r5
 8006240:	d522      	bpl.n	8006288 <__swbuf_r+0x70>
 8006242:	6822      	ldr	r2, [r4, #0]
 8006244:	6961      	ldr	r1, [r4, #20]
 8006246:	1ad3      	subs	r3, r2, r3
 8006248:	4299      	cmp	r1, r3
 800624a:	dd29      	ble.n	80062a0 <__swbuf_r+0x88>
 800624c:	3301      	adds	r3, #1
 800624e:	68a1      	ldr	r1, [r4, #8]
 8006250:	3901      	subs	r1, #1
 8006252:	60a1      	str	r1, [r4, #8]
 8006254:	1c51      	adds	r1, r2, #1
 8006256:	6021      	str	r1, [r4, #0]
 8006258:	7015      	strb	r5, [r2, #0]
 800625a:	6962      	ldr	r2, [r4, #20]
 800625c:	429a      	cmp	r2, r3
 800625e:	d02a      	beq.n	80062b6 <__swbuf_r+0x9e>
 8006260:	89a3      	ldrh	r3, [r4, #12]
 8006262:	07db      	lsls	r3, r3, #31
 8006264:	d501      	bpl.n	800626a <__swbuf_r+0x52>
 8006266:	2d0a      	cmp	r5, #10
 8006268:	d025      	beq.n	80062b6 <__swbuf_r+0x9e>
 800626a:	4638      	mov	r0, r7
 800626c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800626e:	4621      	mov	r1, r4
 8006270:	4630      	mov	r0, r6
 8006272:	f7fb feb7 	bl	8001fe4 <__swsetup_r>
 8006276:	bb20      	cbnz	r0, 80062c2 <__swbuf_r+0xaa>
 8006278:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800627c:	6923      	ldr	r3, [r4, #16]
 800627e:	b290      	uxth	r0, r2
 8006280:	b2ed      	uxtb	r5, r5
 8006282:	0481      	lsls	r1, r0, #18
 8006284:	462f      	mov	r7, r5
 8006286:	d4dc      	bmi.n	8006242 <__swbuf_r+0x2a>
 8006288:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800628c:	81a2      	strh	r2, [r4, #12]
 800628e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006290:	6961      	ldr	r1, [r4, #20]
 8006292:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006296:	6662      	str	r2, [r4, #100]	; 0x64
 8006298:	6822      	ldr	r2, [r4, #0]
 800629a:	1ad3      	subs	r3, r2, r3
 800629c:	4299      	cmp	r1, r3
 800629e:	dcd5      	bgt.n	800624c <__swbuf_r+0x34>
 80062a0:	4621      	mov	r1, r4
 80062a2:	4630      	mov	r0, r6
 80062a4:	f7fd f806 	bl	80032b4 <_fflush_r>
 80062a8:	b958      	cbnz	r0, 80062c2 <__swbuf_r+0xaa>
 80062aa:	6822      	ldr	r2, [r4, #0]
 80062ac:	2301      	movs	r3, #1
 80062ae:	e7ce      	b.n	800624e <__swbuf_r+0x36>
 80062b0:	f7fd f92a 	bl	8003508 <__sinit>
 80062b4:	e7b8      	b.n	8006228 <__swbuf_r+0x10>
 80062b6:	4621      	mov	r1, r4
 80062b8:	4630      	mov	r0, r6
 80062ba:	f7fc fffb 	bl	80032b4 <_fflush_r>
 80062be:	2800      	cmp	r0, #0
 80062c0:	d0d3      	beq.n	800626a <__swbuf_r+0x52>
 80062c2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80062c6:	e7d0      	b.n	800626a <__swbuf_r+0x52>

080062c8 <__swbuf>:
 80062c8:	b410      	push	{r4}
 80062ca:	4c04      	ldr	r4, [pc, #16]	; (80062dc <__swbuf+0x14>)
 80062cc:	4603      	mov	r3, r0
 80062ce:	460a      	mov	r2, r1
 80062d0:	6820      	ldr	r0, [r4, #0]
 80062d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80062d6:	4619      	mov	r1, r3
 80062d8:	f7ff bf9e 	b.w	8006218 <__swbuf_r>
 80062dc:	20000008 	.word	0x20000008

080062e0 <__assert_func>:
 80062e0:	b500      	push	{lr}
 80062e2:	4c0b      	ldr	r4, [pc, #44]	; (8006310 <__assert_func+0x30>)
 80062e4:	6825      	ldr	r5, [r4, #0]
 80062e6:	4614      	mov	r4, r2
 80062e8:	68ee      	ldr	r6, [r5, #12]
 80062ea:	461a      	mov	r2, r3
 80062ec:	b085      	sub	sp, #20
 80062ee:	4603      	mov	r3, r0
 80062f0:	460d      	mov	r5, r1
 80062f2:	b14c      	cbz	r4, 8006308 <__assert_func+0x28>
 80062f4:	4907      	ldr	r1, [pc, #28]	; (8006314 <__assert_func+0x34>)
 80062f6:	9500      	str	r5, [sp, #0]
 80062f8:	e9cd 1401 	strd	r1, r4, [sp, #4]
 80062fc:	4630      	mov	r0, r6
 80062fe:	4906      	ldr	r1, [pc, #24]	; (8006318 <__assert_func+0x38>)
 8006300:	f000 f8bc 	bl	800647c <fiprintf>
 8006304:	f000 fb96 	bl	8006a34 <abort>
 8006308:	4904      	ldr	r1, [pc, #16]	; (800631c <__assert_func+0x3c>)
 800630a:	460c      	mov	r4, r1
 800630c:	e7f3      	b.n	80062f6 <__assert_func+0x16>
 800630e:	bf00      	nop
 8006310:	20000008 	.word	0x20000008
 8006314:	0801c194 	.word	0x0801c194
 8006318:	0801c1a4 	.word	0x0801c1a4
 800631c:	0801c1a0 	.word	0x0801c1a0

08006320 <__assert>:
 8006320:	b508      	push	{r3, lr}
 8006322:	4613      	mov	r3, r2
 8006324:	2200      	movs	r2, #0
 8006326:	f7ff ffdb 	bl	80062e0 <__assert_func>
 800632a:	bf00      	nop

0800632c <_calloc_r>:
 800632c:	b510      	push	{r4, lr}
 800632e:	fb02 f101 	mul.w	r1, r2, r1
 8006332:	f7fd fcd5 	bl	8003ce0 <_malloc_r>
 8006336:	4604      	mov	r4, r0
 8006338:	b168      	cbz	r0, 8006356 <_calloc_r+0x2a>
 800633a:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800633e:	f022 0203 	bic.w	r2, r2, #3
 8006342:	3a04      	subs	r2, #4
 8006344:	2a24      	cmp	r2, #36	; 0x24
 8006346:	d818      	bhi.n	800637a <_calloc_r+0x4e>
 8006348:	2a13      	cmp	r2, #19
 800634a:	d806      	bhi.n	800635a <_calloc_r+0x2e>
 800634c:	4602      	mov	r2, r0
 800634e:	2300      	movs	r3, #0
 8006350:	e9c2 3300 	strd	r3, r3, [r2]
 8006354:	6093      	str	r3, [r2, #8]
 8006356:	4620      	mov	r0, r4
 8006358:	bd10      	pop	{r4, pc}
 800635a:	2300      	movs	r3, #0
 800635c:	2a1b      	cmp	r2, #27
 800635e:	e9c0 3300 	strd	r3, r3, [r0]
 8006362:	d90f      	bls.n	8006384 <_calloc_r+0x58>
 8006364:	2a24      	cmp	r2, #36	; 0x24
 8006366:	e9c0 3302 	strd	r3, r3, [r0, #8]
 800636a:	bf11      	iteee	ne
 800636c:	f100 0210 	addne.w	r2, r0, #16
 8006370:	6103      	streq	r3, [r0, #16]
 8006372:	f100 0218 	addeq.w	r2, r0, #24
 8006376:	6143      	streq	r3, [r0, #20]
 8006378:	e7e9      	b.n	800634e <_calloc_r+0x22>
 800637a:	2100      	movs	r1, #0
 800637c:	f7f9 fffc 	bl	8000378 <memset>
 8006380:	4620      	mov	r0, r4
 8006382:	bd10      	pop	{r4, pc}
 8006384:	f100 0208 	add.w	r2, r0, #8
 8006388:	e7e1      	b.n	800634e <_calloc_r+0x22>
 800638a:	bf00      	nop

0800638c <_fclose_r.part.0>:
 800638c:	b570      	push	{r4, r5, r6, lr}
 800638e:	460c      	mov	r4, r1
 8006390:	4606      	mov	r6, r0
 8006392:	f7fc fef7 	bl	8003184 <__sflush_r>
 8006396:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006398:	4605      	mov	r5, r0
 800639a:	b133      	cbz	r3, 80063aa <_fclose_r.part.0+0x1e>
 800639c:	69e1      	ldr	r1, [r4, #28]
 800639e:	4630      	mov	r0, r6
 80063a0:	4798      	blx	r3
 80063a2:	2800      	cmp	r0, #0
 80063a4:	bfb8      	it	lt
 80063a6:	f04f 35ff 	movlt.w	r5, #4294967295	; 0xffffffff
 80063aa:	89a3      	ldrh	r3, [r4, #12]
 80063ac:	061b      	lsls	r3, r3, #24
 80063ae:	d419      	bmi.n	80063e4 <_fclose_r.part.0+0x58>
 80063b0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80063b2:	b141      	cbz	r1, 80063c6 <_fclose_r.part.0+0x3a>
 80063b4:	f104 0340 	add.w	r3, r4, #64	; 0x40
 80063b8:	4299      	cmp	r1, r3
 80063ba:	d002      	beq.n	80063c2 <_fclose_r.part.0+0x36>
 80063bc:	4630      	mov	r0, r6
 80063be:	f7fd f913 	bl	80035e8 <_free_r>
 80063c2:	2300      	movs	r3, #0
 80063c4:	6323      	str	r3, [r4, #48]	; 0x30
 80063c6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80063c8:	b121      	cbz	r1, 80063d4 <_fclose_r.part.0+0x48>
 80063ca:	4630      	mov	r0, r6
 80063cc:	f7fd f90c 	bl	80035e8 <_free_r>
 80063d0:	2300      	movs	r3, #0
 80063d2:	6463      	str	r3, [r4, #68]	; 0x44
 80063d4:	f7fd f89c 	bl	8003510 <__sfp_lock_acquire>
 80063d8:	2300      	movs	r3, #0
 80063da:	81a3      	strh	r3, [r4, #12]
 80063dc:	f7fd f89a 	bl	8003514 <__sfp_lock_release>
 80063e0:	4628      	mov	r0, r5
 80063e2:	bd70      	pop	{r4, r5, r6, pc}
 80063e4:	6921      	ldr	r1, [r4, #16]
 80063e6:	4630      	mov	r0, r6
 80063e8:	f7fd f8fe 	bl	80035e8 <_free_r>
 80063ec:	e7e0      	b.n	80063b0 <_fclose_r.part.0+0x24>
 80063ee:	bf00      	nop

080063f0 <_fclose_r>:
 80063f0:	b1b1      	cbz	r1, 8006420 <_fclose_r+0x30>
 80063f2:	b538      	push	{r3, r4, r5, lr}
 80063f4:	4604      	mov	r4, r0
 80063f6:	460d      	mov	r5, r1
 80063f8:	b108      	cbz	r0, 80063fe <_fclose_r+0xe>
 80063fa:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80063fc:	b14b      	cbz	r3, 8006412 <_fclose_r+0x22>
 80063fe:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
 8006402:	b90b      	cbnz	r3, 8006408 <_fclose_r+0x18>
 8006404:	2000      	movs	r0, #0
 8006406:	bd38      	pop	{r3, r4, r5, pc}
 8006408:	4629      	mov	r1, r5
 800640a:	4620      	mov	r0, r4
 800640c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006410:	e7bc      	b.n	800638c <_fclose_r.part.0>
 8006412:	f7fd f879 	bl	8003508 <__sinit>
 8006416:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d0f2      	beq.n	8006404 <_fclose_r+0x14>
 800641e:	e7f3      	b.n	8006408 <_fclose_r+0x18>
 8006420:	2000      	movs	r0, #0
 8006422:	4770      	bx	lr

08006424 <fclose>:
 8006424:	b1c0      	cbz	r0, 8006458 <fclose+0x34>
 8006426:	b538      	push	{r3, r4, r5, lr}
 8006428:	4b0c      	ldr	r3, [pc, #48]	; (800645c <fclose+0x38>)
 800642a:	681d      	ldr	r5, [r3, #0]
 800642c:	4604      	mov	r4, r0
 800642e:	b10d      	cbz	r5, 8006434 <fclose+0x10>
 8006430:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8006432:	b14b      	cbz	r3, 8006448 <fclose+0x24>
 8006434:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006438:	b90b      	cbnz	r3, 800643e <fclose+0x1a>
 800643a:	2000      	movs	r0, #0
 800643c:	bd38      	pop	{r3, r4, r5, pc}
 800643e:	4621      	mov	r1, r4
 8006440:	4628      	mov	r0, r5
 8006442:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006446:	e7a1      	b.n	800638c <_fclose_r.part.0>
 8006448:	4628      	mov	r0, r5
 800644a:	f7fd f85d 	bl	8003508 <__sinit>
 800644e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d0f1      	beq.n	800643a <fclose+0x16>
 8006456:	e7f2      	b.n	800643e <fclose+0x1a>
 8006458:	2000      	movs	r0, #0
 800645a:	4770      	bx	lr
 800645c:	20000008 	.word	0x20000008

08006460 <_fiprintf_r>:
 8006460:	b40c      	push	{r2, r3}
 8006462:	b500      	push	{lr}
 8006464:	b083      	sub	sp, #12
 8006466:	ab04      	add	r3, sp, #16
 8006468:	f853 2b04 	ldr.w	r2, [r3], #4
 800646c:	9301      	str	r3, [sp, #4]
 800646e:	f7ff f879 	bl	8005564 <_vfiprintf_r>
 8006472:	b003      	add	sp, #12
 8006474:	f85d eb04 	ldr.w	lr, [sp], #4
 8006478:	b002      	add	sp, #8
 800647a:	4770      	bx	lr

0800647c <fiprintf>:
 800647c:	b40e      	push	{r1, r2, r3}
 800647e:	b510      	push	{r4, lr}
 8006480:	b083      	sub	sp, #12
 8006482:	ab05      	add	r3, sp, #20
 8006484:	4c06      	ldr	r4, [pc, #24]	; (80064a0 <fiprintf+0x24>)
 8006486:	f853 2b04 	ldr.w	r2, [r3], #4
 800648a:	9301      	str	r3, [sp, #4]
 800648c:	4601      	mov	r1, r0
 800648e:	6820      	ldr	r0, [r4, #0]
 8006490:	f7ff f868 	bl	8005564 <_vfiprintf_r>
 8006494:	b003      	add	sp, #12
 8006496:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800649a:	b003      	add	sp, #12
 800649c:	4770      	bx	lr
 800649e:	bf00      	nop
 80064a0:	20000008 	.word	0x20000008

080064a4 <__fputwc>:
 80064a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064a8:	b082      	sub	sp, #8
 80064aa:	4682      	mov	sl, r0
 80064ac:	4688      	mov	r8, r1
 80064ae:	4614      	mov	r4, r2
 80064b0:	f000 f8a4 	bl	80065fc <__locale_mb_cur_max>
 80064b4:	2801      	cmp	r0, #1
 80064b6:	d103      	bne.n	80064c0 <__fputwc+0x1c>
 80064b8:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 80064bc:	2bfe      	cmp	r3, #254	; 0xfe
 80064be:	d936      	bls.n	800652e <__fputwc+0x8a>
 80064c0:	4642      	mov	r2, r8
 80064c2:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 80064c6:	a901      	add	r1, sp, #4
 80064c8:	4650      	mov	r0, sl
 80064ca:	f000 fa57 	bl	800697c <_wcrtomb_r>
 80064ce:	1c42      	adds	r2, r0, #1
 80064d0:	4606      	mov	r6, r0
 80064d2:	d032      	beq.n	800653a <__fputwc+0x96>
 80064d4:	b330      	cbz	r0, 8006524 <__fputwc+0x80>
 80064d6:	f89d c004 	ldrb.w	ip, [sp, #4]
 80064da:	f10d 0905 	add.w	r9, sp, #5
 80064de:	2500      	movs	r5, #0
 80064e0:	e009      	b.n	80064f6 <__fputwc+0x52>
 80064e2:	6823      	ldr	r3, [r4, #0]
 80064e4:	1c5a      	adds	r2, r3, #1
 80064e6:	6022      	str	r2, [r4, #0]
 80064e8:	f883 c000 	strb.w	ip, [r3]
 80064ec:	3501      	adds	r5, #1
 80064ee:	42b5      	cmp	r5, r6
 80064f0:	d218      	bcs.n	8006524 <__fputwc+0x80>
 80064f2:	f819 cb01 	ldrb.w	ip, [r9], #1
 80064f6:	68a3      	ldr	r3, [r4, #8]
 80064f8:	3b01      	subs	r3, #1
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	60a3      	str	r3, [r4, #8]
 80064fe:	daf0      	bge.n	80064e2 <__fputwc+0x3e>
 8006500:	69a7      	ldr	r7, [r4, #24]
 8006502:	42bb      	cmp	r3, r7
 8006504:	4661      	mov	r1, ip
 8006506:	4622      	mov	r2, r4
 8006508:	4650      	mov	r0, sl
 800650a:	db02      	blt.n	8006512 <__fputwc+0x6e>
 800650c:	f1bc 0f0a 	cmp.w	ip, #10
 8006510:	d1e7      	bne.n	80064e2 <__fputwc+0x3e>
 8006512:	f7ff fe81 	bl	8006218 <__swbuf_r>
 8006516:	1c43      	adds	r3, r0, #1
 8006518:	d1e8      	bne.n	80064ec <__fputwc+0x48>
 800651a:	4606      	mov	r6, r0
 800651c:	4630      	mov	r0, r6
 800651e:	b002      	add	sp, #8
 8006520:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006524:	4646      	mov	r6, r8
 8006526:	4630      	mov	r0, r6
 8006528:	b002      	add	sp, #8
 800652a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800652e:	fa5f fc88 	uxtb.w	ip, r8
 8006532:	f88d c004 	strb.w	ip, [sp, #4]
 8006536:	4606      	mov	r6, r0
 8006538:	e7cf      	b.n	80064da <__fputwc+0x36>
 800653a:	89a3      	ldrh	r3, [r4, #12]
 800653c:	4630      	mov	r0, r6
 800653e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006542:	81a3      	strh	r3, [r4, #12]
 8006544:	b002      	add	sp, #8
 8006546:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800654a:	bf00      	nop

0800654c <_fputwc_r>:
 800654c:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 8006550:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8006554:	d10b      	bne.n	800656e <_fputwc_r+0x22>
 8006556:	b410      	push	{r4}
 8006558:	6e54      	ldr	r4, [r2, #100]	; 0x64
 800655a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800655e:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 8006562:	6654      	str	r4, [r2, #100]	; 0x64
 8006564:	8193      	strh	r3, [r2, #12]
 8006566:	f85d 4b04 	ldr.w	r4, [sp], #4
 800656a:	f7ff bf9b 	b.w	80064a4 <__fputwc>
 800656e:	f7ff bf99 	b.w	80064a4 <__fputwc>
 8006572:	bf00      	nop

08006574 <fputwc>:
 8006574:	b530      	push	{r4, r5, lr}
 8006576:	4b10      	ldr	r3, [pc, #64]	; (80065b8 <fputwc+0x44>)
 8006578:	681d      	ldr	r5, [r3, #0]
 800657a:	460c      	mov	r4, r1
 800657c:	b083      	sub	sp, #12
 800657e:	4601      	mov	r1, r0
 8006580:	b10d      	cbz	r5, 8006586 <fputwc+0x12>
 8006582:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8006584:	b18b      	cbz	r3, 80065aa <fputwc+0x36>
 8006586:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800658a:	049a      	lsls	r2, r3, #18
 800658c:	d406      	bmi.n	800659c <fputwc+0x28>
 800658e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006590:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006594:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006598:	81a3      	strh	r3, [r4, #12]
 800659a:	6662      	str	r2, [r4, #100]	; 0x64
 800659c:	4622      	mov	r2, r4
 800659e:	4628      	mov	r0, r5
 80065a0:	b003      	add	sp, #12
 80065a2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80065a6:	f7ff bf7d 	b.w	80064a4 <__fputwc>
 80065aa:	9001      	str	r0, [sp, #4]
 80065ac:	4628      	mov	r0, r5
 80065ae:	f7fc ffab 	bl	8003508 <__sinit>
 80065b2:	9901      	ldr	r1, [sp, #4]
 80065b4:	e7e7      	b.n	8006586 <fputwc+0x12>
 80065b6:	bf00      	nop
 80065b8:	20000008 	.word	0x20000008

080065bc <_setlocale_r>:
 80065bc:	b142      	cbz	r2, 80065d0 <_setlocale_r+0x14>
 80065be:	b510      	push	{r4, lr}
 80065c0:	490b      	ldr	r1, [pc, #44]	; (80065f0 <_setlocale_r+0x34>)
 80065c2:	4610      	mov	r0, r2
 80065c4:	4614      	mov	r4, r2
 80065c6:	f000 f86f 	bl	80066a8 <strcmp>
 80065ca:	b918      	cbnz	r0, 80065d4 <_setlocale_r+0x18>
 80065cc:	4809      	ldr	r0, [pc, #36]	; (80065f4 <_setlocale_r+0x38>)
 80065ce:	bd10      	pop	{r4, pc}
 80065d0:	4808      	ldr	r0, [pc, #32]	; (80065f4 <_setlocale_r+0x38>)
 80065d2:	4770      	bx	lr
 80065d4:	4907      	ldr	r1, [pc, #28]	; (80065f4 <_setlocale_r+0x38>)
 80065d6:	4620      	mov	r0, r4
 80065d8:	f000 f866 	bl	80066a8 <strcmp>
 80065dc:	2800      	cmp	r0, #0
 80065de:	d0f5      	beq.n	80065cc <_setlocale_r+0x10>
 80065e0:	4905      	ldr	r1, [pc, #20]	; (80065f8 <_setlocale_r+0x3c>)
 80065e2:	4620      	mov	r0, r4
 80065e4:	f000 f860 	bl	80066a8 <strcmp>
 80065e8:	2800      	cmp	r0, #0
 80065ea:	d0ef      	beq.n	80065cc <_setlocale_r+0x10>
 80065ec:	2000      	movs	r0, #0
 80065ee:	bd10      	pop	{r4, pc}
 80065f0:	0801c1d8 	.word	0x0801c1d8
 80065f4:	0801c1d4 	.word	0x0801c1d4
 80065f8:	0801c1a0 	.word	0x0801c1a0

080065fc <__locale_mb_cur_max>:
 80065fc:	4b01      	ldr	r3, [pc, #4]	; (8006604 <__locale_mb_cur_max+0x8>)
 80065fe:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 8006602:	4770      	bx	lr
 8006604:	20000848 	.word	0x20000848

08006608 <setlocale>:
 8006608:	b141      	cbz	r1, 800661c <setlocale+0x14>
 800660a:	b510      	push	{r4, lr}
 800660c:	460c      	mov	r4, r1
 800660e:	4620      	mov	r0, r4
 8006610:	490a      	ldr	r1, [pc, #40]	; (800663c <setlocale+0x34>)
 8006612:	f000 f849 	bl	80066a8 <strcmp>
 8006616:	b918      	cbnz	r0, 8006620 <setlocale+0x18>
 8006618:	4809      	ldr	r0, [pc, #36]	; (8006640 <setlocale+0x38>)
 800661a:	bd10      	pop	{r4, pc}
 800661c:	4808      	ldr	r0, [pc, #32]	; (8006640 <setlocale+0x38>)
 800661e:	4770      	bx	lr
 8006620:	4907      	ldr	r1, [pc, #28]	; (8006640 <setlocale+0x38>)
 8006622:	4620      	mov	r0, r4
 8006624:	f000 f840 	bl	80066a8 <strcmp>
 8006628:	2800      	cmp	r0, #0
 800662a:	d0f5      	beq.n	8006618 <setlocale+0x10>
 800662c:	4905      	ldr	r1, [pc, #20]	; (8006644 <setlocale+0x3c>)
 800662e:	4620      	mov	r0, r4
 8006630:	f000 f83a 	bl	80066a8 <strcmp>
 8006634:	2800      	cmp	r0, #0
 8006636:	d0ef      	beq.n	8006618 <setlocale+0x10>
 8006638:	2000      	movs	r0, #0
 800663a:	bd10      	pop	{r4, pc}
 800663c:	0801c1d8 	.word	0x0801c1d8
 8006640:	0801c1d4 	.word	0x0801c1d4
 8006644:	0801c1a0 	.word	0x0801c1a0

08006648 <_mbtowc_r>:
 8006648:	b410      	push	{r4}
 800664a:	4c03      	ldr	r4, [pc, #12]	; (8006658 <_mbtowc_r+0x10>)
 800664c:	f8d4 40e4 	ldr.w	r4, [r4, #228]	; 0xe4
 8006650:	46a4      	mov	ip, r4
 8006652:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006656:	4760      	bx	ip
 8006658:	20000848 	.word	0x20000848

0800665c <__ascii_mbtowc>:
 800665c:	b082      	sub	sp, #8
 800665e:	b149      	cbz	r1, 8006674 <__ascii_mbtowc+0x18>
 8006660:	b15a      	cbz	r2, 800667a <__ascii_mbtowc+0x1e>
 8006662:	b16b      	cbz	r3, 8006680 <__ascii_mbtowc+0x24>
 8006664:	7813      	ldrb	r3, [r2, #0]
 8006666:	600b      	str	r3, [r1, #0]
 8006668:	7812      	ldrb	r2, [r2, #0]
 800666a:	1e10      	subs	r0, r2, #0
 800666c:	bf18      	it	ne
 800666e:	2001      	movne	r0, #1
 8006670:	b002      	add	sp, #8
 8006672:	4770      	bx	lr
 8006674:	a901      	add	r1, sp, #4
 8006676:	2a00      	cmp	r2, #0
 8006678:	d1f3      	bne.n	8006662 <__ascii_mbtowc+0x6>
 800667a:	4610      	mov	r0, r2
 800667c:	b002      	add	sp, #8
 800667e:	4770      	bx	lr
 8006680:	f06f 0001 	mvn.w	r0, #1
 8006684:	e7f4      	b.n	8006670 <__ascii_mbtowc+0x14>
 8006686:	bf00      	nop
	...
 80066a0:	eba2 0003 	sub.w	r0, r2, r3
 80066a4:	4770      	bx	lr
 80066a6:	bf00      	nop

080066a8 <strcmp>:
 80066a8:	7802      	ldrb	r2, [r0, #0]
 80066aa:	780b      	ldrb	r3, [r1, #0]
 80066ac:	2a01      	cmp	r2, #1
 80066ae:	bf28      	it	cs
 80066b0:	429a      	cmpcs	r2, r3
 80066b2:	d1f5      	bne.n	80066a0 <__ascii_mbtowc+0x44>
 80066b4:	e96d 4504 	strd	r4, r5, [sp, #-16]!
 80066b8:	ea40 0401 	orr.w	r4, r0, r1
 80066bc:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80066c0:	f06f 0c00 	mvn.w	ip, #0
 80066c4:	ea4f 7244 	mov.w	r2, r4, lsl #29
 80066c8:	b312      	cbz	r2, 8006710 <strcmp+0x68>
 80066ca:	ea80 0401 	eor.w	r4, r0, r1
 80066ce:	f014 0f07 	tst.w	r4, #7
 80066d2:	d16a      	bne.n	80067aa <strcmp+0x102>
 80066d4:	f000 0407 	and.w	r4, r0, #7
 80066d8:	f020 0007 	bic.w	r0, r0, #7
 80066dc:	f004 0503 	and.w	r5, r4, #3
 80066e0:	f021 0107 	bic.w	r1, r1, #7
 80066e4:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 80066e8:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 80066ec:	f014 0f04 	tst.w	r4, #4
 80066f0:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 80066f4:	fa0c f405 	lsl.w	r4, ip, r5
 80066f8:	ea62 0204 	orn	r2, r2, r4
 80066fc:	ea66 0604 	orn	r6, r6, r4
 8006700:	d00a      	beq.n	8006718 <strcmp+0x70>
 8006702:	ea63 0304 	orn	r3, r3, r4
 8006706:	4662      	mov	r2, ip
 8006708:	ea67 0704 	orn	r7, r7, r4
 800670c:	4666      	mov	r6, ip
 800670e:	e003      	b.n	8006718 <strcmp+0x70>
 8006710:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 8006714:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 8006718:	fa82 f54c 	uadd8	r5, r2, ip
 800671c:	ea82 0406 	eor.w	r4, r2, r6
 8006720:	faa4 f48c 	sel	r4, r4, ip
 8006724:	bb6c      	cbnz	r4, 8006782 <strcmp+0xda>
 8006726:	fa83 f54c 	uadd8	r5, r3, ip
 800672a:	ea83 0507 	eor.w	r5, r3, r7
 800672e:	faa5 f58c 	sel	r5, r5, ip
 8006732:	b995      	cbnz	r5, 800675a <strcmp+0xb2>
 8006734:	e950 2302 	ldrd	r2, r3, [r0, #-8]
 8006738:	e951 6702 	ldrd	r6, r7, [r1, #-8]
 800673c:	fa82 f54c 	uadd8	r5, r2, ip
 8006740:	ea82 0406 	eor.w	r4, r2, r6
 8006744:	faa4 f48c 	sel	r4, r4, ip
 8006748:	fa83 f54c 	uadd8	r5, r3, ip
 800674c:	ea83 0507 	eor.w	r5, r3, r7
 8006750:	faa5 f58c 	sel	r5, r5, ip
 8006754:	4325      	orrs	r5, r4
 8006756:	d0db      	beq.n	8006710 <strcmp+0x68>
 8006758:	b99c      	cbnz	r4, 8006782 <strcmp+0xda>
 800675a:	ba2d      	rev	r5, r5
 800675c:	fab5 f485 	clz	r4, r5
 8006760:	f024 0407 	bic.w	r4, r4, #7
 8006764:	fa27 f104 	lsr.w	r1, r7, r4
 8006768:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800676c:	fa23 f304 	lsr.w	r3, r3, r4
 8006770:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8006774:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8006778:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 800677c:	eba0 0001 	sub.w	r0, r0, r1
 8006780:	4770      	bx	lr
 8006782:	ba24      	rev	r4, r4
 8006784:	fab4 f484 	clz	r4, r4
 8006788:	f024 0407 	bic.w	r4, r4, #7
 800678c:	fa26 f104 	lsr.w	r1, r6, r4
 8006790:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006794:	fa22 f204 	lsr.w	r2, r2, r4
 8006798:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 800679c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80067a0:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 80067a4:	eba0 0001 	sub.w	r0, r0, r1
 80067a8:	4770      	bx	lr
 80067aa:	f014 0f03 	tst.w	r4, #3
 80067ae:	d13c      	bne.n	800682a <strcmp+0x182>
 80067b0:	f010 0403 	ands.w	r4, r0, #3
 80067b4:	d128      	bne.n	8006808 <strcmp+0x160>
 80067b6:	f850 2b08 	ldr.w	r2, [r0], #8
 80067ba:	f851 3b08 	ldr.w	r3, [r1], #8
 80067be:	fa82 f54c 	uadd8	r5, r2, ip
 80067c2:	ea82 0503 	eor.w	r5, r2, r3
 80067c6:	faa5 f58c 	sel	r5, r5, ip
 80067ca:	b95d      	cbnz	r5, 80067e4 <strcmp+0x13c>
 80067cc:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80067d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067d4:	fa82 f54c 	uadd8	r5, r2, ip
 80067d8:	ea82 0503 	eor.w	r5, r2, r3
 80067dc:	faa5 f58c 	sel	r5, r5, ip
 80067e0:	2d00      	cmp	r5, #0
 80067e2:	d0e8      	beq.n	80067b6 <strcmp+0x10e>
 80067e4:	ba2d      	rev	r5, r5
 80067e6:	fab5 f485 	clz	r4, r5
 80067ea:	f024 0407 	bic.w	r4, r4, #7
 80067ee:	fa23 f104 	lsr.w	r1, r3, r4
 80067f2:	fa22 f204 	lsr.w	r2, r2, r4
 80067f6:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 80067fa:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80067fe:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8006802:	eba0 0001 	sub.w	r0, r0, r1
 8006806:	4770      	bx	lr
 8006808:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 800680c:	f020 0003 	bic.w	r0, r0, #3
 8006810:	f850 2b08 	ldr.w	r2, [r0], #8
 8006814:	f021 0103 	bic.w	r1, r1, #3
 8006818:	f851 3b08 	ldr.w	r3, [r1], #8
 800681c:	fa0c f404 	lsl.w	r4, ip, r4
 8006820:	ea62 0204 	orn	r2, r2, r4
 8006824:	ea63 0304 	orn	r3, r3, r4
 8006828:	e7c9      	b.n	80067be <strcmp+0x116>
 800682a:	f010 0403 	ands.w	r4, r0, #3
 800682e:	d01a      	beq.n	8006866 <strcmp+0x1be>
 8006830:	eba1 0104 	sub.w	r1, r1, r4
 8006834:	f020 0003 	bic.w	r0, r0, #3
 8006838:	07e4      	lsls	r4, r4, #31
 800683a:	f850 2b04 	ldr.w	r2, [r0], #4
 800683e:	d006      	beq.n	800684e <strcmp+0x1a6>
 8006840:	d20f      	bcs.n	8006862 <strcmp+0x1ba>
 8006842:	788b      	ldrb	r3, [r1, #2]
 8006844:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
 8006848:	1ae4      	subs	r4, r4, r3
 800684a:	d106      	bne.n	800685a <strcmp+0x1b2>
 800684c:	b12b      	cbz	r3, 800685a <strcmp+0x1b2>
 800684e:	78cb      	ldrb	r3, [r1, #3]
 8006850:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
 8006854:	1ae4      	subs	r4, r4, r3
 8006856:	d100      	bne.n	800685a <strcmp+0x1b2>
 8006858:	b91b      	cbnz	r3, 8006862 <strcmp+0x1ba>
 800685a:	4620      	mov	r0, r4
 800685c:	f85d 4b10 	ldr.w	r4, [sp], #16
 8006860:	4770      	bx	lr
 8006862:	f101 0104 	add.w	r1, r1, #4
 8006866:	f850 2b04 	ldr.w	r2, [r0], #4
 800686a:	07cc      	lsls	r4, r1, #31
 800686c:	f021 0103 	bic.w	r1, r1, #3
 8006870:	f851 3b04 	ldr.w	r3, [r1], #4
 8006874:	d848      	bhi.n	8006908 <strcmp+0x260>
 8006876:	d224      	bcs.n	80068c2 <strcmp+0x21a>
 8006878:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
 800687c:	fa82 f54c 	uadd8	r5, r2, ip
 8006880:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
 8006884:	faa5 f58c 	sel	r5, r5, ip
 8006888:	d10a      	bne.n	80068a0 <strcmp+0x1f8>
 800688a:	b965      	cbnz	r5, 80068a6 <strcmp+0x1fe>
 800688c:	f851 3b04 	ldr.w	r3, [r1], #4
 8006890:	ea84 0402 	eor.w	r4, r4, r2
 8006894:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
 8006898:	d10e      	bne.n	80068b8 <strcmp+0x210>
 800689a:	f850 2b04 	ldr.w	r2, [r0], #4
 800689e:	e7eb      	b.n	8006878 <strcmp+0x1d0>
 80068a0:	ea4f 2313 	mov.w	r3, r3, lsr #8
 80068a4:	e055      	b.n	8006952 <strcmp+0x2aa>
 80068a6:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
 80068aa:	d14d      	bne.n	8006948 <strcmp+0x2a0>
 80068ac:	7808      	ldrb	r0, [r1, #0]
 80068ae:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 80068b2:	f1c0 0000 	rsb	r0, r0, #0
 80068b6:	4770      	bx	lr
 80068b8:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80068bc:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 80068c0:	e047      	b.n	8006952 <strcmp+0x2aa>
 80068c2:	ea02 441c 	and.w	r4, r2, ip, lsr #16
 80068c6:	fa82 f54c 	uadd8	r5, r2, ip
 80068ca:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
 80068ce:	faa5 f58c 	sel	r5, r5, ip
 80068d2:	d10a      	bne.n	80068ea <strcmp+0x242>
 80068d4:	b965      	cbnz	r5, 80068f0 <strcmp+0x248>
 80068d6:	f851 3b04 	ldr.w	r3, [r1], #4
 80068da:	ea84 0402 	eor.w	r4, r4, r2
 80068de:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
 80068e2:	d10c      	bne.n	80068fe <strcmp+0x256>
 80068e4:	f850 2b04 	ldr.w	r2, [r0], #4
 80068e8:	e7eb      	b.n	80068c2 <strcmp+0x21a>
 80068ea:	ea4f 4313 	mov.w	r3, r3, lsr #16
 80068ee:	e030      	b.n	8006952 <strcmp+0x2aa>
 80068f0:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
 80068f4:	d128      	bne.n	8006948 <strcmp+0x2a0>
 80068f6:	880b      	ldrh	r3, [r1, #0]
 80068f8:	ea4f 4212 	mov.w	r2, r2, lsr #16
 80068fc:	e029      	b.n	8006952 <strcmp+0x2aa>
 80068fe:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8006902:	ea03 431c 	and.w	r3, r3, ip, lsr #16
 8006906:	e024      	b.n	8006952 <strcmp+0x2aa>
 8006908:	f002 04ff 	and.w	r4, r2, #255	; 0xff
 800690c:	fa82 f54c 	uadd8	r5, r2, ip
 8006910:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
 8006914:	faa5 f58c 	sel	r5, r5, ip
 8006918:	d10a      	bne.n	8006930 <strcmp+0x288>
 800691a:	b965      	cbnz	r5, 8006936 <strcmp+0x28e>
 800691c:	f851 3b04 	ldr.w	r3, [r1], #4
 8006920:	ea84 0402 	eor.w	r4, r4, r2
 8006924:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
 8006928:	d109      	bne.n	800693e <strcmp+0x296>
 800692a:	f850 2b04 	ldr.w	r2, [r0], #4
 800692e:	e7eb      	b.n	8006908 <strcmp+0x260>
 8006930:	ea4f 6313 	mov.w	r3, r3, lsr #24
 8006934:	e00d      	b.n	8006952 <strcmp+0x2aa>
 8006936:	f015 0fff 	tst.w	r5, #255	; 0xff
 800693a:	d105      	bne.n	8006948 <strcmp+0x2a0>
 800693c:	680b      	ldr	r3, [r1, #0]
 800693e:	ea4f 2212 	mov.w	r2, r2, lsr #8
 8006942:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006946:	e004      	b.n	8006952 <strcmp+0x2aa>
 8006948:	f04f 0000 	mov.w	r0, #0
 800694c:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8006950:	4770      	bx	lr
 8006952:	ba12      	rev	r2, r2
 8006954:	ba1b      	rev	r3, r3
 8006956:	fa82 f44c 	uadd8	r4, r2, ip
 800695a:	ea82 0403 	eor.w	r4, r2, r3
 800695e:	faa4 f58c 	sel	r5, r4, ip
 8006962:	fab5 f485 	clz	r4, r5
 8006966:	fa02 f204 	lsl.w	r2, r2, r4
 800696a:	fa03 f304 	lsl.w	r3, r3, r4
 800696e:	ea4f 6012 	mov.w	r0, r2, lsr #24
 8006972:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8006976:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
 800697a:	4770      	bx	lr

0800697c <_wcrtomb_r>:
 800697c:	b570      	push	{r4, r5, r6, lr}
 800697e:	4605      	mov	r5, r0
 8006980:	b084      	sub	sp, #16
 8006982:	461c      	mov	r4, r3
 8006984:	b139      	cbz	r1, 8006996 <_wcrtomb_r+0x1a>
 8006986:	4e0b      	ldr	r6, [pc, #44]	; (80069b4 <_wcrtomb_r+0x38>)
 8006988:	f8d6 60e0 	ldr.w	r6, [r6, #224]	; 0xe0
 800698c:	47b0      	blx	r6
 800698e:	1c43      	adds	r3, r0, #1
 8006990:	d009      	beq.n	80069a6 <_wcrtomb_r+0x2a>
 8006992:	b004      	add	sp, #16
 8006994:	bd70      	pop	{r4, r5, r6, pc}
 8006996:	460a      	mov	r2, r1
 8006998:	4906      	ldr	r1, [pc, #24]	; (80069b4 <_wcrtomb_r+0x38>)
 800699a:	f8d1 60e0 	ldr.w	r6, [r1, #224]	; 0xe0
 800699e:	a901      	add	r1, sp, #4
 80069a0:	47b0      	blx	r6
 80069a2:	1c43      	adds	r3, r0, #1
 80069a4:	d1f5      	bne.n	8006992 <_wcrtomb_r+0x16>
 80069a6:	2200      	movs	r2, #0
 80069a8:	238a      	movs	r3, #138	; 0x8a
 80069aa:	6022      	str	r2, [r4, #0]
 80069ac:	602b      	str	r3, [r5, #0]
 80069ae:	b004      	add	sp, #16
 80069b0:	bd70      	pop	{r4, r5, r6, pc}
 80069b2:	bf00      	nop
 80069b4:	20000848 	.word	0x20000848

080069b8 <wcrtomb>:
 80069b8:	b570      	push	{r4, r5, r6, lr}
 80069ba:	4b10      	ldr	r3, [pc, #64]	; (80069fc <wcrtomb+0x44>)
 80069bc:	b084      	sub	sp, #16
 80069be:	681d      	ldr	r5, [r3, #0]
 80069c0:	4614      	mov	r4, r2
 80069c2:	b158      	cbz	r0, 80069dc <wcrtomb+0x24>
 80069c4:	4b0e      	ldr	r3, [pc, #56]	; (8006a00 <wcrtomb+0x48>)
 80069c6:	460a      	mov	r2, r1
 80069c8:	f8d3 60e0 	ldr.w	r6, [r3, #224]	; 0xe0
 80069cc:	4601      	mov	r1, r0
 80069ce:	4623      	mov	r3, r4
 80069d0:	4628      	mov	r0, r5
 80069d2:	47b0      	blx	r6
 80069d4:	1c43      	adds	r3, r0, #1
 80069d6:	d00b      	beq.n	80069f0 <wcrtomb+0x38>
 80069d8:	b004      	add	sp, #16
 80069da:	bd70      	pop	{r4, r5, r6, pc}
 80069dc:	4a08      	ldr	r2, [pc, #32]	; (8006a00 <wcrtomb+0x48>)
 80069de:	4623      	mov	r3, r4
 80069e0:	f8d2 60e0 	ldr.w	r6, [r2, #224]	; 0xe0
 80069e4:	a901      	add	r1, sp, #4
 80069e6:	4602      	mov	r2, r0
 80069e8:	4628      	mov	r0, r5
 80069ea:	47b0      	blx	r6
 80069ec:	1c43      	adds	r3, r0, #1
 80069ee:	d1f3      	bne.n	80069d8 <wcrtomb+0x20>
 80069f0:	2200      	movs	r2, #0
 80069f2:	238a      	movs	r3, #138	; 0x8a
 80069f4:	6022      	str	r2, [r4, #0]
 80069f6:	602b      	str	r3, [r5, #0]
 80069f8:	b004      	add	sp, #16
 80069fa:	bd70      	pop	{r4, r5, r6, pc}
 80069fc:	20000008 	.word	0x20000008
 8006a00:	20000848 	.word	0x20000848

08006a04 <_wctomb_r>:
 8006a04:	b410      	push	{r4}
 8006a06:	4c03      	ldr	r4, [pc, #12]	; (8006a14 <_wctomb_r+0x10>)
 8006a08:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 8006a0c:	46a4      	mov	ip, r4
 8006a0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a12:	4760      	bx	ip
 8006a14:	20000848 	.word	0x20000848

08006a18 <__ascii_wctomb>:
 8006a18:	b149      	cbz	r1, 8006a2e <__ascii_wctomb+0x16>
 8006a1a:	2aff      	cmp	r2, #255	; 0xff
 8006a1c:	d802      	bhi.n	8006a24 <__ascii_wctomb+0xc>
 8006a1e:	700a      	strb	r2, [r1, #0]
 8006a20:	2001      	movs	r0, #1
 8006a22:	4770      	bx	lr
 8006a24:	238a      	movs	r3, #138	; 0x8a
 8006a26:	6003      	str	r3, [r0, #0]
 8006a28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a2c:	4770      	bx	lr
 8006a2e:	4608      	mov	r0, r1
 8006a30:	4770      	bx	lr
 8006a32:	bf00      	nop

08006a34 <abort>:
 8006a34:	b508      	push	{r3, lr}
 8006a36:	2006      	movs	r0, #6
 8006a38:	f000 f8a0 	bl	8006b7c <raise>
 8006a3c:	2001      	movs	r0, #1
 8006a3e:	f000 ff83 	bl	8007948 <_exit>
 8006a42:	bf00      	nop

08006a44 <_init_signal_r>:
 8006a44:	b538      	push	{r3, r4, r5, lr}
 8006a46:	f8d0 42dc 	ldr.w	r4, [r0, #732]	; 0x2dc
 8006a4a:	b10c      	cbz	r4, 8006a50 <_init_signal_r+0xc>
 8006a4c:	2000      	movs	r0, #0
 8006a4e:	bd38      	pop	{r3, r4, r5, pc}
 8006a50:	2180      	movs	r1, #128	; 0x80
 8006a52:	4605      	mov	r5, r0
 8006a54:	f7fd f944 	bl	8003ce0 <_malloc_r>
 8006a58:	4602      	mov	r2, r0
 8006a5a:	f8c5 02dc 	str.w	r0, [r5, #732]	; 0x2dc
 8006a5e:	b130      	cbz	r0, 8006a6e <_init_signal_r+0x2a>
 8006a60:	1f03      	subs	r3, r0, #4
 8006a62:	327c      	adds	r2, #124	; 0x7c
 8006a64:	f843 4f04 	str.w	r4, [r3, #4]!
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d1fb      	bne.n	8006a64 <_init_signal_r+0x20>
 8006a6c:	e7ee      	b.n	8006a4c <_init_signal_r+0x8>
 8006a6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a72:	bd38      	pop	{r3, r4, r5, pc}

08006a74 <_signal_r>:
 8006a74:	291f      	cmp	r1, #31
 8006a76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a78:	4605      	mov	r5, r0
 8006a7a:	d809      	bhi.n	8006a90 <_signal_r+0x1c>
 8006a7c:	f8d0 62dc 	ldr.w	r6, [r0, #732]	; 0x2dc
 8006a80:	460c      	mov	r4, r1
 8006a82:	4617      	mov	r7, r2
 8006a84:	b14e      	cbz	r6, 8006a9a <_signal_r+0x26>
 8006a86:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8006a8a:	f846 7024 	str.w	r7, [r6, r4, lsl #2]
 8006a8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a90:	2316      	movs	r3, #22
 8006a92:	6003      	str	r3, [r0, #0]
 8006a94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a9a:	2180      	movs	r1, #128	; 0x80
 8006a9c:	f7fd f920 	bl	8003ce0 <_malloc_r>
 8006aa0:	4606      	mov	r6, r0
 8006aa2:	f8c5 02dc 	str.w	r0, [r5, #732]	; 0x2dc
 8006aa6:	b140      	cbz	r0, 8006aba <_signal_r+0x46>
 8006aa8:	1f03      	subs	r3, r0, #4
 8006aaa:	f100 057c 	add.w	r5, r0, #124	; 0x7c
 8006aae:	2100      	movs	r1, #0
 8006ab0:	f843 1f04 	str.w	r1, [r3, #4]!
 8006ab4:	429d      	cmp	r5, r3
 8006ab6:	d1fb      	bne.n	8006ab0 <_signal_r+0x3c>
 8006ab8:	e7e5      	b.n	8006a86 <_signal_r+0x12>
 8006aba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006abe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006ac0 <_raise_r>:
 8006ac0:	291f      	cmp	r1, #31
 8006ac2:	b538      	push	{r3, r4, r5, lr}
 8006ac4:	4605      	mov	r5, r0
 8006ac6:	d821      	bhi.n	8006b0c <_raise_r+0x4c>
 8006ac8:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
 8006acc:	460c      	mov	r4, r1
 8006ace:	b16a      	cbz	r2, 8006aec <_raise_r+0x2c>
 8006ad0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006ad4:	b153      	cbz	r3, 8006aec <_raise_r+0x2c>
 8006ad6:	2b01      	cmp	r3, #1
 8006ad8:	d016      	beq.n	8006b08 <_raise_r+0x48>
 8006ada:	1c59      	adds	r1, r3, #1
 8006adc:	d010      	beq.n	8006b00 <_raise_r+0x40>
 8006ade:	2500      	movs	r5, #0
 8006ae0:	4620      	mov	r0, r4
 8006ae2:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
 8006ae6:	4798      	blx	r3
 8006ae8:	4628      	mov	r0, r5
 8006aea:	bd38      	pop	{r3, r4, r5, pc}
 8006aec:	4628      	mov	r0, r5
 8006aee:	f000 f903 	bl	8006cf8 <_getpid_r>
 8006af2:	4622      	mov	r2, r4
 8006af4:	4601      	mov	r1, r0
 8006af6:	4628      	mov	r0, r5
 8006af8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006afc:	f000 b8e6 	b.w	8006ccc <_kill_r>
 8006b00:	2316      	movs	r3, #22
 8006b02:	6003      	str	r3, [r0, #0]
 8006b04:	2001      	movs	r0, #1
 8006b06:	bd38      	pop	{r3, r4, r5, pc}
 8006b08:	2000      	movs	r0, #0
 8006b0a:	bd38      	pop	{r3, r4, r5, pc}
 8006b0c:	2316      	movs	r3, #22
 8006b0e:	6003      	str	r3, [r0, #0]
 8006b10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b14:	bd38      	pop	{r3, r4, r5, pc}
 8006b16:	bf00      	nop

08006b18 <__sigtramp_r>:
 8006b18:	291f      	cmp	r1, #31
 8006b1a:	d82c      	bhi.n	8006b76 <__sigtramp_r+0x5e>
 8006b1c:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
 8006b20:	b538      	push	{r3, r4, r5, lr}
 8006b22:	460c      	mov	r4, r1
 8006b24:	4605      	mov	r5, r0
 8006b26:	b182      	cbz	r2, 8006b4a <__sigtramp_r+0x32>
 8006b28:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
 8006b2c:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8006b30:	b14b      	cbz	r3, 8006b46 <__sigtramp_r+0x2e>
 8006b32:	1c59      	adds	r1, r3, #1
 8006b34:	d01a      	beq.n	8006b6c <__sigtramp_r+0x54>
 8006b36:	2b01      	cmp	r3, #1
 8006b38:	d016      	beq.n	8006b68 <__sigtramp_r+0x50>
 8006b3a:	2500      	movs	r5, #0
 8006b3c:	4620      	mov	r0, r4
 8006b3e:	6015      	str	r5, [r2, #0]
 8006b40:	4798      	blx	r3
 8006b42:	4628      	mov	r0, r5
 8006b44:	bd38      	pop	{r3, r4, r5, pc}
 8006b46:	2001      	movs	r0, #1
 8006b48:	bd38      	pop	{r3, r4, r5, pc}
 8006b4a:	2180      	movs	r1, #128	; 0x80
 8006b4c:	f7fd f8c8 	bl	8003ce0 <_malloc_r>
 8006b50:	4602      	mov	r2, r0
 8006b52:	f8c5 02dc 	str.w	r0, [r5, #732]	; 0x2dc
 8006b56:	b158      	cbz	r0, 8006b70 <__sigtramp_r+0x58>
 8006b58:	1f03      	subs	r3, r0, #4
 8006b5a:	2100      	movs	r1, #0
 8006b5c:	307c      	adds	r0, #124	; 0x7c
 8006b5e:	f843 1f04 	str.w	r1, [r3, #4]!
 8006b62:	4298      	cmp	r0, r3
 8006b64:	d1fb      	bne.n	8006b5e <__sigtramp_r+0x46>
 8006b66:	e7df      	b.n	8006b28 <__sigtramp_r+0x10>
 8006b68:	2003      	movs	r0, #3
 8006b6a:	bd38      	pop	{r3, r4, r5, pc}
 8006b6c:	2002      	movs	r0, #2
 8006b6e:	bd38      	pop	{r3, r4, r5, pc}
 8006b70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b74:	bd38      	pop	{r3, r4, r5, pc}
 8006b76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b7a:	4770      	bx	lr

08006b7c <raise>:
 8006b7c:	b538      	push	{r3, r4, r5, lr}
 8006b7e:	4b15      	ldr	r3, [pc, #84]	; (8006bd4 <raise+0x58>)
 8006b80:	281f      	cmp	r0, #31
 8006b82:	681d      	ldr	r5, [r3, #0]
 8006b84:	d820      	bhi.n	8006bc8 <raise+0x4c>
 8006b86:	f8d5 22dc 	ldr.w	r2, [r5, #732]	; 0x2dc
 8006b8a:	4604      	mov	r4, r0
 8006b8c:	b162      	cbz	r2, 8006ba8 <raise+0x2c>
 8006b8e:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
 8006b92:	b14b      	cbz	r3, 8006ba8 <raise+0x2c>
 8006b94:	2b01      	cmp	r3, #1
 8006b96:	d015      	beq.n	8006bc4 <raise+0x48>
 8006b98:	1c59      	adds	r1, r3, #1
 8006b9a:	d00f      	beq.n	8006bbc <raise+0x40>
 8006b9c:	2500      	movs	r5, #0
 8006b9e:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
 8006ba2:	4798      	blx	r3
 8006ba4:	4628      	mov	r0, r5
 8006ba6:	bd38      	pop	{r3, r4, r5, pc}
 8006ba8:	4628      	mov	r0, r5
 8006baa:	f000 f8a5 	bl	8006cf8 <_getpid_r>
 8006bae:	4622      	mov	r2, r4
 8006bb0:	4601      	mov	r1, r0
 8006bb2:	4628      	mov	r0, r5
 8006bb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006bb8:	f000 b888 	b.w	8006ccc <_kill_r>
 8006bbc:	2316      	movs	r3, #22
 8006bbe:	602b      	str	r3, [r5, #0]
 8006bc0:	2001      	movs	r0, #1
 8006bc2:	bd38      	pop	{r3, r4, r5, pc}
 8006bc4:	2000      	movs	r0, #0
 8006bc6:	bd38      	pop	{r3, r4, r5, pc}
 8006bc8:	2316      	movs	r3, #22
 8006bca:	602b      	str	r3, [r5, #0]
 8006bcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006bd0:	bd38      	pop	{r3, r4, r5, pc}
 8006bd2:	bf00      	nop
 8006bd4:	20000008 	.word	0x20000008

08006bd8 <signal>:
 8006bd8:	4b13      	ldr	r3, [pc, #76]	; (8006c28 <signal+0x50>)
 8006bda:	281f      	cmp	r0, #31
 8006bdc:	b570      	push	{r4, r5, r6, lr}
 8006bde:	681e      	ldr	r6, [r3, #0]
 8006be0:	d809      	bhi.n	8006bf6 <signal+0x1e>
 8006be2:	460d      	mov	r5, r1
 8006be4:	f8d6 12dc 	ldr.w	r1, [r6, #732]	; 0x2dc
 8006be8:	4604      	mov	r4, r0
 8006bea:	b149      	cbz	r1, 8006c00 <signal+0x28>
 8006bec:	f851 0024 	ldr.w	r0, [r1, r4, lsl #2]
 8006bf0:	f841 5024 	str.w	r5, [r1, r4, lsl #2]
 8006bf4:	bd70      	pop	{r4, r5, r6, pc}
 8006bf6:	2316      	movs	r3, #22
 8006bf8:	6033      	str	r3, [r6, #0]
 8006bfa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006bfe:	bd70      	pop	{r4, r5, r6, pc}
 8006c00:	2180      	movs	r1, #128	; 0x80
 8006c02:	4630      	mov	r0, r6
 8006c04:	f7fd f86c 	bl	8003ce0 <_malloc_r>
 8006c08:	4601      	mov	r1, r0
 8006c0a:	f8c6 02dc 	str.w	r0, [r6, #732]	; 0x2dc
 8006c0e:	b140      	cbz	r0, 8006c22 <signal+0x4a>
 8006c10:	1f03      	subs	r3, r0, #4
 8006c12:	f100 0c7c 	add.w	ip, r0, #124	; 0x7c
 8006c16:	2200      	movs	r2, #0
 8006c18:	f843 2f04 	str.w	r2, [r3, #4]!
 8006c1c:	4563      	cmp	r3, ip
 8006c1e:	d1fb      	bne.n	8006c18 <signal+0x40>
 8006c20:	e7e4      	b.n	8006bec <signal+0x14>
 8006c22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c26:	bd70      	pop	{r4, r5, r6, pc}
 8006c28:	20000008 	.word	0x20000008

08006c2c <_init_signal>:
 8006c2c:	b538      	push	{r3, r4, r5, lr}
 8006c2e:	4b0c      	ldr	r3, [pc, #48]	; (8006c60 <_init_signal+0x34>)
 8006c30:	681d      	ldr	r5, [r3, #0]
 8006c32:	f8d5 42dc 	ldr.w	r4, [r5, #732]	; 0x2dc
 8006c36:	b10c      	cbz	r4, 8006c3c <_init_signal+0x10>
 8006c38:	2000      	movs	r0, #0
 8006c3a:	bd38      	pop	{r3, r4, r5, pc}
 8006c3c:	2180      	movs	r1, #128	; 0x80
 8006c3e:	4628      	mov	r0, r5
 8006c40:	f7fd f84e 	bl	8003ce0 <_malloc_r>
 8006c44:	f8c5 02dc 	str.w	r0, [r5, #732]	; 0x2dc
 8006c48:	b138      	cbz	r0, 8006c5a <_init_signal+0x2e>
 8006c4a:	1f03      	subs	r3, r0, #4
 8006c4c:	f100 027c 	add.w	r2, r0, #124	; 0x7c
 8006c50:	f843 4f04 	str.w	r4, [r3, #4]!
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d1fb      	bne.n	8006c50 <_init_signal+0x24>
 8006c58:	e7ee      	b.n	8006c38 <_init_signal+0xc>
 8006c5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c5e:	bd38      	pop	{r3, r4, r5, pc}
 8006c60:	20000008 	.word	0x20000008

08006c64 <__sigtramp>:
 8006c64:	b538      	push	{r3, r4, r5, lr}
 8006c66:	4b18      	ldr	r3, [pc, #96]	; (8006cc8 <__sigtramp+0x64>)
 8006c68:	281f      	cmp	r0, #31
 8006c6a:	681d      	ldr	r5, [r3, #0]
 8006c6c:	d828      	bhi.n	8006cc0 <__sigtramp+0x5c>
 8006c6e:	f8d5 22dc 	ldr.w	r2, [r5, #732]	; 0x2dc
 8006c72:	4604      	mov	r4, r0
 8006c74:	b182      	cbz	r2, 8006c98 <__sigtramp+0x34>
 8006c76:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
 8006c7a:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8006c7e:	b14b      	cbz	r3, 8006c94 <__sigtramp+0x30>
 8006c80:	1c59      	adds	r1, r3, #1
 8006c82:	d01b      	beq.n	8006cbc <__sigtramp+0x58>
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	d017      	beq.n	8006cb8 <__sigtramp+0x54>
 8006c88:	2500      	movs	r5, #0
 8006c8a:	4620      	mov	r0, r4
 8006c8c:	6015      	str	r5, [r2, #0]
 8006c8e:	4798      	blx	r3
 8006c90:	4628      	mov	r0, r5
 8006c92:	bd38      	pop	{r3, r4, r5, pc}
 8006c94:	2001      	movs	r0, #1
 8006c96:	bd38      	pop	{r3, r4, r5, pc}
 8006c98:	2180      	movs	r1, #128	; 0x80
 8006c9a:	4628      	mov	r0, r5
 8006c9c:	f7fd f820 	bl	8003ce0 <_malloc_r>
 8006ca0:	4602      	mov	r2, r0
 8006ca2:	f8c5 02dc 	str.w	r0, [r5, #732]	; 0x2dc
 8006ca6:	b158      	cbz	r0, 8006cc0 <__sigtramp+0x5c>
 8006ca8:	1f03      	subs	r3, r0, #4
 8006caa:	2100      	movs	r1, #0
 8006cac:	307c      	adds	r0, #124	; 0x7c
 8006cae:	f843 1f04 	str.w	r1, [r3, #4]!
 8006cb2:	4283      	cmp	r3, r0
 8006cb4:	d1fb      	bne.n	8006cae <__sigtramp+0x4a>
 8006cb6:	e7de      	b.n	8006c76 <__sigtramp+0x12>
 8006cb8:	2003      	movs	r0, #3
 8006cba:	bd38      	pop	{r3, r4, r5, pc}
 8006cbc:	2002      	movs	r0, #2
 8006cbe:	bd38      	pop	{r3, r4, r5, pc}
 8006cc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006cc4:	bd38      	pop	{r3, r4, r5, pc}
 8006cc6:	bf00      	nop
 8006cc8:	20000008 	.word	0x20000008

08006ccc <_kill_r>:
 8006ccc:	b570      	push	{r4, r5, r6, lr}
 8006cce:	460c      	mov	r4, r1
 8006cd0:	4d08      	ldr	r5, [pc, #32]	; (8006cf4 <_kill_r+0x28>)
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	2600      	movs	r6, #0
 8006cd6:	4620      	mov	r0, r4
 8006cd8:	4611      	mov	r1, r2
 8006cda:	461c      	mov	r4, r3
 8006cdc:	602e      	str	r6, [r5, #0]
 8006cde:	f000 fe2b 	bl	8007938 <_kill>
 8006ce2:	1c43      	adds	r3, r0, #1
 8006ce4:	d000      	beq.n	8006ce8 <_kill_r+0x1c>
 8006ce6:	bd70      	pop	{r4, r5, r6, pc}
 8006ce8:	682b      	ldr	r3, [r5, #0]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d0fb      	beq.n	8006ce6 <_kill_r+0x1a>
 8006cee:	6023      	str	r3, [r4, #0]
 8006cf0:	bd70      	pop	{r4, r5, r6, pc}
 8006cf2:	bf00      	nop
 8006cf4:	20000c74 	.word	0x20000c74

08006cf8 <_getpid_r>:
 8006cf8:	f000 be16 	b.w	8007928 <_getpid>

08006cfc <__aeabi_drsub>:
 8006cfc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8006d00:	e002      	b.n	8006d08 <__adddf3>
 8006d02:	bf00      	nop

08006d04 <__aeabi_dsub>:
 8006d04:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08006d08 <__adddf3>:
 8006d08:	b530      	push	{r4, r5, lr}
 8006d0a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8006d0e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8006d12:	ea94 0f05 	teq	r4, r5
 8006d16:	bf08      	it	eq
 8006d18:	ea90 0f02 	teqeq	r0, r2
 8006d1c:	bf1f      	itttt	ne
 8006d1e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8006d22:	ea55 0c02 	orrsne.w	ip, r5, r2
 8006d26:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8006d2a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8006d2e:	f000 80e2 	beq.w	8006ef6 <__adddf3+0x1ee>
 8006d32:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8006d36:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8006d3a:	bfb8      	it	lt
 8006d3c:	426d      	neglt	r5, r5
 8006d3e:	dd0c      	ble.n	8006d5a <__adddf3+0x52>
 8006d40:	442c      	add	r4, r5
 8006d42:	ea80 0202 	eor.w	r2, r0, r2
 8006d46:	ea81 0303 	eor.w	r3, r1, r3
 8006d4a:	ea82 0000 	eor.w	r0, r2, r0
 8006d4e:	ea83 0101 	eor.w	r1, r3, r1
 8006d52:	ea80 0202 	eor.w	r2, r0, r2
 8006d56:	ea81 0303 	eor.w	r3, r1, r3
 8006d5a:	2d36      	cmp	r5, #54	; 0x36
 8006d5c:	bf88      	it	hi
 8006d5e:	bd30      	pophi	{r4, r5, pc}
 8006d60:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8006d64:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8006d68:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8006d6c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8006d70:	d002      	beq.n	8006d78 <__adddf3+0x70>
 8006d72:	4240      	negs	r0, r0
 8006d74:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8006d78:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8006d7c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8006d80:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8006d84:	d002      	beq.n	8006d8c <__adddf3+0x84>
 8006d86:	4252      	negs	r2, r2
 8006d88:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8006d8c:	ea94 0f05 	teq	r4, r5
 8006d90:	f000 80a7 	beq.w	8006ee2 <__adddf3+0x1da>
 8006d94:	f1a4 0401 	sub.w	r4, r4, #1
 8006d98:	f1d5 0e20 	rsbs	lr, r5, #32
 8006d9c:	db0d      	blt.n	8006dba <__adddf3+0xb2>
 8006d9e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8006da2:	fa22 f205 	lsr.w	r2, r2, r5
 8006da6:	1880      	adds	r0, r0, r2
 8006da8:	f141 0100 	adc.w	r1, r1, #0
 8006dac:	fa03 f20e 	lsl.w	r2, r3, lr
 8006db0:	1880      	adds	r0, r0, r2
 8006db2:	fa43 f305 	asr.w	r3, r3, r5
 8006db6:	4159      	adcs	r1, r3
 8006db8:	e00e      	b.n	8006dd8 <__adddf3+0xd0>
 8006dba:	f1a5 0520 	sub.w	r5, r5, #32
 8006dbe:	f10e 0e20 	add.w	lr, lr, #32
 8006dc2:	2a01      	cmp	r2, #1
 8006dc4:	fa03 fc0e 	lsl.w	ip, r3, lr
 8006dc8:	bf28      	it	cs
 8006dca:	f04c 0c02 	orrcs.w	ip, ip, #2
 8006dce:	fa43 f305 	asr.w	r3, r3, r5
 8006dd2:	18c0      	adds	r0, r0, r3
 8006dd4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8006dd8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8006ddc:	d507      	bpl.n	8006dee <__adddf3+0xe6>
 8006dde:	f04f 0e00 	mov.w	lr, #0
 8006de2:	f1dc 0c00 	rsbs	ip, ip, #0
 8006de6:	eb7e 0000 	sbcs.w	r0, lr, r0
 8006dea:	eb6e 0101 	sbc.w	r1, lr, r1
 8006dee:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8006df2:	d31b      	bcc.n	8006e2c <__adddf3+0x124>
 8006df4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8006df8:	d30c      	bcc.n	8006e14 <__adddf3+0x10c>
 8006dfa:	0849      	lsrs	r1, r1, #1
 8006dfc:	ea5f 0030 	movs.w	r0, r0, rrx
 8006e00:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8006e04:	f104 0401 	add.w	r4, r4, #1
 8006e08:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8006e0c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8006e10:	f080 809a 	bcs.w	8006f48 <__adddf3+0x240>
 8006e14:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8006e18:	bf08      	it	eq
 8006e1a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8006e1e:	f150 0000 	adcs.w	r0, r0, #0
 8006e22:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8006e26:	ea41 0105 	orr.w	r1, r1, r5
 8006e2a:	bd30      	pop	{r4, r5, pc}
 8006e2c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8006e30:	4140      	adcs	r0, r0
 8006e32:	eb41 0101 	adc.w	r1, r1, r1
 8006e36:	3c01      	subs	r4, #1
 8006e38:	bf28      	it	cs
 8006e3a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8006e3e:	d2e9      	bcs.n	8006e14 <__adddf3+0x10c>
 8006e40:	f091 0f00 	teq	r1, #0
 8006e44:	bf04      	itt	eq
 8006e46:	4601      	moveq	r1, r0
 8006e48:	2000      	moveq	r0, #0
 8006e4a:	fab1 f381 	clz	r3, r1
 8006e4e:	bf08      	it	eq
 8006e50:	3320      	addeq	r3, #32
 8006e52:	f1a3 030b 	sub.w	r3, r3, #11
 8006e56:	f1b3 0220 	subs.w	r2, r3, #32
 8006e5a:	da0c      	bge.n	8006e76 <__adddf3+0x16e>
 8006e5c:	320c      	adds	r2, #12
 8006e5e:	dd08      	ble.n	8006e72 <__adddf3+0x16a>
 8006e60:	f102 0c14 	add.w	ip, r2, #20
 8006e64:	f1c2 020c 	rsb	r2, r2, #12
 8006e68:	fa01 f00c 	lsl.w	r0, r1, ip
 8006e6c:	fa21 f102 	lsr.w	r1, r1, r2
 8006e70:	e00c      	b.n	8006e8c <__adddf3+0x184>
 8006e72:	f102 0214 	add.w	r2, r2, #20
 8006e76:	bfd8      	it	le
 8006e78:	f1c2 0c20 	rsble	ip, r2, #32
 8006e7c:	fa01 f102 	lsl.w	r1, r1, r2
 8006e80:	fa20 fc0c 	lsr.w	ip, r0, ip
 8006e84:	bfdc      	itt	le
 8006e86:	ea41 010c 	orrle.w	r1, r1, ip
 8006e8a:	4090      	lslle	r0, r2
 8006e8c:	1ae4      	subs	r4, r4, r3
 8006e8e:	bfa2      	ittt	ge
 8006e90:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8006e94:	4329      	orrge	r1, r5
 8006e96:	bd30      	popge	{r4, r5, pc}
 8006e98:	ea6f 0404 	mvn.w	r4, r4
 8006e9c:	3c1f      	subs	r4, #31
 8006e9e:	da1c      	bge.n	8006eda <__adddf3+0x1d2>
 8006ea0:	340c      	adds	r4, #12
 8006ea2:	dc0e      	bgt.n	8006ec2 <__adddf3+0x1ba>
 8006ea4:	f104 0414 	add.w	r4, r4, #20
 8006ea8:	f1c4 0220 	rsb	r2, r4, #32
 8006eac:	fa20 f004 	lsr.w	r0, r0, r4
 8006eb0:	fa01 f302 	lsl.w	r3, r1, r2
 8006eb4:	ea40 0003 	orr.w	r0, r0, r3
 8006eb8:	fa21 f304 	lsr.w	r3, r1, r4
 8006ebc:	ea45 0103 	orr.w	r1, r5, r3
 8006ec0:	bd30      	pop	{r4, r5, pc}
 8006ec2:	f1c4 040c 	rsb	r4, r4, #12
 8006ec6:	f1c4 0220 	rsb	r2, r4, #32
 8006eca:	fa20 f002 	lsr.w	r0, r0, r2
 8006ece:	fa01 f304 	lsl.w	r3, r1, r4
 8006ed2:	ea40 0003 	orr.w	r0, r0, r3
 8006ed6:	4629      	mov	r1, r5
 8006ed8:	bd30      	pop	{r4, r5, pc}
 8006eda:	fa21 f004 	lsr.w	r0, r1, r4
 8006ede:	4629      	mov	r1, r5
 8006ee0:	bd30      	pop	{r4, r5, pc}
 8006ee2:	f094 0f00 	teq	r4, #0
 8006ee6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8006eea:	bf06      	itte	eq
 8006eec:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8006ef0:	3401      	addeq	r4, #1
 8006ef2:	3d01      	subne	r5, #1
 8006ef4:	e74e      	b.n	8006d94 <__adddf3+0x8c>
 8006ef6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8006efa:	bf18      	it	ne
 8006efc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8006f00:	d029      	beq.n	8006f56 <__adddf3+0x24e>
 8006f02:	ea94 0f05 	teq	r4, r5
 8006f06:	bf08      	it	eq
 8006f08:	ea90 0f02 	teqeq	r0, r2
 8006f0c:	d005      	beq.n	8006f1a <__adddf3+0x212>
 8006f0e:	ea54 0c00 	orrs.w	ip, r4, r0
 8006f12:	bf04      	itt	eq
 8006f14:	4619      	moveq	r1, r3
 8006f16:	4610      	moveq	r0, r2
 8006f18:	bd30      	pop	{r4, r5, pc}
 8006f1a:	ea91 0f03 	teq	r1, r3
 8006f1e:	bf1e      	ittt	ne
 8006f20:	2100      	movne	r1, #0
 8006f22:	2000      	movne	r0, #0
 8006f24:	bd30      	popne	{r4, r5, pc}
 8006f26:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8006f2a:	d105      	bne.n	8006f38 <__adddf3+0x230>
 8006f2c:	0040      	lsls	r0, r0, #1
 8006f2e:	4149      	adcs	r1, r1
 8006f30:	bf28      	it	cs
 8006f32:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8006f36:	bd30      	pop	{r4, r5, pc}
 8006f38:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8006f3c:	bf3c      	itt	cc
 8006f3e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8006f42:	bd30      	popcc	{r4, r5, pc}
 8006f44:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8006f48:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8006f4c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006f50:	f04f 0000 	mov.w	r0, #0
 8006f54:	bd30      	pop	{r4, r5, pc}
 8006f56:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8006f5a:	bf1a      	itte	ne
 8006f5c:	4619      	movne	r1, r3
 8006f5e:	4610      	movne	r0, r2
 8006f60:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8006f64:	bf1c      	itt	ne
 8006f66:	460b      	movne	r3, r1
 8006f68:	4602      	movne	r2, r0
 8006f6a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8006f6e:	bf06      	itte	eq
 8006f70:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8006f74:	ea91 0f03 	teqeq	r1, r3
 8006f78:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8006f7c:	bd30      	pop	{r4, r5, pc}
 8006f7e:	bf00      	nop

08006f80 <__aeabi_ui2d>:
 8006f80:	f090 0f00 	teq	r0, #0
 8006f84:	bf04      	itt	eq
 8006f86:	2100      	moveq	r1, #0
 8006f88:	4770      	bxeq	lr
 8006f8a:	b530      	push	{r4, r5, lr}
 8006f8c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8006f90:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8006f94:	f04f 0500 	mov.w	r5, #0
 8006f98:	f04f 0100 	mov.w	r1, #0
 8006f9c:	e750      	b.n	8006e40 <__adddf3+0x138>
 8006f9e:	bf00      	nop

08006fa0 <__aeabi_i2d>:
 8006fa0:	f090 0f00 	teq	r0, #0
 8006fa4:	bf04      	itt	eq
 8006fa6:	2100      	moveq	r1, #0
 8006fa8:	4770      	bxeq	lr
 8006faa:	b530      	push	{r4, r5, lr}
 8006fac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8006fb0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8006fb4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8006fb8:	bf48      	it	mi
 8006fba:	4240      	negmi	r0, r0
 8006fbc:	f04f 0100 	mov.w	r1, #0
 8006fc0:	e73e      	b.n	8006e40 <__adddf3+0x138>
 8006fc2:	bf00      	nop

08006fc4 <__aeabi_f2d>:
 8006fc4:	0042      	lsls	r2, r0, #1
 8006fc6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8006fca:	ea4f 0131 	mov.w	r1, r1, rrx
 8006fce:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8006fd2:	bf1f      	itttt	ne
 8006fd4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8006fd8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8006fdc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8006fe0:	4770      	bxne	lr
 8006fe2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8006fe6:	bf08      	it	eq
 8006fe8:	4770      	bxeq	lr
 8006fea:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8006fee:	bf04      	itt	eq
 8006ff0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8006ff4:	4770      	bxeq	lr
 8006ff6:	b530      	push	{r4, r5, lr}
 8006ff8:	f44f 7460 	mov.w	r4, #896	; 0x380
 8006ffc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8007000:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007004:	e71c      	b.n	8006e40 <__adddf3+0x138>
 8007006:	bf00      	nop

08007008 <__aeabi_ul2d>:
 8007008:	ea50 0201 	orrs.w	r2, r0, r1
 800700c:	bf08      	it	eq
 800700e:	4770      	bxeq	lr
 8007010:	b530      	push	{r4, r5, lr}
 8007012:	f04f 0500 	mov.w	r5, #0
 8007016:	e00a      	b.n	800702e <__aeabi_l2d+0x16>

08007018 <__aeabi_l2d>:
 8007018:	ea50 0201 	orrs.w	r2, r0, r1
 800701c:	bf08      	it	eq
 800701e:	4770      	bxeq	lr
 8007020:	b530      	push	{r4, r5, lr}
 8007022:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8007026:	d502      	bpl.n	800702e <__aeabi_l2d+0x16>
 8007028:	4240      	negs	r0, r0
 800702a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800702e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8007032:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8007036:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800703a:	f43f aed8 	beq.w	8006dee <__adddf3+0xe6>
 800703e:	f04f 0203 	mov.w	r2, #3
 8007042:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8007046:	bf18      	it	ne
 8007048:	3203      	addne	r2, #3
 800704a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800704e:	bf18      	it	ne
 8007050:	3203      	addne	r2, #3
 8007052:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8007056:	f1c2 0320 	rsb	r3, r2, #32
 800705a:	fa00 fc03 	lsl.w	ip, r0, r3
 800705e:	fa20 f002 	lsr.w	r0, r0, r2
 8007062:	fa01 fe03 	lsl.w	lr, r1, r3
 8007066:	ea40 000e 	orr.w	r0, r0, lr
 800706a:	fa21 f102 	lsr.w	r1, r1, r2
 800706e:	4414      	add	r4, r2
 8007070:	e6bd      	b.n	8006dee <__adddf3+0xe6>
 8007072:	bf00      	nop

08007074 <__aeabi_dmul>:
 8007074:	b570      	push	{r4, r5, r6, lr}
 8007076:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800707a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800707e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8007082:	bf1d      	ittte	ne
 8007084:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8007088:	ea94 0f0c 	teqne	r4, ip
 800708c:	ea95 0f0c 	teqne	r5, ip
 8007090:	f000 f8de 	bleq	8007250 <__aeabi_dmul+0x1dc>
 8007094:	442c      	add	r4, r5
 8007096:	ea81 0603 	eor.w	r6, r1, r3
 800709a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800709e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80070a2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80070a6:	bf18      	it	ne
 80070a8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80070ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80070b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80070b4:	d038      	beq.n	8007128 <__aeabi_dmul+0xb4>
 80070b6:	fba0 ce02 	umull	ip, lr, r0, r2
 80070ba:	f04f 0500 	mov.w	r5, #0
 80070be:	fbe1 e502 	umlal	lr, r5, r1, r2
 80070c2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80070c6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80070ca:	f04f 0600 	mov.w	r6, #0
 80070ce:	fbe1 5603 	umlal	r5, r6, r1, r3
 80070d2:	f09c 0f00 	teq	ip, #0
 80070d6:	bf18      	it	ne
 80070d8:	f04e 0e01 	orrne.w	lr, lr, #1
 80070dc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80070e0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80070e4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80070e8:	d204      	bcs.n	80070f4 <__aeabi_dmul+0x80>
 80070ea:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80070ee:	416d      	adcs	r5, r5
 80070f0:	eb46 0606 	adc.w	r6, r6, r6
 80070f4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80070f8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80070fc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8007100:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8007104:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8007108:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800710c:	bf88      	it	hi
 800710e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8007112:	d81e      	bhi.n	8007152 <__aeabi_dmul+0xde>
 8007114:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8007118:	bf08      	it	eq
 800711a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800711e:	f150 0000 	adcs.w	r0, r0, #0
 8007122:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8007126:	bd70      	pop	{r4, r5, r6, pc}
 8007128:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800712c:	ea46 0101 	orr.w	r1, r6, r1
 8007130:	ea40 0002 	orr.w	r0, r0, r2
 8007134:	ea81 0103 	eor.w	r1, r1, r3
 8007138:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800713c:	bfc2      	ittt	gt
 800713e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8007142:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8007146:	bd70      	popgt	{r4, r5, r6, pc}
 8007148:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800714c:	f04f 0e00 	mov.w	lr, #0
 8007150:	3c01      	subs	r4, #1
 8007152:	f300 80ab 	bgt.w	80072ac <__aeabi_dmul+0x238>
 8007156:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800715a:	bfde      	ittt	le
 800715c:	2000      	movle	r0, #0
 800715e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8007162:	bd70      	pople	{r4, r5, r6, pc}
 8007164:	f1c4 0400 	rsb	r4, r4, #0
 8007168:	3c20      	subs	r4, #32
 800716a:	da35      	bge.n	80071d8 <__aeabi_dmul+0x164>
 800716c:	340c      	adds	r4, #12
 800716e:	dc1b      	bgt.n	80071a8 <__aeabi_dmul+0x134>
 8007170:	f104 0414 	add.w	r4, r4, #20
 8007174:	f1c4 0520 	rsb	r5, r4, #32
 8007178:	fa00 f305 	lsl.w	r3, r0, r5
 800717c:	fa20 f004 	lsr.w	r0, r0, r4
 8007180:	fa01 f205 	lsl.w	r2, r1, r5
 8007184:	ea40 0002 	orr.w	r0, r0, r2
 8007188:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800718c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007190:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8007194:	fa21 f604 	lsr.w	r6, r1, r4
 8007198:	eb42 0106 	adc.w	r1, r2, r6
 800719c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80071a0:	bf08      	it	eq
 80071a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80071a6:	bd70      	pop	{r4, r5, r6, pc}
 80071a8:	f1c4 040c 	rsb	r4, r4, #12
 80071ac:	f1c4 0520 	rsb	r5, r4, #32
 80071b0:	fa00 f304 	lsl.w	r3, r0, r4
 80071b4:	fa20 f005 	lsr.w	r0, r0, r5
 80071b8:	fa01 f204 	lsl.w	r2, r1, r4
 80071bc:	ea40 0002 	orr.w	r0, r0, r2
 80071c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80071c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80071c8:	f141 0100 	adc.w	r1, r1, #0
 80071cc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80071d0:	bf08      	it	eq
 80071d2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80071d6:	bd70      	pop	{r4, r5, r6, pc}
 80071d8:	f1c4 0520 	rsb	r5, r4, #32
 80071dc:	fa00 f205 	lsl.w	r2, r0, r5
 80071e0:	ea4e 0e02 	orr.w	lr, lr, r2
 80071e4:	fa20 f304 	lsr.w	r3, r0, r4
 80071e8:	fa01 f205 	lsl.w	r2, r1, r5
 80071ec:	ea43 0302 	orr.w	r3, r3, r2
 80071f0:	fa21 f004 	lsr.w	r0, r1, r4
 80071f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80071f8:	fa21 f204 	lsr.w	r2, r1, r4
 80071fc:	ea20 0002 	bic.w	r0, r0, r2
 8007200:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8007204:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8007208:	bf08      	it	eq
 800720a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800720e:	bd70      	pop	{r4, r5, r6, pc}
 8007210:	f094 0f00 	teq	r4, #0
 8007214:	d10f      	bne.n	8007236 <__aeabi_dmul+0x1c2>
 8007216:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800721a:	0040      	lsls	r0, r0, #1
 800721c:	eb41 0101 	adc.w	r1, r1, r1
 8007220:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8007224:	bf08      	it	eq
 8007226:	3c01      	subeq	r4, #1
 8007228:	d0f7      	beq.n	800721a <__aeabi_dmul+0x1a6>
 800722a:	ea41 0106 	orr.w	r1, r1, r6
 800722e:	f095 0f00 	teq	r5, #0
 8007232:	bf18      	it	ne
 8007234:	4770      	bxne	lr
 8007236:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800723a:	0052      	lsls	r2, r2, #1
 800723c:	eb43 0303 	adc.w	r3, r3, r3
 8007240:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8007244:	bf08      	it	eq
 8007246:	3d01      	subeq	r5, #1
 8007248:	d0f7      	beq.n	800723a <__aeabi_dmul+0x1c6>
 800724a:	ea43 0306 	orr.w	r3, r3, r6
 800724e:	4770      	bx	lr
 8007250:	ea94 0f0c 	teq	r4, ip
 8007254:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8007258:	bf18      	it	ne
 800725a:	ea95 0f0c 	teqne	r5, ip
 800725e:	d00c      	beq.n	800727a <__aeabi_dmul+0x206>
 8007260:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8007264:	bf18      	it	ne
 8007266:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800726a:	d1d1      	bne.n	8007210 <__aeabi_dmul+0x19c>
 800726c:	ea81 0103 	eor.w	r1, r1, r3
 8007270:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8007274:	f04f 0000 	mov.w	r0, #0
 8007278:	bd70      	pop	{r4, r5, r6, pc}
 800727a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800727e:	bf06      	itte	eq
 8007280:	4610      	moveq	r0, r2
 8007282:	4619      	moveq	r1, r3
 8007284:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8007288:	d019      	beq.n	80072be <__aeabi_dmul+0x24a>
 800728a:	ea94 0f0c 	teq	r4, ip
 800728e:	d102      	bne.n	8007296 <__aeabi_dmul+0x222>
 8007290:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8007294:	d113      	bne.n	80072be <__aeabi_dmul+0x24a>
 8007296:	ea95 0f0c 	teq	r5, ip
 800729a:	d105      	bne.n	80072a8 <__aeabi_dmul+0x234>
 800729c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80072a0:	bf1c      	itt	ne
 80072a2:	4610      	movne	r0, r2
 80072a4:	4619      	movne	r1, r3
 80072a6:	d10a      	bne.n	80072be <__aeabi_dmul+0x24a>
 80072a8:	ea81 0103 	eor.w	r1, r1, r3
 80072ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80072b0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80072b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80072b8:	f04f 0000 	mov.w	r0, #0
 80072bc:	bd70      	pop	{r4, r5, r6, pc}
 80072be:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80072c2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80072c6:	bd70      	pop	{r4, r5, r6, pc}

080072c8 <__aeabi_ddiv>:
 80072c8:	b570      	push	{r4, r5, r6, lr}
 80072ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80072ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80072d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80072d6:	bf1d      	ittte	ne
 80072d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80072dc:	ea94 0f0c 	teqne	r4, ip
 80072e0:	ea95 0f0c 	teqne	r5, ip
 80072e4:	f000 f8a7 	bleq	8007436 <__aeabi_ddiv+0x16e>
 80072e8:	eba4 0405 	sub.w	r4, r4, r5
 80072ec:	ea81 0e03 	eor.w	lr, r1, r3
 80072f0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80072f4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80072f8:	f000 8088 	beq.w	800740c <__aeabi_ddiv+0x144>
 80072fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8007300:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8007304:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8007308:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800730c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8007310:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8007314:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8007318:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800731c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8007320:	429d      	cmp	r5, r3
 8007322:	bf08      	it	eq
 8007324:	4296      	cmpeq	r6, r2
 8007326:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800732a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800732e:	d202      	bcs.n	8007336 <__aeabi_ddiv+0x6e>
 8007330:	085b      	lsrs	r3, r3, #1
 8007332:	ea4f 0232 	mov.w	r2, r2, rrx
 8007336:	1ab6      	subs	r6, r6, r2
 8007338:	eb65 0503 	sbc.w	r5, r5, r3
 800733c:	085b      	lsrs	r3, r3, #1
 800733e:	ea4f 0232 	mov.w	r2, r2, rrx
 8007342:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8007346:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800734a:	ebb6 0e02 	subs.w	lr, r6, r2
 800734e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8007352:	bf22      	ittt	cs
 8007354:	1ab6      	subcs	r6, r6, r2
 8007356:	4675      	movcs	r5, lr
 8007358:	ea40 000c 	orrcs.w	r0, r0, ip
 800735c:	085b      	lsrs	r3, r3, #1
 800735e:	ea4f 0232 	mov.w	r2, r2, rrx
 8007362:	ebb6 0e02 	subs.w	lr, r6, r2
 8007366:	eb75 0e03 	sbcs.w	lr, r5, r3
 800736a:	bf22      	ittt	cs
 800736c:	1ab6      	subcs	r6, r6, r2
 800736e:	4675      	movcs	r5, lr
 8007370:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8007374:	085b      	lsrs	r3, r3, #1
 8007376:	ea4f 0232 	mov.w	r2, r2, rrx
 800737a:	ebb6 0e02 	subs.w	lr, r6, r2
 800737e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8007382:	bf22      	ittt	cs
 8007384:	1ab6      	subcs	r6, r6, r2
 8007386:	4675      	movcs	r5, lr
 8007388:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800738c:	085b      	lsrs	r3, r3, #1
 800738e:	ea4f 0232 	mov.w	r2, r2, rrx
 8007392:	ebb6 0e02 	subs.w	lr, r6, r2
 8007396:	eb75 0e03 	sbcs.w	lr, r5, r3
 800739a:	bf22      	ittt	cs
 800739c:	1ab6      	subcs	r6, r6, r2
 800739e:	4675      	movcs	r5, lr
 80073a0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80073a4:	ea55 0e06 	orrs.w	lr, r5, r6
 80073a8:	d018      	beq.n	80073dc <__aeabi_ddiv+0x114>
 80073aa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80073ae:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80073b2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80073b6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80073ba:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80073be:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80073c2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80073c6:	d1c0      	bne.n	800734a <__aeabi_ddiv+0x82>
 80073c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80073cc:	d10b      	bne.n	80073e6 <__aeabi_ddiv+0x11e>
 80073ce:	ea41 0100 	orr.w	r1, r1, r0
 80073d2:	f04f 0000 	mov.w	r0, #0
 80073d6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80073da:	e7b6      	b.n	800734a <__aeabi_ddiv+0x82>
 80073dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80073e0:	bf04      	itt	eq
 80073e2:	4301      	orreq	r1, r0
 80073e4:	2000      	moveq	r0, #0
 80073e6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80073ea:	bf88      	it	hi
 80073ec:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80073f0:	f63f aeaf 	bhi.w	8007152 <__aeabi_dmul+0xde>
 80073f4:	ebb5 0c03 	subs.w	ip, r5, r3
 80073f8:	bf04      	itt	eq
 80073fa:	ebb6 0c02 	subseq.w	ip, r6, r2
 80073fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8007402:	f150 0000 	adcs.w	r0, r0, #0
 8007406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800740a:	bd70      	pop	{r4, r5, r6, pc}
 800740c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8007410:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8007414:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8007418:	bfc2      	ittt	gt
 800741a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800741e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8007422:	bd70      	popgt	{r4, r5, r6, pc}
 8007424:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8007428:	f04f 0e00 	mov.w	lr, #0
 800742c:	3c01      	subs	r4, #1
 800742e:	e690      	b.n	8007152 <__aeabi_dmul+0xde>
 8007430:	ea45 0e06 	orr.w	lr, r5, r6
 8007434:	e68d      	b.n	8007152 <__aeabi_dmul+0xde>
 8007436:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800743a:	ea94 0f0c 	teq	r4, ip
 800743e:	bf08      	it	eq
 8007440:	ea95 0f0c 	teqeq	r5, ip
 8007444:	f43f af3b 	beq.w	80072be <__aeabi_dmul+0x24a>
 8007448:	ea94 0f0c 	teq	r4, ip
 800744c:	d10a      	bne.n	8007464 <__aeabi_ddiv+0x19c>
 800744e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8007452:	f47f af34 	bne.w	80072be <__aeabi_dmul+0x24a>
 8007456:	ea95 0f0c 	teq	r5, ip
 800745a:	f47f af25 	bne.w	80072a8 <__aeabi_dmul+0x234>
 800745e:	4610      	mov	r0, r2
 8007460:	4619      	mov	r1, r3
 8007462:	e72c      	b.n	80072be <__aeabi_dmul+0x24a>
 8007464:	ea95 0f0c 	teq	r5, ip
 8007468:	d106      	bne.n	8007478 <__aeabi_ddiv+0x1b0>
 800746a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800746e:	f43f aefd 	beq.w	800726c <__aeabi_dmul+0x1f8>
 8007472:	4610      	mov	r0, r2
 8007474:	4619      	mov	r1, r3
 8007476:	e722      	b.n	80072be <__aeabi_dmul+0x24a>
 8007478:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800747c:	bf18      	it	ne
 800747e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8007482:	f47f aec5 	bne.w	8007210 <__aeabi_dmul+0x19c>
 8007486:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800748a:	f47f af0d 	bne.w	80072a8 <__aeabi_dmul+0x234>
 800748e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8007492:	f47f aeeb 	bne.w	800726c <__aeabi_dmul+0x1f8>
 8007496:	e712      	b.n	80072be <__aeabi_dmul+0x24a>

08007498 <__gedf2>:
 8007498:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800749c:	e006      	b.n	80074ac <__cmpdf2+0x4>
 800749e:	bf00      	nop

080074a0 <__ledf2>:
 80074a0:	f04f 0c01 	mov.w	ip, #1
 80074a4:	e002      	b.n	80074ac <__cmpdf2+0x4>
 80074a6:	bf00      	nop

080074a8 <__cmpdf2>:
 80074a8:	f04f 0c01 	mov.w	ip, #1
 80074ac:	f84d cd04 	str.w	ip, [sp, #-4]!
 80074b0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80074b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80074b8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80074bc:	bf18      	it	ne
 80074be:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80074c2:	d01b      	beq.n	80074fc <__cmpdf2+0x54>
 80074c4:	b001      	add	sp, #4
 80074c6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80074ca:	bf0c      	ite	eq
 80074cc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80074d0:	ea91 0f03 	teqne	r1, r3
 80074d4:	bf02      	ittt	eq
 80074d6:	ea90 0f02 	teqeq	r0, r2
 80074da:	2000      	moveq	r0, #0
 80074dc:	4770      	bxeq	lr
 80074de:	f110 0f00 	cmn.w	r0, #0
 80074e2:	ea91 0f03 	teq	r1, r3
 80074e6:	bf58      	it	pl
 80074e8:	4299      	cmppl	r1, r3
 80074ea:	bf08      	it	eq
 80074ec:	4290      	cmpeq	r0, r2
 80074ee:	bf2c      	ite	cs
 80074f0:	17d8      	asrcs	r0, r3, #31
 80074f2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80074f6:	f040 0001 	orr.w	r0, r0, #1
 80074fa:	4770      	bx	lr
 80074fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8007500:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8007504:	d102      	bne.n	800750c <__cmpdf2+0x64>
 8007506:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800750a:	d107      	bne.n	800751c <__cmpdf2+0x74>
 800750c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8007510:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8007514:	d1d6      	bne.n	80074c4 <__cmpdf2+0x1c>
 8007516:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800751a:	d0d3      	beq.n	80074c4 <__cmpdf2+0x1c>
 800751c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8007520:	4770      	bx	lr
 8007522:	bf00      	nop

08007524 <__aeabi_cdrcmple>:
 8007524:	4684      	mov	ip, r0
 8007526:	4610      	mov	r0, r2
 8007528:	4662      	mov	r2, ip
 800752a:	468c      	mov	ip, r1
 800752c:	4619      	mov	r1, r3
 800752e:	4663      	mov	r3, ip
 8007530:	e000      	b.n	8007534 <__aeabi_cdcmpeq>
 8007532:	bf00      	nop

08007534 <__aeabi_cdcmpeq>:
 8007534:	b501      	push	{r0, lr}
 8007536:	f7ff ffb7 	bl	80074a8 <__cmpdf2>
 800753a:	2800      	cmp	r0, #0
 800753c:	bf48      	it	mi
 800753e:	f110 0f00 	cmnmi.w	r0, #0
 8007542:	bd01      	pop	{r0, pc}

08007544 <__aeabi_dcmpeq>:
 8007544:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007548:	f7ff fff4 	bl	8007534 <__aeabi_cdcmpeq>
 800754c:	bf0c      	ite	eq
 800754e:	2001      	moveq	r0, #1
 8007550:	2000      	movne	r0, #0
 8007552:	f85d fb08 	ldr.w	pc, [sp], #8
 8007556:	bf00      	nop

08007558 <__aeabi_dcmplt>:
 8007558:	f84d ed08 	str.w	lr, [sp, #-8]!
 800755c:	f7ff ffea 	bl	8007534 <__aeabi_cdcmpeq>
 8007560:	bf34      	ite	cc
 8007562:	2001      	movcc	r0, #1
 8007564:	2000      	movcs	r0, #0
 8007566:	f85d fb08 	ldr.w	pc, [sp], #8
 800756a:	bf00      	nop

0800756c <__aeabi_dcmple>:
 800756c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007570:	f7ff ffe0 	bl	8007534 <__aeabi_cdcmpeq>
 8007574:	bf94      	ite	ls
 8007576:	2001      	movls	r0, #1
 8007578:	2000      	movhi	r0, #0
 800757a:	f85d fb08 	ldr.w	pc, [sp], #8
 800757e:	bf00      	nop

08007580 <__aeabi_dcmpge>:
 8007580:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007584:	f7ff ffce 	bl	8007524 <__aeabi_cdrcmple>
 8007588:	bf94      	ite	ls
 800758a:	2001      	movls	r0, #1
 800758c:	2000      	movhi	r0, #0
 800758e:	f85d fb08 	ldr.w	pc, [sp], #8
 8007592:	bf00      	nop

08007594 <__aeabi_dcmpgt>:
 8007594:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007598:	f7ff ffc4 	bl	8007524 <__aeabi_cdrcmple>
 800759c:	bf34      	ite	cc
 800759e:	2001      	movcc	r0, #1
 80075a0:	2000      	movcs	r0, #0
 80075a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80075a6:	bf00      	nop

080075a8 <__aeabi_dcmpun>:
 80075a8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80075ac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80075b0:	d102      	bne.n	80075b8 <__aeabi_dcmpun+0x10>
 80075b2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80075b6:	d10a      	bne.n	80075ce <__aeabi_dcmpun+0x26>
 80075b8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80075bc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80075c0:	d102      	bne.n	80075c8 <__aeabi_dcmpun+0x20>
 80075c2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80075c6:	d102      	bne.n	80075ce <__aeabi_dcmpun+0x26>
 80075c8:	f04f 0000 	mov.w	r0, #0
 80075cc:	4770      	bx	lr
 80075ce:	f04f 0001 	mov.w	r0, #1
 80075d2:	4770      	bx	lr

080075d4 <__aeabi_d2iz>:
 80075d4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80075d8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80075dc:	d215      	bcs.n	800760a <__aeabi_d2iz+0x36>
 80075de:	d511      	bpl.n	8007604 <__aeabi_d2iz+0x30>
 80075e0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80075e4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80075e8:	d912      	bls.n	8007610 <__aeabi_d2iz+0x3c>
 80075ea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80075ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80075f2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80075f6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80075fa:	fa23 f002 	lsr.w	r0, r3, r2
 80075fe:	bf18      	it	ne
 8007600:	4240      	negne	r0, r0
 8007602:	4770      	bx	lr
 8007604:	f04f 0000 	mov.w	r0, #0
 8007608:	4770      	bx	lr
 800760a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800760e:	d105      	bne.n	800761c <__aeabi_d2iz+0x48>
 8007610:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8007614:	bf08      	it	eq
 8007616:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800761a:	4770      	bx	lr
 800761c:	f04f 0000 	mov.w	r0, #0
 8007620:	4770      	bx	lr
 8007622:	bf00      	nop

08007624 <__aeabi_uldivmod>:
 8007624:	b953      	cbnz	r3, 800763c <__aeabi_uldivmod+0x18>
 8007626:	b94a      	cbnz	r2, 800763c <__aeabi_uldivmod+0x18>
 8007628:	2900      	cmp	r1, #0
 800762a:	bf08      	it	eq
 800762c:	2800      	cmpeq	r0, #0
 800762e:	bf1c      	itt	ne
 8007630:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8007634:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8007638:	f000 b974 	b.w	8007924 <__aeabi_idiv0>
 800763c:	f1ad 0c08 	sub.w	ip, sp, #8
 8007640:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8007644:	f000 f806 	bl	8007654 <__udivmoddi4>
 8007648:	f8dd e004 	ldr.w	lr, [sp, #4]
 800764c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007650:	b004      	add	sp, #16
 8007652:	4770      	bx	lr

08007654 <__udivmoddi4>:
 8007654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007658:	9d08      	ldr	r5, [sp, #32]
 800765a:	4604      	mov	r4, r0
 800765c:	468e      	mov	lr, r1
 800765e:	2b00      	cmp	r3, #0
 8007660:	d14d      	bne.n	80076fe <__udivmoddi4+0xaa>
 8007662:	428a      	cmp	r2, r1
 8007664:	4694      	mov	ip, r2
 8007666:	d969      	bls.n	800773c <__udivmoddi4+0xe8>
 8007668:	fab2 f282 	clz	r2, r2
 800766c:	b152      	cbz	r2, 8007684 <__udivmoddi4+0x30>
 800766e:	fa01 f302 	lsl.w	r3, r1, r2
 8007672:	f1c2 0120 	rsb	r1, r2, #32
 8007676:	fa20 f101 	lsr.w	r1, r0, r1
 800767a:	fa0c fc02 	lsl.w	ip, ip, r2
 800767e:	ea41 0e03 	orr.w	lr, r1, r3
 8007682:	4094      	lsls	r4, r2
 8007684:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8007688:	0c21      	lsrs	r1, r4, #16
 800768a:	fbbe f6f8 	udiv	r6, lr, r8
 800768e:	fa1f f78c 	uxth.w	r7, ip
 8007692:	fb08 e316 	mls	r3, r8, r6, lr
 8007696:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800769a:	fb06 f107 	mul.w	r1, r6, r7
 800769e:	4299      	cmp	r1, r3
 80076a0:	d90a      	bls.n	80076b8 <__udivmoddi4+0x64>
 80076a2:	eb1c 0303 	adds.w	r3, ip, r3
 80076a6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80076aa:	f080 811f 	bcs.w	80078ec <__udivmoddi4+0x298>
 80076ae:	4299      	cmp	r1, r3
 80076b0:	f240 811c 	bls.w	80078ec <__udivmoddi4+0x298>
 80076b4:	3e02      	subs	r6, #2
 80076b6:	4463      	add	r3, ip
 80076b8:	1a5b      	subs	r3, r3, r1
 80076ba:	b2a4      	uxth	r4, r4
 80076bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80076c0:	fb08 3310 	mls	r3, r8, r0, r3
 80076c4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80076c8:	fb00 f707 	mul.w	r7, r0, r7
 80076cc:	42a7      	cmp	r7, r4
 80076ce:	d90a      	bls.n	80076e6 <__udivmoddi4+0x92>
 80076d0:	eb1c 0404 	adds.w	r4, ip, r4
 80076d4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80076d8:	f080 810a 	bcs.w	80078f0 <__udivmoddi4+0x29c>
 80076dc:	42a7      	cmp	r7, r4
 80076de:	f240 8107 	bls.w	80078f0 <__udivmoddi4+0x29c>
 80076e2:	4464      	add	r4, ip
 80076e4:	3802      	subs	r0, #2
 80076e6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80076ea:	1be4      	subs	r4, r4, r7
 80076ec:	2600      	movs	r6, #0
 80076ee:	b11d      	cbz	r5, 80076f8 <__udivmoddi4+0xa4>
 80076f0:	40d4      	lsrs	r4, r2
 80076f2:	2300      	movs	r3, #0
 80076f4:	e9c5 4300 	strd	r4, r3, [r5]
 80076f8:	4631      	mov	r1, r6
 80076fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076fe:	428b      	cmp	r3, r1
 8007700:	d909      	bls.n	8007716 <__udivmoddi4+0xc2>
 8007702:	2d00      	cmp	r5, #0
 8007704:	f000 80ef 	beq.w	80078e6 <__udivmoddi4+0x292>
 8007708:	2600      	movs	r6, #0
 800770a:	e9c5 0100 	strd	r0, r1, [r5]
 800770e:	4630      	mov	r0, r6
 8007710:	4631      	mov	r1, r6
 8007712:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007716:	fab3 f683 	clz	r6, r3
 800771a:	2e00      	cmp	r6, #0
 800771c:	d14a      	bne.n	80077b4 <__udivmoddi4+0x160>
 800771e:	428b      	cmp	r3, r1
 8007720:	d302      	bcc.n	8007728 <__udivmoddi4+0xd4>
 8007722:	4282      	cmp	r2, r0
 8007724:	f200 80f9 	bhi.w	800791a <__udivmoddi4+0x2c6>
 8007728:	1a84      	subs	r4, r0, r2
 800772a:	eb61 0303 	sbc.w	r3, r1, r3
 800772e:	2001      	movs	r0, #1
 8007730:	469e      	mov	lr, r3
 8007732:	2d00      	cmp	r5, #0
 8007734:	d0e0      	beq.n	80076f8 <__udivmoddi4+0xa4>
 8007736:	e9c5 4e00 	strd	r4, lr, [r5]
 800773a:	e7dd      	b.n	80076f8 <__udivmoddi4+0xa4>
 800773c:	b902      	cbnz	r2, 8007740 <__udivmoddi4+0xec>
 800773e:	deff      	udf	#255	; 0xff
 8007740:	fab2 f282 	clz	r2, r2
 8007744:	2a00      	cmp	r2, #0
 8007746:	f040 8092 	bne.w	800786e <__udivmoddi4+0x21a>
 800774a:	eba1 010c 	sub.w	r1, r1, ip
 800774e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8007752:	fa1f fe8c 	uxth.w	lr, ip
 8007756:	2601      	movs	r6, #1
 8007758:	0c20      	lsrs	r0, r4, #16
 800775a:	fbb1 f3f7 	udiv	r3, r1, r7
 800775e:	fb07 1113 	mls	r1, r7, r3, r1
 8007762:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8007766:	fb0e f003 	mul.w	r0, lr, r3
 800776a:	4288      	cmp	r0, r1
 800776c:	d908      	bls.n	8007780 <__udivmoddi4+0x12c>
 800776e:	eb1c 0101 	adds.w	r1, ip, r1
 8007772:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8007776:	d202      	bcs.n	800777e <__udivmoddi4+0x12a>
 8007778:	4288      	cmp	r0, r1
 800777a:	f200 80cb 	bhi.w	8007914 <__udivmoddi4+0x2c0>
 800777e:	4643      	mov	r3, r8
 8007780:	1a09      	subs	r1, r1, r0
 8007782:	b2a4      	uxth	r4, r4
 8007784:	fbb1 f0f7 	udiv	r0, r1, r7
 8007788:	fb07 1110 	mls	r1, r7, r0, r1
 800778c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8007790:	fb0e fe00 	mul.w	lr, lr, r0
 8007794:	45a6      	cmp	lr, r4
 8007796:	d908      	bls.n	80077aa <__udivmoddi4+0x156>
 8007798:	eb1c 0404 	adds.w	r4, ip, r4
 800779c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80077a0:	d202      	bcs.n	80077a8 <__udivmoddi4+0x154>
 80077a2:	45a6      	cmp	lr, r4
 80077a4:	f200 80bb 	bhi.w	800791e <__udivmoddi4+0x2ca>
 80077a8:	4608      	mov	r0, r1
 80077aa:	eba4 040e 	sub.w	r4, r4, lr
 80077ae:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80077b2:	e79c      	b.n	80076ee <__udivmoddi4+0x9a>
 80077b4:	f1c6 0720 	rsb	r7, r6, #32
 80077b8:	40b3      	lsls	r3, r6
 80077ba:	fa22 fc07 	lsr.w	ip, r2, r7
 80077be:	ea4c 0c03 	orr.w	ip, ip, r3
 80077c2:	fa20 f407 	lsr.w	r4, r0, r7
 80077c6:	fa01 f306 	lsl.w	r3, r1, r6
 80077ca:	431c      	orrs	r4, r3
 80077cc:	40f9      	lsrs	r1, r7
 80077ce:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80077d2:	fa00 f306 	lsl.w	r3, r0, r6
 80077d6:	fbb1 f8f9 	udiv	r8, r1, r9
 80077da:	0c20      	lsrs	r0, r4, #16
 80077dc:	fa1f fe8c 	uxth.w	lr, ip
 80077e0:	fb09 1118 	mls	r1, r9, r8, r1
 80077e4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80077e8:	fb08 f00e 	mul.w	r0, r8, lr
 80077ec:	4288      	cmp	r0, r1
 80077ee:	fa02 f206 	lsl.w	r2, r2, r6
 80077f2:	d90b      	bls.n	800780c <__udivmoddi4+0x1b8>
 80077f4:	eb1c 0101 	adds.w	r1, ip, r1
 80077f8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80077fc:	f080 8088 	bcs.w	8007910 <__udivmoddi4+0x2bc>
 8007800:	4288      	cmp	r0, r1
 8007802:	f240 8085 	bls.w	8007910 <__udivmoddi4+0x2bc>
 8007806:	f1a8 0802 	sub.w	r8, r8, #2
 800780a:	4461      	add	r1, ip
 800780c:	1a09      	subs	r1, r1, r0
 800780e:	b2a4      	uxth	r4, r4
 8007810:	fbb1 f0f9 	udiv	r0, r1, r9
 8007814:	fb09 1110 	mls	r1, r9, r0, r1
 8007818:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800781c:	fb00 fe0e 	mul.w	lr, r0, lr
 8007820:	458e      	cmp	lr, r1
 8007822:	d908      	bls.n	8007836 <__udivmoddi4+0x1e2>
 8007824:	eb1c 0101 	adds.w	r1, ip, r1
 8007828:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 800782c:	d26c      	bcs.n	8007908 <__udivmoddi4+0x2b4>
 800782e:	458e      	cmp	lr, r1
 8007830:	d96a      	bls.n	8007908 <__udivmoddi4+0x2b4>
 8007832:	3802      	subs	r0, #2
 8007834:	4461      	add	r1, ip
 8007836:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800783a:	fba0 9402 	umull	r9, r4, r0, r2
 800783e:	eba1 010e 	sub.w	r1, r1, lr
 8007842:	42a1      	cmp	r1, r4
 8007844:	46c8      	mov	r8, r9
 8007846:	46a6      	mov	lr, r4
 8007848:	d356      	bcc.n	80078f8 <__udivmoddi4+0x2a4>
 800784a:	d053      	beq.n	80078f4 <__udivmoddi4+0x2a0>
 800784c:	b15d      	cbz	r5, 8007866 <__udivmoddi4+0x212>
 800784e:	ebb3 0208 	subs.w	r2, r3, r8
 8007852:	eb61 010e 	sbc.w	r1, r1, lr
 8007856:	fa01 f707 	lsl.w	r7, r1, r7
 800785a:	fa22 f306 	lsr.w	r3, r2, r6
 800785e:	40f1      	lsrs	r1, r6
 8007860:	431f      	orrs	r7, r3
 8007862:	e9c5 7100 	strd	r7, r1, [r5]
 8007866:	2600      	movs	r6, #0
 8007868:	4631      	mov	r1, r6
 800786a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800786e:	f1c2 0320 	rsb	r3, r2, #32
 8007872:	40d8      	lsrs	r0, r3
 8007874:	fa0c fc02 	lsl.w	ip, ip, r2
 8007878:	fa21 f303 	lsr.w	r3, r1, r3
 800787c:	4091      	lsls	r1, r2
 800787e:	4301      	orrs	r1, r0
 8007880:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8007884:	fa1f fe8c 	uxth.w	lr, ip
 8007888:	fbb3 f0f7 	udiv	r0, r3, r7
 800788c:	fb07 3610 	mls	r6, r7, r0, r3
 8007890:	0c0b      	lsrs	r3, r1, #16
 8007892:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8007896:	fb00 f60e 	mul.w	r6, r0, lr
 800789a:	429e      	cmp	r6, r3
 800789c:	fa04 f402 	lsl.w	r4, r4, r2
 80078a0:	d908      	bls.n	80078b4 <__udivmoddi4+0x260>
 80078a2:	eb1c 0303 	adds.w	r3, ip, r3
 80078a6:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80078aa:	d22f      	bcs.n	800790c <__udivmoddi4+0x2b8>
 80078ac:	429e      	cmp	r6, r3
 80078ae:	d92d      	bls.n	800790c <__udivmoddi4+0x2b8>
 80078b0:	3802      	subs	r0, #2
 80078b2:	4463      	add	r3, ip
 80078b4:	1b9b      	subs	r3, r3, r6
 80078b6:	b289      	uxth	r1, r1
 80078b8:	fbb3 f6f7 	udiv	r6, r3, r7
 80078bc:	fb07 3316 	mls	r3, r7, r6, r3
 80078c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80078c4:	fb06 f30e 	mul.w	r3, r6, lr
 80078c8:	428b      	cmp	r3, r1
 80078ca:	d908      	bls.n	80078de <__udivmoddi4+0x28a>
 80078cc:	eb1c 0101 	adds.w	r1, ip, r1
 80078d0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80078d4:	d216      	bcs.n	8007904 <__udivmoddi4+0x2b0>
 80078d6:	428b      	cmp	r3, r1
 80078d8:	d914      	bls.n	8007904 <__udivmoddi4+0x2b0>
 80078da:	3e02      	subs	r6, #2
 80078dc:	4461      	add	r1, ip
 80078de:	1ac9      	subs	r1, r1, r3
 80078e0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80078e4:	e738      	b.n	8007758 <__udivmoddi4+0x104>
 80078e6:	462e      	mov	r6, r5
 80078e8:	4628      	mov	r0, r5
 80078ea:	e705      	b.n	80076f8 <__udivmoddi4+0xa4>
 80078ec:	4606      	mov	r6, r0
 80078ee:	e6e3      	b.n	80076b8 <__udivmoddi4+0x64>
 80078f0:	4618      	mov	r0, r3
 80078f2:	e6f8      	b.n	80076e6 <__udivmoddi4+0x92>
 80078f4:	454b      	cmp	r3, r9
 80078f6:	d2a9      	bcs.n	800784c <__udivmoddi4+0x1f8>
 80078f8:	ebb9 0802 	subs.w	r8, r9, r2
 80078fc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8007900:	3801      	subs	r0, #1
 8007902:	e7a3      	b.n	800784c <__udivmoddi4+0x1f8>
 8007904:	4646      	mov	r6, r8
 8007906:	e7ea      	b.n	80078de <__udivmoddi4+0x28a>
 8007908:	4620      	mov	r0, r4
 800790a:	e794      	b.n	8007836 <__udivmoddi4+0x1e2>
 800790c:	4640      	mov	r0, r8
 800790e:	e7d1      	b.n	80078b4 <__udivmoddi4+0x260>
 8007910:	46d0      	mov	r8, sl
 8007912:	e77b      	b.n	800780c <__udivmoddi4+0x1b8>
 8007914:	3b02      	subs	r3, #2
 8007916:	4461      	add	r1, ip
 8007918:	e732      	b.n	8007780 <__udivmoddi4+0x12c>
 800791a:	4630      	mov	r0, r6
 800791c:	e709      	b.n	8007732 <__udivmoddi4+0xde>
 800791e:	4464      	add	r4, ip
 8007920:	3802      	subs	r0, #2
 8007922:	e742      	b.n	80077aa <__udivmoddi4+0x156>

08007924 <__aeabi_idiv0>:
 8007924:	4770      	bx	lr
 8007926:	bf00      	nop

08007928 <_getpid>:
 8007928:	4b02      	ldr	r3, [pc, #8]	; (8007934 <_getpid+0xc>)
 800792a:	2258      	movs	r2, #88	; 0x58
 800792c:	601a      	str	r2, [r3, #0]
 800792e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007932:	4770      	bx	lr
 8007934:	20000c74 	.word	0x20000c74

08007938 <_kill>:
 8007938:	4b02      	ldr	r3, [pc, #8]	; (8007944 <_kill+0xc>)
 800793a:	2258      	movs	r2, #88	; 0x58
 800793c:	601a      	str	r2, [r3, #0]
 800793e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007942:	4770      	bx	lr
 8007944:	20000c74 	.word	0x20000c74

08007948 <_exit>:
 8007948:	e7fe      	b.n	8007948 <_exit>
 800794a:	bf00      	nop

0800794c <CmdLED>:
    HAL_IncTick();
    my_Tick();
}

void CmdLED(int mode)
{
 800794c:	b507      	push	{r0, r1, r2, lr}
  uint32_t led,val;
  int rc;
  if(mode != CMD_INTERACTIVE) {
 800794e:	b930      	cbnz	r0, 800795e <CmdLED+0x12>
    return;
  }

  rc = fetch_uint32_arg(&led);
 8007950:	4668      	mov	r0, sp
 8007952:	f000 fa73 	bl	8007e3c <fetch_uint32_arg>
  if(rc) {
 8007956:	b128      	cbz	r0, 8007964 <CmdLED+0x18>
    printf("Missing LED index\n");
 8007958:	480f      	ldr	r0, [pc, #60]	; (8007998 <CmdLED+0x4c>)
    return;
  }
    
  rc = fetch_uint32_arg(&val);
  if(rc) {
    printf("Missing state value, 0 for Off, 1 for On\n");
 800795a:	f7f8 fdc3 	bl	80004e4 <puts>
    BSP_LED_On(LEDs[led]);
  } else {
    BSP_LED_Off(LEDs[led]);
  }

} 
 800795e:	b003      	add	sp, #12
 8007960:	f85d fb04 	ldr.w	pc, [sp], #4
  rc = fetch_uint32_arg(&val);
 8007964:	a801      	add	r0, sp, #4
 8007966:	f000 fa69 	bl	8007e3c <fetch_uint32_arg>
  if(rc) {
 800796a:	b108      	cbz	r0, 8007970 <CmdLED+0x24>
    printf("Missing state value, 0 for Off, 1 for On\n");
 800796c:	480b      	ldr	r0, [pc, #44]	; (800799c <CmdLED+0x50>)
 800796e:	e7f4      	b.n	800795a <CmdLED+0xe>
  if((led < 3) || (led > 10)) {
 8007970:	9900      	ldr	r1, [sp, #0]
 8007972:	1ecb      	subs	r3, r1, #3
 8007974:	2b07      	cmp	r3, #7
 8007976:	d903      	bls.n	8007980 <CmdLED+0x34>
    printf("Led index of %u is out of the range (3..10)\n",
 8007978:	4809      	ldr	r0, [pc, #36]	; (80079a0 <CmdLED+0x54>)
 800797a:	f7f8 fd5f 	bl	800043c <printf>
    return;
 800797e:	e7ee      	b.n	800795e <CmdLED+0x12>
    BSP_LED_On(LEDs[led]);
 8007980:	4a08      	ldr	r2, [pc, #32]	; (80079a4 <CmdLED+0x58>)
  led -= 3;
 8007982:	9300      	str	r3, [sp, #0]
    BSP_LED_On(LEDs[led]);
 8007984:	5cd0      	ldrb	r0, [r2, r3]
  if(val) {
 8007986:	9b01      	ldr	r3, [sp, #4]
 8007988:	b113      	cbz	r3, 8007990 <CmdLED+0x44>
    BSP_LED_On(LEDs[led]);
 800798a:	f004 f82d 	bl	800b9e8 <BSP_LED_On>
 800798e:	e7e6      	b.n	800795e <CmdLED+0x12>
    BSP_LED_Off(LEDs[led]);
 8007990:	f004 f838 	bl	800ba04 <BSP_LED_Off>
 8007994:	e7e3      	b.n	800795e <CmdLED+0x12>
 8007996:	bf00      	nop
 8007998:	0800ce58 	.word	0x0800ce58
 800799c:	0800ce6a 	.word	0x0800ce6a
 80079a0:	0800ce93 	.word	0x0800ce93
 80079a4:	0800d02a 	.word	0x0800d02a

080079a8 <CmdAccel>:

ADD_CMD("led",CmdLED,"<index> <state> Turn off/on LED")

void CmdAccel(int mode)
{
 80079a8:	b507      	push	{r0, r1, r2, lr}
  int16_t xyz[3];

  if(mode != CMD_INTERACTIVE) {
 80079aa:	b958      	cbnz	r0, 80079c4 <CmdAccel+0x1c>
    return;
  }

  BSP_ACCELERO_GetXYZ(xyz);
 80079ac:	4668      	mov	r0, sp
 80079ae:	f004 f9b1 	bl	800bd14 <BSP_ACCELERO_GetXYZ>

  printf("Accelerometer returns:\n"
 80079b2:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80079b6:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
 80079ba:	f9bd 1000 	ldrsh.w	r1, [sp]
 80079be:	4803      	ldr	r0, [pc, #12]	; (80079cc <CmdAccel+0x24>)
 80079c0:	f7f8 fd3c 	bl	800043c <printf>
	 "   Y: %d\n"
	 "   Z: %d\n",
	 xyz[0],xyz[1],xyz[2]);


}
 80079c4:	b003      	add	sp, #12
 80079c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80079ca:	bf00      	nop
 80079cc:	0800cec0 	.word	0x0800cec0

080079d0 <CmdGyro>:

ADD_CMD("accel", CmdAccel,"                Read Accelerometer");

void CmdGyro(int mode)
{
 80079d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  float xyz[3];

  if(mode != CMD_INTERACTIVE) {
 80079d2:	b9e8      	cbnz	r0, 8007a10 <CmdGyro+0x40>
    return;
  }

  BSP_GYRO_GetXYZ(xyz);
 80079d4:	a801      	add	r0, sp, #4
 80079d6:	f004 f9d9 	bl	800bd8c <BSP_GYRO_GetXYZ>

  printf("Gyroscope returns:\n"
 80079da:	eddd 7a03 	vldr	s15, [sp, #12]
 80079de:	480e      	ldr	r0, [pc, #56]	; (8007a18 <CmdGyro+0x48>)
 80079e0:	eeb0 7a67 	vmov.f32	s14, s15
 80079e4:	eebe 7acc 	vcvt.s32.f32	s14, s14, #8
 80079e8:	eddd 7a02 	vldr	s15, [sp, #8]
 80079ec:	ee17 3a10 	vmov	r3, s14
 80079f0:	eeb0 7a67 	vmov.f32	s14, s15
 80079f4:	eebe 7acc 	vcvt.s32.f32	s14, s14, #8
 80079f8:	eddd 7a01 	vldr	s15, [sp, #4]
 80079fc:	ee17 2a10 	vmov	r2, s14
 8007a00:	eeb0 7a67 	vmov.f32	s14, s15
 8007a04:	eebe 7acc 	vcvt.s32.f32	s14, s14, #8
 8007a08:	ee17 1a10 	vmov	r1, s14
 8007a0c:	f7f8 fd16 	bl	800043c <printf>
	 "   Y: %d\n"
	 "   Z: %d\n",
	 (int)(xyz[0]*256),
	 (int)(xyz[1]*256),
	 (int)(xyz[2]*256));
}
 8007a10:	b005      	add	sp, #20
 8007a12:	f85d fb04 	ldr.w	pc, [sp], #4
 8007a16:	bf00      	nop
 8007a18:	0800cef3 	.word	0x0800cef3

08007a1c <CmdButton>:

ADD_CMD("gyro", CmdGyro,"                Read Gyroscope");

void CmdButton(int mode)
{
 8007a1c:	b508      	push	{r3, lr}
  uint32_t button;

  if(mode != CMD_INTERACTIVE) {
 8007a1e:	b958      	cbnz	r0, 8007a38 <CmdButton+0x1c>
    return;
  }

  button = BSP_PB_GetState(BUTTON_USER);
 8007a20:	f004 f844 	bl	800baac <BSP_PB_GetState>
  
  printf("Button is currently: %s\n",
 8007a24:	4a05      	ldr	r2, [pc, #20]	; (8007a3c <CmdButton+0x20>)
 8007a26:	4906      	ldr	r1, [pc, #24]	; (8007a40 <CmdButton+0x24>)
	 button ? "Pressed" : "Released");

  return;
}
 8007a28:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  printf("Button is currently: %s\n",
 8007a2c:	2800      	cmp	r0, #0
 8007a2e:	bf18      	it	ne
 8007a30:	4611      	movne	r1, r2
 8007a32:	4804      	ldr	r0, [pc, #16]	; (8007a44 <CmdButton+0x28>)
 8007a34:	f7f8 bd02 	b.w	800043c <printf>
}
 8007a38:	bd08      	pop	{r3, pc}
 8007a3a:	bf00      	nop
 8007a3c:	0800cf22 	.word	0x0800cf22
 8007a40:	0800cf2a 	.word	0x0800cf2a
 8007a44:	0800cf33 	.word	0x0800cf33

08007a48 <Error_Handler>:
{
 8007a48:	b508      	push	{r3, lr}
  BSP_LED_On(LED6);
 8007a4a:	2003      	movs	r0, #3
 8007a4c:	f003 ffcc 	bl	800b9e8 <BSP_LED_On>
  while(1)
 8007a50:	e7fe      	b.n	8007a50 <Error_Handler+0x8>
	...

08007a54 <main>:
{
 8007a54:	b530      	push	{r4, r5, lr}
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007a56:	2301      	movs	r3, #1
{
 8007a58:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007a5a:	e9cd 3306 	strd	r3, r3, [sp, #24]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007a62:	2402      	movs	r4, #2
 8007a64:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007a68:	e9cd 430d 	strd	r4, r3, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct)!= HAL_OK)
 8007a6c:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8007a6e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8007a72:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct)!= HAL_OK)
 8007a74:	f000 ff32 	bl	80088dc <HAL_RCC_OscConfig>
 8007a78:	b108      	cbz	r0, 8007a7e <main+0x2a>
    Error_Handler();
 8007a7a:	f7ff ffe5 	bl	8007a48 <Error_Handler>
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8007a7e:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007a80:	e9cd 3401 	strd	r3, r4, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;  
 8007a84:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007a88:	e9cd 3004 	strd	r3, r0, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007a8c:	9003      	str	r0, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2)!= HAL_OK)
 8007a8e:	4621      	mov	r1, r4
 8007a90:	a801      	add	r0, sp, #4
 8007a92:	f001 fa01 	bl	8008e98 <HAL_RCC_ClockConfig>
 8007a96:	4604      	mov	r4, r0
 8007a98:	2800      	cmp	r0, #0
 8007a9a:	d1ee      	bne.n	8007a7a <main+0x26>
  HAL_Init();
 8007a9c:	f001 fbbc 	bl	8009218 <HAL_Init>
  TerminalInit();  /* Initialize UART and USB */
 8007aa0:	f000 fafa 	bl	8008098 <TerminalInit>
  for(i=0; i<numLEDs; i++) {
 8007aa4:	4d0f      	ldr	r5, [pc, #60]	; (8007ae4 <main+0x90>)
    BSP_LED_Init(LEDs[i]);
 8007aa6:	f815 0b01 	ldrb.w	r0, [r5], #1
  for(i=0; i<numLEDs; i++) {
 8007aaa:	3401      	adds	r4, #1
    BSP_LED_Init(LEDs[i]);
 8007aac:	f003 ff66 	bl	800b97c <BSP_LED_Init>
  for(i=0; i<numLEDs; i++) {
 8007ab0:	2c08      	cmp	r4, #8
 8007ab2:	d1f8      	bne.n	8007aa6 <main+0x52>
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);
 8007ab4:	2100      	movs	r1, #0
 8007ab6:	4608      	mov	r0, r1
 8007ab8:	f003 ffbe 	bl	800ba38 <BSP_PB_Init>
  accelRc = BSP_ACCELERO_Init();
 8007abc:	f004 f90a 	bl	800bcd4 <BSP_ACCELERO_Init>
  if(accelRc != ACCELERO_OK) {
 8007ac0:	b118      	cbz	r0, 8007aca <main+0x76>
    printf("Failed to initialize acceleromter\n");
 8007ac2:	4809      	ldr	r0, [pc, #36]	; (8007ae8 <main+0x94>)
 8007ac4:	f7f8 fd0e 	bl	80004e4 <puts>
 8007ac8:	e7d7      	b.n	8007a7a <main+0x26>
  gyroRc = BSP_GYRO_Init();
 8007aca:	f004 f92b 	bl	800bd24 <BSP_GYRO_Init>
  if(gyroRc != GYRO_OK) {
 8007ace:	b108      	cbz	r0, 8007ad4 <main+0x80>
    printf("Failed to initialize Gyroscope\n");
 8007ad0:	4806      	ldr	r0, [pc, #24]	; (8007aec <main+0x98>)
 8007ad2:	e7f7      	b.n	8007ac4 <main+0x70>
  my_Init();
 8007ad4:	f7f8 fbd0 	bl	8000278 <my_Init>
    TaskInput();
 8007ad8:	f000 f912 	bl	8007d00 <TaskInput>
    my_Loop();
 8007adc:	f7f8 fbca 	bl	8000274 <my_Loop>
  while(1) {
 8007ae0:	e7fa      	b.n	8007ad8 <main+0x84>
 8007ae2:	bf00      	nop
 8007ae4:	0800d02a 	.word	0x0800d02a
 8007ae8:	0800cf4c 	.word	0x0800cf4c
 8007aec:	0800cf6e 	.word	0x0800cf6e

08007af0 <SysTick_Handler>:
{
 8007af0:	b508      	push	{r3, lr}
    HAL_IncTick();
 8007af2:	f001 fba3 	bl	800923c <HAL_IncTick>
}
 8007af6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    my_Tick();
 8007afa:	f7f8 bbb1 	b.w	8000260 <my_Tick>
	...

08007b00 <CmdTest>:
int mytest( int x );

void CmdTest(int action)
{

  if(action==CMD_SHORT_HELP) return;
 8007b00:	2801      	cmp	r0, #1
{
 8007b02:	b508      	push	{r3, lr}
  if(action==CMD_SHORT_HELP) return;
 8007b04:	d00f      	beq.n	8007b26 <CmdTest+0x26>
  if(action==CMD_LONG_HELP) {
 8007b06:	2802      	cmp	r0, #2
 8007b08:	d104      	bne.n	8007b14 <CmdTest+0x14>
	   );

    return;
  }
  printf("ret val = %d\n", mytest( 77  ) );
}
 8007b0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    printf("testasm\n\n"
 8007b0e:	4806      	ldr	r0, [pc, #24]	; (8007b28 <CmdTest+0x28>)
 8007b10:	f7f8 bce8 	b.w	80004e4 <puts>
  printf("ret val = %d\n", mytest( 77  ) );
 8007b14:	204d      	movs	r0, #77	; 0x4d
 8007b16:	f7f8 fb97 	bl	8000248 <mytest>
}
 8007b1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  printf("ret val = %d\n", mytest( 77  ) );
 8007b1e:	4601      	mov	r1, r0
 8007b20:	4802      	ldr	r0, [pc, #8]	; (8007b2c <CmdTest+0x2c>)
 8007b22:	f7f8 bc8b 	b.w	800043c <printf>
}
 8007b26:	bd08      	pop	{r3, pc}
 8007b28:	0800d032 	.word	0x0800d032
 8007b2c:	0800d06b 	.word	0x0800d06b

08007b30 <AddTest>:

int add_test(int x, int y);

void AddTest(int action)
{
    if(action==CMD_SHORT_HELP) return;
 8007b30:	2801      	cmp	r0, #1
{
 8007b32:	b507      	push	{r0, r1, r2, lr}
    if(action==CMD_SHORT_HELP) return;
 8007b34:	d01b      	beq.n	8007b6e <AddTest+0x3e>
    if(action==CMD_LONG_HELP) {
 8007b36:	2802      	cmp	r0, #2
 8007b38:	d105      	bne.n	8007b46 <AddTest+0x16>
        printf("Addition Test\n\n"
 8007b3a:	480e      	ldr	r0, [pc, #56]	; (8007b74 <AddTest+0x44>)
    // When we call our function, pass the delay value.
    // printf(“<<< here is where we call add_test – can you add a third parameter? >>>”);
    // get inputs from the user

    printf("add_test returned: %d\n", add_test(x, delay) );
}
 8007b3c:	b003      	add	sp, #12
 8007b3e:	f85d eb04 	ldr.w	lr, [sp], #4
        printf("Addition Test\n\n"
 8007b42:	f7f8 bccf 	b.w	80004e4 <puts>
    uint32_t x = 0;
 8007b46:	2300      	movs	r3, #0
    fetch_uint32_arg(&x);
 8007b48:	4668      	mov	r0, sp
    uint32_t x = 0;
 8007b4a:	9300      	str	r3, [sp, #0]
    fetch_uint32_arg(&x);
 8007b4c:	f000 f976 	bl	8007e3c <fetch_uint32_arg>
    fetch_status = fetch_uint32_arg(&delay);
 8007b50:	a801      	add	r0, sp, #4
 8007b52:	f000 f973 	bl	8007e3c <fetch_uint32_arg>
    if(fetch_status) {
 8007b56:	b110      	cbz	r0, 8007b5e <AddTest+0x2e>
    delay = 0xFFFFFF;
 8007b58:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8007b5c:	9301      	str	r3, [sp, #4]
    printf("add_test returned: %d\n", add_test(x, delay) );
 8007b5e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007b62:	f7f8 fb8d 	bl	8000280 <add_test>
 8007b66:	4601      	mov	r1, r0
 8007b68:	4803      	ldr	r0, [pc, #12]	; (8007b78 <AddTest+0x48>)
 8007b6a:	f7f8 fc67 	bl	800043c <printf>
}
 8007b6e:	b003      	add	sp, #12
 8007b70:	f85d fb04 	ldr.w	pc, [sp], #4
 8007b74:	0800d08f 	.word	0x0800d08f
 8007b78:	0800d0c7 	.word	0x0800d0c7

08007b7c <_pt_A2>:
* Parameters: an integer - int action
* Returns: void
*/
void _pt_A2(int action)
{
    if(action==CMD_SHORT_HELP) return;
 8007b7c:	2801      	cmp	r0, #1
{
 8007b7e:	b507      	push	{r0, r1, r2, lr}
    if(action==CMD_SHORT_HELP) return;
 8007b80:	d01c      	beq.n	8007bbc <_pt_A2+0x40>
    if(action==CMD_LONG_HELP) {
 8007b82:	2802      	cmp	r0, #2
 8007b84:	d105      	bne.n	8007b92 <_pt_A2+0x16>
        printf("Addition Test\n\n"
 8007b86:	480f      	ldr	r0, [pc, #60]	; (8007bc4 <_pt_A2+0x48>)
    // Use a default delay value
    delay = 0xFFFFFF;
    }

    printf("pt_led_demo_a2 returned: %d\n", pt_led_demo_a2(count, delay) );
}
 8007b88:	b003      	add	sp, #12
 8007b8a:	f85d eb04 	ldr.w	lr, [sp], #4
        printf("Addition Test\n\n"
 8007b8e:	f7f8 bca9 	b.w	80004e4 <puts>
    fetch_status1 = fetch_uint32_arg(&count);
 8007b92:	4668      	mov	r0, sp
 8007b94:	f000 f952 	bl	8007e3c <fetch_uint32_arg>
    if(fetch_status1) {
 8007b98:	b108      	cbz	r0, 8007b9e <_pt_A2+0x22>
    count = 1;
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	9300      	str	r3, [sp, #0]
    fetch_status = fetch_uint32_arg(&delay);
 8007b9e:	a801      	add	r0, sp, #4
 8007ba0:	f000 f94c 	bl	8007e3c <fetch_uint32_arg>
    if(fetch_status) {
 8007ba4:	b110      	cbz	r0, 8007bac <_pt_A2+0x30>
    delay = 0xFFFFFF;
 8007ba6:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8007baa:	9301      	str	r3, [sp, #4]
    printf("pt_led_demo_a2 returned: %d\n", pt_led_demo_a2(count, delay) );
 8007bac:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007bb0:	f7f8 fb80 	bl	80002b4 <pt_led_demo_a2>
 8007bb4:	4601      	mov	r1, r0
 8007bb6:	4804      	ldr	r0, [pc, #16]	; (8007bc8 <_pt_A2+0x4c>)
 8007bb8:	f7f8 fc40 	bl	800043c <printf>
}
 8007bbc:	b003      	add	sp, #12
 8007bbe:	f85d fb04 	ldr.w	pc, [sp], #4
 8007bc2:	bf00      	nop
 8007bc4:	0800d08f 	.word	0x0800d08f
 8007bc8:	0800d0de 	.word	0x0800d0de

08007bcc <CmdW>:
	 (unsigned int)(*((uint32_t *)addr)));
}


void CmdW(int mode)
{
 8007bcc:	b507      	push	{r0, r1, r2, lr}
  uint32_t addr,data;

  if(mode != CMD_INTERACTIVE) return;
 8007bce:	b940      	cbnz	r0, 8007be2 <CmdW+0x16>

  fetch_uint32_arg(&addr);
 8007bd0:	4668      	mov	r0, sp
 8007bd2:	f000 f933 	bl	8007e3c <fetch_uint32_arg>
  fetch_uint32_arg(&data);
 8007bd6:	a801      	add	r0, sp, #4
 8007bd8:	f000 f930 	bl	8007e3c <fetch_uint32_arg>

  *((uint32_t *)addr) = data;
 8007bdc:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007be0:	601a      	str	r2, [r3, #0]
}
 8007be2:	b003      	add	sp, #12
 8007be4:	f85d fb04 	ldr.w	pc, [sp], #4

08007be8 <CmdR>:
{
 8007be8:	b507      	push	{r0, r1, r2, lr}
  if(mode != CMD_INTERACTIVE) return;
 8007bea:	b938      	cbnz	r0, 8007bfc <CmdR+0x14>
  fetch_uint32_arg(&addr);
 8007bec:	a801      	add	r0, sp, #4
 8007bee:	f000 f925 	bl	8007e3c <fetch_uint32_arg>
  printf("0x%08X: 0x%08X\n",(unsigned int)addr, 
 8007bf2:	9901      	ldr	r1, [sp, #4]
 8007bf4:	4803      	ldr	r0, [pc, #12]	; (8007c04 <CmdR+0x1c>)
 8007bf6:	680a      	ldr	r2, [r1, #0]
 8007bf8:	f7f8 fc20 	bl	800043c <printf>
}
 8007bfc:	b003      	add	sp, #12
 8007bfe:	f85d fb04 	ldr.w	pc, [sp], #4
 8007c02:	bf00      	nop
 8007c04:	0800d16b 	.word	0x0800d16b

08007c08 <parse>:

#define SEPS " \t\n\v\f\r"

/* Parse the buffer and call commands */ 
int parse(char *buf, int len, const parse_table *table)
{
 8007c08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c0a:	4615      	mov	r5, r2
  char *p;
  int i,arg;
  const parse_table *t;
  
  /* Check for silly things */
  if(buf == NULL) {
 8007c0c:	b930      	cbnz	r0, 8007c1c <parse+0x14>
    printf("NULL buf pointer passed to %s()\n",__FUNCTION__);
 8007c0e:	4931      	ldr	r1, [pc, #196]	; (8007cd4 <parse+0xcc>)
 8007c10:	4831      	ldr	r0, [pc, #196]	; (8007cd8 <parse+0xd0>)
      t->func(arg);
      return 0;
    }
  }

  printf("Command `%s' not found. Type `help' for online help\n",p);
 8007c12:	f7f8 fc13 	bl	800043c <printf>
    return -1;
 8007c16:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007c1a:	e032      	b.n	8007c82 <parse+0x7a>
  if(len==0) {
 8007c1c:	b911      	cbnz	r1, 8007c24 <parse+0x1c>
    printf("len == 0 in %s\n",__FUNCTION__);
 8007c1e:	492d      	ldr	r1, [pc, #180]	; (8007cd4 <parse+0xcc>)
 8007c20:	482e      	ldr	r0, [pc, #184]	; (8007cdc <parse+0xd4>)
 8007c22:	e7f6      	b.n	8007c12 <parse+0xa>
  if(table == NULL) {
 8007c24:	b182      	cbz	r2, 8007c48 <parse+0x40>
 8007c26:	1e4c      	subs	r4, r1, #1
  while((i--) && (*buf != 0) && (isspace((uint32_t)*buf))) buf++;
 8007c28:	492d      	ldr	r1, [pc, #180]	; (8007ce0 <parse+0xd8>)
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	1c66      	adds	r6, r4, #1
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c34:	d00d      	beq.n	8007c52 <parse+0x4a>
 8007c36:	2a00      	cmp	r2, #0
 8007c38:	d0ed      	beq.n	8007c16 <parse+0xe>
 8007c3a:	5c52      	ldrb	r2, [r2, r1]
 8007c3c:	0712      	lsls	r2, r2, #28
 8007c3e:	f104 36ff 	add.w	r6, r4, #4294967295	; 0xffffffff
 8007c42:	d404      	bmi.n	8007c4e <parse+0x46>
  if((i==0) || (*buf==0)) {
 8007c44:	b934      	cbnz	r4, 8007c54 <parse+0x4c>
 8007c46:	e7e6      	b.n	8007c16 <parse+0xe>
    printf("NULL table pointer passed to %s()\n",__FUNCTION__);
 8007c48:	4922      	ldr	r1, [pc, #136]	; (8007cd4 <parse+0xcc>)
 8007c4a:	4826      	ldr	r0, [pc, #152]	; (8007ce4 <parse+0xdc>)
 8007c4c:	e7e1      	b.n	8007c12 <parse+0xa>
 8007c4e:	4634      	mov	r4, r6
 8007c50:	e7ec      	b.n	8007c2c <parse+0x24>
  if((i==0) || (*buf==0)) {
 8007c52:	b1b2      	cbz	r2, 8007c82 <parse+0x7a>
  p = strtok(buf,SEPS);
 8007c54:	4924      	ldr	r1, [pc, #144]	; (8007ce8 <parse+0xe0>)
 8007c56:	f7f8 fe01 	bl	800085c <strtok>
  if(p==NULL) {
 8007c5a:	4606      	mov	r6, r0
 8007c5c:	b910      	cbnz	r0, 8007c64 <parse+0x5c>
    printf("Unable to find a command in the buffer in %s()\n",__FUNCTION__);
 8007c5e:	491d      	ldr	r1, [pc, #116]	; (8007cd4 <parse+0xcc>)
 8007c60:	4822      	ldr	r0, [pc, #136]	; (8007cec <parse+0xe4>)
 8007c62:	e7d6      	b.n	8007c12 <parse+0xa>
  if(strcasecmp(p,"help") == 0) {
 8007c64:	4922      	ldr	r1, [pc, #136]	; (8007cf0 <parse+0xe8>)
 8007c66:	f7f8 fcff 	bl	8000668 <strcasecmp>
 8007c6a:	4604      	mov	r4, r0
 8007c6c:	b9c8      	cbnz	r0, 8007ca2 <parse+0x9a>
    p = strtok(NULL,SEPS);
 8007c6e:	491e      	ldr	r1, [pc, #120]	; (8007ce8 <parse+0xe0>)
 8007c70:	f7f8 fdf4 	bl	800085c <strtok>
    if(p == NULL) {
 8007c74:	4606      	mov	r6, r0
 8007c76:	b9d0      	cbnz	r0, 8007cae <parse+0xa6>
	  printf("%12s -- %s\n",t->cmdname,t->help);
 8007c78:	4e1e      	ldr	r6, [pc, #120]	; (8007cf4 <parse+0xec>)
 8007c7a:	350c      	adds	r5, #12
      for(t=table; t->cmdname!=NULL; t++) {
 8007c7c:	f855 1c0c 	ldr.w	r1, [r5, #-12]
 8007c80:	b911      	cbnz	r1, 8007c88 <parse+0x80>
  return -1;
}
 8007c82:	4620      	mov	r0, r4
 8007c84:	b003      	add	sp, #12
 8007c86:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(t->help != NULL) {
 8007c88:	f855 2c04 	ldr.w	r2, [r5, #-4]
 8007c8c:	b122      	cbz	r2, 8007c98 <parse+0x90>
	  printf("%12s -- %s\n",t->cmdname,t->help);
 8007c8e:	4630      	mov	r0, r6
 8007c90:	f7f8 fbd4 	bl	800043c <printf>
      for(t=table; t->cmdname!=NULL; t++) {
 8007c94:	350c      	adds	r5, #12
 8007c96:	e7f1      	b.n	8007c7c <parse+0x74>
	  t->func(CMD_SHORT_HELP);  /* Call the function for short help */
 8007c98:	f855 3c08 	ldr.w	r3, [r5, #-8]
 8007c9c:	2001      	movs	r0, #1
 8007c9e:	4798      	blx	r3
 8007ca0:	e7f8      	b.n	8007c94 <parse+0x8c>
  arg = CMD_INTERACTIVE;  /* Default to calling action part of function */
 8007ca2:	2700      	movs	r7, #0
  for(t=table; t->cmdname!=NULL; t++) {
 8007ca4:	6829      	ldr	r1, [r5, #0]
 8007ca6:	b921      	cbnz	r1, 8007cb2 <parse+0xaa>
  printf("Command `%s' not found. Type `help' for online help\n",p);
 8007ca8:	4813      	ldr	r0, [pc, #76]	; (8007cf8 <parse+0xf0>)
 8007caa:	4631      	mov	r1, r6
 8007cac:	e7b1      	b.n	8007c12 <parse+0xa>
      arg = CMD_LONG_HELP;
 8007cae:	2702      	movs	r7, #2
  for(t=table; t->cmdname!=NULL; t++) {
 8007cb0:	e7f8      	b.n	8007ca4 <parse+0x9c>
    if(strcasecmp(p,t->cmdname) == 0) {
 8007cb2:	4630      	mov	r0, r6
 8007cb4:	9101      	str	r1, [sp, #4]
 8007cb6:	f7f8 fcd7 	bl	8000668 <strcasecmp>
 8007cba:	9901      	ldr	r1, [sp, #4]
 8007cbc:	4604      	mov	r4, r0
 8007cbe:	b938      	cbnz	r0, 8007cd0 <parse+0xc8>
      if(arg == CMD_LONG_HELP) {	
 8007cc0:	b117      	cbz	r7, 8007cc8 <parse+0xc0>
	printf("%s:\n",t->cmdname);
 8007cc2:	480e      	ldr	r0, [pc, #56]	; (8007cfc <parse+0xf4>)
 8007cc4:	f7f8 fbba 	bl	800043c <printf>
      t->func(arg);
 8007cc8:	686b      	ldr	r3, [r5, #4]
 8007cca:	4638      	mov	r0, r7
 8007ccc:	4798      	blx	r3
      return 0;
 8007cce:	e7d8      	b.n	8007c82 <parse+0x7a>
  for(t=table; t->cmdname!=NULL; t++) {
 8007cd0:	350c      	adds	r5, #12
 8007cd2:	e7e7      	b.n	8007ca4 <parse+0x9c>
 8007cd4:	0800d297 	.word	0x0800d297
 8007cd8:	0800d1b6 	.word	0x0800d1b6
 8007cdc:	0800d1d7 	.word	0x0800d1d7
 8007ce0:	0800cbe5 	.word	0x0800cbe5
 8007ce4:	0800d1e7 	.word	0x0800d1e7
 8007ce8:	0800d20a 	.word	0x0800d20a
 8007cec:	0800d211 	.word	0x0800d211
 8007cf0:	0800d241 	.word	0x0800d241
 8007cf4:	0800d246 	.word	0x0800d246
 8007cf8:	0800d257 	.word	0x0800d257
 8007cfc:	0800d252 	.word	0x0800d252

08007d00 <TaskInput>:
{
 8007d00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(printPrompt) {
 8007d02:	4d43      	ldr	r5, [pc, #268]	; (8007e10 <TaskInput+0x110>)
 8007d04:	682b      	ldr	r3, [r5, #0]
 8007d06:	b123      	cbz	r3, 8007d12 <TaskInput+0x12>
    printf("ARMON>");
 8007d08:	4842      	ldr	r0, [pc, #264]	; (8007e14 <TaskInput+0x114>)
 8007d0a:	f7f8 fb97 	bl	800043c <printf>
    printPrompt = 0;
 8007d0e:	2300      	movs	r3, #0
 8007d10:	602b      	str	r3, [r5, #0]
  rc = TerminalReadAnyNonBlock(&c);
 8007d12:	f10d 0007 	add.w	r0, sp, #7
 8007d16:	f000 fa30 	bl	800817a <TerminalReadAnyNonBlock>
  if(rc) {
 8007d1a:	b990      	cbnz	r0, 8007d42 <TaskInput+0x42>
  if(((c == 010) || (c == 0x7f)) && count) {
 8007d1c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007d20:	2b08      	cmp	r3, #8
 8007d22:	d001      	beq.n	8007d28 <TaskInput+0x28>
 8007d24:	2b7f      	cmp	r3, #127	; 0x7f
 8007d26:	d10e      	bne.n	8007d46 <TaskInput+0x46>
 8007d28:	4c3b      	ldr	r4, [pc, #236]	; (8007e18 <TaskInput+0x118>)
 8007d2a:	6822      	ldr	r2, [r4, #0]
 8007d2c:	b15a      	cbz	r2, 8007d46 <TaskInput+0x46>
    printf("\010 \010"); /* Obliterate character */
 8007d2e:	483b      	ldr	r0, [pc, #236]	; (8007e1c <TaskInput+0x11c>)
 8007d30:	f7f8 fb84 	bl	800043c <printf>
    buf--;     /* Then remove it from the buffer */
 8007d34:	4a3a      	ldr	r2, [pc, #232]	; (8007e20 <TaskInput+0x120>)
 8007d36:	6813      	ldr	r3, [r2, #0]
 8007d38:	3b01      	subs	r3, #1
 8007d3a:	6013      	str	r3, [r2, #0]
    count--;   /* Then keep track of how many are left */
 8007d3c:	6823      	ldr	r3, [r4, #0]
 8007d3e:	3b01      	subs	r3, #1
 8007d40:	6023      	str	r3, [r4, #0]
}
 8007d42:	b003      	add	sp, #12
 8007d44:	bdf0      	pop	{r4, r5, r6, r7, pc}
  } else if(c == '!') { /* '!' repeats the last command */
 8007d46:	2b21      	cmp	r3, #33	; 0x21
 8007d48:	d139      	bne.n	8007dbe <TaskInput+0xbe>
    if(saved) {  /* But only if we have something saved */
 8007d4a:	4b36      	ldr	r3, [pc, #216]	; (8007e24 <TaskInput+0x124>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d0f7      	beq.n	8007d42 <TaskInput+0x42>
      strcpy(input,input_b);  /* Restore the command */
 8007d52:	4c35      	ldr	r4, [pc, #212]	; (8007e28 <TaskInput+0x128>)
 8007d54:	4935      	ldr	r1, [pc, #212]	; (8007e2c <TaskInput+0x12c>)
 8007d56:	4620      	mov	r0, r4
 8007d58:	f7f8 fcac 	bl	80006b4 <strcpy>
      printf("%s",input);
 8007d5c:	4621      	mov	r1, r4
 8007d5e:	4834      	ldr	r0, [pc, #208]	; (8007e30 <TaskInput+0x130>)
 8007d60:	f7f8 fb6c 	bl	800043c <printf>
      count = strlen(input);
 8007d64:	4620      	mov	r0, r4
 8007d66:	f7f8 fd0b 	bl	8000780 <strlen>
 8007d6a:	4b2b      	ldr	r3, [pc, #172]	; (8007e18 <TaskInput+0x118>)
 8007d6c:	6018      	str	r0, [r3, #0]
      buf = input+count;
 8007d6e:	4b2c      	ldr	r3, [pc, #176]	; (8007e20 <TaskInput+0x120>)
 8007d70:	4404      	add	r4, r0
 8007d72:	601c      	str	r4, [r3, #0]
    for(i=count; i<BUFFER_LEN; i++) *buf++ = '\0';
 8007d74:	4e28      	ldr	r6, [pc, #160]	; (8007e18 <TaskInput+0x118>)
 8007d76:	4c2a      	ldr	r4, [pc, #168]	; (8007e20 <TaskInput+0x120>)
    printf("\n");
 8007d78:	200a      	movs	r0, #10
 8007d7a:	f7f8 fb77 	bl	800046c <putchar>
    for(i=count; i<BUFFER_LEN; i++) *buf++ = '\0';
 8007d7e:	6823      	ldr	r3, [r4, #0]
 8007d80:	6830      	ldr	r0, [r6, #0]
 8007d82:	2200      	movs	r2, #0
 8007d84:	4619      	mov	r1, r3
 8007d86:	eba0 0c03 	sub.w	ip, r0, r3
 8007d8a:	4696      	mov	lr, r2
 8007d8c:	eb01 070c 	add.w	r7, r1, ip
 8007d90:	2f4f      	cmp	r7, #79	; 0x4f
 8007d92:	d938      	bls.n	8007e06 <TaskInput+0x106>
 8007d94:	2850      	cmp	r0, #80	; 0x50
 8007d96:	f1c0 0150 	rsb	r1, r0, #80	; 0x50
 8007d9a:	bf88      	it	hi
 8007d9c:	2100      	movhi	r1, #0
 8007d9e:	440b      	add	r3, r1
 8007da0:	b102      	cbz	r2, 8007da4 <TaskInput+0xa4>
 8007da2:	6023      	str	r3, [r4, #0]
    count = 0;
 8007da4:	2300      	movs	r3, #0
 8007da6:	6033      	str	r3, [r6, #0]
    parse(input, sizeof(input), Commands);
 8007da8:	4b22      	ldr	r3, [pc, #136]	; (8007e34 <TaskInput+0x134>)
 8007daa:	4e1f      	ldr	r6, [pc, #124]	; (8007e28 <TaskInput+0x128>)
 8007dac:	681a      	ldr	r2, [r3, #0]
 8007dae:	2150      	movs	r1, #80	; 0x50
 8007db0:	4630      	mov	r0, r6
 8007db2:	f7ff ff29 	bl	8007c08 <parse>
    printPrompt = 1;
 8007db6:	2301      	movs	r3, #1
    buf = input;
 8007db8:	6026      	str	r6, [r4, #0]
    printPrompt = 1;
 8007dba:	602b      	str	r3, [r5, #0]
 8007dbc:	e7c1      	b.n	8007d42 <TaskInput+0x42>
  } else if(isprint((unsigned int)c)) {
 8007dbe:	4a1e      	ldr	r2, [pc, #120]	; (8007e38 <TaskInput+0x138>)
 8007dc0:	5c9a      	ldrb	r2, [r3, r2]
 8007dc2:	f012 0297 	ands.w	r2, r2, #151	; 0x97
 8007dc6:	d011      	beq.n	8007dec <TaskInput+0xec>
    if(count >= sizeof(input)) {
 8007dc8:	4913      	ldr	r1, [pc, #76]	; (8007e18 <TaskInput+0x118>)
 8007dca:	680a      	ldr	r2, [r1, #0]
 8007dcc:	2a4f      	cmp	r2, #79	; 0x4f
 8007dce:	d903      	bls.n	8007dd8 <TaskInput+0xd8>
      printf("\x07"); /* Beep */
 8007dd0:	2007      	movs	r0, #7
      printf("%c",c);
 8007dd2:	f7f8 fb4b 	bl	800046c <putchar>
 8007dd6:	e7b4      	b.n	8007d42 <TaskInput+0x42>
      *buf++ = c;
 8007dd8:	4c11      	ldr	r4, [pc, #68]	; (8007e20 <TaskInput+0x120>)
 8007dda:	6820      	ldr	r0, [r4, #0]
      count++;
 8007ddc:	3201      	adds	r2, #1
      *buf++ = c;
 8007dde:	1c45      	adds	r5, r0, #1
 8007de0:	7003      	strb	r3, [r0, #0]
      printf("%c",c);
 8007de2:	f89d 0007 	ldrb.w	r0, [sp, #7]
      *buf++ = c;
 8007de6:	6025      	str	r5, [r4, #0]
      count++;
 8007de8:	600a      	str	r2, [r1, #0]
      printf("%c",c);
 8007dea:	e7f2      	b.n	8007dd2 <TaskInput+0xd2>
  } else if(c == '\r') {
 8007dec:	2b0d      	cmp	r3, #13
 8007dee:	d1a8      	bne.n	8007d42 <TaskInput+0x42>
    *buf = '\0';
 8007df0:	4b0b      	ldr	r3, [pc, #44]	; (8007e20 <TaskInput+0x120>)
    strcpy(input_b,input);
 8007df2:	490d      	ldr	r1, [pc, #52]	; (8007e28 <TaskInput+0x128>)
    *buf = '\0';
 8007df4:	681b      	ldr	r3, [r3, #0]
    strcpy(input_b,input);
 8007df6:	480d      	ldr	r0, [pc, #52]	; (8007e2c <TaskInput+0x12c>)
    *buf = '\0';
 8007df8:	701a      	strb	r2, [r3, #0]
    strcpy(input_b,input);
 8007dfa:	f7f8 fc5b 	bl	80006b4 <strcpy>
    saved = 1;
 8007dfe:	4b09      	ldr	r3, [pc, #36]	; (8007e24 <TaskInput+0x124>)
 8007e00:	2201      	movs	r2, #1
 8007e02:	601a      	str	r2, [r3, #0]
 8007e04:	e7b6      	b.n	8007d74 <TaskInput+0x74>
    for(i=count; i<BUFFER_LEN; i++) *buf++ = '\0';
 8007e06:	f801 eb01 	strb.w	lr, [r1], #1
 8007e0a:	2201      	movs	r2, #1
 8007e0c:	e7be      	b.n	8007d8c <TaskInput+0x8c>
 8007e0e:	bf00      	nop
 8007e10:	200009bc 	.word	0x200009bc
 8007e14:	0800d28c 	.word	0x0800d28c
 8007e18:	20000c78 	.word	0x20000c78
 8007e1c:	0800d293 	.word	0x0800d293
 8007e20:	200009b8 	.word	0x200009b8
 8007e24:	20000d1c 	.word	0x20000d1c
 8007e28:	20000c7c 	.word	0x20000c7c
 8007e2c:	20000ccc 	.word	0x20000ccc
 8007e30:	0800d588 	.word	0x0800d588
 8007e34:	200009b4 	.word	0x200009b4
 8007e38:	0800cbe5 	.word	0x0800cbe5

08007e3c <fetch_uint32_arg>:
  return 0;
}     

/* Fetch an integer argument */
int fetch_uint32_arg(uint32_t *dest)
{
 8007e3c:	b510      	push	{r4, lr}
  char *p;
  p = strtok(NULL,SEPS);
 8007e3e:	4908      	ldr	r1, [pc, #32]	; (8007e60 <fetch_uint32_arg+0x24>)
{
 8007e40:	4604      	mov	r4, r0
  p = strtok(NULL,SEPS);
 8007e42:	2000      	movs	r0, #0
 8007e44:	f7f8 fd0a 	bl	800085c <strtok>
  if(p == NULL) {
 8007e48:	b130      	cbz	r0, 8007e58 <fetch_uint32_arg+0x1c>
    /* If we don't get any more tokens it's not an error, just the EOL */
    return -1;
  }
  
  *dest = (uint32_t)strtoul(p,NULL,0);
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	4611      	mov	r1, r2
 8007e4e:	f7f8 fdef 	bl	8000a30 <strtoul>
 8007e52:	6020      	str	r0, [r4, #0]
  return 0;
 8007e54:	2000      	movs	r0, #0
}     
 8007e56:	bd10      	pop	{r4, pc}
    return -1;
 8007e58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007e5c:	e7fb      	b.n	8007e56 <fetch_uint32_arg+0x1a>
 8007e5e:	bf00      	nop
 8007e60:	0800d20a 	.word	0x0800d20a

08007e64 <fetch_string_arg>:

/* Fetch a string argument */
int fetch_string_arg(char **dest)
{
 8007e64:	b510      	push	{r4, lr}
  char *p;
  p = strtok(NULL,SEPS);
 8007e66:	4906      	ldr	r1, [pc, #24]	; (8007e80 <fetch_string_arg+0x1c>)
{
 8007e68:	4604      	mov	r4, r0
  p = strtok(NULL,SEPS);
 8007e6a:	2000      	movs	r0, #0
 8007e6c:	f7f8 fcf6 	bl	800085c <strtok>
  if(p == NULL) {
 8007e70:	b110      	cbz	r0, 8007e78 <fetch_string_arg+0x14>
    /* If we don't get any more tokens it's not an error, just the EOL */
    return -1;
  }
  
  *dest = p;
 8007e72:	6020      	str	r0, [r4, #0]
  return 0;
 8007e74:	2000      	movs	r0, #0
}
 8007e76:	bd10      	pop	{r4, pc}
    return -1;
 8007e78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007e7c:	e7fb      	b.n	8007e76 <fetch_string_arg+0x12>
 8007e7e:	bf00      	nop
 8007e80:	0800d20a 	.word	0x0800d20a

08007e84 <DumpBuffer>:

#define BYTES_PER_LINE 16

/* Dump a buffer in HEX with the address as given */
void DumpBuffer(uint8_t *buffer, uint32_t count, uint32_t address)
{
 8007e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e88:	b089      	sub	sp, #36	; 0x24
 8007e8a:	e9cd 0200 	strd	r0, r2, [sp]
  uint32_t i;
  uint8_t buf[BYTES_PER_LINE+1],*bufp;   /* Buffer to assemble printed chars */
  uint8_t *p,c;

  if(count == 0) return;
 8007e8e:	460c      	mov	r4, r1
 8007e90:	2900      	cmp	r1, #0
 8007e92:	d040      	beq.n	8007f16 <DumpBuffer+0x92>

  p = buffer;
  bufp = buf;
 8007e94:	af03      	add	r7, sp, #12
  /* dump the requested number of bytes in hex. */
  for(i=0; i<count; i++) {
    if((i% BYTES_PER_LINE) == 0) {
      printf("%08x:",(unsigned int)address);
 8007e96:	f8df 9094 	ldr.w	r9, [pc, #148]	; 8007f2c <DumpBuffer+0xa8>
      *bufp++ = c; /* Stick in the character */
    } else {
      *bufp++ = '.';
    }

    printf(" %02x",((unsigned int)c) & 0xff);
 8007e9a:	f8df a094 	ldr.w	sl, [pc, #148]	; 8007f30 <DumpBuffer+0xac>
  for(i=0; i<count; i++) {
 8007e9e:	2500      	movs	r5, #0
 8007ea0:	463e      	mov	r6, r7
 8007ea2:	9b01      	ldr	r3, [sp, #4]
    if((i% BYTES_PER_LINE) == 0) {
 8007ea4:	f015 0b0f 	ands.w	fp, r5, #15
 8007ea8:	eb03 0105 	add.w	r1, r3, r5
 8007eac:	d136      	bne.n	8007f1c <DumpBuffer+0x98>
      printf("%08x:",(unsigned int)address);
 8007eae:	4648      	mov	r0, r9
 8007eb0:	f7f8 fac4 	bl	800043c <printf>
      bufp = buf;
 8007eb4:	46b0      	mov	r8, r6
    c = *p++;
 8007eb6:	9b00      	ldr	r3, [sp, #0]
 8007eb8:	5d58      	ldrb	r0, [r3, r5]
    if(isprint(c)) {
 8007eba:	4b19      	ldr	r3, [pc, #100]	; (8007f20 <DumpBuffer+0x9c>)
 8007ebc:	f810 c003 	ldrb.w	ip, [r0, r3]
      *bufp++ = c; /* Stick in the character */
 8007ec0:	4647      	mov	r7, r8
      *bufp++ = '.';
 8007ec2:	f01c 0f97 	tst.w	ip, #151	; 0x97
    if(isprint(c)) {
 8007ec6:	4601      	mov	r1, r0
      *bufp++ = '.';
 8007ec8:	bf08      	it	eq
 8007eca:	202e      	moveq	r0, #46	; 0x2e
 8007ecc:	f807 0b01 	strb.w	r0, [r7], #1
    printf(" %02x",((unsigned int)c) & 0xff);
 8007ed0:	4650      	mov	r0, sl
 8007ed2:	f7f8 fab3 	bl	800043c <printf>
    
    /* At end of line ? */
    if((i % BYTES_PER_LINE) == (BYTES_PER_LINE-1)) {
 8007ed6:	f1bb 0f0f 	cmp.w	fp, #15
 8007eda:	d106      	bne.n	8007eea <DumpBuffer+0x66>
      *bufp = '\0';  /* NULL terminate buffer */
 8007edc:	2100      	movs	r1, #0
 8007ede:	f888 1001 	strb.w	r1, [r8, #1]

      /* Yes, print buffer */
      printf("  %s\n",buf);
 8007ee2:	4810      	ldr	r0, [pc, #64]	; (8007f24 <DumpBuffer+0xa0>)
 8007ee4:	4631      	mov	r1, r6
 8007ee6:	f7f8 faa9 	bl	800043c <printf>
  for(i=0; i<count; i++) {
 8007eea:	3501      	adds	r5, #1
 8007eec:	42ac      	cmp	r4, r5
 8007eee:	d1d8      	bne.n	8007ea2 <DumpBuffer+0x1e>
    }

  }

  /* dump out to EOL */
  *bufp='\0';
 8007ef0:	2500      	movs	r5, #0
  if(count % BYTES_PER_LINE) {
 8007ef2:	f014 040f 	ands.w	r4, r4, #15
  *bufp='\0';
 8007ef6:	f888 5001 	strb.w	r5, [r8, #1]
  if(count % BYTES_PER_LINE) {
 8007efa:	d00c      	beq.n	8007f16 <DumpBuffer+0x92>
    for(i=0; i<(BYTES_PER_LINE - (count % BYTES_PER_LINE)); i++) {
      printf("   ");
 8007efc:	4f0a      	ldr	r7, [pc, #40]	; (8007f28 <DumpBuffer+0xa4>)
    for(i=0; i<(BYTES_PER_LINE - (count % BYTES_PER_LINE)); i++) {
 8007efe:	f1c4 0410 	rsb	r4, r4, #16
      printf("   ");
 8007f02:	4638      	mov	r0, r7
    for(i=0; i<(BYTES_PER_LINE - (count % BYTES_PER_LINE)); i++) {
 8007f04:	3501      	adds	r5, #1
      printf("   ");
 8007f06:	f7f8 fa99 	bl	800043c <printf>
    for(i=0; i<(BYTES_PER_LINE - (count % BYTES_PER_LINE)); i++) {
 8007f0a:	42a5      	cmp	r5, r4
 8007f0c:	d3f9      	bcc.n	8007f02 <DumpBuffer+0x7e>
    }
    /* Yes, print buffer */
    printf("  %s\n",buf);
 8007f0e:	4805      	ldr	r0, [pc, #20]	; (8007f24 <DumpBuffer+0xa0>)
 8007f10:	4631      	mov	r1, r6
 8007f12:	f7f8 fa93 	bl	800043c <printf>
  }



}
 8007f16:	b009      	add	sp, #36	; 0x24
 8007f18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f1c:	46b8      	mov	r8, r7
 8007f1e:	e7ca      	b.n	8007eb6 <DumpBuffer+0x32>
 8007f20:	0800cbe5 	.word	0x0800cbe5
 8007f24:	0800d2a9 	.word	0x0800d2a9
 8007f28:	0800d2af 	.word	0x0800d2af
 8007f2c:	0800d29d 	.word	0x0800d29d
 8007f30:	0800d2a3 	.word	0x0800d2a3

08007f34 <CmdDump>:
void CmdDump(int action)
{
  int rc;
  static uint32_t address=0, count=0x100;

  if(action==CMD_SHORT_HELP) return;
 8007f34:	2801      	cmp	r0, #1
{
 8007f36:	b538      	push	{r3, r4, r5, lr}
  if(action==CMD_SHORT_HELP) return;
 8007f38:	d01d      	beq.n	8007f76 <CmdDump+0x42>
  if(action==CMD_LONG_HELP) {
 8007f3a:	2802      	cmp	r0, #2
 8007f3c:	4d0e      	ldr	r5, [pc, #56]	; (8007f78 <CmdDump+0x44>)
 8007f3e:	4c0f      	ldr	r4, [pc, #60]	; (8007f7c <CmdDump+0x48>)
 8007f40:	d109      	bne.n	8007f56 <CmdDump+0x22>
    printf("dump {<address> {<count>}}\n\n"
 8007f42:	480f      	ldr	r0, [pc, #60]	; (8007f80 <CmdDump+0x4c>)
 8007f44:	f7f8 face 	bl	80004e4 <puts>
	   "\n"
	   "<count> is the number of bytes to dump to the terminal.\n"
	   "If the count is unspecified uses last count. The default\n"
	   "count is 0x100 bytes.\n\n");

    printf("Current address is 0x%08x, current count is 0x%x\n",
 8007f48:	682a      	ldr	r2, [r5, #0]
 8007f4a:	6821      	ldr	r1, [r4, #0]
 8007f4c:	480d      	ldr	r0, [pc, #52]	; (8007f84 <CmdDump+0x50>)
  }

  DumpBuffer((uint8_t *)address, count, address);
  /* Update parameters for next time */
  address = address+count;
}
 8007f4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    printf("Current address is 0x%08x, current count is 0x%x\n",
 8007f52:	f7f8 ba73 	b.w	800043c <printf>
  rc = fetch_uint32_arg(&address);
 8007f56:	4620      	mov	r0, r4
 8007f58:	f7ff ff70 	bl	8007e3c <fetch_uint32_arg>
  if(rc == 0) {
 8007f5c:	b910      	cbnz	r0, 8007f64 <CmdDump+0x30>
    fetch_uint32_arg(&count);
 8007f5e:	4628      	mov	r0, r5
 8007f60:	f7ff ff6c 	bl	8007e3c <fetch_uint32_arg>
  DumpBuffer((uint8_t *)address, count, address);
 8007f64:	6822      	ldr	r2, [r4, #0]
 8007f66:	6829      	ldr	r1, [r5, #0]
 8007f68:	4610      	mov	r0, r2
 8007f6a:	f7ff ff8b 	bl	8007e84 <DumpBuffer>
  address = address+count;
 8007f6e:	6823      	ldr	r3, [r4, #0]
 8007f70:	682a      	ldr	r2, [r5, #0]
 8007f72:	4413      	add	r3, r2
 8007f74:	6023      	str	r3, [r4, #0]
}
 8007f76:	bd38      	pop	{r3, r4, r5, pc}
 8007f78:	200009c0 	.word	0x200009c0
 8007f7c:	20000d20 	.word	0x20000d20
 8007f80:	0800d2b3 	.word	0x0800d2b3
 8007f84:	0800d44b 	.word	0x0800d44b

08007f88 <_sbrk_r>:
#include <reent.h>

register char *stack_ptr asm("sp");

void *_sbrk_r(struct _reent *ptr, int incr)
{
 8007f88:	b508      	push	{r3, lr}
        extern char end asm("end");
        static char *heap_end;
        char *prev_heap_end;

        if (heap_end == 0)
 8007f8a:	4b09      	ldr	r3, [pc, #36]	; (8007fb0 <_sbrk_r+0x28>)
 8007f8c:	681a      	ldr	r2, [r3, #0]
 8007f8e:	b90a      	cbnz	r2, 8007f94 <_sbrk_r+0xc>
                heap_end = &end;
 8007f90:	4a08      	ldr	r2, [pc, #32]	; (8007fb4 <_sbrk_r+0x2c>)
 8007f92:	601a      	str	r2, [r3, #0]

        prev_heap_end = heap_end;
 8007f94:	6818      	ldr	r0, [r3, #0]
        if (heap_end + incr > stack_ptr)
 8007f96:	466a      	mov	r2, sp
 8007f98:	4401      	add	r1, r0
 8007f9a:	4291      	cmp	r1, r2
 8007f9c:	d906      	bls.n	8007fac <_sbrk_r+0x24>
        {
//              write(1, "Heap and stack collision\n", 25);
//              abort();
                errno = ENOMEM;
 8007f9e:	f7f8 f9ab 	bl	80002f8 <__errno>
 8007fa2:	230c      	movs	r3, #12
 8007fa4:	6003      	str	r3, [r0, #0]
                return (caddr_t) -1;
 8007fa6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        }

        heap_end += incr;

        return (caddr_t) prev_heap_end;
}
 8007faa:	bd08      	pop	{r3, pc}
        heap_end += incr;
 8007fac:	6019      	str	r1, [r3, #0]
        return (caddr_t) prev_heap_end;
 8007fae:	e7fc      	b.n	8007faa <_sbrk_r+0x22>
 8007fb0:	20000d24 	.word	0x20000d24
 8007fb4:	20001dd8 	.word	0x20001dd8

08007fb8 <_close_r>:

int _close_r(struct _reent *ptr, int file)
{
        return -1;
}
 8007fb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007fbc:	4770      	bx	lr

08007fbe <_fstat_r>:

int _fstat_r(struct _reent *ptr, int file, struct stat *st)
{
        st->st_mode = S_IFCHR;
 8007fbe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007fc2:	6053      	str	r3, [r2, #4]
        return 0;
}
 8007fc4:	2000      	movs	r0, #0
 8007fc6:	4770      	bx	lr

08007fc8 <_isatty_r>:
int _isatty_r(struct _reent *ptr, int file)
{
        return 1;
}
 8007fc8:	2001      	movs	r0, #1
 8007fca:	4770      	bx	lr

08007fcc <_lseek_r>:
_off_t _lseek_r(struct _reent *ptr, int i, off_t j, int p)
{
        return 0;
}
 8007fcc:	2000      	movs	r0, #0
 8007fce:	4770      	bx	lr

08007fd0 <USBD_CDC_DataIn>:
{
  uint8_t rc;
  uint32_t index=INDEX_USB, tail, count;

  /* Call the original function */
  rc = (*USBDDataIn)(pdev,epnum);
 8007fd0:	4b1b      	ldr	r3, [pc, #108]	; (8008040 <USBD_CDC_DataIn+0x70>)
{
 8007fd2:	b570      	push	{r4, r5, r6, lr}
  rc = (*USBDDataIn)(pdev,epnum);
 8007fd4:	681b      	ldr	r3, [r3, #0]
{
 8007fd6:	4604      	mov	r4, r0
  rc = (*USBDDataIn)(pdev,epnum);
 8007fd8:	4798      	blx	r3

  if(pdev == &hUSBDDevice) {
 8007fda:	4b1a      	ldr	r3, [pc, #104]	; (8008044 <USBD_CDC_DataIn+0x74>)
 8007fdc:	429c      	cmp	r4, r3
  rc = (*USBDDataIn)(pdev,epnum);
 8007fde:	4606      	mov	r6, r0
  if(pdev == &hUSBDDevice) {
 8007fe0:	d12c      	bne.n	800803c <USBD_CDC_DataIn+0x6c>
    /* Update head and tail pointers, we just sent outSending bytes */
    tail = TerminalState[index].outTail;
 8007fe2:	4c19      	ldr	r4, [pc, #100]	; (8008048 <USBD_CDC_DataIn+0x78>)
 8007fe4:	f8b4 2108 	ldrh.w	r2, [r4, #264]	; 0x108
    count = TerminalState[index].outSending;
 8007fe8:	f8b4 310c 	ldrh.w	r3, [r4, #268]	; 0x10c
 8007fec:	b299      	uxth	r1, r3
    TerminalState[index].outTail = TERMINALINCRBY(tail,count);
 8007fee:	fa11 f282 	uxtah	r2, r1, r2
 8007ff2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007ff6:	f8a4 2108 	strh.w	r2, [r4, #264]	; 0x108
    TerminalState[index].outCount -= count;
 8007ffa:	f8b4 310a 	ldrh.w	r3, [r4, #266]	; 0x10a
 8007ffe:	1a5b      	subs	r3, r3, r1
 8008000:	b29b      	uxth	r3, r3
 8008002:	f8a4 310a 	strh.w	r3, [r4, #266]	; 0x10a
    TerminalState[index].outSending = 0;
 8008006:	2300      	movs	r3, #0
 8008008:	f8a4 310c 	strh.w	r3, [r4, #268]	; 0x10c

    /* Re - Trigger output from this buffer */
    tail = TerminalState[index].outTail;
 800800c:	f8b4 1108 	ldrh.w	r1, [r4, #264]	; 0x108
    count = TerminalState[index].outCount;
 8008010:	f8b4 210a 	ldrh.w	r2, [r4, #266]	; 0x10a
 8008014:	b292      	uxth	r2, r2
    tail = TerminalState[index].outTail;
 8008016:	b289      	uxth	r1, r1
    if(count != 0) {
 8008018:	b182      	cbz	r2, 800803c <USBD_CDC_DataIn+0x6c>
      /* Only allow a transfer to the end of the buffer */
      if((count + tail) >= TERMINALBUFFERSIZE) {
 800801a:	188b      	adds	r3, r1, r2
 800801c:	2b7f      	cmp	r3, #127	; 0x7f
	count = TERMINALBUFFERSIZE - tail;
 800801e:	bf88      	it	hi
 8008020:	f1c1 0280 	rsbhi	r2, r1, #128	; 0x80
      }
      USBD_CDC_SetTxBuffer(&hUSBDDevice,
 8008024:	b295      	uxth	r5, r2
			   (uint8_t*)&(TerminalState[index].outBuffer[tail]),
 8008026:	3186      	adds	r1, #134	; 0x86
      USBD_CDC_SetTxBuffer(&hUSBDDevice,
 8008028:	462a      	mov	r2, r5
 800802a:	4421      	add	r1, r4
 800802c:	4805      	ldr	r0, [pc, #20]	; (8008044 <USBD_CDC_DataIn+0x74>)
 800802e:	f003 fa05 	bl	800b43c <USBD_CDC_SetTxBuffer>
			   count);
      USBD_CDC_TransmitPacket(&hUSBDDevice);
 8008032:	4804      	ldr	r0, [pc, #16]	; (8008044 <USBD_CDC_DataIn+0x74>)
 8008034:	f003 fa10 	bl	800b458 <USBD_CDC_TransmitPacket>
      TerminalState[index].outSending = count;
 8008038:	f8a4 510c 	strh.w	r5, [r4, #268]	; 0x10c
    }
  }
    
  return rc;
}
 800803c:	4630      	mov	r0, r6
 800803e:	bd70      	pop	{r4, r5, r6, pc}
 8008040:	20000e4c 	.word	0x20000e4c
 8008044:	20000e50 	.word	0x20000e50
 8008048:	20000d28 	.word	0x20000d28

0800804c <CmdStats>:

#endif

/* Dump the terminal statistics */
void CmdStats(int mode)
{
 800804c:	e92d 41e0 	stmdb	sp!, {r5, r6, r7, r8, lr}
  uint32_t i;
  TerminalStats_t s[INDEX_MAX];

  if(mode != CMD_INTERACTIVE) return;
 8008050:	4601      	mov	r1, r0
{
 8008052:	b087      	sub	sp, #28
  if(mode != CMD_INTERACTIVE) return;
 8008054:	b9c0      	cbnz	r0, 8008088 <CmdStats+0x3c>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8008056:	b672      	cpsid	i

  /* Copy terminal stats to local storage, and reset counters atomincally */
  __disable_irq();
  for(i=0; i<INDEX_MAX; i++) {
    s[i] = TerminalState[i].stats;
 8008058:	480d      	ldr	r0, [pc, #52]	; (8008090 <CmdStats+0x44>)
    bzero(&TerminalState[i].stats, sizeof(TerminalState[i].stats));
 800805a:	9104      	str	r1, [sp, #16]
    s[i] = TerminalState[i].stats;
 800805c:	e9d0 5344 	ldrd	r5, r3, [r0, #272]	; 0x110
 8008060:	e9d0 6746 	ldrd	r6, r7, [r0, #280]	; 0x118
 8008064:	f8d0 8120 	ldr.w	r8, [r0, #288]	; 0x120
 8008068:	9305      	str	r3, [sp, #20]
    bzero(&TerminalState[i].stats, sizeof(TerminalState[i].stats));
 800806a:	2214      	movs	r2, #20
 800806c:	f500 7088 	add.w	r0, r0, #272	; 0x110
 8008070:	f7f8 f982 	bl	8000378 <memset>
  __ASM volatile ("cpsie i" : : : "memory");
 8008074:	b662      	cpsie	i
  }
  __enable_irq();

  /* Display stats for the user */
  for(i=0; i<INDEX_MAX; i++) {
    printf("Terminal #%u:\n"
 8008076:	4807      	ldr	r0, [pc, #28]	; (8008094 <CmdStats+0x48>)
 8008078:	9b05      	ldr	r3, [sp, #20]
 800807a:	9904      	ldr	r1, [sp, #16]
 800807c:	9600      	str	r6, [sp, #0]
 800807e:	e9cd 7801 	strd	r7, r8, [sp, #4]
 8008082:	462a      	mov	r2, r5
 8008084:	f7f8 f9da 	bl	800043c <printf>
	   (unsigned int)(s[i].written),
	   (unsigned int)(s[i].receiveTooBig),
	   (unsigned int)(s[i].received));
  }

}
 8008088:	b007      	add	sp, #28
 800808a:	e8bd 81e0 	ldmia.w	sp!, {r5, r6, r7, r8, pc}
 800808e:	bf00      	nop
 8008090:	20000d28 	.word	0x20000d28
 8008094:	0800d499 	.word	0x0800d499

08008098 <TerminalInit>:
{
 8008098:	b510      	push	{r4, lr}
  setvbuf(stdin, NULL, _IONBF, 0);
 800809a:	4c17      	ldr	r4, [pc, #92]	; (80080f8 <TerminalInit+0x60>)
 800809c:	6820      	ldr	r0, [r4, #0]
 800809e:	2300      	movs	r3, #0
 80080a0:	4619      	mov	r1, r3
 80080a2:	2202      	movs	r2, #2
 80080a4:	6840      	ldr	r0, [r0, #4]
 80080a6:	f7f8 fa25 	bl	80004f4 <setvbuf>
  setvbuf(stdout, NULL, _IONBF, 0);
 80080aa:	6820      	ldr	r0, [r4, #0]
 80080ac:	2300      	movs	r3, #0
 80080ae:	4619      	mov	r1, r3
 80080b0:	2202      	movs	r2, #2
 80080b2:	6880      	ldr	r0, [r0, #8]
 80080b4:	f7f8 fa1e 	bl	80004f4 <setvbuf>
  setvbuf(stderr, NULL, _IONBF, 0);
 80080b8:	6820      	ldr	r0, [r4, #0]
  USBD_Init(&hUSBDDevice, &VCP_Desc, 0);
 80080ba:	4c10      	ldr	r4, [pc, #64]	; (80080fc <TerminalInit+0x64>)
  setvbuf(stderr, NULL, _IONBF, 0);
 80080bc:	68c0      	ldr	r0, [r0, #12]
 80080be:	2300      	movs	r3, #0
 80080c0:	4619      	mov	r1, r3
 80080c2:	2202      	movs	r2, #2
 80080c4:	f7f8 fa16 	bl	80004f4 <setvbuf>
  USBD_Init(&hUSBDDevice, &VCP_Desc, 0);
 80080c8:	490d      	ldr	r1, [pc, #52]	; (8008100 <TerminalInit+0x68>)
 80080ca:	2200      	movs	r2, #0
 80080cc:	4620      	mov	r0, r4
 80080ce:	f002 fdeb 	bl	800aca8 <USBD_Init>
  USBDDataIn = USBD_CDC.DataIn;
 80080d2:	490c      	ldr	r1, [pc, #48]	; (8008104 <TerminalInit+0x6c>)
 80080d4:	4b0c      	ldr	r3, [pc, #48]	; (8008108 <TerminalInit+0x70>)
 80080d6:	694a      	ldr	r2, [r1, #20]
 80080d8:	601a      	str	r2, [r3, #0]
  USBD_RegisterClass(&hUSBDDevice, &USBD_CDC);
 80080da:	4620      	mov	r0, r4
  USBD_CDC.DataIn = USBD_CDC_DataIn;
 80080dc:	4b0b      	ldr	r3, [pc, #44]	; (800810c <TerminalInit+0x74>)
 80080de:	614b      	str	r3, [r1, #20]
  USBD_RegisterClass(&hUSBDDevice, &USBD_CDC);
 80080e0:	f002 fdf7 	bl	800acd2 <USBD_RegisterClass>
  USBD_CDC_RegisterInterface(&hUSBDDevice, &USBD_CDC_fops);
 80080e4:	4620      	mov	r0, r4
 80080e6:	490a      	ldr	r1, [pc, #40]	; (8008110 <TerminalInit+0x78>)
 80080e8:	f003 f9a1 	bl	800b42e <USBD_CDC_RegisterInterface>
  USBD_Start(&hUSBDDevice);
 80080ec:	4620      	mov	r0, r4
}
 80080ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_Start(&hUSBDDevice);
 80080f2:	f002 bdf5 	b.w	800ace0 <USBD_Start>
 80080f6:	bf00      	nop
 80080f8:	20000008 	.word	0x20000008
 80080fc:	20000e50 	.word	0x20000e50
 8008100:	20000af4 	.word	0x20000af4
 8008104:	200009c8 	.word	0x200009c8
 8008108:	20000e4c 	.word	0x20000e4c
 800810c:	08007fd1 	.word	0x08007fd1
 8008110:	20000b18 	.word	0x20000b18

08008114 <TerminalRead>:
{
 8008114:	b530      	push	{r4, r5, lr}
 8008116:	4603      	mov	r3, r0
  __ASM volatile ("cpsid i" : : : "memory");
 8008118:	b672      	cpsid	i
  while(TerminalState[index].inCount && (count < len)) {
 800811a:	4c10      	ldr	r4, [pc, #64]	; (800815c <TerminalRead+0x48>)
 800811c:	f44f 7592 	mov.w	r5, #292	; 0x124
  count = 0;
 8008120:	2000      	movs	r0, #0
  while(TerminalState[index].inCount && (count < len)) {
 8008122:	fb05 4303 	mla	r3, r5, r3, r4
 8008126:	f8b3 4084 	ldrh.w	r4, [r3, #132]	; 0x84
 800812a:	b2a4      	uxth	r4, r4
 800812c:	b10c      	cbz	r4, 8008132 <TerminalRead+0x1e>
 800812e:	4290      	cmp	r0, r2
 8008130:	d101      	bne.n	8008136 <TerminalRead+0x22>
  __ASM volatile ("cpsie i" : : : "memory");
 8008132:	b662      	cpsie	i
}
 8008134:	bd30      	pop	{r4, r5, pc}
    tail   = TerminalState[index].inTail;
 8008136:	f8b3 4082 	ldrh.w	r4, [r3, #130]	; 0x82
 800813a:	b2a4      	uxth	r4, r4
    *ptr++ = TerminalState[index].inBuffer[tail];
 800813c:	5d1d      	ldrb	r5, [r3, r4]
 800813e:	540d      	strb	r5, [r1, r0]
    TerminalState[index].inTail = TERMINALINCR(tail);
 8008140:	3401      	adds	r4, #1
 8008142:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 8008146:	f8a3 4082 	strh.w	r4, [r3, #130]	; 0x82
    TerminalState[index].inCount--;
 800814a:	f8b3 4084 	ldrh.w	r4, [r3, #132]	; 0x84
 800814e:	3c01      	subs	r4, #1
 8008150:	b2a4      	uxth	r4, r4
 8008152:	f8a3 4084 	strh.w	r4, [r3, #132]	; 0x84
    count++;
 8008156:	3001      	adds	r0, #1
 8008158:	e7e5      	b.n	8008126 <TerminalRead+0x12>
 800815a:	bf00      	nop
 800815c:	20000d28 	.word	0x20000d28

08008160 <_read_r>:
{
 8008160:	4611      	mov	r1, r2
  count = TerminalRead(0, (uint8_t *)ptr, len);
 8008162:	2000      	movs	r0, #0
 8008164:	461a      	mov	r2, r3
 8008166:	f7ff bfd5 	b.w	8008114 <TerminalRead>

0800816a <TerminalReadNonBlock>:
{
 800816a:	b508      	push	{r3, lr}
  if(TerminalRead(index,(uint8_t*)c,1) == 0) {
 800816c:	2201      	movs	r2, #1
 800816e:	f7ff ffd1 	bl	8008114 <TerminalRead>
}
 8008172:	fab0 f080 	clz	r0, r0
 8008176:	0940      	lsrs	r0, r0, #5
 8008178:	bd08      	pop	{r3, pc}

0800817a <TerminalReadAnyNonBlock>:
{
 800817a:	4601      	mov	r1, r0
 800817c:	b508      	push	{r3, lr}
    rc = TerminalReadNonBlock(i, c);
 800817e:	2000      	movs	r0, #0
 8008180:	f7ff fff3 	bl	800816a <TerminalReadNonBlock>
}
 8008184:	3800      	subs	r0, #0
 8008186:	bf18      	it	ne
 8008188:	2001      	movne	r0, #1
 800818a:	bd08      	pop	{r3, pc}

0800818c <TerminalOutputBufferWrite>:
{
 800818c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800818e:	4d37      	ldr	r5, [pc, #220]	; (800826c <TerminalOutputBufferWrite+0xe0>)
 8008190:	f44f 7392 	mov.w	r3, #292	; 0x124
  if(len >= TERMINALBUFFERSIZE) {
 8008194:	2a7f      	cmp	r2, #127	; 0x7f
    TerminalState[index].stats.writeTooBig++;
 8008196:	fb03 5300 	mla	r3, r3, r0, r5
  if(len >= TERMINALBUFFERSIZE) {
 800819a:	d906      	bls.n	80081aa <TerminalOutputBufferWrite+0x1e>
    TerminalState[index].stats.writeTooBig++;
 800819c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 80081a0:	3201      	adds	r2, #1
 80081a2:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    return 1;
 80081a6:	2001      	movs	r0, #1
}
 80081a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if((TerminalState[index].outCount+len) >= TERMINALBUFFERSIZE) {
 80081aa:	f8b3 410a 	ldrh.w	r4, [r3, #266]	; 0x10a
 80081ae:	fa12 f484 	uxtah	r4, r2, r4
 80081b2:	2c7f      	cmp	r4, #127	; 0x7f
    TerminalState[index].stats.writeBlocked++;
 80081b4:	bf82      	ittt	hi
 80081b6:	f8d3 4114 	ldrhi.w	r4, [r3, #276]	; 0x114
 80081ba:	3401      	addhi	r4, #1
 80081bc:	f8c3 4114 	strhi.w	r4, [r3, #276]	; 0x114
  while((TerminalState[index].outCount+len) >= TERMINALBUFFERSIZE) {} 
 80081c0:	f44f 7392 	mov.w	r3, #292	; 0x124
 80081c4:	fb03 5300 	mla	r3, r3, r0, r5
 80081c8:	f8b3 410a 	ldrh.w	r4, [r3, #266]	; 0x10a
 80081cc:	fa12 f484 	uxtah	r4, r2, r4
 80081d0:	2c7f      	cmp	r4, #127	; 0x7f
 80081d2:	d8f9      	bhi.n	80081c8 <TerminalOutputBufferWrite+0x3c>
  __ASM volatile ("cpsid i" : : : "memory");
 80081d4:	b672      	cpsid	i
  TerminalState[index].stats.written += len;  /* gather statistics */
 80081d6:	f8d3 4118 	ldr.w	r4, [r3, #280]	; 0x118
 80081da:	4414      	add	r4, r2
 80081dc:	f8c3 4118 	str.w	r4, [r3, #280]	; 0x118
	&& (TerminalState[index].outCount<TERMINALBUFFERSIZE)) {
 80081e0:	f44f 7492 	mov.w	r4, #292	; 0x124
 80081e4:	440a      	add	r2, r1
 80081e6:	fb04 5400 	mla	r4, r4, r0, r5
  while((len != 0) 
 80081ea:	4291      	cmp	r1, r2
 80081ec:	d004      	beq.n	80081f8 <TerminalOutputBufferWrite+0x6c>
	&& (TerminalState[index].outCount<TERMINALBUFFERSIZE)) {
 80081ee:	f8b4 310a 	ldrh.w	r3, [r4, #266]	; 0x10a
 80081f2:	b29b      	uxth	r3, r3
 80081f4:	2b7f      	cmp	r3, #127	; 0x7f
 80081f6:	d925      	bls.n	8008244 <TerminalOutputBufferWrite+0xb8>
  tail = TerminalState[index].outTail;
 80081f8:	f44f 7292 	mov.w	r2, #292	; 0x124
 80081fc:	fb02 5200 	mla	r2, r2, r0, r5
 8008200:	f8b2 3108 	ldrh.w	r3, [r2, #264]	; 0x108
  count = TerminalState[index].outCount;
 8008204:	f8b2 210a 	ldrh.w	r2, [r2, #266]	; 0x10a
 8008208:	b292      	uxth	r2, r2
  tail = TerminalState[index].outTail;
 800820a:	b299      	uxth	r1, r3
  if((count + tail) >= TERMINALBUFFERSIZE) {
 800820c:	fa12 f383 	uxtah	r3, r2, r3
 8008210:	2b7f      	cmp	r3, #127	; 0x7f
    count = TERMINALBUFFERSIZE - tail;
 8008212:	bf88      	it	hi
 8008214:	f1c1 0280 	rsbhi	r2, r1, #128	; 0x80
  switch(index) {
 8008218:	b988      	cbnz	r0, 800823e <TerminalOutputBufferWrite+0xb2>
    if(hUSBDDevice.dev_state == USBD_STATE_CONFIGURED) {
 800821a:	4e15      	ldr	r6, [pc, #84]	; (8008270 <TerminalOutputBufferWrite+0xe4>)
 800821c:	f896 31fc 	ldrb.w	r3, [r6, #508]	; 0x1fc
 8008220:	2b03      	cmp	r3, #3
 8008222:	d10c      	bne.n	800823e <TerminalOutputBufferWrite+0xb2>
      USBD_CDC_SetTxBuffer(&hUSBDDevice,
 8008224:	b294      	uxth	r4, r2
			   (uint8_t*)&(TerminalState[index].outBuffer[tail]),
 8008226:	3186      	adds	r1, #134	; 0x86
      USBD_CDC_SetTxBuffer(&hUSBDDevice,
 8008228:	4622      	mov	r2, r4
 800822a:	4429      	add	r1, r5
 800822c:	4630      	mov	r0, r6
 800822e:	f003 f905 	bl	800b43c <USBD_CDC_SetTxBuffer>
      cdcRc = USBD_CDC_TransmitPacket(&hUSBDDevice);
 8008232:	4630      	mov	r0, r6
 8008234:	f003 f910 	bl	800b458 <USBD_CDC_TransmitPacket>
      if(cdcRc == USBD_OK) {
 8008238:	b908      	cbnz	r0, 800823e <TerminalOutputBufferWrite+0xb2>
	TerminalState[index].outSending = count;
 800823a:	f8a5 410c 	strh.w	r4, [r5, #268]	; 0x10c
  __ASM volatile ("cpsie i" : : : "memory");
 800823e:	b662      	cpsie	i
 8008240:	2000      	movs	r0, #0
 8008242:	e7b1      	b.n	80081a8 <TerminalOutputBufferWrite+0x1c>
    head = TerminalState[index].outHead;
 8008244:	f8b4 3106 	ldrh.w	r3, [r4, #262]	; 0x106
    TerminalState[index].outBuffer[head] = *p++;
 8008248:	f811 7b01 	ldrb.w	r7, [r1], #1
 800824c:	fa14 f683 	uxtah	r6, r4, r3
    TerminalState[index].outHead = TERMINALINCR(head);
 8008250:	3301      	adds	r3, #1
 8008252:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008256:	f8a4 3106 	strh.w	r3, [r4, #262]	; 0x106
    TerminalState[index].outCount++;
 800825a:	f8b4 310a 	ldrh.w	r3, [r4, #266]	; 0x10a
    TerminalState[index].outBuffer[head] = *p++;
 800825e:	f886 7086 	strb.w	r7, [r6, #134]	; 0x86
    TerminalState[index].outCount++;
 8008262:	3301      	adds	r3, #1
 8008264:	b29b      	uxth	r3, r3
 8008266:	f8a4 310a 	strh.w	r3, [r4, #266]	; 0x10a
    len--;
 800826a:	e7be      	b.n	80081ea <TerminalOutputBufferWrite+0x5e>
 800826c:	20000d28 	.word	0x20000d28
 8008270:	20000e50 	.word	0x20000e50

08008274 <_write_r>:
{
 8008274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      TerminalOutputBufferWrite(INDEX_USB,"\r",1);
 8008278:	f8df 8034 	ldr.w	r8, [pc, #52]	; 80082b0 <_write_r+0x3c>
{
 800827c:	461d      	mov	r5, r3
 800827e:	4614      	mov	r4, r2
 8008280:	18d7      	adds	r7, r2, r3
  while(count != 0) {
 8008282:	42bc      	cmp	r4, r7
 8008284:	4626      	mov	r6, r4
 8008286:	d102      	bne.n	800828e <_write_r+0x1a>
}
 8008288:	4628      	mov	r0, r5
 800828a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(*ptr == '\n') {
 800828e:	7833      	ldrb	r3, [r6, #0]
 8008290:	2b0a      	cmp	r3, #10
 8008292:	f104 0401 	add.w	r4, r4, #1
 8008296:	d104      	bne.n	80082a2 <_write_r+0x2e>
      TerminalOutputBufferWrite(INDEX_USB,"\r",1);
 8008298:	2201      	movs	r2, #1
 800829a:	4641      	mov	r1, r8
 800829c:	2000      	movs	r0, #0
 800829e:	f7ff ff75 	bl	800818c <TerminalOutputBufferWrite>
    TerminalOutputBufferWrite(INDEX_USB,ptr,1);
 80082a2:	2201      	movs	r2, #1
 80082a4:	4631      	mov	r1, r6
 80082a6:	2000      	movs	r0, #0
 80082a8:	f7ff ff70 	bl	800818c <TerminalOutputBufferWrite>
    count--;
 80082ac:	e7e9      	b.n	8008282 <_write_r+0xe>
 80082ae:	bf00      	nop
 80082b0:	0800d20f 	.word	0x0800d20f

080082b4 <TerminalInputBufferWrite>:
  if((TerminalState[index].inCount + len) >= TERMINALBUFFERSIZE) {
 80082b4:	4b17      	ldr	r3, [pc, #92]	; (8008314 <TerminalInputBufferWrite+0x60>)
{
 80082b6:	b510      	push	{r4, lr}
  if((TerminalState[index].inCount + len) >= TERMINALBUFFERSIZE) {
 80082b8:	f44f 7492 	mov.w	r4, #292	; 0x124
 80082bc:	fb04 3000 	mla	r0, r4, r0, r3
 80082c0:	f8b0 3084 	ldrh.w	r3, [r0, #132]	; 0x84
 80082c4:	fa12 f383 	uxtah	r3, r2, r3
 80082c8:	2b7f      	cmp	r3, #127	; 0x7f
 80082ca:	d906      	bls.n	80082da <TerminalInputBufferWrite+0x26>
    TerminalState[index].stats.receiveTooBig++;
 80082cc:	f8d0 311c 	ldr.w	r3, [r0, #284]	; 0x11c
 80082d0:	3301      	adds	r3, #1
 80082d2:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
    return 1;
 80082d6:	2001      	movs	r0, #1
}
 80082d8:	bd10      	pop	{r4, pc}
  TerminalState[index].stats.received += len;
 80082da:	f8d0 3120 	ldr.w	r3, [r0, #288]	; 0x120
 80082de:	4413      	add	r3, r2
 80082e0:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
  while(len != 0) {
 80082e4:	440a      	add	r2, r1
 80082e6:	4291      	cmp	r1, r2
 80082e8:	d101      	bne.n	80082ee <TerminalInputBufferWrite+0x3a>
  return 0;
 80082ea:	2000      	movs	r0, #0
 80082ec:	e7f4      	b.n	80082d8 <TerminalInputBufferWrite+0x24>
    head = TerminalState[index].inHead;
 80082ee:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
    TerminalState[index].inBuffer[head] = *p++;
 80082f2:	f811 4b01 	ldrb.w	r4, [r1], #1
    head = TerminalState[index].inHead;
 80082f6:	b29b      	uxth	r3, r3
    TerminalState[index].inBuffer[head] = *p++;
 80082f8:	54c4      	strb	r4, [r0, r3]
    TerminalState[index].inHead = TERMINALINCR(head);
 80082fa:	3301      	adds	r3, #1
 80082fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008300:	f8a0 3080 	strh.w	r3, [r0, #128]	; 0x80
    TerminalState[index].inCount++;
 8008304:	f8b0 3084 	ldrh.w	r3, [r0, #132]	; 0x84
 8008308:	3301      	adds	r3, #1
 800830a:	b29b      	uxth	r3, r3
 800830c:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
    len--;
 8008310:	e7e9      	b.n	80082e6 <TerminalInputBufferWrite+0x32>
 8008312:	bf00      	nop
 8008314:	20000d28 	.word	0x20000d28

08008318 <USB_LP_CAN_RX0_IRQHandler>:
  HAL_PCD_IRQHandler(&hpcd);
 8008318:	4801      	ldr	r0, [pc, #4]	; (8008320 <USB_LP_CAN_RX0_IRQHandler+0x8>)
 800831a:	f001 bc8f 	b.w	8009c3c <HAL_PCD_IRQHandler>
 800831e:	bf00      	nop
 8008320:	20001090 	.word	0x20001090

08008324 <Uncompress>:

/* Uncompress a name, and return a pointer to a static buffer
   containging the name.
*/
static const char *Uncompress(char *str)
{
 8008324:	b570      	push	{r4, r5, r6, lr}
  const char decoderRing[]="ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_";
 8008326:	4a1c      	ldr	r2, [pc, #112]	; (8008398 <Uncompress+0x74>)
{
 8008328:	b08a      	sub	sp, #40	; 0x28
 800832a:	4603      	mov	r3, r0
  const char decoderRing[]="ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_";
 800832c:	466c      	mov	r4, sp
 800832e:	f102 0620 	add.w	r6, r2, #32
 8008332:	6810      	ldr	r0, [r2, #0]
 8008334:	6851      	ldr	r1, [r2, #4]
 8008336:	4625      	mov	r5, r4
 8008338:	c503      	stmia	r5!, {r0, r1}
 800833a:	3208      	adds	r2, #8
 800833c:	42b2      	cmp	r2, r6
 800833e:	462c      	mov	r4, r5
 8008340:	d1f7      	bne.n	8008332 <Uncompress+0xe>
 8008342:	6810      	ldr	r0, [r2, #0]
 8008344:	6028      	str	r0, [r5, #0]
 8008346:	8892      	ldrh	r2, [r2, #4]
 8008348:	80aa      	strh	r2, [r5, #4]
  char c;

  /* Prime the data pump */
  data = (uint8_t)(*str++);
  data <<= 8;
  data |= (uint8_t)(*str++);
 800834a:	4618      	mov	r0, r3
 800834c:	4d13      	ldr	r5, [pc, #76]	; (800839c <Uncompress+0x78>)
 800834e:	f830 3b02 	ldrh.w	r3, [r0], #2
  bits = 0;
 8008352:	2100      	movs	r1, #0
 8008354:	ba5b      	rev16	r3, r3
 8008356:	b29b      	uxth	r3, r3
  i = 0;
 8008358:	460c      	mov	r4, r1
 800835a:	462e      	mov	r6, r5
  //printf("bits: %u, data: %06x\n",(unsigned)bits, (unsigned)data);
  while((data & (0x3f << 10)) != 0) {
 800835c:	f413 427c 	ands.w	r2, r3, #64512	; 0xfc00
 8008360:	d103      	bne.n	800836a <Uncompress+0x46>
      data |= ((uint32_t)(*str++)) << bits; 
    }
  }
  buf[i]='\0';
  return buf;
}
 8008362:	480e      	ldr	r0, [pc, #56]	; (800839c <Uncompress+0x78>)
  buf[i]='\0';
 8008364:	5532      	strb	r2, [r6, r4]
}
 8008366:	b00a      	add	sp, #40	; 0x28
 8008368:	bd70      	pop	{r4, r5, r6, pc}
    data <<= 6;
 800836a:	019a      	lsls	r2, r3, #6
    data &= 0x3fffff;
 800836c:	f3c2 0315 	ubfx	r3, r2, #0, #22
    c = decoderRing[(data>>16)-1];
 8008370:	f3c2 4205 	ubfx	r2, r2, #16, #6
 8008374:	3228      	adds	r2, #40	; 0x28
 8008376:	446a      	add	r2, sp
    buf[i++] = c;
 8008378:	3401      	adds	r4, #1
 800837a:	f812 2c29 	ldrb.w	r2, [r2, #-41]
 800837e:	f805 2b01 	strb.w	r2, [r5], #1
    bits += 6;
 8008382:	1d8a      	adds	r2, r1, #6
    if(bits >= 8) {
 8008384:	2a07      	cmp	r2, #7
      bits -= 8;
 8008386:	bf81      	itttt	hi
 8008388:	1e8a      	subhi	r2, r1, #2
      data |= ((uint32_t)(*str++)) << bits; 
 800838a:	f810 1b01 	ldrbhi.w	r1, [r0], #1
 800838e:	4091      	lslhi	r1, r2
 8008390:	430b      	orrhi	r3, r1
 8008392:	4611      	mov	r1, r2
 8008394:	e7e2      	b.n	800835c <Uncompress+0x38>
 8008396:	bf00      	nop
 8008398:	0800d543 	.word	0x0800d543
 800839c:	20001074 	.word	0x20001074

080083a0 <DecodeReadRegister>:


/* Read a specific register from memory */
uint32_t DecodeReadRegister(const Peripheral_t *p, const Register_t *r)
{
 80083a0:	b538      	push	{r3, r4, r5, lr}
  uint32_t address, val;

  if(p == NULL) return 0;
 80083a2:	4604      	mov	r4, r0
 80083a4:	b1f0      	cbz	r0, 80083e4 <DecodeReadRegister+0x44>
  if(r == NULL) return 0;
 80083a6:	b1f9      	cbz	r1, 80083e8 <DecodeReadRegister+0x48>
  
  /* Calculate effective address */
  address = p->base + r->offset;

  /* read register according to size */
  switch(r->size) {
 80083a8:	798d      	ldrb	r5, [r1, #6]
  address = p->base + r->offset;
 80083aa:	888a      	ldrh	r2, [r1, #4]
 80083ac:	6843      	ldr	r3, [r0, #4]
  switch(r->size) {
 80083ae:	2d10      	cmp	r5, #16
 80083b0:	d005      	beq.n	80083be <DecodeReadRegister+0x1e>
 80083b2:	2d20      	cmp	r5, #32
 80083b4:	d005      	beq.n	80083c2 <DecodeReadRegister+0x22>
 80083b6:	2d08      	cmp	r5, #8
 80083b8:	d105      	bne.n	80083c6 <DecodeReadRegister+0x26>
  case 8:
    val = *(uint8_t *)address;
 80083ba:	5cd0      	ldrb	r0, [r2, r3]
    printf(" in periphral %s!\n",
	   Uncompress(p->name));
    return 0;
  }
  return val;
}
 80083bc:	bd38      	pop	{r3, r4, r5, pc}
    val = *(uint16_t *)address;
 80083be:	5ad0      	ldrh	r0, [r2, r3]
    break;  
 80083c0:	e7fc      	b.n	80083bc <DecodeReadRegister+0x1c>
    val = *(uint32_t *)address;
 80083c2:	58d0      	ldr	r0, [r2, r3]
    break;
 80083c4:	e7fa      	b.n	80083bc <DecodeReadRegister+0x1c>
    printf("Invalid size 0x%x for register %s",
 80083c6:	6808      	ldr	r0, [r1, #0]
 80083c8:	f7ff ffac 	bl	8008324 <Uncompress>
 80083cc:	4629      	mov	r1, r5
 80083ce:	4602      	mov	r2, r0
 80083d0:	4806      	ldr	r0, [pc, #24]	; (80083ec <DecodeReadRegister+0x4c>)
 80083d2:	f7f8 f833 	bl	800043c <printf>
    printf(" in periphral %s!\n",
 80083d6:	6820      	ldr	r0, [r4, #0]
 80083d8:	f7ff ffa4 	bl	8008324 <Uncompress>
 80083dc:	4601      	mov	r1, r0
 80083de:	4804      	ldr	r0, [pc, #16]	; (80083f0 <DecodeReadRegister+0x50>)
 80083e0:	f7f8 f82c 	bl	800043c <printf>
    return 0;
 80083e4:	2000      	movs	r0, #0
 80083e6:	e7e9      	b.n	80083bc <DecodeReadRegister+0x1c>
  if(p == NULL) return 0;
 80083e8:	4608      	mov	r0, r1
 80083ea:	e7e7      	b.n	80083bc <DecodeReadRegister+0x1c>
 80083ec:	0800d569 	.word	0x0800d569
 80083f0:	0800d58b 	.word	0x0800d58b

080083f4 <DecodeWriteRegister>:

/* Read a specific register from memory */
uint32_t DecodeWriteRegister(const Peripheral_t *p, const Register_t *r,
			     uint32_t val)
{
 80083f4:	b538      	push	{r3, r4, r5, lr}
  uint32_t address;

  if(p == NULL) return 1;
 80083f6:	4604      	mov	r4, r0
 80083f8:	b1f8      	cbz	r0, 800843a <DecodeWriteRegister+0x46>
  if(r == NULL) return 1;
 80083fa:	b1f1      	cbz	r1, 800843a <DecodeWriteRegister+0x46>
  
  /* Calculate effective address */
  address = p->base + r->offset;

  /* read register according to size */
  switch(r->size) {
 80083fc:	798d      	ldrb	r5, [r1, #6]
  address = p->base + r->offset;
 80083fe:	8888      	ldrh	r0, [r1, #4]
 8008400:	6863      	ldr	r3, [r4, #4]
  switch(r->size) {
 8008402:	2d10      	cmp	r5, #16
 8008404:	d006      	beq.n	8008414 <DecodeWriteRegister+0x20>
 8008406:	2d20      	cmp	r5, #32
 8008408:	d006      	beq.n	8008418 <DecodeWriteRegister+0x24>
 800840a:	2d08      	cmp	r5, #8
 800840c:	d106      	bne.n	800841c <DecodeWriteRegister+0x28>
  case 8:
    *(uint8_t *)address = val;
 800840e:	54c2      	strb	r2, [r0, r3]
	   Uncompress(r->name));
    printf(" in periphral %s!\n",
	   Uncompress(p->name));
    return 1;
  }
  return 0;
 8008410:	2000      	movs	r0, #0
}
 8008412:	bd38      	pop	{r3, r4, r5, pc}
    *(uint16_t *)address = val;
 8008414:	52c2      	strh	r2, [r0, r3]
    break;  
 8008416:	e7fb      	b.n	8008410 <DecodeWriteRegister+0x1c>
    *(uint32_t *)address = val;
 8008418:	50c2      	str	r2, [r0, r3]
 800841a:	e7f9      	b.n	8008410 <DecodeWriteRegister+0x1c>
    printf("Invalid size 0x%x for register %s",
 800841c:	6808      	ldr	r0, [r1, #0]
 800841e:	f7ff ff81 	bl	8008324 <Uncompress>
 8008422:	4629      	mov	r1, r5
 8008424:	4602      	mov	r2, r0
 8008426:	4806      	ldr	r0, [pc, #24]	; (8008440 <DecodeWriteRegister+0x4c>)
 8008428:	f7f8 f808 	bl	800043c <printf>
    printf(" in periphral %s!\n",
 800842c:	6820      	ldr	r0, [r4, #0]
 800842e:	f7ff ff79 	bl	8008324 <Uncompress>
 8008432:	4601      	mov	r1, r0
 8008434:	4803      	ldr	r0, [pc, #12]	; (8008444 <DecodeWriteRegister+0x50>)
 8008436:	f7f8 f801 	bl	800043c <printf>
  if(p == NULL) return 1;
 800843a:	2001      	movs	r0, #1
 800843c:	e7e9      	b.n	8008412 <DecodeWriteRegister+0x1e>
 800843e:	bf00      	nop
 8008440:	0800d569 	.word	0x0800d569
 8008444:	0800d58b 	.word	0x0800d58b

08008448 <DecodeField>:

/* Decode a field */
void DecodeField(const Field_t *f, uint32_t val)
{
 8008448:	b530      	push	{r4, r5, lr}
  uint32_t v;
  if(f == NULL) return;
 800844a:	4604      	mov	r4, r0
{
 800844c:	b087      	sub	sp, #28
  if(f == NULL) return;
 800844e:	b1d0      	cbz	r0, 8008486 <DecodeField+0x3e>

  v = (val >> (f->offset)) & ((1<<f->width)-1);
 8008450:	7942      	ldrb	r2, [r0, #5]
 8008452:	2301      	movs	r3, #1
 8008454:	4093      	lsls	r3, r2
 8008456:	7902      	ldrb	r2, [r0, #4]
  printf("  %21s : 0x%-2x (%6u) %2u %s offset: %u\n",
 8008458:	6800      	ldr	r0, [r0, #0]
  v = (val >> (f->offset)) & ((1<<f->width)-1);
 800845a:	40d1      	lsrs	r1, r2
 800845c:	3b01      	subs	r3, #1
 800845e:	400b      	ands	r3, r1
 8008460:	9305      	str	r3, [sp, #20]
  printf("  %21s : 0x%-2x (%6u) %2u %s offset: %u\n",
 8008462:	f7ff ff5f 	bl	8008324 <Uncompress>
	 Uncompress(f->name),  
	 (unsigned int)v,
	 (unsigned int)v,
	 (unsigned int)(f->width),
 8008466:	7965      	ldrb	r5, [r4, #5]
  printf("  %21s : 0x%-2x (%6u) %2u %s offset: %u\n",
 8008468:	4a08      	ldr	r2, [pc, #32]	; (800848c <DecodeField+0x44>)
 800846a:	9b05      	ldr	r3, [sp, #20]
 800846c:	4601      	mov	r1, r0
 800846e:	4808      	ldr	r0, [pc, #32]	; (8008490 <DecodeField+0x48>)
 8008470:	2d01      	cmp	r5, #1
 8008472:	bf98      	it	ls
 8008474:	4602      	movls	r2, r0
 8008476:	7920      	ldrb	r0, [r4, #4]
 8008478:	9500      	str	r5, [sp, #0]
 800847a:	e9cd 2001 	strd	r2, r0, [sp, #4]
 800847e:	4805      	ldr	r0, [pc, #20]	; (8008494 <DecodeField+0x4c>)
 8008480:	461a      	mov	r2, r3
 8008482:	f7f7 ffdb 	bl	800043c <printf>
	 (f->width > 1 ) ? "bits," : "bit, ",
	 (unsigned int)(f->offset));
}
 8008486:	b007      	add	sp, #28
 8008488:	bd30      	pop	{r4, r5, pc}
 800848a:	bf00      	nop
 800848c:	0800d59e 	.word	0x0800d59e
 8008490:	0800d5a4 	.word	0x0800d5a4
 8008494:	0800d5aa 	.word	0x0800d5aa

08008498 <DecodeRegister>:

/* Decode a register */
void DecodeRegister(const Register_t *r, uint32_t base, uint32_t val,
		    uint32_t decodeFields)
{
 8008498:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800849a:	460f      	mov	r7, r1
 800849c:	4615      	mov	r5, r2
 800849e:	461e      	mov	r6, r3
  Field_t const *f;
  uint32_t i;
  
  if(r == NULL) return;
 80084a0:	4604      	mov	r4, r0
 80084a2:	b180      	cbz	r0, 80084c6 <DecodeRegister+0x2e>

  //  printf("\tRegister :\n");
  printf(" Register %-13s : 0x%08x (%10u) Size: %2u Address: 0x%08x\n",
 80084a4:	6800      	ldr	r0, [r0, #0]
 80084a6:	f7ff ff3d 	bl	8008324 <Uncompress>
	 Uncompress(r->name),
	 (unsigned int)val,
	 (unsigned int)val,
	 (unsigned int)r->size,
	 (unsigned int)(base + r->offset)
 80084aa:	88a2      	ldrh	r2, [r4, #4]
 80084ac:	443a      	add	r2, r7
  printf(" Register %-13s : 0x%08x (%10u) Size: %2u Address: 0x%08x\n",
 80084ae:	9201      	str	r2, [sp, #4]
 80084b0:	79a3      	ldrb	r3, [r4, #6]
 80084b2:	9300      	str	r3, [sp, #0]
 80084b4:	4601      	mov	r1, r0
 80084b6:	462b      	mov	r3, r5
 80084b8:	480e      	ldr	r0, [pc, #56]	; (80084f4 <DecodeRegister+0x5c>)
 80084ba:	462a      	mov	r2, r5
 80084bc:	f7f7 ffbe 	bl	800043c <printf>
	 );

  /* Dump out fields */
  if(r->fields != NULL && decodeFields) {
 80084c0:	68a7      	ldr	r7, [r4, #8]
 80084c2:	b19f      	cbz	r7, 80084ec <DecodeRegister+0x54>
 80084c4:	b986      	cbnz	r6, 80084e8 <DecodeRegister+0x50>
  }
  if(decodeFields) {
    printf("\n");
  }

}
 80084c6:	b003      	add	sp, #12
 80084c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      DecodeField(f,val);
 80084ca:	4629      	mov	r1, r5
 80084cc:	f7ff ffbc 	bl	8008448 <DecodeField>
    for(i=0; i<r->numFields; i++) {
 80084d0:	3601      	adds	r6, #1
 80084d2:	89a3      	ldrh	r3, [r4, #12]
 80084d4:	429e      	cmp	r6, r3
 80084d6:	eb07 00c6 	add.w	r0, r7, r6, lsl #3
 80084da:	d3f6      	bcc.n	80084ca <DecodeRegister+0x32>
    printf("\n");
 80084dc:	200a      	movs	r0, #10
}
 80084de:	b003      	add	sp, #12
 80084e0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    printf("\n");
 80084e4:	f7f7 bfc2 	b.w	800046c <putchar>
    for(i=0; i<r->numFields; i++) {
 80084e8:	2600      	movs	r6, #0
 80084ea:	e7f2      	b.n	80084d2 <DecodeRegister+0x3a>
  if(decodeFields) {
 80084ec:	2e00      	cmp	r6, #0
 80084ee:	d0ea      	beq.n	80084c6 <DecodeRegister+0x2e>
 80084f0:	e7f4      	b.n	80084dc <DecodeRegister+0x44>
 80084f2:	bf00      	nop
 80084f4:	0800d5d3 	.word	0x0800d5d3

080084f8 <DecodePeripheral>:

/* Decode a peripheral */
void DecodePeripheral(const Peripheral_t *p, uint32_t decodeFields)
{
 80084f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084fc:	460e      	mov	r6, r1
  Register_t const *r;
  uint32_t val;
  uint32_t i;

  if(p == NULL) return;
 80084fe:	4604      	mov	r4, r0
 8008500:	b160      	cbz	r0, 800851c <DecodePeripheral+0x24>
  
  printf("Peripheral %-13s: Base address: 0x%08x\n",
 8008502:	6800      	ldr	r0, [r0, #0]
 8008504:	f7ff ff0e 	bl	8008324 <Uncompress>
 8008508:	6862      	ldr	r2, [r4, #4]
 800850a:	4601      	mov	r1, r0
 800850c:	480e      	ldr	r0, [pc, #56]	; (8008548 <DecodePeripheral+0x50>)
 800850e:	f7f7 ff95 	bl	800043c <printf>
	 Uncompress(p->name),  (unsigned int)p->base);

  /* Dump out registers */
  if(p->registers != NULL) {
 8008512:	f8d4 8008 	ldr.w	r8, [r4, #8]
 8008516:	f1b8 0f00 	cmp.w	r8, #0
 800851a:	d112      	bne.n	8008542 <DecodePeripheral+0x4a>
      /* Decode Register, but don't dump fields */
      DecodeRegister(r, p->base, val, decodeFields);
      r++;
    }
  }
}
 800851c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      val = DecodeReadRegister(p,r);
 8008520:	4639      	mov	r1, r7
 8008522:	4620      	mov	r0, r4
 8008524:	f7ff ff3c 	bl	80083a0 <DecodeReadRegister>
      DecodeRegister(r, p->base, val, decodeFields);
 8008528:	6861      	ldr	r1, [r4, #4]
      val = DecodeReadRegister(p,r);
 800852a:	4602      	mov	r2, r0
      DecodeRegister(r, p->base, val, decodeFields);
 800852c:	4633      	mov	r3, r6
 800852e:	4638      	mov	r0, r7
 8008530:	f7ff ffb2 	bl	8008498 <DecodeRegister>
    for(i=0; i<p->numRegisters; i++) {
 8008534:	3501      	adds	r5, #1
 8008536:	89a3      	ldrh	r3, [r4, #12]
 8008538:	429d      	cmp	r5, r3
 800853a:	eb08 1705 	add.w	r7, r8, r5, lsl #4
 800853e:	d3ef      	bcc.n	8008520 <DecodePeripheral+0x28>
 8008540:	e7ec      	b.n	800851c <DecodePeripheral+0x24>
 8008542:	2500      	movs	r5, #0
 8008544:	e7f7      	b.n	8008536 <DecodePeripheral+0x3e>
 8008546:	bf00      	nop
 8008548:	0800d60e 	.word	0x0800d60e

0800854c <DecodePrintPeripherals>:

/* Pretty print the names of all the peripherals */
void DecodePrintPeripherals(const Peripheral_t *p)
{
 800854c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008550:	4604      	mov	r4, r0
  uint32_t col;
  col = 8;
  printf("\t");
 8008552:	2009      	movs	r0, #9
 8008554:	f7f7 ff8a 	bl	800046c <putchar>
  for(; p->name != NULL; p++) {
    col += printf("%s",Uncompress(p->name));
 8008558:	4e0e      	ldr	r6, [pc, #56]	; (8008594 <DecodePrintPeripherals+0x48>)
    if((p+1)->name != NULL) {
      col += printf(", ");
 800855a:	4f0f      	ldr	r7, [pc, #60]	; (8008598 <DecodePrintPeripherals+0x4c>)
      if(col > 70) {
	col = 8;
	printf("\n\t");
 800855c:	f8df 803c 	ldr.w	r8, [pc, #60]	; 800859c <DecodePrintPeripherals+0x50>
  col = 8;
 8008560:	2508      	movs	r5, #8
  for(; p->name != NULL; p++) {
 8008562:	6820      	ldr	r0, [r4, #0]
 8008564:	b908      	cbnz	r0, 800856a <DecodePrintPeripherals+0x1e>
      }
    }
  }
}
 8008566:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    col += printf("%s",Uncompress(p->name));
 800856a:	f7ff fedb 	bl	8008324 <Uncompress>
 800856e:	4601      	mov	r1, r0
 8008570:	4630      	mov	r0, r6
 8008572:	f7f7 ff63 	bl	800043c <printf>
    if((p+1)->name != NULL) {
 8008576:	6923      	ldr	r3, [r4, #16]
    col += printf("%s",Uncompress(p->name));
 8008578:	4405      	add	r5, r0
    if((p+1)->name != NULL) {
 800857a:	b14b      	cbz	r3, 8008590 <DecodePrintPeripherals+0x44>
      col += printf(", ");
 800857c:	4638      	mov	r0, r7
 800857e:	f7f7 ff5d 	bl	800043c <printf>
 8008582:	4405      	add	r5, r0
      if(col > 70) {
 8008584:	2d46      	cmp	r5, #70	; 0x46
 8008586:	d903      	bls.n	8008590 <DecodePrintPeripherals+0x44>
	printf("\n\t");
 8008588:	4640      	mov	r0, r8
 800858a:	f7f7 ff57 	bl	800043c <printf>
	col = 8;
 800858e:	2508      	movs	r5, #8
  for(; p->name != NULL; p++) {
 8008590:	3410      	adds	r4, #16
 8008592:	e7e6      	b.n	8008562 <DecodePrintPeripherals+0x16>
 8008594:	0800d588 	.word	0x0800d588
 8008598:	0800d5a7 	.word	0x0800d5a7
 800859c:	0800d636 	.word	0x0800d636

080085a0 <DecodePrintRegisters>:

void DecodePrintRegisters(const Register_t *r,uint32_t count) {
 80085a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085a4:	4606      	mov	r6, r0
  uint8_t col;
  col = 8;
  printf("\t");
 80085a6:	2009      	movs	r0, #9
void DecodePrintRegisters(const Register_t *r,uint32_t count) {
 80085a8:	460d      	mov	r5, r1
  printf("\t");
 80085aa:	f7f7 ff5f 	bl	800046c <putchar>
  while(count--) {
    col += printf("%s",Uncompress(r->name));
 80085ae:	4f12      	ldr	r7, [pc, #72]	; (80085f8 <DecodePrintRegisters+0x58>)
    if(count) {
      col += printf(", ");
 80085b0:	f8df 8048 	ldr.w	r8, [pc, #72]	; 80085fc <DecodePrintRegisters+0x5c>
      if(col > 70) {
	col = 8;
	printf("\n\t");
 80085b4:	f8df 9048 	ldr.w	r9, [pc, #72]	; 8008600 <DecodePrintRegisters+0x60>
 80085b8:	3d01      	subs	r5, #1
 80085ba:	3610      	adds	r6, #16
  col = 8;
 80085bc:	2408      	movs	r4, #8
  while(count--) {
 80085be:	1c6b      	adds	r3, r5, #1
 80085c0:	d101      	bne.n	80085c6 <DecodePrintRegisters+0x26>
      }
    }
    r++;
  }
}
 80085c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    col += printf("%s",Uncompress(r->name));
 80085c6:	f856 0c10 	ldr.w	r0, [r6, #-16]
 80085ca:	f7ff feab 	bl	8008324 <Uncompress>
 80085ce:	4601      	mov	r1, r0
 80085d0:	4638      	mov	r0, r7
 80085d2:	f7f7 ff33 	bl	800043c <printf>
 80085d6:	4420      	add	r0, r4
 80085d8:	b2c4      	uxtb	r4, r0
    if(count) {
 80085da:	b155      	cbz	r5, 80085f2 <DecodePrintRegisters+0x52>
      col += printf(", ");
 80085dc:	4640      	mov	r0, r8
 80085de:	f7f7 ff2d 	bl	800043c <printf>
 80085e2:	4420      	add	r0, r4
 80085e4:	b2c4      	uxtb	r4, r0
      if(col > 70) {
 80085e6:	2c46      	cmp	r4, #70	; 0x46
 80085e8:	d903      	bls.n	80085f2 <DecodePrintRegisters+0x52>
	printf("\n\t");
 80085ea:	4648      	mov	r0, r9
 80085ec:	f7f7 ff26 	bl	800043c <printf>
	col = 8;
 80085f0:	2408      	movs	r4, #8
    r++;
 80085f2:	3d01      	subs	r5, #1
 80085f4:	3610      	adds	r6, #16
 80085f6:	e7e2      	b.n	80085be <DecodePrintRegisters+0x1e>
 80085f8:	0800d588 	.word	0x0800d588
 80085fc:	0800d5a7 	.word	0x0800d5a7
 8008600:	0800d636 	.word	0x0800d636

08008604 <CmdDecode>:

void CmdDecode(int mode)
{
 8008604:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t val,oval,t,m,i;
  Peripheral_t const *p;
  Register_t const *r;
  Field_t const *f;

  if(mode == CMD_LONG_HELP) {
 8008606:	2802      	cmp	r0, #2
{
 8008608:	b085      	sub	sp, #20
  if(mode == CMD_LONG_HELP) {
 800860a:	d132      	bne.n	8008672 <CmdDecode+0x6e>
    /* Try to fetch a peripheral name, then just give general help */
    rc = fetch_string_arg(&n);
 800860c:	a803      	add	r0, sp, #12
 800860e:	f7ff fc29 	bl	8007e64 <fetch_string_arg>
    if(rc) {
 8008612:	b148      	cbz	r0, 8008628 <CmdDecode+0x24>
      /* nothing to fetch, general help */
      printf("decode {<periph> {<reg>}|full}\n"
 8008614:	4886      	ldr	r0, [pc, #536]	; (8008830 <CmdDecode+0x22c>)
 8008616:	f7f7 ff65 	bl	80004e4 <puts>
	     "The forms with <val> on the end allow you to set the\n"
	     "selected register/field value\n"
	     "\n"
	     "Valid peripherals are:\n"
	     "\n");
      DecodePrintPeripherals(Peripherals);
 800861a:	4886      	ldr	r0, [pc, #536]	; (8008834 <CmdDecode+0x230>)
 800861c:	f7ff ff96 	bl	800854c <DecodePrintPeripherals>
      printf("\n\n"
 8008620:	4885      	ldr	r0, [pc, #532]	; (8008838 <CmdDecode+0x234>)
      }
      printf("Valid registers for peripheral %s:\n"
	     "\n",
	     Uncompress(p->name));
      DecodePrintRegisters(p->registers,p->numRegisters);
      printf("\n\n");
 8008622:	f7f7 ff5f 	bl	80004e4 <puts>
 8008626:	e016      	b.n	8008656 <CmdDecode+0x52>
      p = Peripherals;
 8008628:	4c82      	ldr	r4, [pc, #520]	; (8008834 <CmdDecode+0x230>)
 800862a:	e008      	b.n	800863e <CmdDecode+0x3a>
      while((p->name != NULL) && strcasecmp(n,Uncompress(p->name))) {
 800862c:	9d03      	ldr	r5, [sp, #12]
 800862e:	f7ff fe79 	bl	8008324 <Uncompress>
 8008632:	4601      	mov	r1, r0
 8008634:	4628      	mov	r0, r5
 8008636:	f7f8 f817 	bl	8000668 <strcasecmp>
 800863a:	b118      	cbz	r0, 8008644 <CmdDecode+0x40>
	p++;
 800863c:	3410      	adds	r4, #16
      while((p->name != NULL) && strcasecmp(n,Uncompress(p->name))) {
 800863e:	6820      	ldr	r0, [r4, #0]
 8008640:	2800      	cmp	r0, #0
 8008642:	d1f3      	bne.n	800862c <CmdDecode+0x28>
      if(p->name == NULL) {
 8008644:	6820      	ldr	r0, [r4, #0]
 8008646:	b940      	cbnz	r0, 800865a <CmdDecode+0x56>
	printf("%s is not a valid peripheral name\n"
 8008648:	9903      	ldr	r1, [sp, #12]
 800864a:	487c      	ldr	r0, [pc, #496]	; (800883c <CmdDecode+0x238>)
 800864c:	f7f7 fef6 	bl	800043c <printf>
	DecodePrintPeripherals(Peripherals);
 8008650:	4878      	ldr	r0, [pc, #480]	; (8008834 <CmdDecode+0x230>)
 8008652:	f7ff ff7b 	bl	800854c <DecodePrintPeripherals>
  /* Read and dump the register, decode all fields */
  val = DecodeReadRegister(p,r);
  DecodeRegister(r,p->base, val,1);

  return;
}
 8008656:	b005      	add	sp, #20
 8008658:	bdf0      	pop	{r4, r5, r6, r7, pc}
      printf("Valid registers for peripheral %s:\n"
 800865a:	f7ff fe63 	bl	8008324 <Uncompress>
 800865e:	4601      	mov	r1, r0
 8008660:	4877      	ldr	r0, [pc, #476]	; (8008840 <CmdDecode+0x23c>)
 8008662:	f7f7 feeb 	bl	800043c <printf>
      DecodePrintRegisters(p->registers,p->numRegisters);
 8008666:	89a1      	ldrh	r1, [r4, #12]
 8008668:	68a0      	ldr	r0, [r4, #8]
 800866a:	f7ff ff99 	bl	80085a0 <DecodePrintRegisters>
      printf("\n\n");
 800866e:	4875      	ldr	r0, [pc, #468]	; (8008844 <CmdDecode+0x240>)
 8008670:	e7d7      	b.n	8008622 <CmdDecode+0x1e>
  rc = fetch_string_arg(&pname);
 8008672:	4668      	mov	r0, sp
 8008674:	f7ff fbf6 	bl	8007e64 <fetch_string_arg>
  if(rc) {
 8008678:	b178      	cbz	r0, 800869a <CmdDecode+0x96>
    printf("Missing peripheral name, please chose one of:\n\n");
 800867a:	4873      	ldr	r0, [pc, #460]	; (8008848 <CmdDecode+0x244>)
 800867c:	f7f7 ff32 	bl	80004e4 <puts>
    DecodePrintPeripherals(Peripherals);
 8008680:	486c      	ldr	r0, [pc, #432]	; (8008834 <CmdDecode+0x230>)
 8008682:	f7ff ff63 	bl	800854c <DecodePrintPeripherals>
    printf("\n\n");
 8008686:	e7f2      	b.n	800866e <CmdDecode+0x6a>
    p++;
 8008688:	3410      	adds	r4, #16
  while((p->name != NULL) && strcasecmp(pname,Uncompress(p->name))) {
 800868a:	6820      	ldr	r0, [r4, #0]
 800868c:	9d00      	ldr	r5, [sp, #0]
 800868e:	b930      	cbnz	r0, 800869e <CmdDecode+0x9a>
    printf("'%s' is not a valid peripheral name, valid names for are:\n\n",
 8008690:	9900      	ldr	r1, [sp, #0]
 8008692:	486e      	ldr	r0, [pc, #440]	; (800884c <CmdDecode+0x248>)
 8008694:	f7f7 fed2 	bl	800043c <printf>
 8008698:	e7f2      	b.n	8008680 <CmdDecode+0x7c>
  p = Peripherals;
 800869a:	4c66      	ldr	r4, [pc, #408]	; (8008834 <CmdDecode+0x230>)
 800869c:	e7f5      	b.n	800868a <CmdDecode+0x86>
  while((p->name != NULL) && strcasecmp(pname,Uncompress(p->name))) {
 800869e:	f7ff fe41 	bl	8008324 <Uncompress>
 80086a2:	4601      	mov	r1, r0
 80086a4:	4628      	mov	r0, r5
 80086a6:	f7f7 ffdf 	bl	8000668 <strcasecmp>
 80086aa:	4605      	mov	r5, r0
 80086ac:	2800      	cmp	r0, #0
 80086ae:	d1eb      	bne.n	8008688 <CmdDecode+0x84>
  if(p->name == NULL) {
 80086b0:	6823      	ldr	r3, [r4, #0]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d0ec      	beq.n	8008690 <CmdDecode+0x8c>
  rc = fetch_string_arg(&rname);
 80086b6:	a801      	add	r0, sp, #4
 80086b8:	f7ff fbd4 	bl	8007e64 <fetch_string_arg>
  if(rc) {
 80086bc:	b120      	cbz	r0, 80086c8 <CmdDecode+0xc4>
    DecodePeripheral(p,0);
 80086be:	4629      	mov	r1, r5
      DecodePeripheral(p,1);
 80086c0:	4620      	mov	r0, r4
 80086c2:	f7ff ff19 	bl	80084f8 <DecodePeripheral>
      return;
 80086c6:	e7c6      	b.n	8008656 <CmdDecode+0x52>
  r = p->registers;
 80086c8:	68a5      	ldr	r5, [r4, #8]
  i = p->numRegisters;
 80086ca:	89a7      	ldrh	r7, [r4, #12]
  while((i--) && strcasecmp(rname,Uncompress(r->name))) {
 80086cc:	9e01      	ldr	r6, [sp, #4]
 80086ce:	2f00      	cmp	r7, #0
 80086d0:	f000 809e 	beq.w	8008810 <CmdDecode+0x20c>
 80086d4:	6828      	ldr	r0, [r5, #0]
 80086d6:	f7ff fe25 	bl	8008324 <Uncompress>
 80086da:	4601      	mov	r1, r0
 80086dc:	4630      	mov	r0, r6
 80086de:	f7f7 ffc3 	bl	8000668 <strcasecmp>
 80086e2:	3f01      	subs	r7, #1
 80086e4:	b958      	cbnz	r0, 80086fe <CmdDecode+0xfa>
  rc = fetch_string_arg(&fname);
 80086e6:	a802      	add	r0, sp, #8
 80086e8:	f7ff fbbc 	bl	8007e64 <fetch_string_arg>
  if(rc == 0) {
 80086ec:	b158      	cbz	r0, 8008706 <CmdDecode+0x102>
  val = DecodeReadRegister(p,r);
 80086ee:	4629      	mov	r1, r5
 80086f0:	4620      	mov	r0, r4
 80086f2:	f7ff fe55 	bl	80083a0 <DecodeReadRegister>
  DecodeRegister(r,p->base, val,1);
 80086f6:	2301      	movs	r3, #1
  val = DecodeReadRegister(p,r);
 80086f8:	4602      	mov	r2, r0
 80086fa:	9003      	str	r0, [sp, #12]
  DecodeRegister(r,p->base, val,1);
 80086fc:	e010      	b.n	8008720 <CmdDecode+0x11c>
    r++;
 80086fe:	3510      	adds	r5, #16
 8008700:	e7e4      	b.n	80086cc <CmdDecode+0xc8>
      DecodePeripheral(p,1);
 8008702:	2101      	movs	r1, #1
 8008704:	e7dc      	b.n	80086c0 <CmdDecode+0xbc>
    if(strcasecmp(fname,"val") == 0) {
 8008706:	4952      	ldr	r1, [pc, #328]	; (8008850 <CmdDecode+0x24c>)
 8008708:	9802      	ldr	r0, [sp, #8]
 800870a:	f7f7 ffad 	bl	8000668 <strcasecmp>
 800870e:	b960      	cbnz	r0, 800872a <CmdDecode+0x126>
      rc = fetch_uint32_arg(&val);
 8008710:	a803      	add	r0, sp, #12
 8008712:	f7ff fb93 	bl	8007e3c <fetch_uint32_arg>
      if(rc) {
 8008716:	b108      	cbz	r0, 800871c <CmdDecode+0x118>
	printf("Missing value to use in decode\n");
 8008718:	484e      	ldr	r0, [pc, #312]	; (8008854 <CmdDecode+0x250>)
 800871a:	e782      	b.n	8008622 <CmdDecode+0x1e>
      DecodeRegister(r,p->base,val,1);
 800871c:	9a03      	ldr	r2, [sp, #12]
 800871e:	2301      	movs	r3, #1
  DecodeRegister(r,p->base, val,1);
 8008720:	6861      	ldr	r1, [r4, #4]
 8008722:	4628      	mov	r0, r5
 8008724:	f7ff feb8 	bl	8008498 <DecodeRegister>
  return;
 8008728:	e795      	b.n	8008656 <CmdDecode+0x52>
    f = r->fields;
 800872a:	68ae      	ldr	r6, [r5, #8]
    while((f->name != NULL) && strcasecmp(fname,Uncompress(f->name))) {
 800872c:	6830      	ldr	r0, [r6, #0]
 800872e:	2800      	cmp	r0, #0
 8008730:	d049      	beq.n	80087c6 <CmdDecode+0x1c2>
 8008732:	9f02      	ldr	r7, [sp, #8]
 8008734:	f7ff fdf6 	bl	8008324 <Uncompress>
 8008738:	4601      	mov	r1, r0
 800873a:	4638      	mov	r0, r7
 800873c:	f7f7 ff94 	bl	8000668 <strcasecmp>
 8008740:	b970      	cbnz	r0, 8008760 <CmdDecode+0x15c>
    if(f->name != NULL) {
 8008742:	6833      	ldr	r3, [r6, #0]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d03e      	beq.n	80087c6 <CmdDecode+0x1c2>
      rc = fetch_uint32_arg(&val);
 8008748:	a803      	add	r0, sp, #12
 800874a:	f7ff fb77 	bl	8007e3c <fetch_uint32_arg>
      if(rc) {
 800874e:	b148      	cbz	r0, 8008764 <CmdDecode+0x160>
	printf("Missing Value to program into register %s\n",
 8008750:	6828      	ldr	r0, [r5, #0]
 8008752:	f7ff fde7 	bl	8008324 <Uncompress>
 8008756:	4601      	mov	r1, r0
 8008758:	483f      	ldr	r0, [pc, #252]	; (8008858 <CmdDecode+0x254>)
      printf("Invalid number '%s' entered.\n",
 800875a:	f7f7 fe6f 	bl	800043c <printf>
      return;
 800875e:	e77a      	b.n	8008656 <CmdDecode+0x52>
      f++;
 8008760:	3608      	adds	r6, #8
 8008762:	e7e3      	b.n	800872c <CmdDecode+0x128>
      t = DecodeReadRegister(p,r);
 8008764:	4629      	mov	r1, r5
 8008766:	4620      	mov	r0, r4
 8008768:	f7ff fe1a 	bl	80083a0 <DecodeReadRegister>
      m = (1<<f->width)-1;
 800876c:	7972      	ldrb	r2, [r6, #5]
 800876e:	2301      	movs	r3, #1
 8008770:	4093      	lsls	r3, r2
      oval = (t >> f->offset) & m; /* Save old value */
 8008772:	7932      	ldrb	r2, [r6, #4]
      m = (1<<f->width)-1;
 8008774:	3b01      	subs	r3, #1
      t &= ~(m << f->offset);
 8008776:	fa03 f102 	lsl.w	r1, r3, r2
      oval = (t >> f->offset) & m; /* Save old value */
 800877a:	fa20 f702 	lsr.w	r7, r0, r2
      t &= ~(m << f->offset);
 800877e:	ea20 0001 	bic.w	r0, r0, r1
      t |= (val & m) << f->offset;
 8008782:	9903      	ldr	r1, [sp, #12]
      oval = (t >> f->offset) & m; /* Save old value */
 8008784:	401f      	ands	r7, r3
      t |= (val & m) << f->offset;
 8008786:	400b      	ands	r3, r1
 8008788:	fa03 f202 	lsl.w	r2, r3, r2
      DecodeWriteRegister(p,r,t);
 800878c:	4302      	orrs	r2, r0
 800878e:	4629      	mov	r1, r5
 8008790:	4620      	mov	r0, r4
 8008792:	f7ff fe2f 	bl	80083f4 <DecodeWriteRegister>
      printf("%s.",
 8008796:	6820      	ldr	r0, [r4, #0]
 8008798:	f7ff fdc4 	bl	8008324 <Uncompress>
 800879c:	4601      	mov	r1, r0
 800879e:	482f      	ldr	r0, [pc, #188]	; (800885c <CmdDecode+0x258>)
 80087a0:	f7f7 fe4c 	bl	800043c <printf>
      printf("%s.",
 80087a4:	6828      	ldr	r0, [r5, #0]
 80087a6:	f7ff fdbd 	bl	8008324 <Uncompress>
 80087aa:	4601      	mov	r1, r0
 80087ac:	482b      	ldr	r0, [pc, #172]	; (800885c <CmdDecode+0x258>)
 80087ae:	f7f7 fe45 	bl	800043c <printf>
      printf("%s (%d) -> (%d)\n",
 80087b2:	6830      	ldr	r0, [r6, #0]
 80087b4:	f7ff fdb6 	bl	8008324 <Uncompress>
 80087b8:	9b03      	ldr	r3, [sp, #12]
 80087ba:	4601      	mov	r1, r0
 80087bc:	463a      	mov	r2, r7
 80087be:	4828      	ldr	r0, [pc, #160]	; (8008860 <CmdDecode+0x25c>)
 80087c0:	f7f7 fe3c 	bl	800043c <printf>
      return;
 80087c4:	e747      	b.n	8008656 <CmdDecode+0x52>
    errno = 0;
 80087c6:	f7f7 fd97 	bl	80002f8 <__errno>
 80087ca:	2200      	movs	r2, #0
 80087cc:	6002      	str	r2, [r0, #0]
    val = strtoul(fname,NULL,0);
 80087ce:	4611      	mov	r1, r2
 80087d0:	9802      	ldr	r0, [sp, #8]
 80087d2:	f7f8 f92d 	bl	8000a30 <strtoul>
 80087d6:	9003      	str	r0, [sp, #12]
    if(errno != 0) {
 80087d8:	f7f7 fd8e 	bl	80002f8 <__errno>
 80087dc:	6803      	ldr	r3, [r0, #0]
 80087de:	b113      	cbz	r3, 80087e6 <CmdDecode+0x1e2>
      printf("Invalid number '%s' entered.\n",
 80087e0:	9902      	ldr	r1, [sp, #8]
 80087e2:	4820      	ldr	r0, [pc, #128]	; (8008864 <CmdDecode+0x260>)
 80087e4:	e7b9      	b.n	800875a <CmdDecode+0x156>
    DecodeWriteRegister(p,r,val);
 80087e6:	9a03      	ldr	r2, [sp, #12]
 80087e8:	4629      	mov	r1, r5
 80087ea:	4620      	mov	r0, r4
 80087ec:	f7ff fe02 	bl	80083f4 <DecodeWriteRegister>
    printf("%s.",
 80087f0:	6820      	ldr	r0, [r4, #0]
 80087f2:	f7ff fd97 	bl	8008324 <Uncompress>
 80087f6:	4601      	mov	r1, r0
 80087f8:	4818      	ldr	r0, [pc, #96]	; (800885c <CmdDecode+0x258>)
 80087fa:	f7f7 fe1f 	bl	800043c <printf>
    printf("%s = 0x%08x\n",
 80087fe:	6828      	ldr	r0, [r5, #0]
 8008800:	f7ff fd90 	bl	8008324 <Uncompress>
 8008804:	9a03      	ldr	r2, [sp, #12]
 8008806:	4601      	mov	r1, r0
 8008808:	4817      	ldr	r0, [pc, #92]	; (8008868 <CmdDecode+0x264>)
 800880a:	f7f7 fe17 	bl	800043c <printf>
    return;
 800880e:	e722      	b.n	8008656 <CmdDecode+0x52>
    if(strcasecmp(rname,"full") == 0) {
 8008810:	4916      	ldr	r1, [pc, #88]	; (800886c <CmdDecode+0x268>)
 8008812:	4630      	mov	r0, r6
 8008814:	f7f7 ff28 	bl	8000668 <strcasecmp>
 8008818:	2800      	cmp	r0, #0
 800881a:	f43f af72 	beq.w	8008702 <CmdDecode+0xfe>
    printf("'%s' is not a valid register name, valid names for %s are:\n\n",
 800881e:	6820      	ldr	r0, [r4, #0]
 8008820:	f7ff fd80 	bl	8008324 <Uncompress>
 8008824:	4631      	mov	r1, r6
 8008826:	4602      	mov	r2, r0
 8008828:	4811      	ldr	r0, [pc, #68]	; (8008870 <CmdDecode+0x26c>)
 800882a:	f7f7 fe07 	bl	800043c <printf>
    DecodePrintRegisters(p->registers,p->numRegisters);
 800882e:	e71a      	b.n	8008666 <CmdDecode+0x62>
 8008830:	0800d639 	.word	0x0800d639
 8008834:	08017eec 	.word	0x08017eec
 8008838:	0800d84c 	.word	0x0800d84c
 800883c:	0800d8a1 	.word	0x0800d8a1
 8008840:	0800d8dc 	.word	0x0800d8dc
 8008844:	0800d96a 	.word	0x0800d96a
 8008848:	0800d901 	.word	0x0800d901
 800884c:	0800d930 	.word	0x0800d930
 8008850:	0800d9a9 	.word	0x0800d9a9
 8008854:	0800d9ad 	.word	0x0800d9ad
 8008858:	0800d9cc 	.word	0x0800d9cc
 800885c:	0800d9f7 	.word	0x0800d9f7
 8008860:	0800d9fb 	.word	0x0800d9fb
 8008864:	0800da0c 	.word	0x0800da0c
 8008868:	0800da2a 	.word	0x0800da2a
 800886c:	0800da37 	.word	0x0800da37
 8008870:	0800d96c 	.word	0x0800d96c

08008874 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008874:	4915      	ldr	r1, [pc, #84]	; (80088cc <SystemInit+0x58>)
 8008876:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800887a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800887e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8008882:	4b13      	ldr	r3, [pc, #76]	; (80088d0 <SystemInit+0x5c>)
 8008884:	681a      	ldr	r2, [r3, #0]
 8008886:	f042 0201 	orr.w	r2, r2, #1
 800888a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 800888c:	6858      	ldr	r0, [r3, #4]
 800888e:	4a11      	ldr	r2, [pc, #68]	; (80088d4 <SystemInit+0x60>)
 8008890:	4002      	ands	r2, r0
 8008892:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8008894:	681a      	ldr	r2, [r3, #0]
 8008896:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800889a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800889e:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80088a0:	681a      	ldr	r2, [r3, #0]
 80088a2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80088a6:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80088a8:	685a      	ldr	r2, [r3, #4]
 80088aa:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80088ae:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 80088b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088b2:	f022 020f 	bic.w	r2, r2, #15
 80088b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 80088b8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80088ba:	4a07      	ldr	r2, [pc, #28]	; (80088d8 <SystemInit+0x64>)
 80088bc:	4002      	ands	r2, r0
 80088be:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80088c0:	2200      	movs	r2, #0
 80088c2:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80088c4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80088c8:	608b      	str	r3, [r1, #8]
#endif
}
 80088ca:	4770      	bx	lr
 80088cc:	e000ed00 	.word	0xe000ed00
 80088d0:	40021000 	.word	0x40021000
 80088d4:	f87fc00c 	.word	0xf87fc00c
 80088d8:	ff00fccc 	.word	0xff00fccc

080088dc <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80088dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80088e0:	6803      	ldr	r3, [r0, #0]
 80088e2:	07db      	lsls	r3, r3, #31
{
 80088e4:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80088e6:	d46c      	bmi.n	80089c2 <HAL_RCC_OscConfig+0xe6>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80088e8:	6823      	ldr	r3, [r4, #0]
 80088ea:	079f      	lsls	r7, r3, #30
 80088ec:	f100 8128 	bmi.w	8008b40 <HAL_RCC_OscConfig+0x264>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80088f0:	6823      	ldr	r3, [r4, #0]
 80088f2:	0719      	lsls	r1, r3, #28
 80088f4:	f100 81b6 	bmi.w	8008c64 <HAL_RCC_OscConfig+0x388>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80088f8:	6823      	ldr	r3, [r4, #0]
 80088fa:	075a      	lsls	r2, r3, #29
 80088fc:	d55b      	bpl.n	80089b6 <HAL_RCC_OscConfig+0xda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable Power Clock */
    __PWR_CLK_ENABLE();
 80088fe:	4dae      	ldr	r5, [pc, #696]	; (8008bb8 <HAL_RCC_OscConfig+0x2dc>)

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR, PWR_CR_DBP);
 8008900:	4eae      	ldr	r6, [pc, #696]	; (8008bbc <HAL_RCC_OscConfig+0x2e0>)
    __PWR_CLK_ENABLE();
 8008902:	69eb      	ldr	r3, [r5, #28]
 8008904:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008908:	61eb      	str	r3, [r5, #28]
    SET_BIT(PWR->CR, PWR_CR_DBP);
 800890a:	6833      	ldr	r3, [r6, #0]
 800890c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008910:	6033      	str	r3, [r6, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008912:	f000 fc9b 	bl	800924c <HAL_GetTick>
 8008916:	4607      	mov	r7, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008918:	6833      	ldr	r3, [r6, #0]
 800891a:	05db      	lsls	r3, r3, #23
 800891c:	f140 81ea 	bpl.w	8008cf4 <HAL_RCC_OscConfig+0x418>
        return HAL_TIMEOUT;
      }      
    }

    /* Reset LSEON and LSEBYP bits before configuring the LSE ----------------*/
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 8008920:	6a2b      	ldr	r3, [r5, #32]
 8008922:	f023 0305 	bic.w	r3, r3, #5
 8008926:	622b      	str	r3, [r5, #32]
    
    /* Get timeout */
    tickstart = HAL_GetTick();
 8008928:	f000 fc90 	bl	800924c <HAL_GetTick>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800892c:	2602      	movs	r6, #2
 800892e:	4607      	mov	r7, r0
      
    /* Wait till LSE is ready */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008930:	f04f 0801 	mov.w	r8, #1
 8008934:	fa96 f3a6 	rbit	r3, r6
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008938:	fab3 f383 	clz	r3, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800893c:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008940:	fab3 f383 	clz	r3, r3
 8008944:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8008948:	f033 0302 	bics.w	r3, r3, #2
 800894c:	bf0c      	ite	eq
 800894e:	6a2a      	ldreq	r2, [r5, #32]
 8008950:	6a6a      	ldrne	r2, [r5, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008952:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008956:	fab3 f383 	clz	r3, r3
 800895a:	f003 031f 	and.w	r3, r3, #31
 800895e:	fa08 f303 	lsl.w	r3, r8, r3
 8008962:	4213      	tst	r3, r2
 8008964:	f040 81cd 	bne.w	8008d02 <HAL_RCC_OscConfig+0x426>
        return HAL_TIMEOUT;
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008968:	6a2b      	ldr	r3, [r5, #32]
 800896a:	68e6      	ldr	r6, [r4, #12]
 800896c:	f023 0305 	bic.w	r3, r3, #5
 8008970:	4333      	orrs	r3, r6
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8008972:	2e01      	cmp	r6, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008974:	622b      	str	r3, [r5, #32]
    if(RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8008976:	f040 81d7 	bne.w	8008d28 <HAL_RCC_OscConfig+0x44c>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 800897a:	f000 fc67 	bl	800924c <HAL_GetTick>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800897e:	2702      	movs	r7, #2
 8008980:	4680      	mov	r8, r0
 8008982:	fa97 f3a7 	rbit	r3, r7
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008986:	fab3 f383 	clz	r3, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800898a:	fa97 f3a7 	rbit	r3, r7
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800898e:	fab3 f383 	clz	r3, r3
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008992:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8008996:	f033 0302 	bics.w	r3, r3, #2
 800899a:	bf0c      	ite	eq
 800899c:	6a2a      	ldreq	r2, [r5, #32]
 800899e:	6a6a      	ldrne	r2, [r5, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80089a0:	fa97 f3a7 	rbit	r3, r7
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80089a4:	fab3 f383 	clz	r3, r3
 80089a8:	f003 031f 	and.w	r3, r3, #31
 80089ac:	fa06 f303 	lsl.w	r3, r6, r3
 80089b0:	4213      	tst	r3, r2
 80089b2:	f000 81af 	beq.w	8008d14 <HAL_RCC_OscConfig+0x438>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80089b6:	69e2      	ldr	r2, [r4, #28]
 80089b8:	2a00      	cmp	r2, #0
 80089ba:	f040 81dd 	bne.w	8008d78 <HAL_RCC_OscConfig+0x49c>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 80089be:	2000      	movs	r0, #0
 80089c0:	e02c      	b.n	8008a1c <HAL_RCC_OscConfig+0x140>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80089c2:	4d7d      	ldr	r5, [pc, #500]	; (8008bb8 <HAL_RCC_OscConfig+0x2dc>)
 80089c4:	686b      	ldr	r3, [r5, #4]
 80089c6:	f003 030c 	and.w	r3, r3, #12
 80089ca:	2b04      	cmp	r3, #4
 80089cc:	d007      	beq.n	80089de <HAL_RCC_OscConfig+0x102>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80089ce:	686b      	ldr	r3, [r5, #4]
 80089d0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80089d4:	2b08      	cmp	r3, #8
 80089d6:	d129      	bne.n	8008a2c <HAL_RCC_OscConfig+0x150>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80089d8:	686b      	ldr	r3, [r5, #4]
 80089da:	03de      	lsls	r6, r3, #15
 80089dc:	d526      	bpl.n	8008a2c <HAL_RCC_OscConfig+0x150>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80089de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80089e2:	fa93 f2a3 	rbit	r2, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80089e6:	fab2 f282 	clz	r2, r2
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState != RCC_HSE_ON))
 80089ea:	f3c2 1242 	ubfx	r2, r2, #5, #3
 80089ee:	f032 0201 	bics.w	r2, r2, #1
 80089f2:	d115      	bne.n	8008a20 <HAL_RCC_OscConfig+0x144>
 80089f4:	6829      	ldr	r1, [r5, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80089f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80089fa:	fa93 f3a3 	rbit	r3, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80089fe:	fab3 f383 	clz	r3, r3
 8008a02:	2201      	movs	r2, #1
 8008a04:	f003 031f 	and.w	r3, r3, #31
 8008a08:	fa02 f303 	lsl.w	r3, r2, r3
 8008a0c:	420b      	tst	r3, r1
 8008a0e:	f43f af6b 	beq.w	80088e8 <HAL_RCC_OscConfig+0xc>
 8008a12:	6863      	ldr	r3, [r4, #4]
 8008a14:	4293      	cmp	r3, r2
 8008a16:	f43f af67 	beq.w	80088e8 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8008a1a:	2001      	movs	r0, #1
}
 8008a1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a20:	fa93 f3a3 	rbit	r3, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008a24:	fab3 f383 	clz	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState != RCC_HSE_ON))
 8008a28:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8008a2a:	e7e4      	b.n	80089f6 <HAL_RCC_OscConfig+0x11a>
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	70ab      	strb	r3, [r5, #2]
      tickstart = HAL_GetTick();
 8008a30:	f000 fc0c 	bl	800924c <HAL_GetTick>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a34:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8008a38:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008a3a:	f04f 0801 	mov.w	r8, #1
        if((HAL_GetTick()-tickstart) > HSE_TIMEOUT_VALUE)
 8008a3e:	f241 3988 	movw	r9, #5000	; 0x1388
 8008a42:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008a46:	fab3 f383 	clz	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008a4a:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8008a4e:	f033 0301 	bics.w	r3, r3, #1
 8008a52:	d13f      	bne.n	8008ad4 <HAL_RCC_OscConfig+0x1f8>
 8008a54:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a56:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008a5a:	fab3 f383 	clz	r3, r3
 8008a5e:	f003 031f 	and.w	r3, r3, #31
 8008a62:	fa08 f303 	lsl.w	r3, r8, r3
 8008a66:	4213      	tst	r3, r2
 8008a68:	d12d      	bne.n	8008ac6 <HAL_RCC_OscConfig+0x1ea>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008a6a:	7923      	ldrb	r3, [r4, #4]
 8008a6c:	70ab      	strb	r3, [r5, #2]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8008a6e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8008a70:	68a2      	ldr	r2, [r4, #8]
 8008a72:	f023 030f 	bic.w	r3, r3, #15
 8008a76:	4313      	orrs	r3, r2
 8008a78:	62eb      	str	r3, [r5, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState == RCC_HSE_ON)
 8008a7a:	6866      	ldr	r6, [r4, #4]
 8008a7c:	2e01      	cmp	r6, #1
 8008a7e:	d135      	bne.n	8008aec <HAL_RCC_OscConfig+0x210>
        tickstart = HAL_GetTick();
 8008a80:	f000 fbe4 	bl	800924c <HAL_GetTick>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a84:	f44f 3700 	mov.w	r7, #131072	; 0x20000
 8008a88:	4680      	mov	r8, r0
          if((HAL_GetTick()-tickstart) > HSE_TIMEOUT_VALUE)
 8008a8a:	f241 3988 	movw	r9, #5000	; 0x1388
 8008a8e:	fa97 f3a7 	rbit	r3, r7
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008a92:	fab3 f383 	clz	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008a96:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8008a9a:	f033 0301 	bics.w	r3, r3, #1
 8008a9e:	d11f      	bne.n	8008ae0 <HAL_RCC_OscConfig+0x204>
 8008aa0:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008aa2:	fa97 f3a7 	rbit	r3, r7
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008aa6:	fab3 f383 	clz	r3, r3
 8008aaa:	f003 031f 	and.w	r3, r3, #31
 8008aae:	fa06 f303 	lsl.w	r3, r6, r3
 8008ab2:	4213      	tst	r3, r2
 8008ab4:	f47f af18 	bne.w	80088e8 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick()-tickstart) > HSE_TIMEOUT_VALUE)
 8008ab8:	f000 fbc8 	bl	800924c <HAL_GetTick>
 8008abc:	eba0 0008 	sub.w	r0, r0, r8
 8008ac0:	4548      	cmp	r0, r9
 8008ac2:	d9e4      	bls.n	8008a8e <HAL_RCC_OscConfig+0x1b2>
 8008ac4:	e004      	b.n	8008ad0 <HAL_RCC_OscConfig+0x1f4>
        if((HAL_GetTick()-tickstart) > HSE_TIMEOUT_VALUE)
 8008ac6:	f000 fbc1 	bl	800924c <HAL_GetTick>
 8008aca:	1bc0      	subs	r0, r0, r7
 8008acc:	4548      	cmp	r0, r9
 8008ace:	d9b8      	bls.n	8008a42 <HAL_RCC_OscConfig+0x166>
          return HAL_TIMEOUT;
 8008ad0:	2003      	movs	r0, #3
 8008ad2:	e7a3      	b.n	8008a1c <HAL_RCC_OscConfig+0x140>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ad4:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008ad8:	fab3 f383 	clz	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008adc:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8008ade:	e7ba      	b.n	8008a56 <HAL_RCC_OscConfig+0x17a>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ae0:	fa97 f3a7 	rbit	r3, r7
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008ae4:	fab3 f383 	clz	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008ae8:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8008aea:	e7da      	b.n	8008aa2 <HAL_RCC_OscConfig+0x1c6>
        tickstart = HAL_GetTick();
 8008aec:	f000 fbae 	bl	800924c <HAL_GetTick>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008af0:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8008af4:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008af6:	f04f 0801 	mov.w	r8, #1
          if((HAL_GetTick()-tickstart) > HSE_TIMEOUT_VALUE)
 8008afa:	f241 3988 	movw	r9, #5000	; 0x1388
 8008afe:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008b02:	fab3 f383 	clz	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008b06:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8008b0a:	f033 0301 	bics.w	r3, r3, #1
 8008b0e:	d111      	bne.n	8008b34 <HAL_RCC_OscConfig+0x258>
 8008b10:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b12:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008b16:	fab3 f383 	clz	r3, r3
 8008b1a:	f003 031f 	and.w	r3, r3, #31
 8008b1e:	fa08 f303 	lsl.w	r3, r8, r3
 8008b22:	4213      	tst	r3, r2
 8008b24:	f43f aee0 	beq.w	80088e8 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick()-tickstart) > HSE_TIMEOUT_VALUE)
 8008b28:	f000 fb90 	bl	800924c <HAL_GetTick>
 8008b2c:	1bc0      	subs	r0, r0, r7
 8008b2e:	4548      	cmp	r0, r9
 8008b30:	d9e5      	bls.n	8008afe <HAL_RCC_OscConfig+0x222>
 8008b32:	e7cd      	b.n	8008ad0 <HAL_RCC_OscConfig+0x1f4>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b34:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008b38:	fab3 f383 	clz	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008b3c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8008b3e:	e7e8      	b.n	8008b12 <HAL_RCC_OscConfig+0x236>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8008b40:	4d1d      	ldr	r5, [pc, #116]	; (8008bb8 <HAL_RCC_OscConfig+0x2dc>)
 8008b42:	686b      	ldr	r3, [r5, #4]
 8008b44:	f013 0f0c 	tst.w	r3, #12
 8008b48:	d007      	beq.n	8008b5a <HAL_RCC_OscConfig+0x27e>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8008b4a:	686b      	ldr	r3, [r5, #4]
 8008b4c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8008b50:	2b08      	cmp	r3, #8
 8008b52:	d135      	bne.n	8008bc0 <HAL_RCC_OscConfig+0x2e4>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8008b54:	686b      	ldr	r3, [r5, #4]
 8008b56:	03d8      	lsls	r0, r3, #15
 8008b58:	d432      	bmi.n	8008bc0 <HAL_RCC_OscConfig+0x2e4>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b5a:	2302      	movs	r3, #2
 8008b5c:	fa93 f2a3 	rbit	r2, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008b60:	fab2 f282 	clz	r2, r2
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008b64:	f3c2 1242 	ubfx	r2, r2, #5, #3
 8008b68:	f032 0201 	bics.w	r2, r2, #1
 8008b6c:	d11e      	bne.n	8008bac <HAL_RCC_OscConfig+0x2d0>
 8008b6e:	6829      	ldr	r1, [r5, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b70:	2302      	movs	r3, #2
 8008b72:	fa93 f3a3 	rbit	r3, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008b76:	fab3 f383 	clz	r3, r3
 8008b7a:	2201      	movs	r2, #1
 8008b7c:	f003 031f 	and.w	r3, r3, #31
 8008b80:	fa02 f303 	lsl.w	r3, r2, r3
 8008b84:	420b      	tst	r3, r1
 8008b86:	d003      	beq.n	8008b90 <HAL_RCC_OscConfig+0x2b4>
 8008b88:	6923      	ldr	r3, [r4, #16]
 8008b8a:	4293      	cmp	r3, r2
 8008b8c:	f47f af45 	bne.w	8008a1a <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008b90:	6829      	ldr	r1, [r5, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b92:	23f8      	movs	r3, #248	; 0xf8
 8008b94:	fa93 f3a3 	rbit	r3, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008b98:	fab3 f383 	clz	r3, r3
 8008b9c:	6962      	ldr	r2, [r4, #20]
 8008b9e:	b2db      	uxtb	r3, r3
 8008ba0:	409a      	lsls	r2, r3
 8008ba2:	f021 03f8 	bic.w	r3, r1, #248	; 0xf8
 8008ba6:	431a      	orrs	r2, r3
 8008ba8:	602a      	str	r2, [r5, #0]
 8008baa:	e6a1      	b.n	80088f0 <HAL_RCC_OscConfig+0x14>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008bac:	fa93 f3a3 	rbit	r3, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008bb0:	fab3 f383 	clz	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008bb4:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8008bb6:	e7db      	b.n	8008b70 <HAL_RCC_OscConfig+0x294>
 8008bb8:	40021000 	.word	0x40021000
 8008bbc:	40007000 	.word	0x40007000
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008bc0:	6922      	ldr	r2, [r4, #16]
 8008bc2:	4bb3      	ldr	r3, [pc, #716]	; (8008e90 <HAL_RCC_OscConfig+0x5b4>)
 8008bc4:	b332      	cbz	r2, 8008c14 <HAL_RCC_OscConfig+0x338>
        __HAL_RCC_HSI_ENABLE();
 8008bc6:	2601      	movs	r6, #1
 8008bc8:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8008bca:	f000 fb3f 	bl	800924c <HAL_GetTick>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008bce:	2702      	movs	r7, #2
 8008bd0:	4680      	mov	r8, r0
 8008bd2:	fa97 f3a7 	rbit	r3, r7
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008bd6:	fab3 f383 	clz	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008bda:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8008bde:	f033 0301 	bics.w	r3, r3, #1
 8008be2:	d111      	bne.n	8008c08 <HAL_RCC_OscConfig+0x32c>
 8008be4:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008be6:	fa97 f3a7 	rbit	r3, r7
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008bea:	fab3 f383 	clz	r3, r3
 8008bee:	f003 031f 	and.w	r3, r3, #31
 8008bf2:	fa06 f303 	lsl.w	r3, r6, r3
 8008bf6:	4213      	tst	r3, r2
 8008bf8:	d1ca      	bne.n	8008b90 <HAL_RCC_OscConfig+0x2b4>
          if((HAL_GetTick()-tickstart) > HSI_TIMEOUT_VALUE)
 8008bfa:	f000 fb27 	bl	800924c <HAL_GetTick>
 8008bfe:	eba0 0008 	sub.w	r0, r0, r8
 8008c02:	2864      	cmp	r0, #100	; 0x64
 8008c04:	d9e5      	bls.n	8008bd2 <HAL_RCC_OscConfig+0x2f6>
 8008c06:	e763      	b.n	8008ad0 <HAL_RCC_OscConfig+0x1f4>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c08:	fa97 f3a7 	rbit	r3, r7
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008c0c:	fab3 f383 	clz	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008c10:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8008c12:	e7e8      	b.n	8008be6 <HAL_RCC_OscConfig+0x30a>
        __HAL_RCC_HSI_DISABLE();
 8008c14:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8008c16:	f000 fb19 	bl	800924c <HAL_GetTick>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c1a:	2602      	movs	r6, #2
 8008c1c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008c1e:	f04f 0801 	mov.w	r8, #1
 8008c22:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008c26:	fab3 f383 	clz	r3, r3
 8008c2a:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8008c2e:	f033 0301 	bics.w	r3, r3, #1
 8008c32:	d111      	bne.n	8008c58 <HAL_RCC_OscConfig+0x37c>
 8008c34:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c36:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008c3a:	fab3 f383 	clz	r3, r3
 8008c3e:	f003 031f 	and.w	r3, r3, #31
 8008c42:	fa08 f303 	lsl.w	r3, r8, r3
 8008c46:	4213      	tst	r3, r2
 8008c48:	f43f ae52 	beq.w	80088f0 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick()-tickstart) > HSI_TIMEOUT_VALUE)
 8008c4c:	f000 fafe 	bl	800924c <HAL_GetTick>
 8008c50:	1bc0      	subs	r0, r0, r7
 8008c52:	2864      	cmp	r0, #100	; 0x64
 8008c54:	d9e5      	bls.n	8008c22 <HAL_RCC_OscConfig+0x346>
 8008c56:	e73b      	b.n	8008ad0 <HAL_RCC_OscConfig+0x1f4>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c58:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008c5c:	fab3 f383 	clz	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008c60:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8008c62:	e7e8      	b.n	8008c36 <HAL_RCC_OscConfig+0x35a>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008c64:	69a2      	ldr	r2, [r4, #24]
 8008c66:	4d8b      	ldr	r5, [pc, #556]	; (8008e94 <HAL_RCC_OscConfig+0x5b8>)
 8008c68:	4b89      	ldr	r3, [pc, #548]	; (8008e90 <HAL_RCC_OscConfig+0x5b4>)
 8008c6a:	b30a      	cbz	r2, 8008cb0 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_LSI_ENABLE();
 8008c6c:	2701      	movs	r7, #1
 8008c6e:	f8c3 7480 	str.w	r7, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8008c72:	f000 faeb 	bl	800924c <HAL_GetTick>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c76:	2602      	movs	r6, #2
 8008c78:	4680      	mov	r8, r0
 8008c7a:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008c7e:	fab3 f383 	clz	r3, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c82:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008c86:	fab3 f383 	clz	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008c8a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c8c:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008c90:	fab3 f383 	clz	r3, r3
 8008c94:	f003 031f 	and.w	r3, r3, #31
 8008c98:	fa07 f303 	lsl.w	r3, r7, r3
 8008c9c:	4213      	tst	r3, r2
 8008c9e:	f47f ae2b 	bne.w	80088f8 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick()-tickstart) > LSI_TIMEOUT_VALUE)
 8008ca2:	f000 fad3 	bl	800924c <HAL_GetTick>
 8008ca6:	eba0 0008 	sub.w	r0, r0, r8
 8008caa:	2864      	cmp	r0, #100	; 0x64
 8008cac:	d9e5      	bls.n	8008c7a <HAL_RCC_OscConfig+0x39e>
 8008cae:	e70f      	b.n	8008ad0 <HAL_RCC_OscConfig+0x1f4>
      __HAL_RCC_LSI_DISABLE();
 8008cb0:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8008cb4:	f000 faca 	bl	800924c <HAL_GetTick>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008cb8:	2602      	movs	r6, #2
 8008cba:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008cbc:	f04f 0801 	mov.w	r8, #1
 8008cc0:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008cc4:	fab3 f383 	clz	r3, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008cc8:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008ccc:	fab3 f383 	clz	r3, r3
 8008cd0:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008cd2:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008cd6:	fab3 f383 	clz	r3, r3
 8008cda:	f003 031f 	and.w	r3, r3, #31
 8008cde:	fa08 f303 	lsl.w	r3, r8, r3
 8008ce2:	4213      	tst	r3, r2
 8008ce4:	f43f ae08 	beq.w	80088f8 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick()-tickstart) > LSI_TIMEOUT_VALUE)
 8008ce8:	f000 fab0 	bl	800924c <HAL_GetTick>
 8008cec:	1bc0      	subs	r0, r0, r7
 8008cee:	2864      	cmp	r0, #100	; 0x64
 8008cf0:	d9e6      	bls.n	8008cc0 <HAL_RCC_OscConfig+0x3e4>
 8008cf2:	e6ed      	b.n	8008ad0 <HAL_RCC_OscConfig+0x1f4>
      if((HAL_GetTick()-tickstart) > DBP_TIMEOUT_VALUE)
 8008cf4:	f000 faaa 	bl	800924c <HAL_GetTick>
 8008cf8:	1bc0      	subs	r0, r0, r7
 8008cfa:	2864      	cmp	r0, #100	; 0x64
 8008cfc:	f67f ae0c 	bls.w	8008918 <HAL_RCC_OscConfig+0x3c>
 8008d00:	e6e6      	b.n	8008ad0 <HAL_RCC_OscConfig+0x1f4>
      if((HAL_GetTick()-tickstart) > LSE_TIMEOUT_VALUE)
 8008d02:	f000 faa3 	bl	800924c <HAL_GetTick>
 8008d06:	f241 3388 	movw	r3, #5000	; 0x1388
 8008d0a:	1bc0      	subs	r0, r0, r7
 8008d0c:	4298      	cmp	r0, r3
 8008d0e:	f67f ae11 	bls.w	8008934 <HAL_RCC_OscConfig+0x58>
 8008d12:	e6dd      	b.n	8008ad0 <HAL_RCC_OscConfig+0x1f4>
        if((HAL_GetTick()-tickstart) > LSE_TIMEOUT_VALUE)
 8008d14:	f000 fa9a 	bl	800924c <HAL_GetTick>
 8008d18:	f241 3388 	movw	r3, #5000	; 0x1388
 8008d1c:	eba0 0008 	sub.w	r0, r0, r8
 8008d20:	4298      	cmp	r0, r3
 8008d22:	f67f ae2e 	bls.w	8008982 <HAL_RCC_OscConfig+0xa6>
 8008d26:	e6d3      	b.n	8008ad0 <HAL_RCC_OscConfig+0x1f4>
      tickstart = HAL_GetTick();
 8008d28:	f000 fa90 	bl	800924c <HAL_GetTick>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d2c:	2602      	movs	r6, #2
 8008d2e:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008d30:	f04f 0801 	mov.w	r8, #1
 8008d34:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008d38:	fab3 f383 	clz	r3, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d3c:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008d40:	fab3 f383 	clz	r3, r3
 8008d44:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8008d48:	f033 0302 	bics.w	r3, r3, #2
 8008d4c:	bf0c      	ite	eq
 8008d4e:	6a2a      	ldreq	r2, [r5, #32]
 8008d50:	6a6a      	ldrne	r2, [r5, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d52:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008d56:	fab3 f383 	clz	r3, r3
 8008d5a:	f003 031f 	and.w	r3, r3, #31
 8008d5e:	fa08 f303 	lsl.w	r3, r8, r3
 8008d62:	4213      	tst	r3, r2
 8008d64:	f43f ae27 	beq.w	80089b6 <HAL_RCC_OscConfig+0xda>
        if((HAL_GetTick()-tickstart) > LSE_TIMEOUT_VALUE)
 8008d68:	f000 fa70 	bl	800924c <HAL_GetTick>
 8008d6c:	f241 3388 	movw	r3, #5000	; 0x1388
 8008d70:	1bc0      	subs	r0, r0, r7
 8008d72:	4298      	cmp	r0, r3
 8008d74:	d9de      	bls.n	8008d34 <HAL_RCC_OscConfig+0x458>
 8008d76:	e6ab      	b.n	8008ad0 <HAL_RCC_OscConfig+0x1f4>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008d78:	4d46      	ldr	r5, [pc, #280]	; (8008e94 <HAL_RCC_OscConfig+0x5b8>)
 8008d7a:	686b      	ldr	r3, [r5, #4]
 8008d7c:	f003 030c 	and.w	r3, r3, #12
 8008d80:	2b08      	cmp	r3, #8
 8008d82:	f43f ae4a 	beq.w	8008a1a <HAL_RCC_OscConfig+0x13e>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008d86:	4b42      	ldr	r3, [pc, #264]	; (8008e90 <HAL_RCC_OscConfig+0x5b4>)
 8008d88:	2a02      	cmp	r2, #2
 8008d8a:	f04f 0200 	mov.w	r2, #0
        __HAL_RCC_PLL_DISABLE();
 8008d8e:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008d90:	d157      	bne.n	8008e42 <HAL_RCC_OscConfig+0x566>
        tickstart = HAL_GetTick();
 8008d92:	f000 fa5b 	bl	800924c <HAL_GetTick>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d96:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 8008d9a:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008d9c:	2601      	movs	r6, #1
 8008d9e:	fa97 f3a7 	rbit	r3, r7
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008da2:	fab3 f383 	clz	r3, r3
 8008da6:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8008daa:	f033 0301 	bics.w	r3, r3, #1
 8008dae:	d13c      	bne.n	8008e2a <HAL_RCC_OscConfig+0x54e>
 8008db0:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008db2:	fa97 f3a7 	rbit	r3, r7
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008db6:	fab3 f383 	clz	r3, r3
 8008dba:	f003 031f 	and.w	r3, r3, #31
 8008dbe:	fa06 f303 	lsl.w	r3, r6, r3
 8008dc2:	4213      	tst	r3, r2
 8008dc4:	d12a      	bne.n	8008e1c <HAL_RCC_OscConfig+0x540>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008dc6:	e9d4 1308 	ldrd	r1, r3, [r4, #32]
 8008dca:	686a      	ldr	r2, [r5, #4]
 8008dcc:	430b      	orrs	r3, r1
 8008dce:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8008dd2:	4313      	orrs	r3, r2
 8008dd4:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8008dd6:	4b2e      	ldr	r3, [pc, #184]	; (8008e90 <HAL_RCC_OscConfig+0x5b4>)
 8008dd8:	661e      	str	r6, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8008dda:	f000 fa37 	bl	800924c <HAL_GetTick>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008dde:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8008de2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008de4:	2701      	movs	r7, #1
 8008de6:	fa94 f3a4 	rbit	r3, r4
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008dea:	fab3 f383 	clz	r3, r3
 8008dee:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8008df2:	f033 0301 	bics.w	r3, r3, #1
 8008df6:	d11e      	bne.n	8008e36 <HAL_RCC_OscConfig+0x55a>
 8008df8:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008dfa:	fa94 f3a4 	rbit	r3, r4
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008dfe:	fab3 f383 	clz	r3, r3
 8008e02:	f003 031f 	and.w	r3, r3, #31
 8008e06:	fa07 f303 	lsl.w	r3, r7, r3
 8008e0a:	4213      	tst	r3, r2
 8008e0c:	f47f add7 	bne.w	80089be <HAL_RCC_OscConfig+0xe2>
          if((HAL_GetTick()-tickstart) > PLL_TIMEOUT_VALUE)
 8008e10:	f000 fa1c 	bl	800924c <HAL_GetTick>
 8008e14:	1b80      	subs	r0, r0, r6
 8008e16:	2864      	cmp	r0, #100	; 0x64
 8008e18:	d9e5      	bls.n	8008de6 <HAL_RCC_OscConfig+0x50a>
 8008e1a:	e659      	b.n	8008ad0 <HAL_RCC_OscConfig+0x1f4>
          if((HAL_GetTick()-tickstart) > PLL_TIMEOUT_VALUE)
 8008e1c:	f000 fa16 	bl	800924c <HAL_GetTick>
 8008e20:	eba0 0008 	sub.w	r0, r0, r8
 8008e24:	2864      	cmp	r0, #100	; 0x64
 8008e26:	d9ba      	bls.n	8008d9e <HAL_RCC_OscConfig+0x4c2>
 8008e28:	e652      	b.n	8008ad0 <HAL_RCC_OscConfig+0x1f4>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e2a:	fa97 f3a7 	rbit	r3, r7
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008e2e:	fab3 f383 	clz	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008e32:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8008e34:	e7bd      	b.n	8008db2 <HAL_RCC_OscConfig+0x4d6>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e36:	fa94 f3a4 	rbit	r3, r4
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008e3a:	fab3 f383 	clz	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008e3e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8008e40:	e7db      	b.n	8008dfa <HAL_RCC_OscConfig+0x51e>
        tickstart = HAL_GetTick();
 8008e42:	f000 fa03 	bl	800924c <HAL_GetTick>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e46:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8008e4a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008e4c:	2701      	movs	r7, #1
 8008e4e:	fa94 f3a4 	rbit	r3, r4
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008e52:	fab3 f383 	clz	r3, r3
 8008e56:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8008e5a:	f033 0301 	bics.w	r3, r3, #1
 8008e5e:	d111      	bne.n	8008e84 <HAL_RCC_OscConfig+0x5a8>
 8008e60:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e62:	fa94 f3a4 	rbit	r3, r4
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008e66:	fab3 f383 	clz	r3, r3
 8008e6a:	f003 031f 	and.w	r3, r3, #31
 8008e6e:	fa07 f303 	lsl.w	r3, r7, r3
 8008e72:	4213      	tst	r3, r2
 8008e74:	f43f ada3 	beq.w	80089be <HAL_RCC_OscConfig+0xe2>
          if((HAL_GetTick()-tickstart) > PLL_TIMEOUT_VALUE)
 8008e78:	f000 f9e8 	bl	800924c <HAL_GetTick>
 8008e7c:	1b80      	subs	r0, r0, r6
 8008e7e:	2864      	cmp	r0, #100	; 0x64
 8008e80:	d9e5      	bls.n	8008e4e <HAL_RCC_OscConfig+0x572>
 8008e82:	e625      	b.n	8008ad0 <HAL_RCC_OscConfig+0x1f4>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e84:	fa94 f3a4 	rbit	r3, r4
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008e88:	fab3 f383 	clz	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008e8c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8008e8e:	e7e8      	b.n	8008e62 <HAL_RCC_OscConfig+0x586>
 8008e90:	42420000 	.word	0x42420000
 8008e94:	40021000 	.word	0x40021000

08008e98 <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8008e98:	4aa9      	ldr	r2, [pc, #676]	; (8009140 <HAL_RCC_ClockConfig+0x2a8>)
 8008e9a:	6813      	ldr	r3, [r2, #0]
 8008e9c:	f003 0307 	and.w	r3, r3, #7
 8008ea0:	428b      	cmp	r3, r1
{
 8008ea2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ea6:	4604      	mov	r4, r0
 8008ea8:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8008eaa:	f080 80aa 	bcs.w	8009002 <HAL_RCC_ClockConfig+0x16a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008eae:	6813      	ldr	r3, [r2, #0]
 8008eb0:	f023 0307 	bic.w	r3, r3, #7
 8008eb4:	430b      	orrs	r3, r1
 8008eb6:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008eb8:	6813      	ldr	r3, [r2, #0]
 8008eba:	f003 0307 	and.w	r3, r3, #7
 8008ebe:	428b      	cmp	r3, r1
 8008ec0:	d002      	beq.n	8008ec8 <HAL_RCC_ClockConfig+0x30>
    {
      return HAL_ERROR;
 8008ec2:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);

  return HAL_OK;
}
 8008ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008ec8:	6802      	ldr	r2, [r0, #0]
 8008eca:	0796      	lsls	r6, r2, #30
 8008ecc:	d506      	bpl.n	8008edc <HAL_RCC_ClockConfig+0x44>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008ece:	499d      	ldr	r1, [pc, #628]	; (8009144 <HAL_RCC_ClockConfig+0x2ac>)
 8008ed0:	6880      	ldr	r0, [r0, #8]
 8008ed2:	684b      	ldr	r3, [r1, #4]
 8008ed4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008ed8:	4303      	orrs	r3, r0
 8008eda:	604b      	str	r3, [r1, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008edc:	07d5      	lsls	r5, r2, #31
 8008ede:	d412      	bmi.n	8008f06 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008ee0:	6822      	ldr	r2, [r4, #0]
 8008ee2:	0750      	lsls	r0, r2, #29
 8008ee4:	f100 8124 	bmi.w	8009130 <HAL_RCC_ClockConfig+0x298>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008ee8:	0713      	lsls	r3, r2, #28
 8008eea:	d507      	bpl.n	8008efc <HAL_RCC_ClockConfig+0x64>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008eec:	4a95      	ldr	r2, [pc, #596]	; (8009144 <HAL_RCC_ClockConfig+0x2ac>)
 8008eee:	6921      	ldr	r1, [r4, #16]
 8008ef0:	6853      	ldr	r3, [r2, #4]
 8008ef2:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8008ef6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8008efa:	6053      	str	r3, [r2, #4]
  HAL_InitTick (TICK_INT_PRIORITY);
 8008efc:	200f      	movs	r0, #15
 8008efe:	f000 f976 	bl	80091ee <HAL_InitTick>
  return HAL_OK;
 8008f02:	2000      	movs	r0, #0
 8008f04:	e7de      	b.n	8008ec4 <HAL_RCC_ClockConfig+0x2c>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008f06:	6862      	ldr	r2, [r4, #4]
 8008f08:	4d8e      	ldr	r5, [pc, #568]	; (8009144 <HAL_RCC_ClockConfig+0x2ac>)
 8008f0a:	2a01      	cmp	r2, #1
 8008f0c:	d137      	bne.n	8008f7e <HAL_RCC_ClockConfig+0xe6>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f0e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008f12:	fa93 f1a3 	rbit	r1, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008f16:	fab1 f181 	clz	r1, r1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008f1a:	f3c1 1142 	ubfx	r1, r1, #5, #3
 8008f1e:	f031 0101 	bics.w	r1, r1, #1
 8008f22:	d126      	bne.n	8008f72 <HAL_RCC_ClockConfig+0xda>
 8008f24:	6828      	ldr	r0, [r5, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f26:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008f2a:	fa93 f3a3 	rbit	r3, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008f2e:	fab3 f383 	clz	r3, r3
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008f32:	2101      	movs	r1, #1
 8008f34:	f003 031f 	and.w	r3, r3, #31
 8008f38:	fa01 f303 	lsl.w	r3, r1, r3
 8008f3c:	4203      	tst	r3, r0
 8008f3e:	d0c0      	beq.n	8008ec2 <HAL_RCC_ClockConfig+0x2a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008f40:	686b      	ldr	r3, [r5, #4]
 8008f42:	f023 0303 	bic.w	r3, r3, #3
 8008f46:	431a      	orrs	r2, r3
 8008f48:	606a      	str	r2, [r5, #4]
      tickstart = HAL_GetTick();
 8008f4a:	f000 f97f 	bl	800924c <HAL_GetTick>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008f4e:	6863      	ldr	r3, [r4, #4]
 8008f50:	2b01      	cmp	r3, #1
      tickstart = HAL_GetTick();
 8008f52:	4606      	mov	r6, r0
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008f54:	f241 3788 	movw	r7, #5000	; 0x1388
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008f58:	d13b      	bne.n	8008fd2 <HAL_RCC_ClockConfig+0x13a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8008f5a:	686b      	ldr	r3, [r5, #4]
 8008f5c:	f003 030c 	and.w	r3, r3, #12
 8008f60:	2b04      	cmp	r3, #4
 8008f62:	d0bd      	beq.n	8008ee0 <HAL_RCC_ClockConfig+0x48>
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008f64:	f000 f972 	bl	800924c <HAL_GetTick>
 8008f68:	1b80      	subs	r0, r0, r6
 8008f6a:	42b8      	cmp	r0, r7
 8008f6c:	d9f5      	bls.n	8008f5a <HAL_RCC_ClockConfig+0xc2>
            return HAL_TIMEOUT;
 8008f6e:	2003      	movs	r0, #3
 8008f70:	e7a8      	b.n	8008ec4 <HAL_RCC_ClockConfig+0x2c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f72:	fa93 f3a3 	rbit	r3, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008f76:	fab3 f383 	clz	r3, r3
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008f7a:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8008f7c:	e7d3      	b.n	8008f26 <HAL_RCC_ClockConfig+0x8e>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008f7e:	2a02      	cmp	r2, #2
 8008f80:	d114      	bne.n	8008fac <HAL_RCC_ClockConfig+0x114>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008f86:	fa93 f1a3 	rbit	r1, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008f8a:	fab1 f181 	clz	r1, r1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008f8e:	f3c1 1142 	ubfx	r1, r1, #5, #3
 8008f92:	f031 0101 	bics.w	r1, r1, #1
 8008f96:	d103      	bne.n	8008fa0 <HAL_RCC_ClockConfig+0x108>
 8008f98:	6828      	ldr	r0, [r5, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f9a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008f9e:	e7c4      	b.n	8008f2a <HAL_RCC_ClockConfig+0x92>
 8008fa0:	fa93 f3a3 	rbit	r3, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008fa4:	fab3 f383 	clz	r3, r3
 8008fa8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8008faa:	e7f6      	b.n	8008f9a <HAL_RCC_ClockConfig+0x102>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008fac:	2302      	movs	r3, #2
 8008fae:	fa93 f1a3 	rbit	r1, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008fb2:	fab1 f181 	clz	r1, r1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008fb6:	f3c1 1142 	ubfx	r1, r1, #5, #3
 8008fba:	f031 0101 	bics.w	r1, r1, #1
 8008fbe:	d102      	bne.n	8008fc6 <HAL_RCC_ClockConfig+0x12e>
 8008fc0:	6828      	ldr	r0, [r5, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008fc2:	2302      	movs	r3, #2
 8008fc4:	e7b1      	b.n	8008f2a <HAL_RCC_ClockConfig+0x92>
 8008fc6:	fa93 f3a3 	rbit	r3, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008fca:	fab3 f383 	clz	r3, r3
 8008fce:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8008fd0:	e7f7      	b.n	8008fc2 <HAL_RCC_ClockConfig+0x12a>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008fd2:	2b02      	cmp	r3, #2
 8008fd4:	d110      	bne.n	8008ff8 <HAL_RCC_ClockConfig+0x160>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008fd6:	686b      	ldr	r3, [r5, #4]
 8008fd8:	f003 030c 	and.w	r3, r3, #12
 8008fdc:	2b08      	cmp	r3, #8
 8008fde:	f43f af7f 	beq.w	8008ee0 <HAL_RCC_ClockConfig+0x48>
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008fe2:	f000 f933 	bl	800924c <HAL_GetTick>
 8008fe6:	1b80      	subs	r0, r0, r6
 8008fe8:	42b8      	cmp	r0, r7
 8008fea:	d9f4      	bls.n	8008fd6 <HAL_RCC_ClockConfig+0x13e>
 8008fec:	e7bf      	b.n	8008f6e <HAL_RCC_ClockConfig+0xd6>
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008fee:	f000 f92d 	bl	800924c <HAL_GetTick>
 8008ff2:	1b80      	subs	r0, r0, r6
 8008ff4:	42b8      	cmp	r0, r7
 8008ff6:	d8ba      	bhi.n	8008f6e <HAL_RCC_ClockConfig+0xd6>
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8008ff8:	686b      	ldr	r3, [r5, #4]
 8008ffa:	f013 0f0c 	tst.w	r3, #12
 8008ffe:	d1f6      	bne.n	8008fee <HAL_RCC_ClockConfig+0x156>
 8009000:	e76e      	b.n	8008ee0 <HAL_RCC_ClockConfig+0x48>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009002:	6802      	ldr	r2, [r0, #0]
 8009004:	0791      	lsls	r1, r2, #30
 8009006:	d506      	bpl.n	8009016 <HAL_RCC_ClockConfig+0x17e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009008:	494e      	ldr	r1, [pc, #312]	; (8009144 <HAL_RCC_ClockConfig+0x2ac>)
 800900a:	6880      	ldr	r0, [r0, #8]
 800900c:	684b      	ldr	r3, [r1, #4]
 800900e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009012:	4303      	orrs	r3, r0
 8009014:	604b      	str	r3, [r1, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009016:	07d2      	lsls	r2, r2, #31
 8009018:	d40c      	bmi.n	8009034 <HAL_RCC_ClockConfig+0x19c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800901a:	4a49      	ldr	r2, [pc, #292]	; (8009140 <HAL_RCC_ClockConfig+0x2a8>)
 800901c:	6813      	ldr	r3, [r2, #0]
 800901e:	f023 0307 	bic.w	r3, r3, #7
 8009022:	4333      	orrs	r3, r6
 8009024:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8009026:	6813      	ldr	r3, [r2, #0]
 8009028:	f003 0307 	and.w	r3, r3, #7
 800902c:	42b3      	cmp	r3, r6
 800902e:	f47f af48 	bne.w	8008ec2 <HAL_RCC_ClockConfig+0x2a>
 8009032:	e755      	b.n	8008ee0 <HAL_RCC_ClockConfig+0x48>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009034:	6862      	ldr	r2, [r4, #4]
 8009036:	4d43      	ldr	r5, [pc, #268]	; (8009144 <HAL_RCC_ClockConfig+0x2ac>)
 8009038:	2a01      	cmp	r2, #1
 800903a:	d137      	bne.n	80090ac <HAL_RCC_ClockConfig+0x214>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800903c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009040:	fa93 f1a3 	rbit	r1, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8009044:	fab1 f181 	clz	r1, r1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009048:	f3c1 1142 	ubfx	r1, r1, #5, #3
 800904c:	f031 0101 	bics.w	r1, r1, #1
 8009050:	d126      	bne.n	80090a0 <HAL_RCC_ClockConfig+0x208>
 8009052:	6828      	ldr	r0, [r5, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009054:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009058:	fa93 f3a3 	rbit	r3, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800905c:	fab3 f383 	clz	r3, r3
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009060:	2101      	movs	r1, #1
 8009062:	f003 031f 	and.w	r3, r3, #31
 8009066:	fa01 f303 	lsl.w	r3, r1, r3
 800906a:	4203      	tst	r3, r0
 800906c:	f43f af29 	beq.w	8008ec2 <HAL_RCC_ClockConfig+0x2a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009070:	686b      	ldr	r3, [r5, #4]
 8009072:	f023 0303 	bic.w	r3, r3, #3
 8009076:	431a      	orrs	r2, r3
 8009078:	606a      	str	r2, [r5, #4]
      tickstart = HAL_GetTick();
 800907a:	f000 f8e7 	bl	800924c <HAL_GetTick>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800907e:	6863      	ldr	r3, [r4, #4]
 8009080:	2b01      	cmp	r3, #1
      tickstart = HAL_GetTick();
 8009082:	4607      	mov	r7, r0
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009084:	f241 3888 	movw	r8, #5000	; 0x1388
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009088:	d13a      	bne.n	8009100 <HAL_RCC_ClockConfig+0x268>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800908a:	686b      	ldr	r3, [r5, #4]
 800908c:	f003 030c 	and.w	r3, r3, #12
 8009090:	2b04      	cmp	r3, #4
 8009092:	d0c2      	beq.n	800901a <HAL_RCC_ClockConfig+0x182>
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009094:	f000 f8da 	bl	800924c <HAL_GetTick>
 8009098:	1bc0      	subs	r0, r0, r7
 800909a:	4540      	cmp	r0, r8
 800909c:	d9f5      	bls.n	800908a <HAL_RCC_ClockConfig+0x1f2>
 800909e:	e766      	b.n	8008f6e <HAL_RCC_ClockConfig+0xd6>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80090a0:	fa93 f3a3 	rbit	r3, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80090a4:	fab3 f383 	clz	r3, r3
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80090a8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80090aa:	e7d3      	b.n	8009054 <HAL_RCC_ClockConfig+0x1bc>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80090ac:	2a02      	cmp	r2, #2
 80090ae:	d114      	bne.n	80090da <HAL_RCC_ClockConfig+0x242>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80090b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80090b4:	fa93 f1a3 	rbit	r1, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80090b8:	fab1 f181 	clz	r1, r1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80090bc:	f3c1 1142 	ubfx	r1, r1, #5, #3
 80090c0:	f031 0101 	bics.w	r1, r1, #1
 80090c4:	d103      	bne.n	80090ce <HAL_RCC_ClockConfig+0x236>
 80090c6:	6828      	ldr	r0, [r5, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80090c8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80090cc:	e7c4      	b.n	8009058 <HAL_RCC_ClockConfig+0x1c0>
 80090ce:	fa93 f3a3 	rbit	r3, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80090d2:	fab3 f383 	clz	r3, r3
 80090d6:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80090d8:	e7f6      	b.n	80090c8 <HAL_RCC_ClockConfig+0x230>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80090da:	2302      	movs	r3, #2
 80090dc:	fa93 f1a3 	rbit	r1, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80090e0:	fab1 f181 	clz	r1, r1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80090e4:	f3c1 1142 	ubfx	r1, r1, #5, #3
 80090e8:	f031 0101 	bics.w	r1, r1, #1
 80090ec:	d102      	bne.n	80090f4 <HAL_RCC_ClockConfig+0x25c>
 80090ee:	6828      	ldr	r0, [r5, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80090f0:	2302      	movs	r3, #2
 80090f2:	e7b1      	b.n	8009058 <HAL_RCC_ClockConfig+0x1c0>
 80090f4:	fa93 f3a3 	rbit	r3, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80090f8:	fab3 f383 	clz	r3, r3
 80090fc:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80090fe:	e7f7      	b.n	80090f0 <HAL_RCC_ClockConfig+0x258>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009100:	2b02      	cmp	r3, #2
 8009102:	d110      	bne.n	8009126 <HAL_RCC_ClockConfig+0x28e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009104:	686b      	ldr	r3, [r5, #4]
 8009106:	f003 030c 	and.w	r3, r3, #12
 800910a:	2b08      	cmp	r3, #8
 800910c:	d085      	beq.n	800901a <HAL_RCC_ClockConfig+0x182>
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800910e:	f000 f89d 	bl	800924c <HAL_GetTick>
 8009112:	1bc0      	subs	r0, r0, r7
 8009114:	4540      	cmp	r0, r8
 8009116:	d9f5      	bls.n	8009104 <HAL_RCC_ClockConfig+0x26c>
 8009118:	e729      	b.n	8008f6e <HAL_RCC_ClockConfig+0xd6>
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800911a:	f000 f897 	bl	800924c <HAL_GetTick>
 800911e:	1bc0      	subs	r0, r0, r7
 8009120:	4540      	cmp	r0, r8
 8009122:	f63f af24 	bhi.w	8008f6e <HAL_RCC_ClockConfig+0xd6>
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8009126:	686b      	ldr	r3, [r5, #4]
 8009128:	f013 0f0c 	tst.w	r3, #12
 800912c:	d1f5      	bne.n	800911a <HAL_RCC_ClockConfig+0x282>
 800912e:	e774      	b.n	800901a <HAL_RCC_ClockConfig+0x182>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009130:	4904      	ldr	r1, [pc, #16]	; (8009144 <HAL_RCC_ClockConfig+0x2ac>)
 8009132:	68e0      	ldr	r0, [r4, #12]
 8009134:	684b      	ldr	r3, [r1, #4]
 8009136:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800913a:	4303      	orrs	r3, r0
 800913c:	604b      	str	r3, [r1, #4]
 800913e:	e6d3      	b.n	8008ee8 <HAL_RCC_ClockConfig+0x50>
 8009140:	40022000 	.word	0x40022000
 8009144:	40021000 	.word	0x40021000

08009148 <HAL_RCC_GetSysClockFreq>:
  *
  * @param  None
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009148:	b510      	push	{r4, lr}
  uint32_t tmpreg = 0, prediv = 0, pllmul = 0, pllclk = 0;
  uint32_t sysclockfreq = 0;

  tmpreg = RCC->CFGR;
 800914a:	4c15      	ldr	r4, [pc, #84]	; (80091a0 <HAL_RCC_GetSysClockFreq+0x58>)
 800914c:	6861      	ldr	r1, [r4, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800914e:	f001 030c 	and.w	r3, r1, #12
 8009152:	2b08      	cmp	r3, #8
 8009154:	d121      	bne.n	800919a <HAL_RCC_GetSysClockFreq+0x52>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009156:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 800915a:	fa93 f3a3 	rbit	r3, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800915e:	fab3 f383 	clz	r3, r3
  case RCC_SYSCLKSOURCE_STATUS_HSE:    /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
    break;

  case RCC_SYSCLKSOURCE_STATUS_PLLCLK: /* PLL used as system clock  source */
    pllmul = PLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8009162:	f401 1270 	and.w	r2, r1, #3932160	; 0x3c0000
 8009166:	b2db      	uxtb	r3, r3
 8009168:	fa22 f303 	lsr.w	r3, r2, r3
 800916c:	4a0d      	ldr	r2, [pc, #52]	; (80091a4 <HAL_RCC_GetSysClockFreq+0x5c>)
 800916e:	5cd0      	ldrb	r0, [r2, r3]
    prediv = PredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8009170:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009172:	230f      	movs	r3, #15
 8009174:	fa93 f3a3 	rbit	r3, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8009178:	fab3 f383 	clz	r3, r3
 800917c:	f002 020f 	and.w	r2, r2, #15
 8009180:	b2db      	uxtb	r3, r3
 8009182:	fa22 f303 	lsr.w	r3, r2, r3
 8009186:	4a08      	ldr	r2, [pc, #32]	; (80091a8 <HAL_RCC_GetSysClockFreq+0x60>)
 8009188:	5cd2      	ldrb	r2, [r2, r3]
    if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800918a:	03cb      	lsls	r3, r1, #15
    {
      /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
      pllclk = (HSE_VALUE/prediv) * pllmul;
 800918c:	bf4a      	itet	mi
 800918e:	4b07      	ldrmi	r3, [pc, #28]	; (80091ac <HAL_RCC_GetSysClockFreq+0x64>)
    }
    else
    {
      /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
      pllclk = (HSI_VALUE >> 1) * pllmul;
 8009190:	4b07      	ldrpl	r3, [pc, #28]	; (80091b0 <HAL_RCC_GetSysClockFreq+0x68>)
      pllclk = (HSE_VALUE/prediv) * pllmul;
 8009192:	fbb3 f3f2 	udivmi	r3, r3, r2
      pllclk = (HSI_VALUE >> 1) * pllmul;
 8009196:	4358      	muls	r0, r3
  default:
    sysclockfreq = HSI_VALUE;
    break;
  }
  return sysclockfreq;
}
 8009198:	bd10      	pop	{r4, pc}
    sysclockfreq = HSE_VALUE;
 800919a:	4804      	ldr	r0, [pc, #16]	; (80091ac <HAL_RCC_GetSysClockFreq+0x64>)
  return sysclockfreq;
 800919c:	e7fc      	b.n	8009198 <HAL_RCC_GetSysClockFreq+0x50>
 800919e:	bf00      	nop
 80091a0:	40021000 	.word	0x40021000
 80091a4:	0801c02c 	.word	0x0801c02c
 80091a8:	0801c03c 	.word	0x0801c03c
 80091ac:	007a1200 	.word	0x007a1200
 80091b0:	003d0900 	.word	0x003d0900

080091b4 <HAL_RCC_GetHCLKFreq>:
  *                       
  * @param  None
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80091b4:	b508      	push	{r3, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 80091b6:	f7ff ffc7 	bl	8009148 <HAL_RCC_GetSysClockFreq>
 80091ba:	4b09      	ldr	r3, [pc, #36]	; (80091e0 <HAL_RCC_GetHCLKFreq+0x2c>)
 80091bc:	685a      	ldr	r2, [r3, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80091be:	23f0      	movs	r3, #240	; 0xf0
 80091c0:	fa93 f3a3 	rbit	r3, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80091c4:	fab3 f383 	clz	r3, r3
 80091c8:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80091cc:	b2db      	uxtb	r3, r3
 80091ce:	fa22 f303 	lsr.w	r3, r2, r3
 80091d2:	4a04      	ldr	r2, [pc, #16]	; (80091e4 <HAL_RCC_GetHCLKFreq+0x30>)
 80091d4:	5cd3      	ldrb	r3, [r2, r3]
 80091d6:	40d8      	lsrs	r0, r3
 80091d8:	4b03      	ldr	r3, [pc, #12]	; (80091e8 <HAL_RCC_GetHCLKFreq+0x34>)
 80091da:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 80091dc:	bd08      	pop	{r3, pc}
 80091de:	bf00      	nop
 80091e0:	40021000 	.word	0x40021000
 80091e4:	0801c01c 	.word	0x0801c01c
 80091e8:	200009c4 	.word	0x200009c4

080091ec <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80091ec:	4770      	bx	lr

080091ee <HAL_InitTick>:
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)

{
 80091ee:	b507      	push	{r0, r1, r2, lr}
 80091f0:	9001      	str	r0, [sp, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80091f2:	f7ff ffdf 	bl	80091b4 <HAL_RCC_GetHCLKFreq>
 80091f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80091fa:	fbb0 f0f3 	udiv	r0, r0, r3
 80091fe:	f000 f88b 	bl	8009318 <HAL_SYSTICK_Config>
 
  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8009202:	9901      	ldr	r1, [sp, #4]
 8009204:	2200      	movs	r2, #0
 8009206:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800920a:	f000 f845 	bl	8009298 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 800920e:	2000      	movs	r0, #0
 8009210:	b003      	add	sp, #12
 8009212:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08009218 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009218:	4a07      	ldr	r2, [pc, #28]	; (8009238 <HAL_Init+0x20>)
{
 800921a:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800921c:	6813      	ldr	r3, [r2, #0]
 800921e:	f043 0310 	orr.w	r3, r3, #16
 8009222:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009224:	2003      	movs	r0, #3
 8009226:	f000 f825 	bl	8009274 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800922a:	200f      	movs	r0, #15
 800922c:	f7ff ffdf 	bl	80091ee <HAL_InitTick>
  HAL_MspInit();
 8009230:	f7ff ffdc 	bl	80091ec <HAL_MspInit>
}
 8009234:	2000      	movs	r0, #0
 8009236:	bd08      	pop	{r3, pc}
 8009238:	40022000 	.word	0x40022000

0800923c <HAL_IncTick>:
  * @param  None
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 800923c:	4a02      	ldr	r2, [pc, #8]	; (8009248 <HAL_IncTick+0xc>)
 800923e:	6813      	ldr	r3, [r2, #0]
 8009240:	3301      	adds	r3, #1
 8009242:	6013      	str	r3, [r2, #0]
}
 8009244:	4770      	bx	lr
 8009246:	bf00      	nop
 8009248:	20001088 	.word	0x20001088

0800924c <HAL_GetTick>:
  * @param  None
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 800924c:	4b01      	ldr	r3, [pc, #4]	; (8009254 <HAL_GetTick+0x8>)
 800924e:	6818      	ldr	r0, [r3, #0]
}
 8009250:	4770      	bx	lr
 8009252:	bf00      	nop
 8009254:	20001088 	.word	0x20001088

08009258 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8009258:	b513      	push	{r0, r1, r4, lr}
 800925a:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 800925c:	f7ff fff6 	bl	800924c <HAL_GetTick>
 8009260:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8009262:	f7ff fff3 	bl	800924c <HAL_GetTick>
 8009266:	9a01      	ldr	r2, [sp, #4]
 8009268:	1b03      	subs	r3, r0, r4
 800926a:	4293      	cmp	r3, r2
 800926c:	d3f9      	bcc.n	8009262 <HAL_Delay+0xa>
  {
  }
}
 800926e:	b002      	add	sp, #8
 8009270:	bd10      	pop	{r4, pc}
	...

08009274 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009274:	4907      	ldr	r1, [pc, #28]	; (8009294 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8009276:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 8009278:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                 |
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
 800927c:	0203      	lsls	r3, r0, #8
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 800927e:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
 8009280:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 8009284:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
 8009286:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                 |
 8009288:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800928c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8009290:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8009292:	4770      	bx	lr
 8009294:	e000ed00 	.word	0xe000ed00

08009298 <HAL_NVIC_SetPriority>:

    \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos);   /* read priority grouping field */
 8009298:	4b17      	ldr	r3, [pc, #92]	; (80092f8 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800929a:	b570      	push	{r4, r5, r6, lr}
 800929c:	68dd      	ldr	r5, [r3, #12]
 800929e:	f3c5 2502 	ubfx	r5, r5, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);          /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
 80092a2:	f1c5 0307 	rsb	r3, r5, #7
 80092a6:	2b04      	cmp	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;
 80092a8:	f105 0404 	add.w	r4, r5, #4
  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
 80092ac:	bf28      	it	cs
 80092ae:	2304      	movcs	r3, #4

  return (
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
 80092b0:	2601      	movs	r6, #1
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;
 80092b2:	2c06      	cmp	r4, #6
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
 80092b4:	fa06 f403 	lsl.w	r4, r6, r3
 80092b8:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;
 80092bc:	bf8c      	ite	hi
 80092be:	3d03      	subhi	r5, #3
 80092c0:	2500      	movls	r5, #0
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
 80092c2:	4021      	ands	r1, r4
 80092c4:	40a9      	lsls	r1, r5
           ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
 80092c6:	fa06 f505 	lsl.w	r5, r6, r5
 80092ca:	3d01      	subs	r5, #1
 80092cc:	ea05 0302 	and.w	r3, r5, r2
  if(IRQn < 0) {
 80092d0:	2800      	cmp	r0, #0
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
 80092d2:	ea43 0301 	orr.w	r3, r3, r1
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 80092d6:	bfac      	ite	ge
 80092d8:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80092dc:	4a07      	ldrlt	r2, [pc, #28]	; (80092fc <HAL_NVIC_SetPriority+0x64>)
 80092de:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80092e2:	bfb8      	it	lt
 80092e4:	f000 000f 	andlt.w	r0, r0, #15
 80092e8:	b2db      	uxtb	r3, r3
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 80092ea:	bfaa      	itet	ge
 80092ec:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80092f0:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 80092f2:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80092f6:	bd70      	pop	{r4, r5, r6, pc}
 80092f8:	e000ed00 	.word	0xe000ed00
 80092fc:	e000ed14 	.word	0xe000ed14

08009300 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8009300:	0942      	lsrs	r2, r0, #5
 8009302:	2301      	movs	r3, #1
 8009304:	f000 001f 	and.w	r0, r0, #31
 8009308:	fa03 f000 	lsl.w	r0, r3, r0
 800930c:	4b01      	ldr	r3, [pc, #4]	; (8009314 <HAL_NVIC_EnableIRQ+0x14>)
 800930e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8009312:	4770      	bx	lr
 8009314:	e000e100 	.word	0xe000e100

08009318 <HAL_SYSTICK_Config>:
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 8009318:	3801      	subs	r0, #1
 800931a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800931e:	d20b      	bcs.n	8009338 <HAL_SYSTICK_Config+0x20>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 8009320:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8009324:	4a05      	ldr	r2, [pc, #20]	; (800933c <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 8009326:	6158      	str	r0, [r3, #20]
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8009328:	21f0      	movs	r1, #240	; 0xf0
 800932a:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 800932e:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009330:	2207      	movs	r2, #7
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8009332:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009334:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 8009336:	4770      	bx	lr
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 8009338:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800933a:	4770      	bx	lr
 800933c:	e000ed00 	.word	0xe000ed00

08009340 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8009340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GET_GPIO_SOURCE(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009344:	4a5d      	ldr	r2, [pc, #372]	; (80094bc <HAL_GPIO_Init+0x17c>)
        __SYSCFG_CLK_ENABLE();
 8009346:	f8df 817c 	ldr.w	r8, [pc, #380]	; 80094c4 <HAL_GPIO_Init+0x184>
  for (position = 0; position < GPIO_NUMBER; position++)
 800934a:	2300      	movs	r3, #0
    ioposition = ((uint32_t)0x01) << position;
 800934c:	f04f 0901 	mov.w	r9, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009350:	680c      	ldr	r4, [r1, #0]
    ioposition = ((uint32_t)0x01) << position;
 8009352:	fa09 fa03 	lsl.w	sl, r9, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009356:	ea0a 0504 	and.w	r5, sl, r4
    if (iocurrent == ioposition)
 800935a:	ea3a 0404 	bics.w	r4, sl, r4
 800935e:	f040 809c 	bne.w	800949a <HAL_GPIO_Init+0x15a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8009362:	684c      	ldr	r4, [r1, #4]
 8009364:	f024 0e10 	bic.w	lr, r4, #16
 8009368:	f1be 0f02 	cmp.w	lr, #2
 800936c:	d114      	bne.n	8009398 <HAL_GPIO_Init+0x58>
        temp = GPIOx->AFR[position >> 3];
 800936e:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 8009372:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8009376:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3];
 800937a:	f8dc 6020 	ldr.w	r6, [ip, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800937e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8009382:	270f      	movs	r7, #15
 8009384:	fa07 f70b 	lsl.w	r7, r7, fp
 8009388:	ea26 0707 	bic.w	r7, r6, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800938c:	690e      	ldr	r6, [r1, #16]
 800938e:	fa06 f60b 	lsl.w	r6, r6, fp
 8009392:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3] = temp;
 8009394:	f8cc 6020 	str.w	r6, [ip, #32]
      temp = GPIOx->MODER;
 8009398:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800939c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80093a0:	2703      	movs	r7, #3
 80093a2:	fa07 f70c 	lsl.w	r7, r7, ip
 80093a6:	ea2b 0b07 	bic.w	fp, fp, r7
 80093aa:	43fe      	mvns	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80093ac:	f004 0703 	and.w	r7, r4, #3
 80093b0:	fa07 f70c 	lsl.w	r7, r7, ip
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80093b4:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80093b8:	ea47 070b 	orr.w	r7, r7, fp
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80093bc:	f1be 0f01 	cmp.w	lr, #1
      GPIOx->MODER = temp;
 80093c0:	6007      	str	r7, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80093c2:	d811      	bhi.n	80093e8 <HAL_GPIO_Init+0xa8>
        temp = GPIOx->OSPEEDR; 
 80093c4:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80093c6:	ea06 0e07 	and.w	lr, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2));
 80093ca:	68cf      	ldr	r7, [r1, #12]
 80093cc:	fa07 f70c 	lsl.w	r7, r7, ip
 80093d0:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 80093d4:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80093d6:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80093d8:	ea27 0a0a 	bic.w	sl, r7, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80093dc:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80093e0:	409f      	lsls	r7, r3
 80093e2:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OTYPER = temp;
 80093e6:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80093e8:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80093ea:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80093ec:	688e      	ldr	r6, [r1, #8]
 80093ee:	fa06 f60c 	lsl.w	r6, r6, ip
 80093f2:	433e      	orrs	r6, r7
      GPIOx->PUPDR = temp;
 80093f4:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80093f6:	00e6      	lsls	r6, r4, #3
 80093f8:	d54f      	bpl.n	800949a <HAL_GPIO_Init+0x15a>
        __SYSCFG_CLK_ENABLE();
 80093fa:	f8d8 6018 	ldr.w	r6, [r8, #24]
 80093fe:	f023 0703 	bic.w	r7, r3, #3
 8009402:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8009406:	f046 0601 	orr.w	r6, r6, #1
 800940a:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 800940e:	f8c8 6018 	str.w	r6, [r8, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8009412:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2];
 8009416:	68be      	ldr	r6, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8009418:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800941c:	f04f 0c0f 	mov.w	ip, #15
 8009420:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= ((uint32_t)(GET_GPIO_SOURCE(GPIOx)) << (4 * (position & 0x03)));
 8009424:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8009428:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= ((uint32_t)(GET_GPIO_SOURCE(GPIOx)) << (4 * (position & 0x03)));
 800942c:	d03b      	beq.n	80094a6 <HAL_GPIO_Init+0x166>
 800942e:	4e24      	ldr	r6, [pc, #144]	; (80094c0 <HAL_GPIO_Init+0x180>)
 8009430:	42b0      	cmp	r0, r6
 8009432:	d03a      	beq.n	80094aa <HAL_GPIO_Init+0x16a>
 8009434:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8009438:	42b0      	cmp	r0, r6
 800943a:	d038      	beq.n	80094ae <HAL_GPIO_Init+0x16e>
 800943c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8009440:	42b0      	cmp	r0, r6
 8009442:	d036      	beq.n	80094b2 <HAL_GPIO_Init+0x172>
 8009444:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8009448:	42b0      	cmp	r0, r6
 800944a:	d034      	beq.n	80094b6 <HAL_GPIO_Init+0x176>
 800944c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8009450:	42b0      	cmp	r0, r6
 8009452:	bf0c      	ite	eq
 8009454:	2605      	moveq	r6, #5
 8009456:	2606      	movne	r6, #6
 8009458:	fa06 f60e 	lsl.w	r6, r6, lr
 800945c:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 8009460:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8009462:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8009464:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009466:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 800946a:	bf0c      	ite	eq
 800946c:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 800946e:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 8009470:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 8009472:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009474:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8009478:	bf0c      	ite	eq
 800947a:	403e      	andeq	r6, r7
        { 
          temp |= iocurrent;
 800947c:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 800947e:	6056      	str	r6, [r2, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8009480:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009482:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8009486:	bf0c      	ite	eq
 8009488:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 800948a:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 800948c:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 800948e:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009490:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8009492:	bf54      	ite	pl
 8009494:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 8009496:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 8009498:	60d6      	str	r6, [r2, #12]
  for (position = 0; position < GPIO_NUMBER; position++)
 800949a:	3301      	adds	r3, #1
 800949c:	2b10      	cmp	r3, #16
 800949e:	f47f af57 	bne.w	8009350 <HAL_GPIO_Init+0x10>
      }
    }
  } 
}
 80094a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GET_GPIO_SOURCE(GPIOx)) << (4 * (position & 0x03)));
 80094a6:	2600      	movs	r6, #0
 80094a8:	e7d6      	b.n	8009458 <HAL_GPIO_Init+0x118>
 80094aa:	2601      	movs	r6, #1
 80094ac:	e7d4      	b.n	8009458 <HAL_GPIO_Init+0x118>
 80094ae:	2602      	movs	r6, #2
 80094b0:	e7d2      	b.n	8009458 <HAL_GPIO_Init+0x118>
 80094b2:	2603      	movs	r6, #3
 80094b4:	e7d0      	b.n	8009458 <HAL_GPIO_Init+0x118>
 80094b6:	2604      	movs	r6, #4
 80094b8:	e7ce      	b.n	8009458 <HAL_GPIO_Init+0x118>
 80094ba:	bf00      	nop
 80094bc:	40010400 	.word	0x40010400
 80094c0:	48000400 	.word	0x48000400
 80094c4:	40021000 	.word	0x40021000

080094c8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80094c8:	6903      	ldr	r3, [r0, #16]
 80094ca:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
  }
 80094cc:	bf14      	ite	ne
 80094ce:	2001      	movne	r0, #1
 80094d0:	2000      	moveq	r0, #0
 80094d2:	4770      	bx	lr

080094d4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80094d4:	b10a      	cbz	r2, 80094da <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRRL = GPIO_Pin;
 80094d6:	8301      	strh	r1, [r0, #24]
 80094d8:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 80094da:	8341      	strh	r1, [r0, #26]
  }
}
 80094dc:	4770      	bx	lr

080094de <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80094de:	6943      	ldr	r3, [r0, #20]
 80094e0:	4059      	eors	r1, r3
 80094e2:	6141      	str	r1, [r0, #20]
}
 80094e4:	4770      	bx	lr

080094e6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{ 
 80094e6:	b538      	push	{r3, r4, r5, lr}
  uint32_t i = 0;

  uint32_t wInterrupt_Mask = 0;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 80094e8:	4604      	mov	r4, r0
 80094ea:	2800      	cmp	r0, #0
 80094ec:	d042      	beq.n	8009574 <HAL_PCD_Init+0x8e>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  hpcd->State = PCD_BUSY;
 80094ee:	2302      	movs	r3, #2
 80094f0:	f880 3141 	strb.w	r3, [r0, #321]	; 0x141
  
  /* Init the low level hardware : GPIO, CLOCK, NVIC... */
  HAL_PCD_MspInit(hpcd);
 80094f4:	f001 ffde 	bl	800b4b4 <HAL_PCD_MspInit>

 /* Init endpoints structures */
 for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 80094f8:	2100      	movs	r1, #0
 80094fa:	6860      	ldr	r0, [r4, #4]
 80094fc:	f104 0328 	add.w	r3, r4, #40	; 0x28
 8009500:	460a      	mov	r2, r1
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1;
 8009502:	2501      	movs	r5, #1
 for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 8009504:	4288      	cmp	r0, r1
 8009506:	f103 031c 	add.w	r3, r3, #28
 800950a:	d11b      	bne.n	8009544 <HAL_PCD_Init+0x5e>
   hpcd->IN_ep[i].maxpacket =  0;
   hpcd->IN_ep[i].xfer_buff = 0;
   hpcd->IN_ep[i].xfer_len = 0;
 }
 
 for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 800950c:	2000      	movs	r0, #0
 800950e:	f104 02b4 	add.w	r2, r4, #180	; 0xb4
 8009512:	4603      	mov	r3, r0
 8009514:	4281      	cmp	r1, r0
 8009516:	f102 021c 	add.w	r2, r2, #28
 800951a:	d11f      	bne.n	800955c <HAL_PCD_Init+0x76>
   hpcd->OUT_ep[i].xfer_len = 0;
 }
  
 /* Init Device */
 /*CNTR_FRES = 1*/
 hpcd->Instance->CNTR = USB_CNTR_FRES;
 800951c:	6822      	ldr	r2, [r4, #0]
 800951e:	2101      	movs	r1, #1
 8009520:	f8a2 1040 	strh.w	r1, [r2, #64]	; 0x40
  /*set wInterrupt_Mask global variable*/
  wInterrupt_Mask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
    | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /*Set interrupt mask*/
  hpcd->Instance->CNTR = wInterrupt_Mask;
 8009524:	f44f 413d 	mov.w	r1, #48384	; 0xbd00
 hpcd->Instance->CNTR = 0;
 8009528:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
  
  hpcd->USB_Address = 0;
  hpcd->State= PCD_READY;

 return HAL_OK;
 800952c:	2000      	movs	r0, #0
 hpcd->Instance->ISTR = 0;
 800952e:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
 hpcd->Instance->BTABLE = BTABLE_ADDRESS;
 8009532:	f8a2 3050 	strh.w	r3, [r2, #80]	; 0x50
  hpcd->Instance->CNTR = wInterrupt_Mask;
 8009536:	f8a2 1040 	strh.w	r1, [r2, #64]	; 0x40
  hpcd->USB_Address = 0;
 800953a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  hpcd->State= PCD_READY;
 800953e:	f884 3141 	strb.w	r3, [r4, #321]	; 0x141
}
 8009542:	bd38      	pop	{r3, r4, r5, pc}
   hpcd->IN_ep[i].num = i;
 8009544:	f803 1c1c 	strb.w	r1, [r3, #-28]
   hpcd->IN_ep[i].xfer_buff = 0;
 8009548:	e943 2204 	strd	r2, r2, [r3, #-16]
   hpcd->IN_ep[i].is_in = 1;
 800954c:	f803 5c1b 	strb.w	r5, [r3, #-27]
   hpcd->IN_ep[i].type = PCD_EP_TYPE_CTRL;
 8009550:	f803 2c19 	strb.w	r2, [r3, #-25]
   hpcd->IN_ep[i].xfer_len = 0;
 8009554:	f843 2c08 	str.w	r2, [r3, #-8]
 for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 8009558:	3101      	adds	r1, #1
 800955a:	e7d3      	b.n	8009504 <HAL_PCD_Init+0x1e>
   hpcd->OUT_ep[i].num = i;
 800955c:	f802 0c1c 	strb.w	r0, [r2, #-28]
   hpcd->OUT_ep[i].xfer_buff = 0;
 8009560:	e942 3304 	strd	r3, r3, [r2, #-16]
   hpcd->OUT_ep[i].is_in = 0;
 8009564:	f802 3c1b 	strb.w	r3, [r2, #-27]
   hpcd->OUT_ep[i].type = PCD_EP_TYPE_CTRL;
 8009568:	f802 3c19 	strb.w	r3, [r2, #-25]
   hpcd->OUT_ep[i].xfer_len = 0;
 800956c:	f842 3c08 	str.w	r3, [r2, #-8]
 for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 8009570:	3001      	adds	r0, #1
 8009572:	e7cf      	b.n	8009514 <HAL_PCD_Init+0x2e>
    return HAL_ERROR;
 8009574:	2001      	movs	r0, #1
 8009576:	e7e4      	b.n	8009542 <HAL_PCD_Init+0x5c>

08009578 <HAL_PCD_Start>:
  * @brief  Start The USB OTG Device.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{ 
 8009578:	b508      	push	{r3, lr}
  /*  DP Pull-Down is external */
  HAL_PCDEx_SetConnectionState (hpcd, 1);
 800957a:	2101      	movs	r1, #1
 800957c:	f000 fe87 	bl	800a28e <HAL_PCDEx_SetConnectionState>
  
  return HAL_OK;
}
 8009580:	2000      	movs	r0, #0
 8009582:	bd08      	pop	{r3, pc}

08009584 <HAL_PCD_SetAddress>:
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
   __HAL_LOCK(hpcd); 
 8009584:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
 8009588:	2b01      	cmp	r3, #1
 800958a:	d00f      	beq.n	80095ac <HAL_PCD_SetAddress+0x28>
 800958c:	2301      	movs	r3, #1
 800958e:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140

   if(address == 0) 
 8009592:	b941      	cbnz	r1, 80095a6 <HAL_PCD_SetAddress+0x22>
   {
     /* set device address and enable function */
     hpcd->Instance->DADDR = USB_DADDR_EF;
 8009594:	6803      	ldr	r3, [r0, #0]
 8009596:	2280      	movs	r2, #128	; 0x80
 8009598:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
   else /* USB Address will be applied later */
   {
     hpcd->USB_Address = address;
   }

  __HAL_UNLOCK(hpcd);   
 800959c:	2300      	movs	r3, #0
 800959e:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
  return HAL_OK;
 80095a2:	4618      	mov	r0, r3
 80095a4:	4770      	bx	lr
     hpcd->USB_Address = address;
 80095a6:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 80095aa:	e7f7      	b.n	800959c <HAL_PCD_SetAddress+0x18>
   __HAL_LOCK(hpcd); 
 80095ac:	2002      	movs	r0, #2
}
 80095ae:	4770      	bx	lr

080095b0 <HAL_PCD_EP_Open>:
  * @param  ep_mps: endpoint max packert size
  * @param  ep_type: endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80095b0:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep;
  
  if ((ep_addr & 0x80) == 0x80)
 80095b2:	b24d      	sxtb	r5, r1
 80095b4:	241c      	movs	r4, #28
 80095b6:	2d00      	cmp	r5, #0
 80095b8:	f001 067f 	and.w	r6, r1, #127	; 0x7f
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80095bc:	bfb3      	iteet	lt
 80095be:	fb04 0406 	mlalt	r4, r4, r6, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 80095c2:	fb04 0101 	mlage	r1, r4, r1, r0
 80095c6:	f101 04b4 	addge.w	r4, r1, #180	; 0xb4
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80095ca:	3428      	addlt	r4, #40	; 0x28
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
 80095cc:	0fe9      	lsrs	r1, r5, #31
  ep->num   = ep_addr & 0x7F;
 80095ce:	7026      	strb	r6, [r4, #0]
  ep->is_in = (0x80 & ep_addr) != 0;
 80095d0:	7061      	strb	r1, [r4, #1]
  ep->maxpacket = ep_mps;
 80095d2:	60e2      	str	r2, [r4, #12]
  ep->type = ep_type;
 80095d4:	70e3      	strb	r3, [r4, #3]
  
  __HAL_LOCK(hpcd); 
 80095d6:	f890 2140 	ldrb.w	r2, [r0, #320]	; 0x140
 80095da:	2a01      	cmp	r2, #1
 80095dc:	f000 8156 	beq.w	800988c <HAL_PCD_EP_Open+0x2dc>
 80095e0:	2201      	movs	r2, #1
 80095e2:	f880 2140 	strb.w	r2, [r0, #320]	; 0x140

/* initialize Endpoint */
  switch (ep->type)
  {
  case PCD_EP_TYPE_CTRL:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_CONTROL);
 80095e6:	b231      	sxth	r1, r6
 80095e8:	6802      	ldr	r2, [r0, #0]
  switch (ep->type)
 80095ea:	2b03      	cmp	r3, #3
 80095ec:	d80f      	bhi.n	800960e <HAL_PCD_EP_Open+0x5e>
 80095ee:	e8df f003 	tbb	[pc, r3]
 80095f2:	6502      	.short	0x6502
 80095f4:	5a51      	.short	0x5a51
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_CONTROL);
 80095f6:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80095fa:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80095fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009602:	041b      	lsls	r3, r3, #16
 8009604:	0c1b      	lsrs	r3, r3, #16
 8009606:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    break;
  case PCD_EP_TYPE_INTR:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_INTERRUPT);
    break;
  case PCD_EP_TYPE_ISOC:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_ISOCHRONOUS);
 800960a:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
    break;
  } 
  
  PCD_SET_EP_ADDRESS(hpcd->Instance, ep->num, ep->num);
 800960e:	f832 7021 	ldrh.w	r7, [r2, r1, lsl #2]
 8009612:	f640 730f 	movw	r3, #3855	; 0xf0f
 8009616:	401f      	ands	r7, r3
 8009618:	433e      	orrs	r6, r7
 800961a:	f248 0c80 	movw	ip, #32896	; 0x8080
 800961e:	ea4c 0606 	orr.w	r6, ip, r6
 8009622:	f822 6021 	strh.w	r6, [r2, r1, lsl #2]
  
  if (ep->doublebuffer == 0) 
 8009626:	7aa6      	ldrb	r6, [r4, #10]
  {
    if (ep->is_in)
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 8009628:	ea4f 0ec1 	mov.w	lr, r1, lsl #3
 800962c:	f502 6780 	add.w	r7, r2, #1024	; 0x400
  if (ep->doublebuffer == 0) 
 8009630:	2e00      	cmp	r6, #0
 8009632:	f040 808e 	bne.w	8009752 <HAL_PCD_EP_Open+0x1a2>
      PCD_SET_EP_TX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 8009636:	88a6      	ldrh	r6, [r4, #4]
    if (ep->is_in)
 8009638:	2d00      	cmp	r5, #0
      PCD_SET_EP_TX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 800963a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800963e:	ea4f 0646 	mov.w	r6, r6, lsl #1
    if (ep->is_in)
 8009642:	da46      	bge.n	80096d2 <HAL_PCD_EP_Open+0x122>
      PCD_SET_EP_TX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 8009644:	f8b2 5050 	ldrh.w	r5, [r2, #80]	; 0x50
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 8009648:	f832 4021 	ldrh.w	r4, [r2, r1, lsl #2]
      PCD_SET_EP_TX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 800964c:	fa1e fe85 	uxtah	lr, lr, r5
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 8009650:	0664      	lsls	r4, r4, #25
      PCD_SET_EP_TX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 8009652:	f847 601e 	str.w	r6, [r7, lr, lsl #1]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 8009656:	d508      	bpl.n	800966a <HAL_PCD_EP_Open+0xba>
 8009658:	f832 4021 	ldrh.w	r4, [r2, r1, lsl #2]
 800965c:	4023      	ands	r3, r4
 800965e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009662:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009666:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
      /* Configure NAK status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK); 
 800966a:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800966e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009672:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009676:	041b      	lsls	r3, r3, #16
 8009678:	0c1b      	lsrs	r3, r3, #16
 800967a:	f083 0320 	eor.w	r3, r3, #32
      PCD_SET_EP_RX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, ep->maxpacket);
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
 800967e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009682:	f043 0380 	orr.w	r3, r3, #128	; 0x80
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
      PCD_RX_DTOG(hpcd->Instance, ep->num);
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS);
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS);
 8009686:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
    }
  } 
  
  __HAL_UNLOCK(hpcd);   
 800968a:	2300      	movs	r3, #0
 800968c:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
  return ret;
 8009690:	4618      	mov	r0, r3
}
 8009692:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_BULK);
 8009694:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8009698:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800969c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096a0:	041b      	lsls	r3, r3, #16
 80096a2:	0c1b      	lsrs	r3, r3, #16
 80096a4:	e7b1      	b.n	800960a <HAL_PCD_EP_Open+0x5a>
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_INTERRUPT);
 80096a6:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80096aa:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80096ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096b2:	041b      	lsls	r3, r3, #16
 80096b4:	0c1b      	lsrs	r3, r3, #16
 80096b6:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80096ba:	e7a6      	b.n	800960a <HAL_PCD_EP_Open+0x5a>
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_ISOCHRONOUS);
 80096bc:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80096c0:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80096c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096c8:	041b      	lsls	r3, r3, #16
 80096ca:	0c1b      	lsrs	r3, r3, #16
 80096cc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80096d0:	e79b      	b.n	800960a <HAL_PCD_EP_Open+0x5a>
      PCD_SET_EP_RX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 80096d2:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
      PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, ep->maxpacket);
 80096d6:	f8b2 5050 	ldrh.w	r5, [r2, #80]	; 0x50
      PCD_SET_EP_RX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 80096da:	fa1e f383 	uxtah	r3, lr, r3
 80096de:	3304      	adds	r3, #4
      PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, ep->maxpacket);
 80096e0:	fa1e f585 	uxtah	r5, lr, r5
      PCD_SET_EP_RX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 80096e4:	f847 6013 	str.w	r6, [r7, r3, lsl #1]
      PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, ep->maxpacket);
 80096e8:	68e4      	ldr	r4, [r4, #12]
 80096ea:	2c3e      	cmp	r4, #62	; 0x3e
 80096ec:	f105 0506 	add.w	r5, r5, #6
 80096f0:	d927      	bls.n	8009742 <HAL_PCD_EP_Open+0x192>
 80096f2:	f3c4 164f 	ubfx	r6, r4, #5, #16
 80096f6:	06e3      	lsls	r3, r4, #27
 80096f8:	bf04      	itt	eq
 80096fa:	f106 33ff 	addeq.w	r3, r6, #4294967295	; 0xffffffff
 80096fe:	b29e      	uxtheq	r6, r3
 8009700:	4b63      	ldr	r3, [pc, #396]	; (8009890 <HAL_PCD_EP_Open+0x2e0>)
 8009702:	ea43 2386 	orr.w	r3, r3, r6, lsl #10
 8009706:	b29b      	uxth	r3, r3
 8009708:	f847 3015 	str.w	r3, [r7, r5, lsl #1]
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 800970c:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8009710:	045f      	lsls	r7, r3, #17
 8009712:	d50b      	bpl.n	800972c <HAL_PCD_EP_Open+0x17c>
 8009714:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8009718:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800971c:	051b      	lsls	r3, r3, #20
 800971e:	0d1b      	lsrs	r3, r3, #20
 8009720:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009724:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009728:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
 800972c:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8009730:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009734:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009738:	041b      	lsls	r3, r3, #16
 800973a:	0c1b      	lsrs	r3, r3, #16
 800973c:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8009740:	e79d      	b.n	800967e <HAL_PCD_EP_Open+0xce>
      PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, ep->maxpacket);
 8009742:	f3c4 034f 	ubfx	r3, r4, #1, #16
 8009746:	07e4      	lsls	r4, r4, #31
 8009748:	bf44      	itt	mi
 800974a:	3301      	addmi	r3, #1
 800974c:	b29b      	uxthmi	r3, r3
 800974e:	029b      	lsls	r3, r3, #10
 8009750:	e7d9      	b.n	8009706 <HAL_PCD_EP_Open+0x156>
    PCD_SET_EP_DBUF(hpcd->Instance, ep->num);
 8009752:	f832 6021 	ldrh.w	r6, [r2, r1, lsl #2]
 8009756:	b2b6      	uxth	r6, r6
 8009758:	f446 7680 	orr.w	r6, r6, #256	; 0x100
 800975c:	401e      	ands	r6, r3
 800975e:	ea4c 0606 	orr.w	r6, ip, r6
 8009762:	f822 6021 	strh.w	r6, [r2, r1, lsl #2]
    PCD_SET_EP_DBUF_ADDR(hpcd->Instance, ep->num,ep->pmaaddr0, ep->pmaaddr1);
 8009766:	f8b2 c050 	ldrh.w	ip, [r2, #80]	; 0x50
 800976a:	88e6      	ldrh	r6, [r4, #6]
 800976c:	8924      	ldrh	r4, [r4, #8]
 800976e:	fa1e fc8c 	uxtah	ip, lr, ip
 8009772:	0876      	lsrs	r6, r6, #1
 8009774:	0076      	lsls	r6, r6, #1
 8009776:	f847 601c 	str.w	r6, [r7, ip, lsl #1]
 800977a:	f8b2 6050 	ldrh.w	r6, [r2, #80]	; 0x50
 800977e:	fa1e fe86 	uxtah	lr, lr, r6
 8009782:	f10e 0e04 	add.w	lr, lr, #4
 8009786:	0864      	lsrs	r4, r4, #1
 8009788:	0064      	lsls	r4, r4, #1
    if (ep->is_in==0)
 800978a:	2d00      	cmp	r5, #0
    PCD_SET_EP_DBUF_ADDR(hpcd->Instance, ep->num,ep->pmaaddr0, ep->pmaaddr1);
 800978c:	f847 401e 	str.w	r4, [r7, lr, lsl #1]
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 8009790:	f832 4021 	ldrh.w	r4, [r2, r1, lsl #2]
    if (ep->is_in==0)
 8009794:	db3f      	blt.n	8009816 <HAL_PCD_EP_Open+0x266>
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 8009796:	0466      	lsls	r6, r4, #17
 8009798:	d508      	bpl.n	80097ac <HAL_PCD_EP_Open+0x1fc>
 800979a:	f832 4021 	ldrh.w	r4, [r2, r1, lsl #2]
 800979e:	4023      	ands	r3, r4
 80097a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80097a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097a8:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 80097ac:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80097b0:	065d      	lsls	r5, r3, #25
 80097b2:	d50b      	bpl.n	80097cc <HAL_PCD_EP_Open+0x21c>
 80097b4:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80097b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80097bc:	051b      	lsls	r3, r3, #20
 80097be:	0d1b      	lsrs	r3, r3, #20
 80097c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80097c4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80097c8:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
      PCD_TX_DTOG(hpcd->Instance, ep->num);
 80097cc:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80097d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80097d4:	051b      	lsls	r3, r3, #20
 80097d6:	0d1b      	lsrs	r3, r3, #20
 80097d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80097dc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80097e0:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
 80097e4:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80097e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80097ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097f0:	041b      	lsls	r3, r3, #16
 80097f2:	0c1b      	lsrs	r3, r3, #16
 80097f4:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80097f8:	f248 0480 	movw	r4, #32896	; 0x8080
 80097fc:	4323      	orrs	r3, r4
 80097fe:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS);
 8009802:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8009806:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800980a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS);
 800980e:	041b      	lsls	r3, r3, #16
 8009810:	0c1b      	lsrs	r3, r3, #16
 8009812:	4323      	orrs	r3, r4
 8009814:	e737      	b.n	8009686 <HAL_PCD_EP_Open+0xd6>
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 8009816:	0464      	lsls	r4, r4, #17
 8009818:	d508      	bpl.n	800982c <HAL_PCD_EP_Open+0x27c>
 800981a:	f832 4021 	ldrh.w	r4, [r2, r1, lsl #2]
 800981e:	4023      	ands	r3, r4
 8009820:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009824:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009828:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 800982c:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8009830:	065b      	lsls	r3, r3, #25
 8009832:	d50b      	bpl.n	800984c <HAL_PCD_EP_Open+0x29c>
 8009834:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8009838:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800983c:	051b      	lsls	r3, r3, #20
 800983e:	0d1b      	lsrs	r3, r3, #20
 8009840:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009844:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009848:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
      PCD_RX_DTOG(hpcd->Instance, ep->num);
 800984c:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8009850:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009854:	051b      	lsls	r3, r3, #20
 8009856:	0d1b      	lsrs	r3, r3, #20
 8009858:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800985c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009860:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS);
 8009864:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8009868:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800986c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009870:	041b      	lsls	r3, r3, #16
 8009872:	0c1b      	lsrs	r3, r3, #16
 8009874:	f248 0480 	movw	r4, #32896	; 0x8080
 8009878:	4323      	orrs	r3, r4
 800987a:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS);
 800987e:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8009882:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009886:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800988a:	e7c0      	b.n	800980e <HAL_PCD_EP_Open+0x25e>
  __HAL_LOCK(hpcd); 
 800988c:	2002      	movs	r0, #2
 800988e:	e700      	b.n	8009692 <HAL_PCD_EP_Open+0xe2>
 8009890:	ffff8000 	.word	0xffff8000

08009894 <HAL_PCD_EP_Close>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
 8009894:	b510      	push	{r4, lr}
  PCD_EPTypeDef *ep;
  
  if ((ep_addr & 0x80) == 0x80)
 8009896:	b24c      	sxtb	r4, r1
 8009898:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 800989c:	2c00      	cmp	r4, #0
 800989e:	f04f 021c 	mov.w	r2, #28
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80098a2:	bfb5      	itete	lt
 80098a4:	fb02 0103 	mlalt	r1, r2, r3, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 80098a8:	fb02 0101 	mlage	r1, r2, r1, r0
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80098ac:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 80098ae:	31b4      	addge	r1, #180	; 0xb4
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
 80098b0:	0fe2      	lsrs	r2, r4, #31
  ep->num   = ep_addr & 0x7F;
 80098b2:	700b      	strb	r3, [r1, #0]
  ep->is_in = (0x80 & ep_addr) != 0;
 80098b4:	704a      	strb	r2, [r1, #1]
  
  __HAL_LOCK(hpcd); 
 80098b6:	f890 2140 	ldrb.w	r2, [r0, #320]	; 0x140
 80098ba:	2a01      	cmp	r2, #1
 80098bc:	f000 80c4 	beq.w	8009a48 <HAL_PCD_EP_Close+0x1b4>
 80098c0:	2201      	movs	r2, #1
 80098c2:	f880 2140 	strb.w	r2, [r0, #320]	; 0x140

  if (ep->doublebuffer == 0) 
 80098c6:	7a89      	ldrb	r1, [r1, #10]
 80098c8:	6802      	ldr	r2, [r0, #0]
  {
    if (ep->is_in)
    {
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 80098ca:	b21b      	sxth	r3, r3
  if (ep->doublebuffer == 0) 
 80098cc:	bbc9      	cbnz	r1, 8009942 <HAL_PCD_EP_Close+0xae>
    if (ep->is_in)
 80098ce:	2c00      	cmp	r4, #0
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 80098d0:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
    if (ep->is_in)
 80098d4:	da20      	bge.n	8009918 <HAL_PCD_EP_Close+0x84>
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 80098d6:	064c      	lsls	r4, r1, #25
 80098d8:	d50b      	bpl.n	80098f2 <HAL_PCD_EP_Close+0x5e>
 80098da:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80098de:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 80098e2:	0509      	lsls	r1, r1, #20
 80098e4:	0d09      	lsrs	r1, r1, #20
 80098e6:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 80098ea:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 80098ee:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS); 
 80098f2:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80098f6:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 80098fa:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    }
    else
    {
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS);
 80098fe:	0409      	lsls	r1, r1, #16
 8009900:	0c09      	lsrs	r1, r1, #16
 8009902:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8009906:	f041 0180 	orr.w	r1, r1, #128	; 0x80
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
      PCD_RX_DTOG(hpcd->Instance, ep->num);
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS);
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS);
 800990a:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
    }
  } 
  
  __HAL_UNLOCK(hpcd);   
 800990e:	2300      	movs	r3, #0
 8009910:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
  return HAL_OK;
 8009914:	4618      	mov	r0, r3
}
 8009916:	bd10      	pop	{r4, pc}
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 8009918:	0449      	lsls	r1, r1, #17
 800991a:	d50b      	bpl.n	8009934 <HAL_PCD_EP_Close+0xa0>
 800991c:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8009920:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 8009924:	0509      	lsls	r1, r1, #20
 8009926:	0d09      	lsrs	r1, r1, #20
 8009928:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 800992c:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8009930:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS);
 8009934:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8009938:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 800993c:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8009940:	e7dd      	b.n	80098fe <HAL_PCD_EP_Close+0x6a>
    if (ep->is_in==0)
 8009942:	2c00      	cmp	r4, #0
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 8009944:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
    if (ep->is_in==0)
 8009948:	db40      	blt.n	80099cc <HAL_PCD_EP_Close+0x138>
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 800994a:	044c      	lsls	r4, r1, #17
 800994c:	d50b      	bpl.n	8009966 <HAL_PCD_EP_Close+0xd2>
 800994e:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8009952:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 8009956:	0509      	lsls	r1, r1, #20
 8009958:	0d09      	lsrs	r1, r1, #20
 800995a:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 800995e:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8009962:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 8009966:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800996a:	0649      	lsls	r1, r1, #25
 800996c:	d50b      	bpl.n	8009986 <HAL_PCD_EP_Close+0xf2>
 800996e:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8009972:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 8009976:	0509      	lsls	r1, r1, #20
 8009978:	0d09      	lsrs	r1, r1, #20
 800997a:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800997e:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 8009982:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
      PCD_TX_DTOG(hpcd->Instance, ep->num);
 8009986:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800998a:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 800998e:	0509      	lsls	r1, r1, #20
 8009990:	0d09      	lsrs	r1, r1, #20
 8009992:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8009996:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 800999a:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS);
 800999e:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80099a2:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 80099a6:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 80099aa:	0409      	lsls	r1, r1, #16
 80099ac:	0c09      	lsrs	r1, r1, #16
 80099ae:	f248 0480 	movw	r4, #32896	; 0x8080
 80099b2:	4321      	orrs	r1, r4
 80099b4:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS);
 80099b8:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80099bc:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 80099c0:	f021 0140 	bic.w	r1, r1, #64	; 0x40
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS);
 80099c4:	0409      	lsls	r1, r1, #16
 80099c6:	0c09      	lsrs	r1, r1, #16
 80099c8:	4321      	orrs	r1, r4
 80099ca:	e79e      	b.n	800990a <HAL_PCD_EP_Close+0x76>
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 80099cc:	044c      	lsls	r4, r1, #17
 80099ce:	d50b      	bpl.n	80099e8 <HAL_PCD_EP_Close+0x154>
 80099d0:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80099d4:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 80099d8:	0509      	lsls	r1, r1, #20
 80099da:	0d09      	lsrs	r1, r1, #20
 80099dc:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 80099e0:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80099e4:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 80099e8:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80099ec:	0649      	lsls	r1, r1, #25
 80099ee:	d50b      	bpl.n	8009a08 <HAL_PCD_EP_Close+0x174>
 80099f0:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80099f4:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 80099f8:	0509      	lsls	r1, r1, #20
 80099fa:	0d09      	lsrs	r1, r1, #20
 80099fc:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8009a00:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 8009a04:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
      PCD_RX_DTOG(hpcd->Instance, ep->num);
 8009a08:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8009a0c:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 8009a10:	0509      	lsls	r1, r1, #20
 8009a12:	0d09      	lsrs	r1, r1, #20
 8009a14:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 8009a18:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8009a1c:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS);
 8009a20:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8009a24:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8009a28:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8009a2c:	0409      	lsls	r1, r1, #16
 8009a2e:	0c09      	lsrs	r1, r1, #16
 8009a30:	f248 0480 	movw	r4, #32896	; 0x8080
 8009a34:	4321      	orrs	r1, r4
 8009a36:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS);
 8009a3a:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8009a3e:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8009a42:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8009a46:	e7bd      	b.n	80099c4 <HAL_PCD_EP_Close+0x130>
  __HAL_LOCK(hpcd); 
 8009a48:	2002      	movs	r0, #2
 8009a4a:	e764      	b.n	8009916 <HAL_PCD_EP_Close+0x82>

08009a4c <HAL_PCD_EP_Receive>:
  * @param  pBuf: pointer to the reception buffer   
  * @param  len: amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a4e:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 PCD_EPTypeDef *ep;
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8009a52:	241c      	movs	r4, #28
 8009a54:	fb04 0401 	mla	r4, r4, r1, r0
  ep->xfer_len = len;
 8009a58:	e9c4 2331 	strd	r2, r3, [r4, #196]	; 0xc4
  ep->xfer_count = 0;
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	f8c4 20cc 	str.w	r2, [r4, #204]	; 0xcc
  ep->is_in = 0;
 8009a62:	f884 20b5 	strb.w	r2, [r4, #181]	; 0xb5
  ep->num = ep_addr & 0x7F;
 8009a66:	f884 10b4 	strb.w	r1, [r4, #180]	; 0xb4
   
  __HAL_LOCK(hpcd); 
 8009a6a:	f890 5140 	ldrb.w	r5, [r0, #320]	; 0x140
 8009a6e:	2d01      	cmp	r5, #1
 8009a70:	d04b      	beq.n	8009b0a <HAL_PCD_EP_Receive+0xbe>
 8009a72:	2501      	movs	r5, #1
 8009a74:	f880 5140 	strb.w	r5, [r0, #320]	; 0x140
   
  /* Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
 8009a78:	f8d4 40c0 	ldr.w	r4, [r4, #192]	; 0xc0
 8009a7c:	271c      	movs	r7, #28
 8009a7e:	429c      	cmp	r4, r3
  {
    len=ep->maxpacket;
    ep->xfer_len-=len; 
 8009a80:	fb07 0701 	mla	r7, r7, r1, r0
 8009a84:	bf3c      	itt	cc
 8009a86:	1b1a      	subcc	r2, r3, r4
 8009a88:	4623      	movcc	r3, r4
  
  /* configure and validate Rx endpoint */
  if (ep->doublebuffer == 0) 
  {
    /*Set RX buffer count*/
    PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, len);
 8009a8a:	6804      	ldr	r4, [r0, #0]
 8009a8c:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
  }
  else
  {
    /*Set the Double buffer counter*/
    PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8009a90:	f8b4 5050 	ldrh.w	r5, [r4, #80]	; 0x50
    PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, len);
 8009a94:	00ca      	lsls	r2, r1, #3
    PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8009a96:	fa12 f585 	uxtah	r5, r2, r5
 8009a9a:	2b3e      	cmp	r3, #62	; 0x3e
 8009a9c:	f504 6680 	add.w	r6, r4, #1024	; 0x400
 8009aa0:	f105 0506 	add.w	r5, r5, #6
 8009aa4:	d926      	bls.n	8009af4 <HAL_PCD_EP_Receive+0xa8>
 8009aa6:	f3c3 124f 	ubfx	r2, r3, #5, #16
 8009aaa:	06df      	lsls	r7, r3, #27
 8009aac:	bf04      	itt	eq
 8009aae:	f102 33ff 	addeq.w	r3, r2, #4294967295	; 0xffffffff
 8009ab2:	b29a      	uxtheq	r2, r3
 8009ab4:	4b16      	ldr	r3, [pc, #88]	; (8009b10 <HAL_PCD_EP_Receive+0xc4>)
 8009ab6:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 8009aba:	b29b      	uxth	r3, r3
 8009abc:	f846 3015 	str.w	r3, [r6, r5, lsl #1]
  } 
  
  PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
 8009ac0:	231c      	movs	r3, #28
 8009ac2:	fb03 0101 	mla	r1, r3, r1, r0
 8009ac6:	f891 20b4 	ldrb.w	r2, [r1, #180]	; 0xb4
 8009aca:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8009ace:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009ad2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ad6:	041b      	lsls	r3, r3, #16
 8009ad8:	0c1b      	lsrs	r3, r3, #16
 8009ada:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8009ade:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ae2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ae6:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
  
  __HAL_UNLOCK(hpcd); 
 8009aea:	2300      	movs	r3, #0
 8009aec:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
  
  return HAL_OK;
 8009af0:	4618      	mov	r0, r3
}
 8009af2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8009af4:	f3c3 024f 	ubfx	r2, r3, #1, #16
 8009af8:	07db      	lsls	r3, r3, #31
 8009afa:	bf44      	itt	mi
 8009afc:	3201      	addmi	r2, #1
 8009afe:	b292      	uxthmi	r2, r2
 8009b00:	0292      	lsls	r2, r2, #10
 8009b02:	b292      	uxth	r2, r2
 8009b04:	f846 2015 	str.w	r2, [r6, r5, lsl #1]
 8009b08:	e7da      	b.n	8009ac0 <HAL_PCD_EP_Receive+0x74>
  __HAL_LOCK(hpcd); 
 8009b0a:	2002      	movs	r0, #2
 8009b0c:	e7f1      	b.n	8009af2 <HAL_PCD_EP_Receive+0xa6>
 8009b0e:	bf00      	nop
 8009b10:	ffff8000 	.word	0xffff8000

08009b14 <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr: endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  return hpcd->OUT_ep[ep_addr & 0x7F].xfer_count;
 8009b14:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8009b18:	231c      	movs	r3, #28
 8009b1a:	fb03 0001 	mla	r0, r3, r1, r0
}
 8009b1e:	f8b0 00cc 	ldrh.w	r0, [r0, #204]	; 0xcc
 8009b22:	4770      	bx	lr

08009b24 <HAL_PCD_EP_Transmit>:
  * @param  pBuf: pointer to the transmission buffer   
  * @param  len: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b26:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8009b2a:	461f      	mov	r7, r3
  uint16_t pmabuffer = 0;
    
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8009b2c:	231c      	movs	r3, #28
 8009b2e:	fb03 0305 	mla	r3, r3, r5, r0
  ep->xfer_len = len;
 8009b32:	e9c3 270e 	strd	r2, r7, [r3, #56]	; 0x38
{
 8009b36:	4604      	mov	r4, r0
 8009b38:	4694      	mov	ip, r2
  ep->xfer_count = 0;
 8009b3a:	2000      	movs	r0, #0
  ep->is_in = 1;
 8009b3c:	2201      	movs	r2, #1
  ep->xfer_count = 0;
 8009b3e:	6418      	str	r0, [r3, #64]	; 0x40
  ep->is_in = 1;
 8009b40:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  ep->num = ep_addr & 0x7F;
 8009b44:	f883 5028 	strb.w	r5, [r3, #40]	; 0x28
  
  __HAL_LOCK(hpcd); 
 8009b48:	f894 1140 	ldrb.w	r1, [r4, #320]	; 0x140
 8009b4c:	4291      	cmp	r1, r2
 8009b4e:	d072      	beq.n	8009c36 <HAL_PCD_EP_Transmit+0x112>
 8009b50:	f884 2140 	strb.w	r2, [r4, #320]	; 0x140
  
  /*Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
 8009b54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009b56:	261c      	movs	r6, #28
 8009b58:	fb06 4605 	mla	r6, r6, r5, r4
 8009b5c:	42ba      	cmp	r2, r7
  {
    len=ep->maxpacket;
    ep->xfer_len-=len; 
 8009b5e:	bf3c      	itt	cc
 8009b60:	1ab8      	subcc	r0, r7, r2
 8009b62:	4617      	movcc	r7, r2
    len=ep->xfer_len;
    ep->xfer_len =0;
  }
  
  /* configure and validate Tx endpoint */
  if (ep->doublebuffer == 0) 
 8009b64:	f896 2032 	ldrb.w	r2, [r6, #50]	; 0x32
 8009b68:	63f0      	str	r0, [r6, #60]	; 0x3c
  {
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, len);
 8009b6a:	b2bb      	uxth	r3, r7
 8009b6c:	6820      	ldr	r0, [r4, #0]
  if (ep->doublebuffer == 0) 
 8009b6e:	bb4a      	cbnz	r2, 8009bc4 <HAL_PCD_EP_Transmit+0xa0>
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, len);
 8009b70:	8db2      	ldrh	r2, [r6, #44]	; 0x2c
 8009b72:	4661      	mov	r1, ip
 8009b74:	f000 fb6f 	bl	800a256 <PCD_WritePMA>
    PCD_SET_EP_TX_CNT(hpcd->Instance, ep->num, len);
 8009b78:	6822      	ldr	r2, [r4, #0]
 8009b7a:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 8009b7e:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8009b82:	b29b      	uxth	r3, r3
 8009b84:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8009b88:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8009b8c:	f8c3 7404 	str.w	r7, [r3, #1028]	; 0x404
    }
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, pmabuffer, len);
    PCD_FreeUserBuffer(hpcd->Instance, ep->num, ep->is_in);
  }

  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8009b90:	211c      	movs	r1, #28
 8009b92:	fb01 4505 	mla	r5, r1, r5, r4
 8009b96:	6822      	ldr	r2, [r4, #0]
 8009b98:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 8009b9c:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8009ba0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ba4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ba8:	041b      	lsls	r3, r3, #16
 8009baa:	0c1b      	lsrs	r3, r3, #16
 8009bac:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8009bb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009bb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  
  __HAL_UNLOCK(hpcd);
 8009bb8:	2000      	movs	r0, #0
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8009bba:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
  __HAL_UNLOCK(hpcd);
 8009bbe:	f884 0140 	strb.w	r0, [r4, #320]	; 0x140
     
  return HAL_OK;
}
 8009bc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8009bc4:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8009bc8:	b292      	uxth	r2, r2
 8009bca:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 8009bce:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8009bd2:	f8c2 740c 	str.w	r7, [r2, #1036]	; 0x40c
    if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_TX)
 8009bd6:	f896 2028 	ldrb.w	r2, [r6, #40]	; 0x28
 8009bda:	f830 2022 	ldrh.w	r2, [r0, r2, lsl #2]
 8009bde:	0652      	lsls	r2, r2, #25
      pmabuffer = ep->pmaaddr1;
 8009be0:	bf4c      	ite	mi
 8009be2:	8e32      	ldrhmi	r2, [r6, #48]	; 0x30
      pmabuffer = ep->pmaaddr0;
 8009be4:	8df2      	ldrhpl	r2, [r6, #46]	; 0x2e
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, pmabuffer, len);
 8009be6:	261c      	movs	r6, #28
 8009be8:	fb06 4605 	mla	r6, r6, r5, r4
 8009bec:	6bb1      	ldr	r1, [r6, #56]	; 0x38
 8009bee:	f000 fb32 	bl	800a256 <PCD_WritePMA>
    PCD_FreeUserBuffer(hpcd->Instance, ep->num, ep->is_in);
 8009bf2:	f896 3029 	ldrb.w	r3, [r6, #41]	; 0x29
 8009bf6:	6822      	ldr	r2, [r4, #0]
 8009bf8:	b973      	cbnz	r3, 8009c18 <HAL_PCD_EP_Transmit+0xf4>
 8009bfa:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 8009bfe:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8009c02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009c06:	051b      	lsls	r3, r3, #20
 8009c08:	0d1b      	lsrs	r3, r3, #20
 8009c0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c0e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009c12:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8009c16:	e7bb      	b.n	8009b90 <HAL_PCD_EP_Transmit+0x6c>
 8009c18:	2b01      	cmp	r3, #1
 8009c1a:	d1b9      	bne.n	8009b90 <HAL_PCD_EP_Transmit+0x6c>
 8009c1c:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 8009c20:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8009c24:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009c28:	051b      	lsls	r3, r3, #20
 8009c2a:	0d1b      	lsrs	r3, r3, #20
 8009c2c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009c30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c34:	e7ed      	b.n	8009c12 <HAL_PCD_EP_Transmit+0xee>
  __HAL_LOCK(hpcd); 
 8009c36:	2002      	movs	r0, #2
 8009c38:	e7c3      	b.n	8009bc2 <HAL_PCD_EP_Transmit+0x9e>
	...

08009c3c <HAL_PCD_IRQHandler>:
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 8009c3c:	6803      	ldr	r3, [r0, #0]
 8009c3e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
{
 8009c42:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8009c46:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 8009c48:	0418      	lsls	r0, r3, #16
 8009c4a:	d46e      	bmi.n	8009d2a <HAL_PCD_IRQHandler+0xee>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
 8009c4c:	6823      	ldr	r3, [r4, #0]
 8009c4e:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8009c52:	0551      	lsls	r1, r2, #21
 8009c54:	d50a      	bpl.n	8009c6c <HAL_PCD_IRQHandler+0x30>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8009c56:	f64f 32ff 	movw	r2, #64511	; 0xfbff
    HAL_PCD_ResetCallback(hpcd);
 8009c5a:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8009c5c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8009c60:	f001 fc8f 	bl	800b582 <HAL_PCD_ResetCallback>
    HAL_PCD_SetAddress(hpcd, 0);
 8009c64:	2100      	movs	r1, #0
 8009c66:	4620      	mov	r0, r4
 8009c68:	f7ff fc8c 	bl	8009584 <HAL_PCD_SetAddress>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_PMAOVRM))
 8009c6c:	6823      	ldr	r3, [r4, #0]
 8009c6e:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8009c72:	0452      	lsls	r2, r2, #17
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVRM);    
 8009c74:	bf44      	itt	mi
 8009c76:	f64b 72ff 	movwmi	r2, #49151	; 0xbfff
 8009c7a:	f8a3 2044 	strhmi.w	r2, [r3, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ERR))
 8009c7e:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8009c82:	0497      	lsls	r7, r2, #18
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
 8009c84:	bf44      	itt	mi
 8009c86:	f64d 72ff 	movwmi	r2, #57343	; 0xdfff
 8009c8a:	f8a3 2044 	strhmi.w	r2, [r3, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
 8009c8e:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8009c92:	04d6      	lsls	r6, r2, #19
 8009c94:	d513      	bpl.n	8009cbe <HAL_PCD_IRQHandler+0x82>
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 8009c96:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8009c9a:	f022 0204 	bic.w	r2, r2, #4
 8009c9e:	0412      	lsls	r2, r2, #16
 8009ca0:	0c12      	lsrs	r2, r2, #16
 8009ca2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR = wInterrupt_Mask;
 8009ca6:	f44f 423d 	mov.w	r2, #48384	; 0xbd00
 8009caa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8009cae:	4620      	mov	r0, r4
 8009cb0:	f001 fc75 	bl	800b59e <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);     
 8009cb4:	6823      	ldr	r3, [r4, #0]
 8009cb6:	f64e 72ff 	movw	r2, #61439	; 0xefff
 8009cba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SUSP))
 8009cbe:	6823      	ldr	r3, [r4, #0]
 8009cc0:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8009cc4:	0515      	lsls	r5, r2, #20
 8009cc6:	d518      	bpl.n	8009cfa <HAL_PCD_IRQHandler+0xbe>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);  
 8009cc8:	f24f 72ff 	movw	r2, #63487	; 0xf7ff
 8009ccc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8009cd0:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8009cd4:	b292      	uxth	r2, r2
 8009cd6:	f042 0208 	orr.w	r2, r2, #8
 8009cda:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8009cde:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8009ce2:	b292      	uxth	r2, r2
 8009ce4:	f042 0204 	orr.w	r2, r2, #4
 8009ce8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP) == 0)
 8009cec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009cf0:	04d8      	lsls	r0, r3, #19
 8009cf2:	d402      	bmi.n	8009cfa <HAL_PCD_IRQHandler+0xbe>
      HAL_PCD_SuspendCallback(hpcd);
 8009cf4:	4620      	mov	r0, r4
 8009cf6:	f001 fc51 	bl	800b59c <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
 8009cfa:	6823      	ldr	r3, [r4, #0]
 8009cfc:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8009d00:	0591      	lsls	r1, r2, #22
 8009d02:	d506      	bpl.n	8009d12 <HAL_PCD_IRQHandler+0xd6>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 8009d04:	f64f 52ff 	movw	r2, #65023	; 0xfdff
 8009d08:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8009d0c:	4620      	mov	r0, r4
 8009d0e:	f001 fc34 	bl	800b57a <HAL_PCD_SOFCallback>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ESOF))
 8009d12:	6823      	ldr	r3, [r4, #0]
 8009d14:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8009d18:	05d2      	lsls	r2, r2, #23
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF); 
 8009d1a:	bf44      	itt	mi
 8009d1c:	f64f 62ff 	movwmi	r2, #65279	; 0xfeff
 8009d20:	f8a3 2044 	strhmi.w	r2, [r3, #68]	; 0x44
}
 8009d24:	b002      	add	sp, #8
 8009d26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __IO uint16_t wEPVal = 0;
 8009d2a:	2300      	movs	r3, #0
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, EPindex);
 8009d2c:	4fc6      	ldr	r7, [pc, #792]	; (800a048 <HAL_PCD_IRQHandler+0x40c>)
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8009d2e:	f8df 831c 	ldr.w	r8, [pc, #796]	; 800a04c <HAL_PCD_IRQHandler+0x410>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8009d32:	f8df 931c 	ldr.w	r9, [pc, #796]	; 800a050 <HAL_PCD_IRQHandler+0x414>
  __IO uint16_t wEPVal = 0;
 8009d36:	f8ad 3006 	strh.w	r3, [sp, #6]
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 8009d3a:	6820      	ldr	r0, [r4, #0]
 8009d3c:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8009d40:	b29b      	uxth	r3, r3
 8009d42:	0419      	lsls	r1, r3, #16
 8009d44:	f8ad 3004 	strh.w	r3, [sp, #4]
 8009d48:	d580      	bpl.n	8009c4c <HAL_PCD_IRQHandler+0x10>
    EPindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8009d4a:	f8bd 5004 	ldrh.w	r5, [sp, #4]
    if (EPindex == 0)
 8009d4e:	f015 050f 	ands.w	r5, r5, #15
 8009d52:	f040 80ab 	bne.w	8009eac <HAL_PCD_IRQHandler+0x270>
      if ((wIstr & USB_ISTR_DIR) == 0)
 8009d56:	f8bd 1004 	ldrh.w	r1, [sp, #4]
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8009d5a:	8803      	ldrh	r3, [r0, #0]
      if ((wIstr & USB_ISTR_DIR) == 0)
 8009d5c:	f011 0110 	ands.w	r1, r1, #16
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8009d60:	b29b      	uxth	r3, r3
      if ((wIstr & USB_ISTR_DIR) == 0)
 8009d62:	d126      	bne.n	8009db2 <HAL_PCD_IRQHandler+0x176>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8009d64:	403b      	ands	r3, r7
 8009d66:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8009d68:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8009d6c:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8009d70:	b29b      	uxth	r3, r3
 8009d72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009d76:	eb00 0043 	add.w	r0, r0, r3, lsl #1
        ep->xfer_buff += ep->xfer_count;
 8009d7a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8009d7c:	f8d0 3404 	ldr.w	r3, [r0, #1028]	; 0x404
 8009d80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009d84:	6423      	str	r3, [r4, #64]	; 0x40
        ep->xfer_buff += ep->xfer_count;
 8009d86:	4413      	add	r3, r2
 8009d88:	63a3      	str	r3, [r4, #56]	; 0x38
        HAL_PCD_DataInStageCallback(hpcd, 0);
 8009d8a:	4620      	mov	r0, r4
 8009d8c:	f001 fbed 	bl	800b56a <HAL_PCD_DataInStageCallback>
        if((hpcd->USB_Address > 0)&& ( ep->xfer_len == 0))
 8009d90:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d0d0      	beq.n	8009d3a <HAL_PCD_IRQHandler+0xfe>
 8009d98:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8009d9a:	2a00      	cmp	r2, #0
 8009d9c:	d1cd      	bne.n	8009d3a <HAL_PCD_IRQHandler+0xfe>
          hpcd->Instance->DADDR = (hpcd->USB_Address | USB_DADDR_EF);
 8009d9e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8009da2:	6821      	ldr	r1, [r4, #0]
 8009da4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009da8:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0;
 8009dac:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 8009db0:	e7c3      	b.n	8009d3a <HAL_PCD_IRQHandler+0xfe>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8009db2:	f8ad 3006 	strh.w	r3, [sp, #6]
        if ((wEPVal & USB_EP_SETUP) != 0)
 8009db6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8009dba:	051a      	lsls	r2, r3, #20
 8009dbc:	d51f      	bpl.n	8009dfe <HAL_PCD_IRQHandler+0x1c2>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8009dbe:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8009dc2:	f894 20b4 	ldrb.w	r2, [r4, #180]	; 0xb4
 8009dc6:	b29b      	uxth	r3, r3
 8009dc8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009dcc:	eb00 0343 	add.w	r3, r0, r3, lsl #1
          PCD_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 8009dd0:	f8b4 20b8 	ldrh.w	r2, [r4, #184]	; 0xb8
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8009dd4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8009dd8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009ddc:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
          PCD_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 8009de0:	f504 71a2 	add.w	r1, r4, #324	; 0x144
 8009de4:	f000 fa45 	bl	800a272 <PCD_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 8009de8:	6822      	ldr	r2, [r4, #0]
 8009dea:	8813      	ldrh	r3, [r2, #0]
 8009dec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009df0:	051b      	lsls	r3, r3, #20
 8009df2:	0d1b      	lsrs	r3, r3, #20
 8009df4:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8009df6:	4620      	mov	r0, r4
 8009df8:	f001 fba8 	bl	800b54c <HAL_PCD_SetupStageCallback>
 8009dfc:	e79d      	b.n	8009d3a <HAL_PCD_IRQHandler+0xfe>
        else if ((wEPVal & USB_EP_CTR_RX) != 0)
 8009dfe:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8009e02:	041b      	lsls	r3, r3, #16
 8009e04:	d599      	bpl.n	8009d3a <HAL_PCD_IRQHandler+0xfe>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8009e06:	8803      	ldrh	r3, [r0, #0]
 8009e08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e0c:	051b      	lsls	r3, r3, #20
 8009e0e:	0d1b      	lsrs	r3, r3, #20
 8009e10:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8009e12:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8009e16:	f894 20b4 	ldrb.w	r2, [r4, #180]	; 0xb4
 8009e1a:	b29b      	uxth	r3, r3
 8009e1c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009e20:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8009e24:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8009e28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009e2c:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
          if (ep->xfer_count != 0)
 8009e30:	b163      	cbz	r3, 8009e4c <HAL_PCD_IRQHandler+0x210>
            PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8009e32:	f8b4 20b8 	ldrh.w	r2, [r4, #184]	; 0xb8
 8009e36:	f8d4 10c4 	ldr.w	r1, [r4, #196]	; 0xc4
 8009e3a:	f000 fa1a 	bl	800a272 <PCD_ReadPMA>
            ep->xfer_buff+=ep->xfer_count;
 8009e3e:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 8009e42:	f8d4 20cc 	ldr.w	r2, [r4, #204]	; 0xcc
 8009e46:	4413      	add	r3, r2
 8009e48:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
           HAL_PCD_DataOutStageCallback(hpcd, 0);
 8009e4c:	2100      	movs	r1, #0
 8009e4e:	4620      	mov	r0, r4
 8009e50:	f001 fb82 	bl	800b558 <HAL_PCD_DataOutStageCallback>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8009e54:	6822      	ldr	r2, [r4, #0]
 8009e56:	f8d4 50c0 	ldr.w	r5, [r4, #192]	; 0xc0
 8009e5a:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 8009e5e:	2d3e      	cmp	r5, #62	; 0x3e
 8009e60:	b289      	uxth	r1, r1
 8009e62:	f101 0106 	add.w	r1, r1, #6
 8009e66:	f502 6080 	add.w	r0, r2, #1024	; 0x400
 8009e6a:	d917      	bls.n	8009e9c <HAL_PCD_IRQHandler+0x260>
 8009e6c:	f3c5 134f 	ubfx	r3, r5, #5, #16
 8009e70:	06ee      	lsls	r6, r5, #27
 8009e72:	bf04      	itt	eq
 8009e74:	f103 33ff 	addeq.w	r3, r3, #4294967295	; 0xffffffff
 8009e78:	b29b      	uxtheq	r3, r3
 8009e7a:	ea49 2383 	orr.w	r3, r9, r3, lsl #10
 8009e7e:	b29b      	uxth	r3, r3
 8009e80:	f840 3011 	str.w	r3, [r0, r1, lsl #1]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8009e84:	8813      	ldrh	r3, [r2, #0]
 8009e86:	b29b      	uxth	r3, r3
 8009e88:	ea03 0308 	and.w	r3, r3, r8
 8009e8c:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8009e90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e98:	8013      	strh	r3, [r2, #0]
 8009e9a:	e74e      	b.n	8009d3a <HAL_PCD_IRQHandler+0xfe>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8009e9c:	f3c5 034f 	ubfx	r3, r5, #1, #16
 8009ea0:	07ed      	lsls	r5, r5, #31
 8009ea2:	bf44      	itt	mi
 8009ea4:	3301      	addmi	r3, #1
 8009ea6:	b29b      	uxthmi	r3, r3
 8009ea8:	029b      	lsls	r3, r3, #10
 8009eaa:	e7e8      	b.n	8009e7e <HAL_PCD_IRQHandler+0x242>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, EPindex);
 8009eac:	fa0f fa85 	sxth.w	sl, r5
 8009eb0:	f830 302a 	ldrh.w	r3, [r0, sl, lsl #2]
 8009eb4:	b29b      	uxth	r3, r3
 8009eb6:	f8ad 3006 	strh.w	r3, [sp, #6]
      if ((wEPVal & USB_EP_CTR_RX) != 0)
 8009eba:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8009ebe:	041e      	lsls	r6, r3, #16
 8009ec0:	d541      	bpl.n	8009f46 <HAL_PCD_IRQHandler+0x30a>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, EPindex);
 8009ec2:	f830 302a 	ldrh.w	r3, [r0, sl, lsl #2]
 8009ec6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009eca:	051b      	lsls	r3, r3, #20
 8009ecc:	0d1b      	lsrs	r3, r3, #20
        if (ep->doublebuffer == 0)
 8009ece:	211c      	movs	r1, #28
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, EPindex);
 8009ed0:	f820 302a 	strh.w	r3, [r0, sl, lsl #2]
        if (ep->doublebuffer == 0)
 8009ed4:	fb01 4105 	mla	r1, r1, r5, r4
 8009ed8:	f500 6280 	add.w	r2, r0, #1024	; 0x400
 8009edc:	f891 30be 	ldrb.w	r3, [r1, #190]	; 0xbe
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d173      	bne.n	8009fcc <HAL_PCD_IRQHandler+0x390>
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8009ee4:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8009ee8:	f891 60b4 	ldrb.w	r6, [r1, #180]	; 0xb4
 8009eec:	b29b      	uxth	r3, r3
 8009eee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009ef2:	3306      	adds	r3, #6
 8009ef4:	f852 6013 	ldr.w	r6, [r2, r3, lsl #1]
 8009ef8:	f3c6 0609 	ubfx	r6, r6, #0, #10
          if (count != 0)
 8009efc:	b136      	cbz	r6, 8009f0c <HAL_PCD_IRQHandler+0x2d0>
            PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8009efe:	f8b1 20b8 	ldrh.w	r2, [r1, #184]	; 0xb8
 8009f02:	f8d1 10c4 	ldr.w	r1, [r1, #196]	; 0xc4
 8009f06:	4633      	mov	r3, r6
 8009f08:	f000 f9b3 	bl	800a272 <PCD_ReadPMA>
        ep->xfer_count+=count;
 8009f0c:	211c      	movs	r1, #28
 8009f0e:	fb01 4105 	mla	r1, r1, r5, r4
 8009f12:	f8d1 30cc 	ldr.w	r3, [r1, #204]	; 0xcc
        ep->xfer_buff+=count;
 8009f16:	f8d1 20c4 	ldr.w	r2, [r1, #196]	; 0xc4
        ep->xfer_count+=count;
 8009f1a:	4433      	add	r3, r6
 8009f1c:	f8c1 30cc 	str.w	r3, [r1, #204]	; 0xcc
        if ((ep->xfer_len == 0) || (count < ep->maxpacket))
 8009f20:	f8d1 30c8 	ldr.w	r3, [r1, #200]	; 0xc8
        ep->xfer_buff+=count;
 8009f24:	4432      	add	r2, r6
 8009f26:	f8c1 20c4 	str.w	r2, [r1, #196]	; 0xc4
        if ((ep->xfer_len == 0) || (count < ep->maxpacket))
 8009f2a:	b123      	cbz	r3, 8009f36 <HAL_PCD_IRQHandler+0x2fa>
 8009f2c:	f8d1 00c0 	ldr.w	r0, [r1, #192]	; 0xc0
 8009f30:	4286      	cmp	r6, r0
 8009f32:	f080 8082 	bcs.w	800a03a <HAL_PCD_IRQHandler+0x3fe>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8009f36:	231c      	movs	r3, #28
 8009f38:	fb03 4305 	mla	r3, r3, r5, r4
 8009f3c:	4620      	mov	r0, r4
 8009f3e:	f893 10b4 	ldrb.w	r1, [r3, #180]	; 0xb4
 8009f42:	f001 fb09 	bl	800b558 <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0)
 8009f46:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8009f4a:	0618      	lsls	r0, r3, #24
 8009f4c:	f57f aef5 	bpl.w	8009d3a <HAL_PCD_IRQHandler+0xfe>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, EPindex);
 8009f50:	6820      	ldr	r0, [r4, #0]
 8009f52:	f830 302a 	ldrh.w	r3, [r0, sl, lsl #2]
 8009f56:	b29b      	uxth	r3, r3
 8009f58:	403b      	ands	r3, r7
        if (ep->doublebuffer == 0)
 8009f5a:	211c      	movs	r1, #28
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, EPindex);
 8009f5c:	f820 302a 	strh.w	r3, [r0, sl, lsl #2]
        if (ep->doublebuffer == 0)
 8009f60:	fb01 4105 	mla	r1, r1, r5, r4
 8009f64:	f500 6280 	add.w	r2, r0, #1024	; 0x400
 8009f68:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d171      	bne.n	800a054 <HAL_PCD_IRQHandler+0x418>
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8009f70:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8009f74:	f891 6028 	ldrb.w	r6, [r1, #40]	; 0x28
 8009f78:	b29b      	uxth	r3, r3
 8009f7a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009f7e:	3302      	adds	r3, #2
 8009f80:	f852 3013 	ldr.w	r3, [r2, r3, lsl #1]
 8009f84:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009f88:	640b      	str	r3, [r1, #64]	; 0x40
          if (ep->xfer_count != 0)
 8009f8a:	b11b      	cbz	r3, 8009f94 <HAL_PCD_IRQHandler+0x358>
            PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8009f8c:	8d8a      	ldrh	r2, [r1, #44]	; 0x2c
 8009f8e:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8009f90:	f000 f961 	bl	800a256 <PCD_WritePMA>
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8009f94:	6822      	ldr	r2, [r4, #0]
 8009f96:	211c      	movs	r1, #28
 8009f98:	fb01 4505 	mla	r5, r1, r5, r4
 8009f9c:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8009fa0:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 8009fa4:	b29b      	uxth	r3, r3
 8009fa6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8009faa:	eb02 0343 	add.w	r3, r2, r3, lsl #1
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8009fae:	4620      	mov	r0, r4
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8009fb0:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
        ep->xfer_buff+=ep->xfer_count;
 8009fb4:	6bab      	ldr	r3, [r5, #56]	; 0x38
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8009fb6:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8009fba:	642a      	str	r2, [r5, #64]	; 0x40
        ep->xfer_buff+=ep->xfer_count;
 8009fbc:	441a      	add	r2, r3
        if (ep->xfer_len == 0)
 8009fbe:	6beb      	ldr	r3, [r5, #60]	; 0x3c
        ep->xfer_buff+=ep->xfer_count;
 8009fc0:	63aa      	str	r2, [r5, #56]	; 0x38
        if (ep->xfer_len == 0)
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d17a      	bne.n	800a0bc <HAL_PCD_IRQHandler+0x480>
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8009fc6:	f001 fad0 	bl	800b56a <HAL_PCD_DataInStageCallback>
 8009fca:	e6b6      	b.n	8009d3a <HAL_PCD_IRQHandler+0xfe>
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 8009fcc:	f891 30b4 	ldrb.w	r3, [r1, #180]	; 0xb4
 8009fd0:	f830 c023 	ldrh.w	ip, [r0, r3, lsl #2]
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8009fd4:	00de      	lsls	r6, r3, #3
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8009fd6:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 8009fda:	f41c 4f80 	tst.w	ip, #16384	; 0x4000
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8009fde:	fa16 f383 	uxtah	r3, r6, r3
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 8009fe2:	d01f      	beq.n	800a024 <HAL_PCD_IRQHandler+0x3e8>
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8009fe4:	3302      	adds	r3, #2
 8009fe6:	f852 6013 	ldr.w	r6, [r2, r3, lsl #1]
 8009fea:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0)
 8009fee:	b136      	cbz	r6, 8009ffe <HAL_PCD_IRQHandler+0x3c2>
              PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8009ff0:	f8b1 20ba 	ldrh.w	r2, [r1, #186]	; 0xba
 8009ff4:	4633      	mov	r3, r6
              PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8009ff6:	f8d1 10c4 	ldr.w	r1, [r1, #196]	; 0xc4
 8009ffa:	f000 f93a 	bl	800a272 <PCD_ReadPMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
 8009ffe:	231c      	movs	r3, #28
 800a000:	fb03 4305 	mla	r3, r3, r5, r4
 800a004:	6822      	ldr	r2, [r4, #0]
 800a006:	f893 10b4 	ldrb.w	r1, [r3, #180]	; 0xb4
 800a00a:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800a00e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a012:	051b      	lsls	r3, r3, #20
 800a014:	0d1b      	lsrs	r3, r3, #20
 800a016:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a01a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a01e:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 800a022:	e773      	b.n	8009f0c <HAL_PCD_IRQHandler+0x2d0>
            count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800a024:	3306      	adds	r3, #6
 800a026:	f852 6013 	ldr.w	r6, [r2, r3, lsl #1]
 800a02a:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0)
 800a02e:	2e00      	cmp	r6, #0
 800a030:	d0e5      	beq.n	8009ffe <HAL_PCD_IRQHandler+0x3c2>
              PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800a032:	f8b1 20bc 	ldrh.w	r2, [r1, #188]	; 0xbc
 800a036:	4633      	mov	r3, r6
 800a038:	e7dd      	b.n	8009ff6 <HAL_PCD_IRQHandler+0x3ba>
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800a03a:	f891 10b4 	ldrb.w	r1, [r1, #180]	; 0xb4
 800a03e:	4620      	mov	r0, r4
 800a040:	f7ff fd04 	bl	8009a4c <HAL_PCD_EP_Receive>
 800a044:	e77f      	b.n	8009f46 <HAL_PCD_IRQHandler+0x30a>
 800a046:	bf00      	nop
 800a048:	ffff8f0f 	.word	0xffff8f0f
 800a04c:	ffffbf8f 	.word	0xffffbf8f
 800a050:	ffff8000 	.word	0xffff8000
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 800a054:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 800a058:	f830 c023 	ldrh.w	ip, [r0, r3, lsl #2]
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800a05c:	00de      	lsls	r6, r3, #3
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800a05e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 800a062:	f01c 0f40 	tst.w	ip, #64	; 0x40
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800a066:	fa16 f383 	uxtah	r3, r6, r3
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 800a06a:	d01d      	beq.n	800a0a8 <HAL_PCD_IRQHandler+0x46c>
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800a06c:	3302      	adds	r3, #2
 800a06e:	f852 3013 	ldr.w	r3, [r2, r3, lsl #1]
 800a072:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a076:	640b      	str	r3, [r1, #64]	; 0x40
            if (ep->xfer_count != 0)
 800a078:	b11b      	cbz	r3, 800a082 <HAL_PCD_IRQHandler+0x446>
              PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
 800a07a:	8dca      	ldrh	r2, [r1, #46]	; 0x2e
              PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 800a07c:	6b89      	ldr	r1, [r1, #56]	; 0x38
 800a07e:	f000 f8ea 	bl	800a256 <PCD_WritePMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
 800a082:	231c      	movs	r3, #28
 800a084:	fb03 4305 	mla	r3, r3, r5, r4
 800a088:	6822      	ldr	r2, [r4, #0]
 800a08a:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 800a08e:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800a092:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a096:	051b      	lsls	r3, r3, #20
 800a098:	0d1b      	lsrs	r3, r3, #20
 800a09a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a09e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0a2:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 800a0a6:	e775      	b.n	8009f94 <HAL_PCD_IRQHandler+0x358>
            ep->xfer_count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800a0a8:	3306      	adds	r3, #6
 800a0aa:	f852 3013 	ldr.w	r3, [r2, r3, lsl #1]
 800a0ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a0b2:	640b      	str	r3, [r1, #64]	; 0x40
            if (ep->xfer_count != 0)
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d0e4      	beq.n	800a082 <HAL_PCD_IRQHandler+0x446>
              PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 800a0b8:	8e0a      	ldrh	r2, [r1, #48]	; 0x30
 800a0ba:	e7df      	b.n	800a07c <HAL_PCD_IRQHandler+0x440>
          HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800a0bc:	f7ff fd32 	bl	8009b24 <HAL_PCD_EP_Transmit>
 800a0c0:	e63b      	b.n	8009d3a <HAL_PCD_IRQHandler+0xfe>
 800a0c2:	bf00      	nop

0800a0c4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a0c4:	b510      	push	{r4, lr}
  PCD_EPTypeDef *ep;
   
  __HAL_LOCK(hpcd); 
 800a0c6:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
 800a0ca:	2b01      	cmp	r3, #1
 800a0cc:	d048      	beq.n	800a160 <HAL_PCD_EP_SetStall+0x9c>
   
  if ((0x80 & ep_addr) == 0x80)
 800a0ce:	b24c      	sxtb	r4, r1
  __HAL_LOCK(hpcd); 
 800a0d0:	2301      	movs	r3, #1
 800a0d2:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
  if ((0x80 & ep_addr) == 0x80)
 800a0d6:	2c00      	cmp	r4, #0
 800a0d8:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 800a0dc:	f04f 021c 	mov.w	r2, #28
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800a0e0:	bfb5      	itete	lt
 800a0e2:	fb02 0103 	mlalt	r1, r2, r3, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a0e6:	fb02 0101 	mlage	r1, r2, r1, r0
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800a0ea:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 800a0ec:	31b4      	addge	r1, #180	; 0xb4
  }
  
  ep->is_stall = 1;
 800a0ee:	2201      	movs	r2, #1
 800a0f0:	708a      	strb	r2, [r1, #2]
  ep->num   = ep_addr & 0x7F;
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 800a0f2:	0fe2      	lsrs	r2, r4, #31
  ep->num   = ep_addr & 0x7F;
 800a0f4:	700b      	strb	r3, [r1, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 800a0f6:	704a      	strb	r2, [r1, #1]
  
  if (ep->num == 0)
 800a0f8:	6802      	ldr	r2, [r0, #0]
 800a0fa:	b9a3      	cbnz	r3, 800a126 <HAL_PCD_EP_SetStall+0x62>
  {
    /* This macro sets STALL status for RX & TX*/ 
    PCD_SET_EP_TXRX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL); 
 800a0fc:	8813      	ldrh	r3, [r2, #0]
 800a0fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a102:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a106:	041b      	lsls	r3, r3, #16
 800a108:	0c1b      	lsrs	r3, r3, #16
 800a10a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a10e:	f083 0310 	eor.w	r3, r3, #16
 800a112:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a116:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a11a:	8013      	strh	r3, [r2, #0]
    else
    {
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num , USB_EP_RX_STALL);
    }
  }
  __HAL_UNLOCK(hpcd); 
 800a11c:	2300      	movs	r3, #0
 800a11e:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
  
  return HAL_OK;
 800a122:	4618      	mov	r0, r3
}
 800a124:	bd10      	pop	{r4, pc}
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num , USB_EP_TX_STALL); 
 800a126:	b219      	sxth	r1, r3
    if (ep->is_in)
 800a128:	2c00      	cmp	r4, #0
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num , USB_EP_TX_STALL); 
 800a12a:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
    if (ep->is_in)
 800a12e:	da0e      	bge.n	800a14e <HAL_PCD_EP_SetStall+0x8a>
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num , USB_EP_TX_STALL); 
 800a130:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a134:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a138:	041b      	lsls	r3, r3, #16
 800a13a:	0c1b      	lsrs	r3, r3, #16
 800a13c:	f083 0310 	eor.w	r3, r3, #16
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num , USB_EP_RX_STALL);
 800a140:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a144:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a148:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 800a14c:	e7e6      	b.n	800a11c <HAL_PCD_EP_SetStall+0x58>
 800a14e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a152:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a156:	041b      	lsls	r3, r3, #16
 800a158:	0c1b      	lsrs	r3, r3, #16
 800a15a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a15e:	e7ef      	b.n	800a140 <HAL_PCD_EP_SetStall+0x7c>
  __HAL_LOCK(hpcd); 
 800a160:	2002      	movs	r0, #2
 800a162:	e7df      	b.n	800a124 <HAL_PCD_EP_SetStall+0x60>

0800a164 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a164:	b510      	push	{r4, lr}
  PCD_EPTypeDef *ep;
  
  if ((0x80 & ep_addr) == 0x80)
 800a166:	b24c      	sxtb	r4, r1
 800a168:	f001 027f 	and.w	r2, r1, #127	; 0x7f
 800a16c:	2c00      	cmp	r4, #0
 800a16e:	f04f 031c 	mov.w	r3, #28
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800a172:	bfb5      	itete	lt
 800a174:	fb03 0102 	mlalt	r1, r3, r2, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a178:	fb03 0101 	mlage	r1, r3, r1, r0
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800a17c:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 800a17e:	31b4      	addge	r1, #180	; 0xb4
  }
  
  ep->is_stall = 0;
 800a180:	2300      	movs	r3, #0
 800a182:	708b      	strb	r3, [r1, #2]
  ep->num   = ep_addr & 0x7F;
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 800a184:	0fe3      	lsrs	r3, r4, #31
  ep->num   = ep_addr & 0x7F;
 800a186:	700a      	strb	r2, [r1, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 800a188:	704b      	strb	r3, [r1, #1]
  
  __HAL_LOCK(hpcd); 
 800a18a:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
 800a18e:	2b01      	cmp	r3, #1
 800a190:	d044      	beq.n	800a21c <HAL_PCD_EP_ClrStall+0xb8>
 800a192:	2301      	movs	r3, #1
 800a194:	6801      	ldr	r1, [r0, #0]
 800a196:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
  
  if (ep->is_in)
  {
    PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 800a19a:	b212      	sxth	r2, r2
  if (ep->is_in)
 800a19c:	2c00      	cmp	r4, #0
    PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 800a19e:	f831 3022 	ldrh.w	r3, [r1, r2, lsl #2]
  if (ep->is_in)
 800a1a2:	da22      	bge.n	800a1ea <HAL_PCD_EP_ClrStall+0x86>
    PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 800a1a4:	065c      	lsls	r4, r3, #25
 800a1a6:	d50b      	bpl.n	800a1c0 <HAL_PCD_EP_ClrStall+0x5c>
 800a1a8:	f831 3022 	ldrh.w	r3, [r1, r2, lsl #2]
 800a1ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a1b0:	051b      	lsls	r3, r3, #20
 800a1b2:	0d1b      	lsrs	r3, r3, #20
 800a1b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a1b8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a1bc:	f821 3022 	strh.w	r3, [r1, r2, lsl #2]
    PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800a1c0:	f831 3022 	ldrh.w	r3, [r1, r2, lsl #2]
 800a1c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a1c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a1cc:	041b      	lsls	r3, r3, #16
 800a1ce:	0c1b      	lsrs	r3, r3, #16
 800a1d0:	f083 0330 	eor.w	r3, r3, #48	; 0x30
  }
  else
  {
    PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
    PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
 800a1d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a1d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1dc:	f821 3022 	strh.w	r3, [r1, r2, lsl #2]
  }
  __HAL_UNLOCK(hpcd); 
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
    
  return HAL_OK;
 800a1e6:	4618      	mov	r0, r3
}
 800a1e8:	bd10      	pop	{r4, pc}
    PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 800a1ea:	045b      	lsls	r3, r3, #17
 800a1ec:	d50b      	bpl.n	800a206 <HAL_PCD_EP_ClrStall+0xa2>
 800a1ee:	f831 3022 	ldrh.w	r3, [r1, r2, lsl #2]
 800a1f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a1f6:	051b      	lsls	r3, r3, #20
 800a1f8:	0d1b      	lsrs	r3, r3, #20
 800a1fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a1fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a202:	f821 3022 	strh.w	r3, [r1, r2, lsl #2]
    PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
 800a206:	f831 3022 	ldrh.w	r3, [r1, r2, lsl #2]
 800a20a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a20e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a212:	041b      	lsls	r3, r3, #16
 800a214:	0c1b      	lsrs	r3, r3, #16
 800a216:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800a21a:	e7db      	b.n	800a1d4 <HAL_PCD_EP_ClrStall+0x70>
  __HAL_LOCK(hpcd); 
 800a21c:	2002      	movs	r0, #2
 800a21e:	e7e3      	b.n	800a1e8 <HAL_PCD_EP_ClrStall+0x84>

0800a220 <HAL_PCDEx_PMAConfig>:

{
  PCD_EPTypeDef *ep;
  
  /* initialize ep structure*/
  if ((0x80 & ep_addr) == 0x80)
 800a220:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800a224:	bf18      	it	ne
 800a226:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
{
 800a22a:	b510      	push	{r4, lr}
 800a22c:	f04f 041c 	mov.w	r4, #28
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800a230:	bf15      	itete	ne
 800a232:	fb04 0001 	mlane	r0, r4, r1, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a236:	fb04 0001 	mlaeq	r0, r4, r1, r0
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800a23a:	3028      	addne	r0, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 800a23c:	30b4      	addeq	r0, #180	; 0xb4
  if (ep_kind == PCD_SNG_BUF)
  {
    /*Single Buffer*/
    ep->doublebuffer = 0;
    /*Configure te PMA*/
    ep->pmaadress = (uint16_t)pmaadress;
 800a23e:	b299      	uxth	r1, r3
  if (ep_kind == PCD_SNG_BUF)
 800a240:	b91a      	cbnz	r2, 800a24a <HAL_PCDEx_PMAConfig+0x2a>
    ep->doublebuffer = 0;
 800a242:	7282      	strb	r2, [r0, #10]
    ep->pmaadress = (uint16_t)pmaadress;
 800a244:	8081      	strh	r1, [r0, #4]
    ep->pmaaddr0 =  pmaadress & 0xFFFF;
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000) >> 16;
  }
  
  return HAL_OK; 
}
 800a246:	2000      	movs	r0, #0
 800a248:	bd10      	pop	{r4, pc}
    ep->doublebuffer = 1;
 800a24a:	2201      	movs	r2, #1
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000) >> 16;
 800a24c:	0c1b      	lsrs	r3, r3, #16
    ep->doublebuffer = 1;
 800a24e:	7282      	strb	r2, [r0, #10]
    ep->pmaaddr0 =  pmaadress & 0xFFFF;
 800a250:	80c1      	strh	r1, [r0, #6]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000) >> 16;
 800a252:	8103      	strh	r3, [r0, #8]
 800a254:	e7f7      	b.n	800a246 <HAL_PCDEx_PMAConfig+0x26>

0800a256 <PCD_WritePMA>:
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void PCD_WritePMA(USB_TypeDef  *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
 800a256:	3301      	adds	r3, #1
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 800a258:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
 800a25c:	105b      	asrs	r3, r3, #1
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 800a25e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (i = n; i != 0; i--)
 800a262:	b903      	cbnz	r3, 800a266 <PCD_WritePMA+0x10>
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
    *pdwVal++ = temp2;
    pdwVal++;
    pbUsrBuf++;
  }
}
 800a264:	4770      	bx	lr
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 800a266:	f831 0b02 	ldrh.w	r0, [r1], #2
    *pdwVal++ = temp2;
 800a26a:	f822 0b04 	strh.w	r0, [r2], #4
  for (i = n; i != 0; i--)
 800a26e:	3b01      	subs	r3, #1
 800a270:	e7f7      	b.n	800a262 <PCD_WritePMA+0xc>

0800a272 <PCD_ReadPMA>:
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void PCD_ReadPMA(USB_TypeDef  *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
 800a272:	3301      	adds	r3, #1
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 800a274:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
 800a278:	105b      	asrs	r3, r3, #1
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 800a27a:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (i = n; i != 0; i--)
 800a27e:	b903      	cbnz	r3, 800a282 <PCD_ReadPMA+0x10>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
    pbUsrBuf++;
  }
}
 800a280:	4770      	bx	lr
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 800a282:	f852 0b04 	ldr.w	r0, [r2], #4
 800a286:	f821 0b02 	strh.w	r0, [r1], #2
  for (i = n; i != 0; i--)
 800a28a:	3b01      	subs	r3, #1
 800a28c:	e7f7      	b.n	800a27e <PCD_ReadPMA+0xc>

0800a28e <HAL_PCDEx_SetConnectionState>:
 __weak void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PCDEx_SetConnectionState could be implenetd in the user file
   */ 
}
 800a28e:	4770      	bx	lr

0800a290 <I2C_TransferConfig>:
  *     @arg I2C_GENERATE_START_READ: Generate Restart for read request.
  *     @arg I2C_GENERATE_START_WRITE: Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800a290:	b530      	push	{r4, r5, lr}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));
    
  /* Get the CR2 register value */
  tmpreg = hi2c->Instance->CR2;
 800a292:	6804      	ldr	r4, [r0, #0]
  
  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
  
  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 800a294:	9d03      	ldr	r5, [sp, #12]
  tmpreg = hi2c->Instance->CR2;
 800a296:	6860      	ldr	r0, [r4, #4]
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 800a298:	f020 707f 	bic.w	r0, r0, #66846720	; 0x3fc0000
 800a29c:	f420 3059 	bic.w	r0, r0, #222208	; 0x36400
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 800a2a0:	432b      	orrs	r3, r5
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 800a2a2:	f420 707f 	bic.w	r0, r0, #1020	; 0x3fc
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 800a2a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a2aa:	f3c1 0109 	ubfx	r1, r1, #0, #10
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 800a2ae:	f020 0003 	bic.w	r0, r0, #3
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 800a2b2:	430b      	orrs	r3, r1
 800a2b4:	4303      	orrs	r3, r0
            (uint32_t)Mode | (uint32_t)Request);
  
  /* update CR2 register */
  hi2c->Instance->CR2 = tmpreg;  
 800a2b6:	6063      	str	r3, [r4, #4]
}  
 800a2b8:	bd30      	pop	{r4, r5, pc}

0800a2ba <I2C_IsAcknowledgeFailed>:
{
 800a2ba:	b570      	push	{r4, r5, r6, lr}
 800a2bc:	4604      	mov	r4, r0
 800a2be:	460d      	mov	r5, r1
  tickstart = HAL_GetTick();
 800a2c0:	f7fe ffc4 	bl	800924c <HAL_GetTick>
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a2c4:	6822      	ldr	r2, [r4, #0]
 800a2c6:	6993      	ldr	r3, [r2, #24]
 800a2c8:	f013 0310 	ands.w	r3, r3, #16
  tickstart = HAL_GetTick();
 800a2cc:	4606      	mov	r6, r0
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a2ce:	d03e      	beq.n	800a34e <I2C_IsAcknowledgeFailed+0x94>
    if((hi2c->State == HAL_I2C_STATE_MASTER_BUSY_TX) || (hi2c->State == HAL_I2C_STATE_MEM_BUSY_TX)
 800a2d0:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800a2d4:	2b12      	cmp	r3, #18
 800a2d6:	d007      	beq.n	800a2e8 <I2C_IsAcknowledgeFailed+0x2e>
 800a2d8:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800a2dc:	2b52      	cmp	r3, #82	; 0x52
 800a2de:	d003      	beq.n	800a2e8 <I2C_IsAcknowledgeFailed+0x2e>
       || (hi2c->State == HAL_I2C_STATE_MEM_BUSY_RX))
 800a2e0:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800a2e4:	2b62      	cmp	r3, #98	; 0x62
 800a2e6:	d106      	bne.n	800a2f6 <I2C_IsAcknowledgeFailed+0x3c>
      if((hi2c->Instance->CR2 & I2C_AUTOEND_MODE) != I2C_AUTOEND_MODE)
 800a2e8:	6853      	ldr	r3, [r2, #4]
 800a2ea:	0198      	lsls	r0, r3, #6
 800a2ec:	d403      	bmi.n	800a2f6 <I2C_IsAcknowledgeFailed+0x3c>
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800a2ee:	6853      	ldr	r3, [r2, #4]
 800a2f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a2f4:	6053      	str	r3, [r2, #4]
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a2f6:	6823      	ldr	r3, [r4, #0]
 800a2f8:	699a      	ldr	r2, [r3, #24]
 800a2fa:	0692      	lsls	r2, r2, #26
 800a2fc:	d517      	bpl.n	800a32e <I2C_IsAcknowledgeFailed+0x74>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a2fe:	2210      	movs	r2, #16
 800a300:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a302:	2220      	movs	r2, #32
 800a304:	61da      	str	r2, [r3, #28]
    __HAL_I2C_RESET_CR2(hi2c);
 800a306:	685a      	ldr	r2, [r3, #4]
 800a308:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 800a30c:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 800a310:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800a314:	f022 0201 	bic.w	r2, r2, #1
 800a318:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800a31a:	2304      	movs	r3, #4
 800a31c:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
    hi2c->State= HAL_I2C_STATE_READY;
 800a320:	2001      	movs	r0, #1
    __HAL_UNLOCK(hi2c);
 800a322:	2300      	movs	r3, #0
    hi2c->State= HAL_I2C_STATE_READY;
 800a324:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    __HAL_UNLOCK(hi2c);
 800a328:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 800a32c:	e00e      	b.n	800a34c <I2C_IsAcknowledgeFailed+0x92>
      if(Timeout != HAL_MAX_DELAY)
 800a32e:	1c69      	adds	r1, r5, #1
 800a330:	d0e2      	beq.n	800a2f8 <I2C_IsAcknowledgeFailed+0x3e>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800a332:	b125      	cbz	r5, 800a33e <I2C_IsAcknowledgeFailed+0x84>
 800a334:	f7fe ff8a 	bl	800924c <HAL_GetTick>
 800a338:	1b80      	subs	r0, r0, r6
 800a33a:	42a8      	cmp	r0, r5
 800a33c:	d9db      	bls.n	800a2f6 <I2C_IsAcknowledgeFailed+0x3c>
          hi2c->State= HAL_I2C_STATE_READY;
 800a33e:	2301      	movs	r3, #1
 800a340:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          __HAL_UNLOCK(hi2c);
 800a344:	2300      	movs	r3, #0
 800a346:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          return HAL_TIMEOUT;
 800a34a:	2003      	movs	r0, #3
}
 800a34c:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 800a34e:	4618      	mov	r0, r3
 800a350:	e7fc      	b.n	800a34c <I2C_IsAcknowledgeFailed+0x92>

0800a352 <I2C_WaitOnTXISFlagUntilTimeout>:
{  
 800a352:	b570      	push	{r4, r5, r6, lr}
 800a354:	4604      	mov	r4, r0
 800a356:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 800a358:	f7fe ff78 	bl	800924c <HAL_GetTick>
 800a35c:	4606      	mov	r6, r0
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a35e:	6823      	ldr	r3, [r4, #0]
 800a360:	699b      	ldr	r3, [r3, #24]
 800a362:	079b      	lsls	r3, r3, #30
 800a364:	d501      	bpl.n	800a36a <I2C_WaitOnTXISFlagUntilTimeout+0x18>
  return HAL_OK;      
 800a366:	2000      	movs	r0, #0
 800a368:	e014      	b.n	800a394 <I2C_WaitOnTXISFlagUntilTimeout+0x42>
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout) != HAL_OK)
 800a36a:	4629      	mov	r1, r5
 800a36c:	4620      	mov	r0, r4
 800a36e:	f7ff ffa4 	bl	800a2ba <I2C_IsAcknowledgeFailed>
 800a372:	b9b0      	cbnz	r0, 800a3a2 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
    if(Timeout != HAL_MAX_DELAY)
 800a374:	1c6a      	adds	r2, r5, #1
 800a376:	d0f2      	beq.n	800a35e <I2C_WaitOnTXISFlagUntilTimeout+0xc>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800a378:	b96d      	cbnz	r5, 800a396 <I2C_WaitOnTXISFlagUntilTimeout+0x44>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a37a:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 800a37e:	f043 0320 	orr.w	r3, r3, #32
 800a382:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
        hi2c->State= HAL_I2C_STATE_READY;
 800a386:	2301      	movs	r3, #1
 800a388:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hi2c);
 800a38c:	2300      	movs	r3, #0
 800a38e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_TIMEOUT;
 800a392:	2003      	movs	r0, #3
}
 800a394:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800a396:	f7fe ff59 	bl	800924c <HAL_GetTick>
 800a39a:	1b80      	subs	r0, r0, r6
 800a39c:	42a8      	cmp	r0, r5
 800a39e:	d9de      	bls.n	800a35e <I2C_WaitOnTXISFlagUntilTimeout+0xc>
 800a3a0:	e7eb      	b.n	800a37a <I2C_WaitOnTXISFlagUntilTimeout+0x28>
      return HAL_ERROR;
 800a3a2:	2001      	movs	r0, #1
 800a3a4:	e7f6      	b.n	800a394 <I2C_WaitOnTXISFlagUntilTimeout+0x42>

0800a3a6 <I2C_WaitOnFlagUntilTimeout>:
{  
 800a3a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3aa:	4604      	mov	r4, r0
 800a3ac:	460e      	mov	r6, r1
 800a3ae:	4690      	mov	r8, r2
 800a3b0:	461d      	mov	r5, r3
  uint32_t tickstart = HAL_GetTick();
 800a3b2:	f7fe ff4b 	bl	800924c <HAL_GetTick>
 800a3b6:	4607      	mov	r7, r0
  if(Status == RESET)
 800a3b8:	f1b8 0f00 	cmp.w	r8, #0
 800a3bc:	d01d      	beq.n	800a3fa <I2C_WaitOnFlagUntilTimeout+0x54>
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) != RESET)
 800a3be:	6822      	ldr	r2, [r4, #0]
 800a3c0:	6993      	ldr	r3, [r2, #24]
 800a3c2:	ea36 0303 	bics.w	r3, r6, r3
 800a3c6:	d11d      	bne.n	800a404 <I2C_WaitOnFlagUntilTimeout+0x5e>
      if(Timeout != HAL_MAX_DELAY)
 800a3c8:	1c6b      	adds	r3, r5, #1
 800a3ca:	d0f9      	beq.n	800a3c0 <I2C_WaitOnFlagUntilTimeout+0x1a>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800a3cc:	b16d      	cbz	r5, 800a3ea <I2C_WaitOnFlagUntilTimeout+0x44>
 800a3ce:	f7fe ff3d 	bl	800924c <HAL_GetTick>
 800a3d2:	1bc0      	subs	r0, r0, r7
 800a3d4:	42a8      	cmp	r0, r5
 800a3d6:	d9f2      	bls.n	800a3be <I2C_WaitOnFlagUntilTimeout+0x18>
 800a3d8:	e007      	b.n	800a3ea <I2C_WaitOnFlagUntilTimeout+0x44>
      if(Timeout != HAL_MAX_DELAY)
 800a3da:	1c69      	adds	r1, r5, #1
 800a3dc:	d00e      	beq.n	800a3fc <I2C_WaitOnFlagUntilTimeout+0x56>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800a3de:	b125      	cbz	r5, 800a3ea <I2C_WaitOnFlagUntilTimeout+0x44>
 800a3e0:	f7fe ff34 	bl	800924c <HAL_GetTick>
 800a3e4:	1bc0      	subs	r0, r0, r7
 800a3e6:	42a8      	cmp	r0, r5
 800a3e8:	d907      	bls.n	800a3fa <I2C_WaitOnFlagUntilTimeout+0x54>
          hi2c->State= HAL_I2C_STATE_READY;
 800a3ea:	2301      	movs	r3, #1
 800a3ec:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          __HAL_UNLOCK(hi2c);
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          return HAL_TIMEOUT;
 800a3f6:	2003      	movs	r0, #3
 800a3f8:	e005      	b.n	800a406 <I2C_WaitOnFlagUntilTimeout+0x60>
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a3fa:	6822      	ldr	r2, [r4, #0]
 800a3fc:	6993      	ldr	r3, [r2, #24]
 800a3fe:	ea36 0303 	bics.w	r3, r6, r3
 800a402:	d1ea      	bne.n	800a3da <I2C_WaitOnFlagUntilTimeout+0x34>
  return HAL_OK;
 800a404:	2000      	movs	r0, #0
}
 800a406:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a40a <I2C_RequestMemoryWrite>:
{
 800a40a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a40c:	9f08      	ldr	r7, [sp, #32]
 800a40e:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800a410:	f44f 5300 	mov.w	r3, #8192	; 0x2000
{
 800a414:	4604      	mov	r4, r0
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800a416:	9300      	str	r3, [sp, #0]
{
 800a418:	4615      	mov	r5, r2
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800a41a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a41e:	b2f2      	uxtb	r2, r6
 800a420:	f7ff ff36 	bl	800a290 <I2C_TransferConfig>
  if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 800a424:	4639      	mov	r1, r7
 800a426:	4620      	mov	r0, r4
 800a428:	f7ff ff93 	bl	800a352 <I2C_WaitOnTXISFlagUntilTimeout>
 800a42c:	b140      	cbz	r0, 800a440 <I2C_RequestMemoryWrite+0x36>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a42e:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 800a432:	2b04      	cmp	r3, #4
 800a434:	d002      	beq.n	800a43c <I2C_RequestMemoryWrite+0x32>
      return HAL_TIMEOUT;
 800a436:	2003      	movs	r0, #3
}
 800a438:	b003      	add	sp, #12
 800a43a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_ERROR;
 800a43c:	2001      	movs	r0, #1
 800a43e:	e7fb      	b.n	800a438 <I2C_RequestMemoryWrite+0x2e>
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a440:	2e01      	cmp	r6, #1
    hi2c->Instance->TXDR = __HAL_I2C_MEM_ADD_LSB(MemAddress);    
 800a442:	6823      	ldr	r3, [r4, #0]
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a444:	d10a      	bne.n	800a45c <I2C_RequestMemoryWrite+0x52>
    hi2c->Instance->TXDR = __HAL_I2C_MEM_ADD_LSB(MemAddress);  
 800a446:	b2ed      	uxtb	r5, r5
 800a448:	629d      	str	r5, [r3, #40]	; 0x28
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout) != HAL_OK)      
 800a44a:	2200      	movs	r2, #0
 800a44c:	463b      	mov	r3, r7
 800a44e:	2180      	movs	r1, #128	; 0x80
 800a450:	4620      	mov	r0, r4
 800a452:	f7ff ffa8 	bl	800a3a6 <I2C_WaitOnFlagUntilTimeout>
 800a456:	2800      	cmp	r0, #0
 800a458:	d0ee      	beq.n	800a438 <I2C_RequestMemoryWrite+0x2e>
 800a45a:	e7ec      	b.n	800a436 <I2C_RequestMemoryWrite+0x2c>
    hi2c->Instance->TXDR = __HAL_I2C_MEM_ADD_MSB(MemAddress); 
 800a45c:	0a2a      	lsrs	r2, r5, #8
 800a45e:	629a      	str	r2, [r3, #40]	; 0x28
    if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 800a460:	4639      	mov	r1, r7
 800a462:	4620      	mov	r0, r4
 800a464:	f7ff ff75 	bl	800a352 <I2C_WaitOnTXISFlagUntilTimeout>
 800a468:	2800      	cmp	r0, #0
 800a46a:	d1e0      	bne.n	800a42e <I2C_RequestMemoryWrite+0x24>
    hi2c->Instance->TXDR = __HAL_I2C_MEM_ADD_LSB(MemAddress);  
 800a46c:	6823      	ldr	r3, [r4, #0]
 800a46e:	e7ea      	b.n	800a446 <I2C_RequestMemoryWrite+0x3c>

0800a470 <I2C_RequestMemoryRead>:
{
 800a470:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a472:	9f08      	ldr	r7, [sp, #32]
 800a474:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800a476:	f44f 5300 	mov.w	r3, #8192	; 0x2000
{
 800a47a:	4604      	mov	r4, r0
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800a47c:	9300      	str	r3, [sp, #0]
{
 800a47e:	4615      	mov	r5, r2
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800a480:	2300      	movs	r3, #0
 800a482:	b2f2      	uxtb	r2, r6
 800a484:	f7ff ff04 	bl	800a290 <I2C_TransferConfig>
  if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 800a488:	4639      	mov	r1, r7
 800a48a:	4620      	mov	r0, r4
 800a48c:	f7ff ff61 	bl	800a352 <I2C_WaitOnTXISFlagUntilTimeout>
 800a490:	b140      	cbz	r0, 800a4a4 <I2C_RequestMemoryRead+0x34>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a492:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 800a496:	2b04      	cmp	r3, #4
 800a498:	d002      	beq.n	800a4a0 <I2C_RequestMemoryRead+0x30>
      return HAL_TIMEOUT;
 800a49a:	2003      	movs	r0, #3
}
 800a49c:	b003      	add	sp, #12
 800a49e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_ERROR;
 800a4a0:	2001      	movs	r0, #1
 800a4a2:	e7fb      	b.n	800a49c <I2C_RequestMemoryRead+0x2c>
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a4a4:	2e01      	cmp	r6, #1
    hi2c->Instance->TXDR = __HAL_I2C_MEM_ADD_LSB(MemAddress);    
 800a4a6:	6823      	ldr	r3, [r4, #0]
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a4a8:	d10a      	bne.n	800a4c0 <I2C_RequestMemoryRead+0x50>
    hi2c->Instance->TXDR = __HAL_I2C_MEM_ADD_LSB(MemAddress);  
 800a4aa:	b2ed      	uxtb	r5, r5
 800a4ac:	629d      	str	r5, [r3, #40]	; 0x28
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout) != HAL_OK)      
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	463b      	mov	r3, r7
 800a4b2:	2140      	movs	r1, #64	; 0x40
 800a4b4:	4620      	mov	r0, r4
 800a4b6:	f7ff ff76 	bl	800a3a6 <I2C_WaitOnFlagUntilTimeout>
 800a4ba:	2800      	cmp	r0, #0
 800a4bc:	d0ee      	beq.n	800a49c <I2C_RequestMemoryRead+0x2c>
 800a4be:	e7ec      	b.n	800a49a <I2C_RequestMemoryRead+0x2a>
    hi2c->Instance->TXDR = __HAL_I2C_MEM_ADD_MSB(MemAddress); 
 800a4c0:	0a2a      	lsrs	r2, r5, #8
 800a4c2:	629a      	str	r2, [r3, #40]	; 0x28
    if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 800a4c4:	4639      	mov	r1, r7
 800a4c6:	4620      	mov	r0, r4
 800a4c8:	f7ff ff43 	bl	800a352 <I2C_WaitOnTXISFlagUntilTimeout>
 800a4cc:	2800      	cmp	r0, #0
 800a4ce:	d1e0      	bne.n	800a492 <I2C_RequestMemoryRead+0x22>
    hi2c->Instance->TXDR = __HAL_I2C_MEM_ADD_LSB(MemAddress);  
 800a4d0:	6823      	ldr	r3, [r4, #0]
 800a4d2:	e7ea      	b.n	800a4aa <I2C_RequestMemoryRead+0x3a>

0800a4d4 <I2C_WaitOnSTOPFlagUntilTimeout>:
{  
 800a4d4:	b570      	push	{r4, r5, r6, lr}
 800a4d6:	4604      	mov	r4, r0
 800a4d8:	460d      	mov	r5, r1
  tickstart = HAL_GetTick();
 800a4da:	f7fe feb7 	bl	800924c <HAL_GetTick>
 800a4de:	4606      	mov	r6, r0
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a4e0:	6823      	ldr	r3, [r4, #0]
 800a4e2:	699b      	ldr	r3, [r3, #24]
 800a4e4:	069b      	lsls	r3, r3, #26
 800a4e6:	d501      	bpl.n	800a4ec <I2C_WaitOnSTOPFlagUntilTimeout+0x18>
  return HAL_OK;
 800a4e8:	2000      	movs	r0, #0
 800a4ea:	e012      	b.n	800a512 <I2C_WaitOnSTOPFlagUntilTimeout+0x3e>
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout) != HAL_OK)
 800a4ec:	4629      	mov	r1, r5
 800a4ee:	4620      	mov	r0, r4
 800a4f0:	f7ff fee3 	bl	800a2ba <I2C_IsAcknowledgeFailed>
 800a4f4:	b9a0      	cbnz	r0, 800a520 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800a4f6:	b96d      	cbnz	r5, 800a514 <I2C_WaitOnSTOPFlagUntilTimeout+0x40>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a4f8:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 800a4fc:	f043 0320 	orr.w	r3, r3, #32
 800a500:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
      hi2c->State= HAL_I2C_STATE_READY;
 800a504:	2301      	movs	r3, #1
 800a506:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_UNLOCK(hi2c);
 800a50a:	2300      	movs	r3, #0
 800a50c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 800a510:	2003      	movs	r0, #3
}
 800a512:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800a514:	f7fe fe9a 	bl	800924c <HAL_GetTick>
 800a518:	1b80      	subs	r0, r0, r6
 800a51a:	42a8      	cmp	r0, r5
 800a51c:	d9e0      	bls.n	800a4e0 <I2C_WaitOnSTOPFlagUntilTimeout+0xc>
 800a51e:	e7eb      	b.n	800a4f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x24>
      return HAL_ERROR;
 800a520:	2001      	movs	r0, #1
 800a522:	e7f6      	b.n	800a512 <I2C_WaitOnSTOPFlagUntilTimeout+0x3e>

0800a524 <HAL_I2C_MspInit>:
}
 800a524:	4770      	bx	lr

0800a526 <HAL_I2C_Init>:
{ 
 800a526:	b510      	push	{r4, lr}
  if(hi2c == NULL)
 800a528:	4604      	mov	r4, r0
 800a52a:	2800      	cmp	r0, #0
 800a52c:	d041      	beq.n	800a5b2 <HAL_I2C_Init+0x8c>
  if(hi2c->State == HAL_I2C_STATE_RESET)
 800a52e:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800a532:	b90b      	cbnz	r3, 800a538 <HAL_I2C_Init+0x12>
    HAL_I2C_MspInit(hi2c);
 800a534:	f7ff fff6 	bl	800a524 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800a538:	2302      	movs	r3, #2
 800a53a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_I2C_DISABLE(hi2c);
 800a53e:	6823      	ldr	r3, [r4, #0]
 800a540:	681a      	ldr	r2, [r3, #0]
 800a542:	f022 0201 	bic.w	r2, r2, #1
 800a546:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a548:	6862      	ldr	r2, [r4, #4]
 800a54a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a54e:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a550:	689a      	ldr	r2, [r3, #8]
 800a552:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a556:	609a      	str	r2, [r3, #8]
    if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a558:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if(hi2c->Init.OwnAddress1 != 0)
 800a55c:	b31a      	cbz	r2, 800a5a6 <HAL_I2C_Init+0x80>
    if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a55e:	2901      	cmp	r1, #1
 800a560:	d11e      	bne.n	800a5a0 <HAL_I2C_Init+0x7a>
      hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a562:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a566:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a568:	685a      	ldr	r2, [r3, #4]
 800a56a:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800a56e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a572:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800a574:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 800a578:	430a      	orrs	r2, r1
 800a57a:	69a1      	ldr	r1, [r4, #24]
 800a57c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800a580:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a582:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 800a586:	430a      	orrs	r2, r1
 800a588:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800a58a:	681a      	ldr	r2, [r3, #0]
 800a58c:	f042 0201 	orr.w	r2, r2, #1
 800a590:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a592:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 800a594:	2301      	movs	r3, #1
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a596:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
  hi2c->State = HAL_I2C_STATE_READY;
 800a59a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 800a59e:	bd10      	pop	{r4, pc}
      hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a5a0:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800a5a4:	609a      	str	r2, [r3, #8]
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a5a6:	2902      	cmp	r1, #2
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800a5a8:	bf04      	itt	eq
 800a5aa:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 800a5ae:	605a      	streq	r2, [r3, #4]
 800a5b0:	e7da      	b.n	800a568 <HAL_I2C_Init+0x42>
    return HAL_ERROR;
 800a5b2:	2001      	movs	r0, #1
 800a5b4:	e7f3      	b.n	800a59e <HAL_I2C_Init+0x78>

0800a5b6 <HAL_I2C_MspDeInit>:
 800a5b6:	4770      	bx	lr

0800a5b8 <HAL_I2C_DeInit>:
{
 800a5b8:	b510      	push	{r4, lr}
  if(hi2c == NULL)
 800a5ba:	4604      	mov	r4, r0
 800a5bc:	b188      	cbz	r0, 800a5e2 <HAL_I2C_DeInit+0x2a>
  __HAL_I2C_DISABLE(hi2c);
 800a5be:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800a5c0:	2302      	movs	r3, #2
 800a5c2:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  __HAL_I2C_DISABLE(hi2c);
 800a5c6:	6813      	ldr	r3, [r2, #0]
 800a5c8:	f023 0301 	bic.w	r3, r3, #1
 800a5cc:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 800a5ce:	f7ff fff2 	bl	800a5b6 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a5d2:	2000      	movs	r0, #0
 800a5d4:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
  __HAL_UNLOCK(hi2c);
 800a5d8:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  hi2c->State = HAL_I2C_STATE_RESET;
 800a5dc:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 800a5e0:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800a5e2:	2001      	movs	r0, #1
 800a5e4:	e7fc      	b.n	800a5e0 <HAL_I2C_DeInit+0x28>

0800a5e6 <HAL_I2C_Mem_Write>:
{
 800a5e6:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(hi2c->State == HAL_I2C_STATE_READY)
 800a5ea:	f890 6035 	ldrb.w	r6, [r0, #53]	; 0x35
{
 800a5ee:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 800a5f2:	f8bd 502c 	ldrh.w	r5, [sp, #44]	; 0x2c
 800a5f6:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
  if(hi2c->State == HAL_I2C_STATE_READY)
 800a5fa:	2e01      	cmp	r6, #1
{
 800a5fc:	4604      	mov	r4, r0
 800a5fe:	4688      	mov	r8, r1
  if(hi2c->State == HAL_I2C_STATE_READY)
 800a600:	b2f7      	uxtb	r7, r6
 800a602:	d170      	bne.n	800a6e6 <HAL_I2C_Mem_Write+0x100>
    if((pData == NULL) || (Size == 0)) 
 800a604:	f1b9 0f00 	cmp.w	r9, #0
 800a608:	d01e      	beq.n	800a648 <HAL_I2C_Mem_Write+0x62>
 800a60a:	b1ed      	cbz	r5, 800a648 <HAL_I2C_Mem_Write+0x62>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800a60c:	6806      	ldr	r6, [r0, #0]
 800a60e:	69b6      	ldr	r6, [r6, #24]
 800a610:	f416 4600 	ands.w	r6, r6, #32768	; 0x8000
 800a614:	d167      	bne.n	800a6e6 <HAL_I2C_Mem_Write+0x100>
    __HAL_LOCK(hi2c);
 800a616:	f890 c034 	ldrb.w	ip, [r0, #52]	; 0x34
 800a61a:	f1bc 0f01 	cmp.w	ip, #1
 800a61e:	d062      	beq.n	800a6e6 <HAL_I2C_Mem_Write+0x100>
    hi2c->State = HAL_I2C_STATE_MEM_BUSY_TX;
 800a620:	f04f 0c52 	mov.w	ip, #82	; 0x52
 800a624:	f880 c035 	strb.w	ip, [r0, #53]	; 0x35
    __HAL_LOCK(hi2c);
 800a628:	f880 7034 	strb.w	r7, [r0, #52]	; 0x34
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a62c:	f880 6036 	strb.w	r6, [r0, #54]	; 0x36
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout) != HAL_OK)
 800a630:	f8cd a000 	str.w	sl, [sp]
 800a634:	f7ff fee9 	bl	800a40a <I2C_RequestMemoryWrite>
 800a638:	b150      	cbz	r0, 800a650 <HAL_I2C_Mem_Write+0x6a>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a63a:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
        __HAL_UNLOCK(hi2c);
 800a63e:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a642:	2b04      	cmp	r3, #4
 800a644:	d000      	beq.n	800a648 <HAL_I2C_Mem_Write+0x62>
          return HAL_TIMEOUT;
 800a646:	2703      	movs	r7, #3
}
 800a648:	4638      	mov	r0, r7
 800a64a:	b002      	add	sp, #8
 800a64c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a650:	9000      	str	r0, [sp, #0]
        if(Size > 255)
 800a652:	2dff      	cmp	r5, #255	; 0xff
 800a654:	d908      	bls.n	800a668 <HAL_I2C_Mem_Write+0x82>
          I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a656:	22ff      	movs	r2, #255	; 0xff
 800a658:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a65c:	4641      	mov	r1, r8
 800a65e:	4620      	mov	r0, r4
 800a660:	f7ff fe16 	bl	800a290 <I2C_TransferConfig>
          Sizetmp = 255;
 800a664:	4616      	mov	r6, r2
 800a666:	e007      	b.n	800a678 <HAL_I2C_Mem_Write+0x92>
      I2C_TransferConfig(hi2c,DevAddress,Size, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a668:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a66c:	b2ea      	uxtb	r2, r5
 800a66e:	4641      	mov	r1, r8
 800a670:	4620      	mov	r0, r4
 800a672:	f7ff fe0d 	bl	800a290 <I2C_TransferConfig>
      Sizetmp = Size;
 800a676:	462e      	mov	r6, r5
      if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 800a678:	4651      	mov	r1, sl
 800a67a:	4620      	mov	r0, r4
 800a67c:	f7ff fe69 	bl	800a352 <I2C_WaitOnTXISFlagUntilTimeout>
 800a680:	b110      	cbz	r0, 800a688 <HAL_I2C_Mem_Write+0xa2>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a682:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 800a686:	e7dc      	b.n	800a642 <HAL_I2C_Mem_Write+0x5c>
      hi2c->Instance->TXDR = (*pData++);
 800a688:	6823      	ldr	r3, [r4, #0]
 800a68a:	f819 2b01 	ldrb.w	r2, [r9], #1
 800a68e:	629a      	str	r2, [r3, #40]	; 0x28
      Size--;
 800a690:	3d01      	subs	r5, #1
      if((Sizetmp == 0)&&(Size!=0))
 800a692:	3e01      	subs	r6, #1
      Size--;
 800a694:	b2ad      	uxth	r5, r5
      if((Sizetmp == 0)&&(Size!=0))
 800a696:	d10a      	bne.n	800a6ae <HAL_I2C_Mem_Write+0xc8>
 800a698:	b15d      	cbz	r5, 800a6b2 <HAL_I2C_Mem_Write+0xcc>
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout) != HAL_OK)      
 800a69a:	4653      	mov	r3, sl
 800a69c:	4632      	mov	r2, r6
 800a69e:	2180      	movs	r1, #128	; 0x80
 800a6a0:	4620      	mov	r0, r4
 800a6a2:	f7ff fe80 	bl	800a3a6 <I2C_WaitOnFlagUntilTimeout>
 800a6a6:	2800      	cmp	r0, #0
 800a6a8:	d1cd      	bne.n	800a646 <HAL_I2C_Mem_Write+0x60>
          I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a6aa:	9600      	str	r6, [sp, #0]
 800a6ac:	e7d1      	b.n	800a652 <HAL_I2C_Mem_Write+0x6c>
    }while(Size > 0);
 800a6ae:	2d00      	cmp	r5, #0
 800a6b0:	d1e2      	bne.n	800a678 <HAL_I2C_Mem_Write+0x92>
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, I2C_TIMEOUT_STOPF) != HAL_OK)
 800a6b2:	2119      	movs	r1, #25
 800a6b4:	4620      	mov	r0, r4
 800a6b6:	f7ff ff0d 	bl	800a4d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a6ba:	2800      	cmp	r0, #0
 800a6bc:	d1e1      	bne.n	800a682 <HAL_I2C_Mem_Write+0x9c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a6be:	6823      	ldr	r3, [r4, #0]
 800a6c0:	2220      	movs	r2, #32
 800a6c2:	61da      	str	r2, [r3, #28]
    __HAL_I2C_RESET_CR2(hi2c);
 800a6c4:	685a      	ldr	r2, [r3, #4]
 800a6c6:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 800a6ca:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 800a6ce:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800a6d2:	f022 0201 	bic.w	r2, r2, #1
 800a6d6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY; 	  
 800a6d8:	2301      	movs	r3, #1
 800a6da:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    __HAL_UNLOCK(hi2c);
 800a6de:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    return HAL_OK;
 800a6e2:	4607      	mov	r7, r0
 800a6e4:	e7b0      	b.n	800a648 <HAL_I2C_Mem_Write+0x62>
    return HAL_BUSY;
 800a6e6:	2702      	movs	r7, #2
 800a6e8:	e7ae      	b.n	800a648 <HAL_I2C_Mem_Write+0x62>

0800a6ea <HAL_I2C_Mem_Read>:
{
 800a6ea:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(hi2c->State == HAL_I2C_STATE_READY)
 800a6ee:	f890 6035 	ldrb.w	r6, [r0, #53]	; 0x35
{
 800a6f2:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 800a6f6:	f8bd 502c 	ldrh.w	r5, [sp, #44]	; 0x2c
 800a6fa:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
  if(hi2c->State == HAL_I2C_STATE_READY)
 800a6fe:	2e01      	cmp	r6, #1
{
 800a700:	4604      	mov	r4, r0
 800a702:	4688      	mov	r8, r1
  if(hi2c->State == HAL_I2C_STATE_READY)
 800a704:	b2f7      	uxtb	r7, r6
 800a706:	d175      	bne.n	800a7f4 <HAL_I2C_Mem_Read+0x10a>
    if((pData == NULL) || (Size == 0)) 
 800a708:	f1b9 0f00 	cmp.w	r9, #0
 800a70c:	d01e      	beq.n	800a74c <HAL_I2C_Mem_Read+0x62>
 800a70e:	b1ed      	cbz	r5, 800a74c <HAL_I2C_Mem_Read+0x62>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800a710:	6806      	ldr	r6, [r0, #0]
 800a712:	69b6      	ldr	r6, [r6, #24]
 800a714:	f416 4600 	ands.w	r6, r6, #32768	; 0x8000
 800a718:	d16c      	bne.n	800a7f4 <HAL_I2C_Mem_Read+0x10a>
    __HAL_LOCK(hi2c);
 800a71a:	f890 c034 	ldrb.w	ip, [r0, #52]	; 0x34
 800a71e:	f1bc 0f01 	cmp.w	ip, #1
 800a722:	d067      	beq.n	800a7f4 <HAL_I2C_Mem_Read+0x10a>
    hi2c->State = HAL_I2C_STATE_MEM_BUSY_RX;
 800a724:	f04f 0c62 	mov.w	ip, #98	; 0x62
 800a728:	f880 c035 	strb.w	ip, [r0, #53]	; 0x35
    __HAL_LOCK(hi2c);
 800a72c:	f880 7034 	strb.w	r7, [r0, #52]	; 0x34
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a730:	f880 6036 	strb.w	r6, [r0, #54]	; 0x36
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout) != HAL_OK)
 800a734:	f8cd a000 	str.w	sl, [sp]
 800a738:	f7ff fe9a 	bl	800a470 <I2C_RequestMemoryRead>
 800a73c:	b150      	cbz	r0, 800a754 <HAL_I2C_Mem_Read+0x6a>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a73e:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
        __HAL_UNLOCK(hi2c);
 800a742:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a746:	2b04      	cmp	r3, #4
 800a748:	d000      	beq.n	800a74c <HAL_I2C_Mem_Read+0x62>
        return HAL_TIMEOUT;
 800a74a:	2703      	movs	r7, #3
}
 800a74c:	4638      	mov	r0, r7
 800a74e:	b002      	add	sp, #8
 800a750:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(Size > 255)
 800a754:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 800a758:	2dff      	cmp	r5, #255	; 0xff
      I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800a75a:	9300      	str	r3, [sp, #0]
        if(Size > 255)
 800a75c:	d908      	bls.n	800a770 <HAL_I2C_Mem_Read+0x86>
          I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a75e:	22ff      	movs	r2, #255	; 0xff
 800a760:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a764:	4641      	mov	r1, r8
 800a766:	4620      	mov	r0, r4
 800a768:	f7ff fd92 	bl	800a290 <I2C_TransferConfig>
          Sizetmp = 255;
 800a76c:	4616      	mov	r6, r2
 800a76e:	e007      	b.n	800a780 <HAL_I2C_Mem_Read+0x96>
      I2C_TransferConfig(hi2c,DevAddress,Size, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800a770:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a774:	b2ea      	uxtb	r2, r5
 800a776:	4641      	mov	r1, r8
 800a778:	4620      	mov	r0, r4
 800a77a:	f7ff fd89 	bl	800a290 <I2C_TransferConfig>
      Sizetmp = Size;
 800a77e:	462e      	mov	r6, r5
      if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout) != HAL_OK)      
 800a780:	4653      	mov	r3, sl
 800a782:	2200      	movs	r2, #0
 800a784:	2104      	movs	r1, #4
 800a786:	4620      	mov	r0, r4
 800a788:	f7ff fe0d 	bl	800a3a6 <I2C_WaitOnFlagUntilTimeout>
 800a78c:	2800      	cmp	r0, #0
 800a78e:	d1dc      	bne.n	800a74a <HAL_I2C_Mem_Read+0x60>
      (*pData++) = hi2c->Instance->RXDR;
 800a790:	6823      	ldr	r3, [r4, #0]
      Size--;   
 800a792:	3d01      	subs	r5, #1
      (*pData++) = hi2c->Instance->RXDR;
 800a794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a796:	f809 3b01 	strb.w	r3, [r9], #1
      if((Sizetmp == 0)&&(Size!=0))
 800a79a:	3e01      	subs	r6, #1
      Size--;   
 800a79c:	b2ad      	uxth	r5, r5
      if((Sizetmp == 0)&&(Size!=0))
 800a79e:	d10b      	bne.n	800a7b8 <HAL_I2C_Mem_Read+0xce>
 800a7a0:	b165      	cbz	r5, 800a7bc <HAL_I2C_Mem_Read+0xd2>
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout) != HAL_OK)      
 800a7a2:	4653      	mov	r3, sl
 800a7a4:	4632      	mov	r2, r6
 800a7a6:	2180      	movs	r1, #128	; 0x80
 800a7a8:	4620      	mov	r0, r4
 800a7aa:	f7ff fdfc 	bl	800a3a6 <I2C_WaitOnFlagUntilTimeout>
 800a7ae:	2800      	cmp	r0, #0
 800a7b0:	d1cb      	bne.n	800a74a <HAL_I2C_Mem_Read+0x60>
          I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a7b2:	9600      	str	r6, [sp, #0]
        if(Size > 255)
 800a7b4:	2dff      	cmp	r5, #255	; 0xff
 800a7b6:	e7d1      	b.n	800a75c <HAL_I2C_Mem_Read+0x72>
    }while(Size > 0);
 800a7b8:	2d00      	cmp	r5, #0
 800a7ba:	d1e1      	bne.n	800a780 <HAL_I2C_Mem_Read+0x96>
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, I2C_TIMEOUT_STOPF) != HAL_OK)
 800a7bc:	2119      	movs	r1, #25
 800a7be:	4620      	mov	r0, r4
 800a7c0:	f7ff fe88 	bl	800a4d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a7c4:	b110      	cbz	r0, 800a7cc <HAL_I2C_Mem_Read+0xe2>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a7c6:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 800a7ca:	e7bc      	b.n	800a746 <HAL_I2C_Mem_Read+0x5c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a7cc:	6823      	ldr	r3, [r4, #0]
 800a7ce:	2220      	movs	r2, #32
 800a7d0:	61da      	str	r2, [r3, #28]
    __HAL_I2C_RESET_CR2(hi2c);
 800a7d2:	685a      	ldr	r2, [r3, #4]
 800a7d4:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 800a7d8:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 800a7dc:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800a7e0:	f022 0201 	bic.w	r2, r2, #1
 800a7e4:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800a7e6:	2301      	movs	r3, #1
 800a7e8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    __HAL_UNLOCK(hi2c);
 800a7ec:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    return HAL_OK;
 800a7f0:	4607      	mov	r7, r0
 800a7f2:	e7ab      	b.n	800a74c <HAL_I2C_Mem_Read+0x62>
    return HAL_BUSY;
 800a7f4:	2702      	movs	r7, #2
 800a7f6:	e7a9      	b.n	800a74c <HAL_I2C_Mem_Read+0x62>

0800a7f8 <HAL_I2C_GetState>:
  return hi2c->State;
 800a7f8:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
 800a7fc:	4770      	bx	lr

0800a7fe <SPI_WaitFifoStateUntilTimeout>:
  * @param State: Fifo state to check
  * @param Timeout : Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout)
{
 800a7fe:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800a802:	4604      	mov	r4, r0
 800a804:	460f      	mov	r7, r1
 800a806:	4616      	mov	r6, r2
 800a808:	461d      	mov	r5, r3
  __IO uint8_t tmpreg __attribute((unused));
  uint32_t tickstart = HAL_GetTick();
 800a80a:	f7fe fd1f 	bl	800924c <HAL_GetTick>
 800a80e:	4680      	mov	r8, r0

  while((hspi->Instance->SR & Flag) != State)
 800a810:	6822      	ldr	r2, [r4, #0]
 800a812:	6893      	ldr	r3, [r2, #8]
 800a814:	403b      	ands	r3, r7
 800a816:	42b3      	cmp	r3, r6
 800a818:	d101      	bne.n	800a81e <SPI_WaitFifoStateUntilTimeout+0x20>
        return HAL_TIMEOUT;
      }
    }
  }
  
  return HAL_OK;      
 800a81a:	2000      	movs	r0, #0
 800a81c:	e02f      	b.n	800a87e <SPI_WaitFifoStateUntilTimeout+0x80>
    if((Flag == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800a81e:	f5b7 6fc0 	cmp.w	r7, #1536	; 0x600
 800a822:	d104      	bne.n	800a82e <SPI_WaitFifoStateUntilTimeout+0x30>
 800a824:	b91e      	cbnz	r6, 800a82e <SPI_WaitFifoStateUntilTimeout+0x30>
      tmpreg = *((__IO uint8_t*)&hspi->Instance->DR);
 800a826:	7b13      	ldrb	r3, [r2, #12]
 800a828:	b2db      	uxtb	r3, r3
 800a82a:	f88d 3007 	strb.w	r3, [sp, #7]
    if(Timeout != HAL_MAX_DELAY)
 800a82e:	1c6b      	adds	r3, r5, #1
 800a830:	d0ef      	beq.n	800a812 <SPI_WaitFifoStateUntilTimeout+0x14>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800a832:	bb3d      	cbnz	r5, 800a884 <SPI_WaitFifoStateUntilTimeout+0x86>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a834:	6823      	ldr	r3, [r4, #0]
 800a836:	685a      	ldr	r2, [r3, #4]
 800a838:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a83c:	605a      	str	r2, [r3, #4]
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a83e:	6862      	ldr	r2, [r4, #4]
 800a840:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800a844:	d10a      	bne.n	800a85c <SPI_WaitFifoStateUntilTimeout+0x5e>
 800a846:	68a2      	ldr	r2, [r4, #8]
 800a848:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800a84c:	d002      	beq.n	800a854 <SPI_WaitFifoStateUntilTimeout+0x56>
 800a84e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800a852:	d103      	bne.n	800a85c <SPI_WaitFifoStateUntilTimeout+0x5e>
          __HAL_SPI_DISABLE(hspi);
 800a854:	681a      	ldr	r2, [r3, #0]
 800a856:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a85a:	601a      	str	r2, [r3, #0]
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED)
 800a85c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800a85e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800a862:	d107      	bne.n	800a874 <SPI_WaitFifoStateUntilTimeout+0x76>
          __HAL_SPI_RESET_CRC(hspi);
 800a864:	681a      	ldr	r2, [r3, #0]
 800a866:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a86a:	601a      	str	r2, [r3, #0]
 800a86c:	681a      	ldr	r2, [r3, #0]
 800a86e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a872:	601a      	str	r2, [r3, #0]
        __HAL_UNLOCK(hspi);
 800a874:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a878:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
        return HAL_TIMEOUT;
 800a87c:	2003      	movs	r0, #3
}
 800a87e:	b002      	add	sp, #8
 800a880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800a884:	f7fe fce2 	bl	800924c <HAL_GetTick>
 800a888:	eba0 0008 	sub.w	r0, r0, r8
 800a88c:	42a8      	cmp	r0, r5
 800a88e:	d9bf      	bls.n	800a810 <SPI_WaitFifoStateUntilTimeout+0x12>
 800a890:	e7d0      	b.n	800a834 <SPI_WaitFifoStateUntilTimeout+0x36>

0800a892 <SPI_WaitFlagStateUntilTimeout>:
{
 800a892:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a896:	4604      	mov	r4, r0
 800a898:	460f      	mov	r7, r1
 800a89a:	4616      	mov	r6, r2
 800a89c:	461d      	mov	r5, r3
  uint32_t tickstart = HAL_GetTick();
 800a89e:	f7fe fcd5 	bl	800924c <HAL_GetTick>
 800a8a2:	4680      	mov	r8, r0
  while((hspi->Instance->SR & Flag) != State)
 800a8a4:	6822      	ldr	r2, [r4, #0]
 800a8a6:	6893      	ldr	r3, [r2, #8]
 800a8a8:	403b      	ands	r3, r7
 800a8aa:	42b3      	cmp	r3, r6
 800a8ac:	d101      	bne.n	800a8b2 <SPI_WaitFlagStateUntilTimeout+0x20>
  return HAL_OK;      
 800a8ae:	2000      	movs	r0, #0
 800a8b0:	e027      	b.n	800a902 <SPI_WaitFlagStateUntilTimeout+0x70>
    if(Timeout != HAL_MAX_DELAY)
 800a8b2:	1c6b      	adds	r3, r5, #1
 800a8b4:	d0f7      	beq.n	800a8a6 <SPI_WaitFlagStateUntilTimeout+0x14>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800a8b6:	bb35      	cbnz	r5, 800a906 <SPI_WaitFlagStateUntilTimeout+0x74>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a8b8:	6823      	ldr	r3, [r4, #0]
 800a8ba:	685a      	ldr	r2, [r3, #4]
 800a8bc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a8c0:	605a      	str	r2, [r3, #4]
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a8c2:	6862      	ldr	r2, [r4, #4]
 800a8c4:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800a8c8:	d10a      	bne.n	800a8e0 <SPI_WaitFlagStateUntilTimeout+0x4e>
 800a8ca:	68a2      	ldr	r2, [r4, #8]
 800a8cc:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800a8d0:	d002      	beq.n	800a8d8 <SPI_WaitFlagStateUntilTimeout+0x46>
 800a8d2:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800a8d6:	d103      	bne.n	800a8e0 <SPI_WaitFlagStateUntilTimeout+0x4e>
          __HAL_SPI_DISABLE(hspi);
 800a8d8:	681a      	ldr	r2, [r3, #0]
 800a8da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a8de:	601a      	str	r2, [r3, #0]
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED)
 800a8e0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800a8e2:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800a8e6:	d107      	bne.n	800a8f8 <SPI_WaitFlagStateUntilTimeout+0x66>
          __HAL_SPI_RESET_CRC(hspi);
 800a8e8:	681a      	ldr	r2, [r3, #0]
 800a8ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a8ee:	601a      	str	r2, [r3, #0]
 800a8f0:	681a      	ldr	r2, [r3, #0]
 800a8f2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a8f6:	601a      	str	r2, [r3, #0]
        __HAL_UNLOCK(hspi);
 800a8f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a8fc:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 800a900:	2003      	movs	r0, #3
}
 800a902:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800a906:	f7fe fca1 	bl	800924c <HAL_GetTick>
 800a90a:	eba0 0008 	sub.w	r0, r0, r8
 800a90e:	42a8      	cmp	r0, r5
 800a910:	d9c8      	bls.n	800a8a4 <SPI_WaitFlagStateUntilTimeout+0x12>
 800a912:	e7d1      	b.n	800a8b8 <SPI_WaitFlagStateUntilTimeout+0x26>

0800a914 <SPI_EndRxTxTransaction>:
  * @brief This function handles the check of the RXTX or TX transaction complete.
  * @param hspi: SPI handle
  * @param Timeout : Timeout duration
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout)
{
 800a914:	b513      	push	{r0, r1, r4, lr}
 800a916:	460b      	mov	r3, r1
  /* Procedure to check the transaction complete */
  if(SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout) != HAL_OK)
 800a918:	9101      	str	r1, [sp, #4]
 800a91a:	2200      	movs	r2, #0
 800a91c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
{
 800a920:	4604      	mov	r4, r0
  if(SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout) != HAL_OK)
 800a922:	f7ff ff6c 	bl	800a7fe <SPI_WaitFifoStateUntilTimeout>
 800a926:	9b01      	ldr	r3, [sp, #4]
 800a928:	4602      	mov	r2, r0
 800a92a:	b138      	cbz	r0, 800a93c <SPI_EndRxTxTransaction+0x28>
    hspi->ErrorCode |= HAL_SPI_ERROR_FLAG;
    return HAL_TIMEOUT;
  }
  if(SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout) != HAL_OK)
  {
    hspi->ErrorCode |= HAL_SPI_ERROR_FLAG;
 800a92c:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
 800a930:	f043 0320 	orr.w	r3, r3, #32
 800a934:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
    return HAL_TIMEOUT;
 800a938:	2003      	movs	r0, #3
 800a93a:	e00f      	b.n	800a95c <SPI_EndRxTxTransaction+0x48>
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout) != HAL_OK)
 800a93c:	2180      	movs	r1, #128	; 0x80
 800a93e:	4620      	mov	r0, r4
 800a940:	9301      	str	r3, [sp, #4]
 800a942:	f7ff ffa6 	bl	800a892 <SPI_WaitFlagStateUntilTimeout>
 800a946:	9b01      	ldr	r3, [sp, #4]
 800a948:	4602      	mov	r2, r0
 800a94a:	2800      	cmp	r0, #0
 800a94c:	d1ee      	bne.n	800a92c <SPI_EndRxTxTransaction+0x18>
  if(SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout) != HAL_OK)
 800a94e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800a952:	4620      	mov	r0, r4
 800a954:	f7ff ff53 	bl	800a7fe <SPI_WaitFifoStateUntilTimeout>
 800a958:	2800      	cmp	r0, #0
 800a95a:	d1e7      	bne.n	800a92c <SPI_EndRxTxTransaction+0x18>
  }
  return HAL_OK;
}
 800a95c:	b002      	add	sp, #8
 800a95e:	bd10      	pop	{r4, pc}

0800a960 <HAL_SPI_MspInit>:
}
 800a960:	4770      	bx	lr

0800a962 <HAL_SPI_Init>:
{
 800a962:	b570      	push	{r4, r5, r6, lr}
  if(hspi == NULL)
 800a964:	4604      	mov	r4, r0
 800a966:	2800      	cmp	r0, #0
 800a968:	d047      	beq.n	800a9fa <HAL_SPI_Init+0x98>
  hspi->State = HAL_SPI_STATE_BUSY;
 800a96a:	2302      	movs	r3, #2
 800a96c:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
  HAL_SPI_MspInit(hspi);
 800a970:	f7ff fff6 	bl	800a960 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 800a974:	6822      	ldr	r2, [r4, #0]
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a976:	68e5      	ldr	r5, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 800a978:	6813      	ldr	r3, [r2, #0]
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a97a:	f5b5 6fe0 	cmp.w	r5, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 800a97e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a982:	6013      	str	r3, [r2, #0]
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a984:	f04f 0300 	mov.w	r3, #0
 800a988:	d839      	bhi.n	800a9fe <HAL_SPI_Init+0x9c>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a98a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  if(( hspi->Init.DataSize != SPI_DATASIZE_16BIT ) && ( hspi->Init.DataSize != SPI_DATASIZE_8BIT ))
 800a98e:	d000      	beq.n	800a992 <HAL_SPI_Init+0x30>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 800a990:	62a3      	str	r3, [r4, #40]	; 0x28
  if( hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800a992:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a994:	b92b      	cbnz	r3, 800a9a2 <HAL_SPI_Init+0x40>
    if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a996:	f5b5 6fe0 	cmp.w	r5, #1792	; 0x700
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800a99a:	bf8c      	ite	hi
 800a99c:	2302      	movhi	r3, #2
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800a99e:	2301      	movls	r3, #1
 800a9a0:	6323      	str	r3, [r4, #48]	; 0x30
                         hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation);
 800a9a2:	e9d4 3601 	ldrd	r3, r6, [r4, #4]
 800a9a6:	4333      	orrs	r3, r6
 800a9a8:	6926      	ldr	r6, [r4, #16]
                         hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
 800a9aa:	69a0      	ldr	r0, [r4, #24]
                         hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation);
 800a9ac:	4333      	orrs	r3, r6
 800a9ae:	6966      	ldr	r6, [r4, #20]
 800a9b0:	4333      	orrs	r3, r6
 800a9b2:	69e6      	ldr	r6, [r4, #28]
 800a9b4:	4333      	orrs	r3, r6
 800a9b6:	6a26      	ldr	r6, [r4, #32]
 800a9b8:	4333      	orrs	r3, r6
 800a9ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a9bc:	4333      	orrs	r3, r6
                         hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
 800a9be:	f400 7600 	and.w	r6, r0, #512	; 0x200
                         hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation);
 800a9c2:	4333      	orrs	r3, r6
  hspi->Instance->CR1 = (hspi->Init.Mode | hspi->Init.Direction | 
 800a9c4:	6013      	str	r3, [r2, #0]
  if( hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 800a9c6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a9c8:	2b02      	cmp	r3, #2
    hspi->Instance->CR1|= SPI_CR1_CRCL;
 800a9ca:	bf02      	ittt	eq
 800a9cc:	6813      	ldreq	r3, [r2, #0]
 800a9ce:	f443 6300 	orreq.w	r3, r3, #2048	; 0x800
 800a9d2:	6013      	streq	r3, [r2, #0]
  hspi->Instance->CR2 = (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode | hspi->Init.NSSPMode |
 800a9d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a9d6:	432b      	orrs	r3, r5
 800a9d8:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800a9da:	0c00      	lsrs	r0, r0, #16
 800a9dc:	f000 0004 	and.w	r0, r0, #4
 800a9e0:	432b      	orrs	r3, r5
 800a9e2:	4303      	orrs	r3, r0
                         hspi->Init.DataSize ) | frxth;
 800a9e4:	430b      	orrs	r3, r1
  hspi->Instance->CR2 = (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode | hspi->Init.NSSPMode |
 800a9e6:	6053      	str	r3, [r2, #4]
  hspi->Instance->CRCPR = hspi->Init.CRCPolynomial;
 800a9e8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a9ea:	6113      	str	r3, [r2, #16]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a9ec:	2000      	movs	r0, #0
  hspi->State= HAL_SPI_STATE_READY;
 800a9ee:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a9f0:	f884 005e 	strb.w	r0, [r4, #94]	; 0x5e
  hspi->State= HAL_SPI_STATE_READY;
 800a9f4:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 800a9f8:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800a9fa:	2001      	movs	r0, #1
 800a9fc:	e7fc      	b.n	800a9f8 <HAL_SPI_Init+0x96>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a9fe:	4619      	mov	r1, r3
  if(( hspi->Init.DataSize != SPI_DATASIZE_16BIT ) && ( hspi->Init.DataSize != SPI_DATASIZE_8BIT ))
 800aa00:	f5b5 6f70 	cmp.w	r5, #3840	; 0xf00
 800aa04:	e7c3      	b.n	800a98e <HAL_SPI_Init+0x2c>

0800aa06 <HAL_SPI_MspDeInit>:
 800aa06:	4770      	bx	lr

0800aa08 <HAL_SPI_DeInit>:
{
 800aa08:	b510      	push	{r4, lr}
  if(hspi == NULL)
 800aa0a:	4604      	mov	r4, r0
 800aa0c:	b178      	cbz	r0, 800aa2e <HAL_SPI_DeInit+0x26>
  __HAL_SPI_DISABLE(hspi);
 800aa0e:	6802      	ldr	r2, [r0, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 800aa10:	2302      	movs	r3, #2
 800aa12:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 800aa16:	6813      	ldr	r3, [r2, #0]
 800aa18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aa1c:	6013      	str	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 800aa1e:	f7ff fff2 	bl	800aa06 <HAL_SPI_MspDeInit>
  __HAL_UNLOCK(hspi);
 800aa22:	2000      	movs	r0, #0
 800aa24:	f8a4 005c 	strh.w	r0, [r4, #92]	; 0x5c
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800aa28:	f884 005e 	strb.w	r0, [r4, #94]	; 0x5e
}
 800aa2c:	bd10      	pop	{r4, pc}
     return HAL_ERROR;
 800aa2e:	2001      	movs	r0, #1
 800aa30:	e7fc      	b.n	800aa2c <HAL_SPI_DeInit+0x24>

0800aa32 <HAL_SPI_TransmitReceive>:
{
 800aa32:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if(hspi->State != HAL_SPI_STATE_READY) 
 800aa36:	f890 705d 	ldrb.w	r7, [r0, #93]	; 0x5d
{
 800aa3a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  __IO uint16_t tmpreg __attribute((unused)) = 0;
 800aa3c:	f04f 0b00 	mov.w	fp, #0
  if(hspi->State != HAL_SPI_STATE_READY) 
 800aa40:	2f01      	cmp	r7, #1
{
 800aa42:	4604      	mov	r4, r0
 800aa44:	4689      	mov	r9, r1
 800aa46:	4692      	mov	sl, r2
 800aa48:	461e      	mov	r6, r3
  __IO uint16_t tmpreg __attribute((unused)) = 0;
 800aa4a:	f8ad b006 	strh.w	fp, [sp, #6]
  if(hspi->State != HAL_SPI_STATE_READY) 
 800aa4e:	d004      	beq.n	800aa5a <HAL_SPI_TransmitReceive+0x28>
    return HAL_BUSY;
 800aa50:	2702      	movs	r7, #2
}
 800aa52:	4638      	mov	r0, r7
 800aa54:	b003      	add	sp, #12
 800aa56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0))
 800aa5a:	2900      	cmp	r1, #0
 800aa5c:	d0f9      	beq.n	800aa52 <HAL_SPI_TransmitReceive+0x20>
 800aa5e:	2a00      	cmp	r2, #0
 800aa60:	d0f7      	beq.n	800aa52 <HAL_SPI_TransmitReceive+0x20>
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d0f5      	beq.n	800aa52 <HAL_SPI_TransmitReceive+0x20>
  tickstart = HAL_GetTick();
 800aa66:	f7fe fbf1 	bl	800924c <HAL_GetTick>
  __HAL_LOCK(hspi); 
 800aa6a:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 800aa6e:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 800aa70:	4680      	mov	r8, r0
  __HAL_LOCK(hspi); 
 800aa72:	d0ed      	beq.n	800aa50 <HAL_SPI_TransmitReceive+0x1e>
 800aa74:	f240 5301 	movw	r3, #1281	; 0x501
 800aa78:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED)
 800aa7c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    __HAL_SPI_RESET_CRC(hspi);
 800aa7e:	6822      	ldr	r2, [r4, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800aa80:	f884 b05e 	strb.w	fp, [r4, #94]	; 0x5e
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED)
 800aa84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
  hspi->pRxBuffPtr  = pRxData;
 800aa88:	f8c4 a040 	str.w	sl, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 800aa8c:	f8a4 6046 	strh.w	r6, [r4, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800aa90:	f8a4 6044 	strh.w	r6, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = pTxData;
 800aa94:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 800aa98:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size; 
 800aa9a:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED)
 800aa9c:	d107      	bne.n	800aaae <HAL_SPI_TransmitReceive+0x7c>
    __HAL_SPI_RESET_CRC(hspi);
 800aa9e:	6813      	ldr	r3, [r2, #0]
 800aaa0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800aaa4:	6013      	str	r3, [r2, #0]
 800aaa6:	6813      	ldr	r3, [r2, #0]
 800aaa8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800aaac:	6013      	str	r3, [r2, #0]
  if((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1))
 800aaae:	68e1      	ldr	r1, [r4, #12]
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800aab0:	6853      	ldr	r3, [r2, #4]
  if((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1))
 800aab2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800aab6:	d801      	bhi.n	800aabc <HAL_SPI_TransmitReceive+0x8a>
 800aab8:	2e01      	cmp	r6, #1
 800aaba:	d014      	beq.n	800aae6 <HAL_SPI_TransmitReceive+0xb4>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800aabc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800aac0:	6053      	str	r3, [r2, #4]
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 800aac2:	6813      	ldr	r3, [r2, #0]
 800aac4:	0658      	lsls	r0, r3, #25
    __HAL_SPI_ENABLE(hspi);
 800aac6:	bf5e      	ittt	pl
 800aac8:	6813      	ldrpl	r3, [r2, #0]
 800aaca:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 800aace:	6013      	strpl	r3, [r2, #0]
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800aad0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800aad4:	d83d      	bhi.n	800ab52 <HAL_SPI_TransmitReceive+0x120>
    while((hspi->TxXferCount > 0) || (hspi->RxXferCount > 0))
 800aad6:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800aad8:	2a00      	cmp	r2, #0
 800aada:	d175      	bne.n	800abc8 <HAL_SPI_TransmitReceive+0x196>
 800aadc:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d17e      	bne.n	800abe2 <HAL_SPI_TransmitReceive+0x1b0>
 800aae4:	e03c      	b.n	800ab60 <HAL_SPI_TransmitReceive+0x12e>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800aae6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800aaea:	e7e9      	b.n	800aac0 <HAL_SPI_TransmitReceive+0x8e>
      if((hspi->TxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_TXE) == SPI_FLAG_TXE))
 800aaec:	6822      	ldr	r2, [r4, #0]
 800aaee:	6891      	ldr	r1, [r2, #8]
 800aaf0:	0789      	lsls	r1, r1, #30
 800aaf2:	d510      	bpl.n	800ab16 <HAL_SPI_TransmitReceive+0xe4>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800aaf4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800aaf6:	3b01      	subs	r3, #1
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800aaf8:	f831 6b02 	ldrh.w	r6, [r1], #2
 800aafc:	60d6      	str	r6, [r2, #12]
        hspi->TxXferCount--;
 800aafe:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ab00:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800ab02:	87e3      	strh	r3, [r4, #62]	; 0x3e
        if((hspi->TxXferCount == 0) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED))
 800ab04:	b93b      	cbnz	r3, 800ab16 <HAL_SPI_TransmitReceive+0xe4>
 800ab06:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ab08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800ab0c:	bf02      	ittt	eq
 800ab0e:	6813      	ldreq	r3, [r2, #0]
 800ab10:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 800ab14:	6013      	streq	r3, [r2, #0]
      if((hspi->RxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_RXNE) == SPI_FLAG_RXNE))
 800ab16:	b168      	cbz	r0, 800ab34 <HAL_SPI_TransmitReceive+0x102>
 800ab18:	6823      	ldr	r3, [r4, #0]
 800ab1a:	689a      	ldr	r2, [r3, #8]
 800ab1c:	07d2      	lsls	r2, r2, #31
 800ab1e:	d509      	bpl.n	800ab34 <HAL_SPI_TransmitReceive+0x102>
        *((uint16_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800ab20:	68da      	ldr	r2, [r3, #12]
 800ab22:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ab24:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ab28:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 800ab2a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800ab2e:	3b01      	subs	r3, #1
 800ab30:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
      if(Timeout != HAL_MAX_DELAY)
 800ab34:	1c6b      	adds	r3, r5, #1
 800ab36:	d00c      	beq.n	800ab52 <HAL_SPI_TransmitReceive+0x120>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout)) 
 800ab38:	b92d      	cbnz	r5, 800ab46 <HAL_SPI_TransmitReceive+0x114>
          __HAL_UNLOCK(hspi);
 800ab3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ab3e:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    return HAL_TIMEOUT;
 800ab42:	2703      	movs	r7, #3
 800ab44:	e785      	b.n	800aa52 <HAL_SPI_TransmitReceive+0x20>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout)) 
 800ab46:	f7fe fb81 	bl	800924c <HAL_GetTick>
 800ab4a:	eba0 0008 	sub.w	r0, r0, r8
 800ab4e:	42a8      	cmp	r0, r5
 800ab50:	d8f3      	bhi.n	800ab3a <HAL_SPI_TransmitReceive+0x108>
    while ((hspi->TxXferCount > 0 ) || (hspi->RxXferCount > 0))
 800ab52:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      if((hspi->RxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_RXNE) == SPI_FLAG_RXNE))
 800ab54:	f8b4 0046 	ldrh.w	r0, [r4, #70]	; 0x46
    while ((hspi->TxXferCount > 0 ) || (hspi->RxXferCount > 0))
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d1c7      	bne.n	800aaec <HAL_SPI_TransmitReceive+0xba>
 800ab5c:	2800      	cmp	r0, #0
 800ab5e:	d1db      	bne.n	800ab18 <HAL_SPI_TransmitReceive+0xe6>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED)
 800ab60:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ab62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab66:	d115      	bne.n	800ab94 <HAL_SPI_TransmitReceive+0x162>
    if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SPI_FLAG_TXE, Timeout) != HAL_OK)
 800ab68:	2202      	movs	r2, #2
 800ab6a:	462b      	mov	r3, r5
 800ab6c:	4611      	mov	r1, r2
 800ab6e:	4620      	mov	r0, r4
 800ab70:	f7ff fe8f 	bl	800a892 <SPI_WaitFlagStateUntilTimeout>
 800ab74:	b128      	cbz	r0, 800ab82 <HAL_SPI_TransmitReceive+0x150>
      hspi->ErrorCode|= HAL_SPI_ERROR_CRC;
 800ab76:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
 800ab7a:	f043 0302 	orr.w	r3, r3, #2
 800ab7e:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
    if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800ab82:	68e2      	ldr	r2, [r4, #12]
      tmpreg = hspi->Instance->DR;
 800ab84:	6823      	ldr	r3, [r4, #0]
    if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800ab86:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
 800ab8a:	d16f      	bne.n	800ac6c <HAL_SPI_TransmitReceive+0x23a>
      tmpreg = hspi->Instance->DR;
 800ab8c:	68db      	ldr	r3, [r3, #12]
 800ab8e:	b29b      	uxth	r3, r3
        tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
 800ab90:	f8ad 3006 	strh.w	r3, [sp, #6]
  if(SPI_EndRxTxTransaction(hspi,Timeout) != HAL_OK)
 800ab94:	4629      	mov	r1, r5
 800ab96:	4620      	mov	r0, r4
 800ab98:	f7ff febc 	bl	800a914 <SPI_EndRxTxTransaction>
 800ab9c:	2800      	cmp	r0, #0
 800ab9e:	d1d0      	bne.n	800ab42 <HAL_SPI_TransmitReceive+0x110>
  hspi->State = HAL_SPI_STATE_READY;
 800aba0:	2301      	movs	r3, #1
  if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 800aba2:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_READY;
 800aba4:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 800aba8:	688a      	ldr	r2, [r1, #8]
    hspi->ErrorCode|= HAL_SPI_ERROR_CRC;
 800abaa:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
  if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 800abae:	f012 0210 	ands.w	r2, r2, #16
 800abb2:	d070      	beq.n	800ac96 <HAL_SPI_TransmitReceive+0x264>
    hspi->ErrorCode|= HAL_SPI_ERROR_CRC;
 800abb4:	f043 0302 	orr.w	r3, r3, #2
 800abb8:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 800abbc:	f06f 0310 	mvn.w	r3, #16
 800abc0:	608b      	str	r3, [r1, #8]
    __HAL_UNLOCK(hspi);
 800abc2:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
    return HAL_ERROR;
 800abc6:	e744      	b.n	800aa52 <HAL_SPI_TransmitReceive+0x20>
      if((hspi->TxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_TXE) == SPI_FLAG_TXE))
 800abc8:	6821      	ldr	r1, [r4, #0]
 800abca:	688b      	ldr	r3, [r1, #8]
 800abcc:	079e      	lsls	r6, r3, #30
 800abce:	d508      	bpl.n	800abe2 <HAL_SPI_TransmitReceive+0x1b0>
        if(hspi->TxXferCount > 2)
 800abd0:	2a02      	cmp	r2, #2
          hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 800abd2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        if(hspi->TxXferCount > 2)
 800abd4:	d92c      	bls.n	800ac30 <HAL_SPI_TransmitReceive+0x1fe>
          hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 800abd6:	f833 0b02 	ldrh.w	r0, [r3], #2
 800abda:	60c8      	str	r0, [r1, #12]
          hspi->TxXferCount -= 2;
 800abdc:	3a02      	subs	r2, #2
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800abde:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2;
 800abe0:	87e2      	strh	r2, [r4, #62]	; 0x3e
      if((hspi->RxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_RXNE) == SPI_FLAG_RXNE))
 800abe2:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 800abe6:	b1b1      	cbz	r1, 800ac16 <HAL_SPI_TransmitReceive+0x1e4>
 800abe8:	6822      	ldr	r2, [r4, #0]
 800abea:	6893      	ldr	r3, [r2, #8]
 800abec:	07d8      	lsls	r0, r3, #31
 800abee:	d512      	bpl.n	800ac16 <HAL_SPI_TransmitReceive+0x1e4>
        if(hspi->RxXferCount > 1)
 800abf0:	2901      	cmp	r1, #1
          *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800abf2:	6c23      	ldr	r3, [r4, #64]	; 0x40
        if(hspi->RxXferCount > 1)
 800abf4:	d030      	beq.n	800ac58 <HAL_SPI_TransmitReceive+0x226>
          *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800abf6:	68d1      	ldr	r1, [r2, #12]
 800abf8:	f823 1b02 	strh.w	r1, [r3], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800abfc:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2;
 800abfe:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800ac02:	3b02      	subs	r3, #2
 800ac04:	b29b      	uxth	r3, r3
          if(hspi->RxXferCount <= 1)
 800ac06:	2b01      	cmp	r3, #1
          hspi->RxXferCount -= 2;
 800ac08:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
          if(hspi->RxXferCount <= 1)
 800ac0c:	d803      	bhi.n	800ac16 <HAL_SPI_TransmitReceive+0x1e4>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ac0e:	6853      	ldr	r3, [r2, #4]
 800ac10:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ac14:	6053      	str	r3, [r2, #4]
      if(Timeout != HAL_MAX_DELAY)
 800ac16:	1c6b      	adds	r3, r5, #1
 800ac18:	f43f af5d 	beq.w	800aad6 <HAL_SPI_TransmitReceive+0xa4>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800ac1c:	2d00      	cmp	r5, #0
 800ac1e:	d08c      	beq.n	800ab3a <HAL_SPI_TransmitReceive+0x108>
 800ac20:	f7fe fb14 	bl	800924c <HAL_GetTick>
 800ac24:	eba0 0008 	sub.w	r0, r0, r8
 800ac28:	42a8      	cmp	r0, r5
 800ac2a:	f67f af54 	bls.w	800aad6 <HAL_SPI_TransmitReceive+0xa4>
 800ac2e:	e784      	b.n	800ab3a <HAL_SPI_TransmitReceive+0x108>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 800ac30:	1c5a      	adds	r2, r3, #1
 800ac32:	63a2      	str	r2, [r4, #56]	; 0x38
 800ac34:	781b      	ldrb	r3, [r3, #0]
 800ac36:	730b      	strb	r3, [r1, #12]
          hspi->TxXferCount--;
 800ac38:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800ac3a:	3b01      	subs	r3, #1
 800ac3c:	b29b      	uxth	r3, r3
 800ac3e:	87e3      	strh	r3, [r4, #62]	; 0x3e
        if((hspi->TxXferCount == 0) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED))
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d1ce      	bne.n	800abe2 <HAL_SPI_TransmitReceive+0x1b0>
 800ac44:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ac46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800ac4a:	bf01      	itttt	eq
 800ac4c:	6822      	ldreq	r2, [r4, #0]
 800ac4e:	6813      	ldreq	r3, [r2, #0]
 800ac50:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 800ac54:	6013      	streq	r3, [r2, #0]
 800ac56:	e7c4      	b.n	800abe2 <HAL_SPI_TransmitReceive+0x1b0>
          (*hspi->pRxBuffPtr++) =  *(__IO uint8_t *)&hspi->Instance->DR;
 800ac58:	1c59      	adds	r1, r3, #1
 800ac5a:	6421      	str	r1, [r4, #64]	; 0x40
 800ac5c:	7b12      	ldrb	r2, [r2, #12]
 800ac5e:	701a      	strb	r2, [r3, #0]
          hspi->RxXferCount--;
 800ac60:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800ac64:	3b01      	subs	r3, #1
 800ac66:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 800ac6a:	e7d4      	b.n	800ac16 <HAL_SPI_TransmitReceive+0x1e4>
      if(hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 800ac6c:	6b22      	ldr	r2, [r4, #48]	; 0x30
      tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
 800ac6e:	7b1b      	ldrb	r3, [r3, #12]
 800ac70:	f8ad 3006 	strh.w	r3, [sp, #6]
      if(hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 800ac74:	2a02      	cmp	r2, #2
 800ac76:	d18d      	bne.n	800ab94 <HAL_SPI_TransmitReceive+0x162>
        if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SPI_FLAG_TXE, Timeout) != HAL_OK) 
 800ac78:	462b      	mov	r3, r5
 800ac7a:	4611      	mov	r1, r2
 800ac7c:	4620      	mov	r0, r4
 800ac7e:	f7ff fe08 	bl	800a892 <SPI_WaitFlagStateUntilTimeout>
 800ac82:	b128      	cbz	r0, 800ac90 <HAL_SPI_TransmitReceive+0x25e>
          hspi->ErrorCode|= HAL_SPI_ERROR_CRC;
 800ac84:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
 800ac88:	f043 0302 	orr.w	r3, r3, #2
 800ac8c:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
        tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
 800ac90:	6823      	ldr	r3, [r4, #0]
 800ac92:	7b1b      	ldrb	r3, [r3, #12]
 800ac94:	e77c      	b.n	800ab90 <HAL_SPI_TransmitReceive+0x15e>
    return HAL_BUSY;
 800ac96:	1e1f      	subs	r7, r3, #0
  __HAL_UNLOCK(hspi);
 800ac98:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
    return HAL_BUSY;
 800ac9c:	bf18      	it	ne
 800ac9e:	2701      	movne	r7, #1
 800aca0:	e6d7      	b.n	800aa52 <HAL_SPI_TransmitReceive+0x20>

0800aca2 <HAL_SPI_GetState>:
  * @retval HAL state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
  return hspi->State;
}
 800aca2:	f890 005d 	ldrb.w	r0, [r0, #93]	; 0x5d
 800aca6:	4770      	bx	lr

0800aca8 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800aca8:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800acaa:	b180      	cbz	r0, 800acce <USBD_Init+0x26>
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800acac:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800acb0:	b113      	cbz	r3, 800acb8 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 800acb2:	2300      	movs	r3, #0
 800acb4:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800acb8:	b109      	cbz	r1, 800acbe <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 800acba:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800acbe:	2301      	movs	r3, #1
 800acc0:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  pdev->id = id;
 800acc4:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800acc6:	f000 fc6b 	bl	800b5a0 <USBD_LL_Init>
  
  return USBD_OK; 
 800acca:	2000      	movs	r0, #0
}
 800accc:	bd08      	pop	{r3, pc}
    return USBD_FAIL; 
 800acce:	2002      	movs	r0, #2
 800acd0:	e7fc      	b.n	800accc <USBD_Init+0x24>

0800acd2 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 800acd2:	b119      	cbz	r1, 800acdc <USBD_RegisterClass+0xa>
  {
    /* link the class tgo the USB Device handle */
    pdev->pClass = pclass;
 800acd4:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    status = USBD_OK;
 800acd8:	2000      	movs	r0, #0
 800acda:	4770      	bx	lr
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 800acdc:	2002      	movs	r0, #2
  }
  
  return status;
}
 800acde:	4770      	bx	lr

0800ace0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800ace0:	b508      	push	{r3, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 800ace2:	f000 fc9b 	bl	800b61c <USBD_LL_Start>
  
  return USBD_OK;  
}
 800ace6:	2000      	movs	r0, #0
 800ace8:	bd08      	pop	{r3, pc}

0800acea <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800acea:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 800acec:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800acf0:	b90b      	cbnz	r3, 800acf6 <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800acf2:	2002      	movs	r0, #2
    {
      ret = USBD_OK;
    }
  }
  return ret; 
}
 800acf4:	bd08      	pop	{r3, pc}
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	4798      	blx	r3
 800acfa:	2800      	cmp	r0, #0
 800acfc:	d0fa      	beq.n	800acf4 <USBD_SetClassConfig+0xa>
 800acfe:	e7f8      	b.n	800acf2 <USBD_SetClassConfig+0x8>

0800ad00 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800ad00:	b508      	push	{r3, lr}
  /* Clear configuration  and Deinitialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 800ad02:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800ad06:	685b      	ldr	r3, [r3, #4]
 800ad08:	4798      	blx	r3
  return USBD_OK;
}
 800ad0a:	2000      	movs	r0, #0
 800ad0c:	bd08      	pop	{r3, pc}

0800ad0e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ad0e:	b538      	push	{r3, r4, r5, lr}
 800ad10:	4604      	mov	r4, r0

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ad12:	f500 7502 	add.w	r5, r0, #520	; 0x208
 800ad16:	4628      	mov	r0, r5
 800ad18:	f000 fa3f 	bl	800b19a <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 800ad1c:	2301      	movs	r3, #1
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
 800ad1e:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
  pdev->ep0_state = USBD_EP0_SETUP;
 800ad22:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 800ad26:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 800ad2a:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  switch (pdev->request.bmRequest & 0x1F) 
 800ad2e:	f001 031f 	and.w	r3, r1, #31
 800ad32:	2b01      	cmp	r3, #1
 800ad34:	d008      	beq.n	800ad48 <USBD_LL_SetupStage+0x3a>
 800ad36:	2b02      	cmp	r3, #2
 800ad38:	d00b      	beq.n	800ad52 <USBD_LL_SetupStage+0x44>
 800ad3a:	b97b      	cbnz	r3, 800ad5c <USBD_LL_SetupStage+0x4e>
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &pdev->request);
 800ad3c:	4629      	mov	r1, r5
 800ad3e:	4620      	mov	r0, r4
 800ad40:	f000 f8c2 	bl	800aec8 <USBD_StdDevReq>
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
    break;
  }  
  return USBD_OK;  
}
 800ad44:	2000      	movs	r0, #0
 800ad46:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 800ad48:	4629      	mov	r1, r5
 800ad4a:	4620      	mov	r0, r4
 800ad4c:	f000 f9b6 	bl	800b0bc <USBD_StdItfReq>
    break;
 800ad50:	e7f8      	b.n	800ad44 <USBD_LL_SetupStage+0x36>
    USBD_StdEPReq(pdev, &pdev->request);   
 800ad52:	4629      	mov	r1, r5
 800ad54:	4620      	mov	r0, r4
 800ad56:	f000 f9c9 	bl	800b0ec <USBD_StdEPReq>
    break;
 800ad5a:	e7f3      	b.n	800ad44 <USBD_LL_SetupStage+0x36>
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 800ad5c:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800ad60:	4620      	mov	r0, r4
 800ad62:	f000 fc73 	bl	800b64c <USBD_LL_StallEP>
    break;
 800ad66:	e7ed      	b.n	800ad44 <USBD_LL_SetupStage+0x36>

0800ad68 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 800ad68:	b570      	push	{r4, r5, r6, lr}
 800ad6a:	4604      	mov	r4, r0
 800ad6c:	4616      	mov	r6, r2
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 800ad6e:	bb01      	cbnz	r1, 800adb2 <USBD_LL_DataOutStage+0x4a>
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ad70:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 800ad74:	2b03      	cmp	r3, #3
 800ad76:	d10d      	bne.n	800ad94 <USBD_LL_DataOutStage+0x2c>
    {
      if(pep->rem_length > pep->maxpacket)
 800ad78:	e9d0 5343 	ldrd	r5, r3, [r0, #268]	; 0x10c
 800ad7c:	429d      	cmp	r5, r3
 800ad7e:	d90b      	bls.n	800ad98 <USBD_LL_DataOutStage+0x30>
      {
        pep->rem_length -=  pep->maxpacket;
 800ad80:	1aed      	subs	r5, r5, r3
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 800ad82:	42ab      	cmp	r3, r5
 800ad84:	bf28      	it	cs
 800ad86:	462b      	movcs	r3, r5
        pep->rem_length -=  pep->maxpacket;
 800ad88:	f8c0 510c 	str.w	r5, [r0, #268]	; 0x10c
        USBD_CtlContinueRx (pdev, 
 800ad8c:	b29a      	uxth	r2, r3
 800ad8e:	4631      	mov	r1, r6
 800ad90:	f000 fa55 	bl	800b23e <USBD_CtlContinueRx>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
  }  
  return USBD_OK;
}
 800ad94:	2000      	movs	r0, #0
 800ad96:	bd70      	pop	{r4, r5, r6, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800ad98:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800ad9c:	691b      	ldr	r3, [r3, #16]
 800ad9e:	b123      	cbz	r3, 800adaa <USBD_LL_DataOutStage+0x42>
 800ada0:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800ada4:	2a03      	cmp	r2, #3
 800ada6:	d100      	bne.n	800adaa <USBD_LL_DataOutStage+0x42>
          pdev->pClass->EP0_RxReady(pdev); 
 800ada8:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 800adaa:	4620      	mov	r0, r4
 800adac:	f000 fa4f 	bl	800b24e <USBD_CtlSendStatus>
 800adb0:	e7f0      	b.n	800ad94 <USBD_LL_DataOutStage+0x2c>
  else if((pdev->pClass->DataOut != NULL)&&
 800adb2:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800adb6:	699b      	ldr	r3, [r3, #24]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d0eb      	beq.n	800ad94 <USBD_LL_DataOutStage+0x2c>
 800adbc:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800adc0:	2a03      	cmp	r2, #3
 800adc2:	d1e7      	bne.n	800ad94 <USBD_LL_DataOutStage+0x2c>
    pdev->pClass->DataOut(pdev, epnum); 
 800adc4:	4798      	blx	r3
 800adc6:	e7e5      	b.n	800ad94 <USBD_LL_DataOutStage+0x2c>

0800adc8 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 800adc8:	b570      	push	{r4, r5, r6, lr}
 800adca:	4604      	mov	r4, r0
 800adcc:	4616      	mov	r6, r2
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 800adce:	bbb1      	cbnz	r1, 800ae3e <USBD_LL_DataInStage+0x76>
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800add0:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 800add4:	2b02      	cmp	r3, #2
 800add6:	d109      	bne.n	800adec <USBD_LL_DataInStage+0x24>
    {
      if(pep->rem_length > pep->maxpacket)
 800add8:	e9d0 5307 	ldrd	r5, r3, [r0, #28]
 800addc:	429d      	cmp	r5, r3
 800adde:	d90e      	bls.n	800adfe <USBD_LL_DataInStage+0x36>
      {
        pep->rem_length -=  pep->maxpacket;
 800ade0:	1aeb      	subs	r3, r5, r3
 800ade2:	61c3      	str	r3, [r0, #28]
        
        USBD_CtlContinueSendData (pdev, 
 800ade4:	b29a      	uxth	r2, r3
 800ade6:	4631      	mov	r1, r6
 800ade8:	f000 fa14 	bl	800b214 <USBD_CtlContinueSendData>
          }          
          USBD_CtlReceiveStatus(pdev);
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 800adec:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 800adf0:	2b01      	cmp	r3, #1
 800adf2:	d102      	bne.n	800adfa <USBD_LL_DataInStage+0x32>
    {
      USBD_RunTestMode(pdev); 
      pdev->dev_test_mode = 0;
 800adf4:	2300      	movs	r3, #0
 800adf6:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
  }  
  return USBD_OK;
}
 800adfa:	2000      	movs	r0, #0
 800adfc:	bd70      	pop	{r4, r5, r6, pc}
        if((pep->total_length % pep->maxpacket == 0) &&
 800adfe:	6982      	ldr	r2, [r0, #24]
 800ae00:	fbb2 f5f3 	udiv	r5, r2, r3
 800ae04:	fb03 2515 	mls	r5, r3, r5, r2
 800ae08:	b95d      	cbnz	r5, 800ae22 <USBD_LL_DataInStage+0x5a>
 800ae0a:	4293      	cmp	r3, r2
 800ae0c:	d809      	bhi.n	800ae22 <USBD_LL_DataInStage+0x5a>
           (pep->total_length >= pep->maxpacket) &&
 800ae0e:	f8d0 31f8 	ldr.w	r3, [r0, #504]	; 0x1f8
 800ae12:	429a      	cmp	r2, r3
 800ae14:	d205      	bcs.n	800ae22 <USBD_LL_DataInStage+0x5a>
          USBD_CtlContinueSendData(pdev , NULL, 0);
 800ae16:	462a      	mov	r2, r5
 800ae18:	f000 f9fc 	bl	800b214 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 800ae1c:	f8c4 51f8 	str.w	r5, [r4, #504]	; 0x1f8
 800ae20:	e7e4      	b.n	800adec <USBD_LL_DataInStage+0x24>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800ae22:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 800ae26:	68db      	ldr	r3, [r3, #12]
 800ae28:	b12b      	cbz	r3, 800ae36 <USBD_LL_DataInStage+0x6e>
 800ae2a:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
 800ae2e:	2a03      	cmp	r2, #3
 800ae30:	d101      	bne.n	800ae36 <USBD_LL_DataInStage+0x6e>
            pdev->pClass->EP0_TxSent(pdev); 
 800ae32:	4620      	mov	r0, r4
 800ae34:	4798      	blx	r3
          USBD_CtlReceiveStatus(pdev);
 800ae36:	4620      	mov	r0, r4
 800ae38:	f000 fa14 	bl	800b264 <USBD_CtlReceiveStatus>
 800ae3c:	e7d6      	b.n	800adec <USBD_LL_DataInStage+0x24>
  else if((pdev->pClass->DataIn != NULL)&& 
 800ae3e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800ae42:	695b      	ldr	r3, [r3, #20]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d0d8      	beq.n	800adfa <USBD_LL_DataInStage+0x32>
 800ae48:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800ae4c:	2a03      	cmp	r2, #3
 800ae4e:	d1d4      	bne.n	800adfa <USBD_LL_DataInStage+0x32>
    pdev->pClass->DataIn(pdev, epnum); 
 800ae50:	4798      	blx	r3
 800ae52:	e7d2      	b.n	800adfa <USBD_LL_DataInStage+0x32>

0800ae54 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800ae54:	b538      	push	{r3, r4, r5, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 800ae56:	2200      	movs	r2, #0
{
 800ae58:	4604      	mov	r4, r0
  USBD_LL_OpenEP(pdev,
 800ae5a:	4611      	mov	r1, r2
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ae5c:	2540      	movs	r5, #64	; 0x40
  USBD_LL_OpenEP(pdev,
 800ae5e:	2340      	movs	r3, #64	; 0x40
 800ae60:	f000 fbe3 	bl	800b62a <USBD_LL_OpenEP>
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 800ae64:	462b      	mov	r3, r5
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ae66:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
  USBD_LL_OpenEP(pdev,
 800ae6a:	2200      	movs	r2, #0
 800ae6c:	2180      	movs	r1, #128	; 0x80
 800ae6e:	4620      	mov	r0, r4
 800ae70:	f000 fbdb 	bl	800b62a <USBD_LL_OpenEP>
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call usr call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ae74:	2301      	movs	r3, #1
 800ae76:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 800ae7a:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ae7e:	6225      	str	r5, [r4, #32]
  if (pdev->pClassData) 
 800ae80:	b12b      	cbz	r3, 800ae8e <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 800ae82:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 800ae86:	7921      	ldrb	r1, [r4, #4]
 800ae88:	685b      	ldr	r3, [r3, #4]
 800ae8a:	4620      	mov	r0, r4
 800ae8c:	4798      	blx	r3
 
  
  return USBD_OK;
}
 800ae8e:	2000      	movs	r0, #0
 800ae90:	bd38      	pop	{r3, r4, r5, pc}

0800ae92 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800ae92:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 800ae94:	2000      	movs	r0, #0
 800ae96:	4770      	bx	lr

0800ae98 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800ae98:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae9a:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800ae9e:	2a03      	cmp	r2, #3
 800aea0:	d104      	bne.n	800aeac <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 800aea2:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800aea6:	69db      	ldr	r3, [r3, #28]
 800aea8:	b103      	cbz	r3, 800aeac <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 800aeaa:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 800aeac:	2000      	movs	r0, #0
 800aeae:	bd08      	pop	{r3, pc}

0800aeb0 <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 800aeb0:	b510      	push	{r4, lr}
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80);
 800aeb2:	2180      	movs	r1, #128	; 0x80
void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 800aeb4:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80);
 800aeb6:	f000 fbc9 	bl	800b64c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 800aeba:	4620      	mov	r0, r4
 800aebc:	2100      	movs	r1, #0
}
 800aebe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0);
 800aec2:	f000 bbc3 	b.w	800b64c <USBD_LL_StallEP>
	...

0800aec8 <USBD_StdDevReq>:
{
 800aec8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bRequest) 
 800aeca:	784b      	ldrb	r3, [r1, #1]
{
 800aecc:	4604      	mov	r4, r0
 800aece:	460d      	mov	r5, r1
  switch (req->bRequest) 
 800aed0:	2b09      	cmp	r3, #9
 800aed2:	d876      	bhi.n	800afc2 <USBD_StdDevReq+0xfa>
 800aed4:	e8df f013 	tbh	[pc, r3, lsl #1]
 800aed8:	00e500c9 	.word	0x00e500c9
 800aedc:	00d90075 	.word	0x00d90075
 800aee0:	006d0075 	.word	0x006d0075
 800aee4:	0075000a 	.word	0x0075000a
 800aee8:	008d00b9 	.word	0x008d00b9
  switch (req->wValue >> 8)
 800aeec:	884b      	ldrh	r3, [r1, #2]
 800aeee:	0a1a      	lsrs	r2, r3, #8
 800aef0:	3a01      	subs	r2, #1
 800aef2:	2a06      	cmp	r2, #6
 800aef4:	d865      	bhi.n	800afc2 <USBD_StdDevReq+0xfa>
 800aef6:	e8df f002 	tbb	[pc, r2]
 800aefa:	1c04      	.short	0x1c04
 800aefc:	49646429 	.word	0x49646429
 800af00:	52          	.byte	0x52
 800af01:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800af02:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800af06:	681b      	ldr	r3, [r3, #0]
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 800af08:	7c20      	ldrb	r0, [r4, #16]
 800af0a:	f10d 0106 	add.w	r1, sp, #6
 800af0e:	4798      	blx	r3
  if((len != 0)&& (req->wLength != 0))
 800af10:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800af14:	2a00      	cmp	r2, #0
 800af16:	d067      	beq.n	800afe8 <USBD_StdDevReq+0x120>
 800af18:	88eb      	ldrh	r3, [r5, #6]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d064      	beq.n	800afe8 <USBD_StdDevReq+0x120>
    len = MIN(len , req->wLength);
 800af1e:	429a      	cmp	r2, r3
 800af20:	bf28      	it	cs
 800af22:	461a      	movcs	r2, r3
 800af24:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, 
 800af28:	4601      	mov	r1, r0
    USBD_CtlSendData (pdev, 
 800af2a:	4620      	mov	r0, r4
 800af2c:	f000 f965 	bl	800b1fa <USBD_CtlSendData>
    break;
 800af30:	e05a      	b.n	800afe8 <USBD_StdDevReq+0x120>
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 800af32:	7c02      	ldrb	r2, [r0, #16]
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800af34:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 800af38:	b932      	cbnz	r2, 800af48 <USBD_StdDevReq+0x80>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800af3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800af3c:	f10d 0006 	add.w	r0, sp, #6
 800af40:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800af42:	2302      	movs	r3, #2
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800af44:	7043      	strb	r3, [r0, #1]
      break; 
 800af46:	e7e3      	b.n	800af10 <USBD_StdDevReq+0x48>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800af48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af4a:	e7f7      	b.n	800af3c <USBD_StdDevReq+0x74>
    switch ((uint8_t)(req->wValue))
 800af4c:	b2db      	uxtb	r3, r3
 800af4e:	2b05      	cmp	r3, #5
 800af50:	d837      	bhi.n	800afc2 <USBD_StdDevReq+0xfa>
 800af52:	e8df f003 	tbb	[pc, r3]
 800af56:	0703      	.short	0x0703
 800af58:	17130f0b 	.word	0x17130f0b
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 800af5c:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800af60:	685b      	ldr	r3, [r3, #4]
 800af62:	e7d1      	b.n	800af08 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800af64:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800af68:	689b      	ldr	r3, [r3, #8]
 800af6a:	e7cd      	b.n	800af08 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800af6c:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800af70:	68db      	ldr	r3, [r3, #12]
 800af72:	e7c9      	b.n	800af08 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800af74:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800af78:	691b      	ldr	r3, [r3, #16]
 800af7a:	e7c5      	b.n	800af08 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800af7c:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800af80:	695b      	ldr	r3, [r3, #20]
 800af82:	e7c1      	b.n	800af08 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800af84:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800af88:	699b      	ldr	r3, [r3, #24]
 800af8a:	e7bd      	b.n	800af08 <USBD_StdDevReq+0x40>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 800af8c:	7c03      	ldrb	r3, [r0, #16]
 800af8e:	b9c3      	cbnz	r3, 800afc2 <USBD_StdDevReq+0xfa>
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800af90:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800af94:	f10d 0006 	add.w	r0, sp, #6
 800af98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af9a:	4798      	blx	r3
      break;
 800af9c:	e7b8      	b.n	800af10 <USBD_StdDevReq+0x48>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 800af9e:	7c03      	ldrb	r3, [r0, #16]
 800afa0:	b97b      	cbnz	r3, 800afc2 <USBD_StdDevReq+0xfa>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800afa2:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800afa6:	f10d 0006 	add.w	r0, sp, #6
 800afaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afac:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800afae:	2307      	movs	r3, #7
 800afb0:	e7c8      	b.n	800af44 <USBD_StdDevReq+0x7c>
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 800afb2:	888b      	ldrh	r3, [r1, #4]
 800afb4:	b92b      	cbnz	r3, 800afc2 <USBD_StdDevReq+0xfa>
 800afb6:	88cb      	ldrh	r3, [r1, #6]
 800afb8:	b91b      	cbnz	r3, 800afc2 <USBD_StdDevReq+0xfa>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800afba:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800afbe:	2b03      	cmp	r3, #3
 800afc0:	d103      	bne.n	800afca <USBD_StdDevReq+0x102>
       USBD_CtlError(pdev , req);                     
 800afc2:	4620      	mov	r0, r4
 800afc4:	f7ff ff74 	bl	800aeb0 <USBD_CtlError.constprop.0>
      break;
 800afc8:	e00e      	b.n	800afe8 <USBD_StdDevReq+0x120>
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 800afca:	884d      	ldrh	r5, [r1, #2]
 800afcc:	f005 057f 	and.w	r5, r5, #127	; 0x7f
      pdev->dev_address = dev_addr;
 800afd0:	f880 51fe 	strb.w	r5, [r0, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 800afd4:	4629      	mov	r1, r5
 800afd6:	f000 fb5a 	bl	800b68e <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 800afda:	4620      	mov	r0, r4
 800afdc:	f000 f937 	bl	800b24e <USBD_CtlSendStatus>
      if (dev_addr != 0) 
 800afe0:	b12d      	cbz	r5, 800afee <USBD_StdDevReq+0x126>
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 800afe2:	2302      	movs	r3, #2
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 800afe4:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
}
 800afe8:	2000      	movs	r0, #0
 800afea:	b003      	add	sp, #12
 800afec:	bd30      	pop	{r4, r5, pc}
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 800afee:	2301      	movs	r3, #1
 800aff0:	e7f8      	b.n	800afe4 <USBD_StdDevReq+0x11c>
  cfgidx = (uint8_t)(req->wValue);                 
 800aff2:	7889      	ldrb	r1, [r1, #2]
 800aff4:	4d30      	ldr	r5, [pc, #192]	; (800b0b8 <USBD_StdDevReq+0x1f0>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 800aff6:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);                 
 800aff8:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 800affa:	d8e2      	bhi.n	800afc2 <USBD_StdDevReq+0xfa>
    switch (pdev->dev_state) 
 800affc:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800b000:	2b02      	cmp	r3, #2
 800b002:	d00c      	beq.n	800b01e <USBD_StdDevReq+0x156>
 800b004:	2b03      	cmp	r3, #3
 800b006:	d1dc      	bne.n	800afc2 <USBD_StdDevReq+0xfa>
      if (cfgidx == 0) 
 800b008:	b9b1      	cbnz	r1, 800b038 <USBD_StdDevReq+0x170>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b00a:	2302      	movs	r3, #2
 800b00c:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 800b010:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 800b012:	f7ff fe75 	bl	800ad00 <USBD_ClrClassConfig>
      USBD_CtlSendStatus(pdev);
 800b016:	4620      	mov	r0, r4
 800b018:	f000 f919 	bl	800b24e <USBD_CtlSendStatus>
 800b01c:	e7e4      	b.n	800afe8 <USBD_StdDevReq+0x120>
      if (cfgidx) 
 800b01e:	2900      	cmp	r1, #0
 800b020:	d0f9      	beq.n	800b016 <USBD_StdDevReq+0x14e>
        pdev->dev_config = cfgidx;
 800b022:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800b024:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 800b026:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800b028:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 800b02c:	4620      	mov	r0, r4
 800b02e:	f7ff fe5c 	bl	800acea <USBD_SetClassConfig>
 800b032:	2802      	cmp	r0, #2
 800b034:	d1ef      	bne.n	800b016 <USBD_StdDevReq+0x14e>
 800b036:	e7c4      	b.n	800afc2 <USBD_StdDevReq+0xfa>
      else  if (cfgidx != pdev->dev_config) 
 800b038:	6841      	ldr	r1, [r0, #4]
 800b03a:	2901      	cmp	r1, #1
 800b03c:	d0eb      	beq.n	800b016 <USBD_StdDevReq+0x14e>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 800b03e:	b2c9      	uxtb	r1, r1
 800b040:	f7ff fe5e 	bl	800ad00 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b044:	7829      	ldrb	r1, [r5, #0]
 800b046:	6061      	str	r1, [r4, #4]
 800b048:	e7f0      	b.n	800b02c <USBD_StdDevReq+0x164>
  if (req->wLength != 1) 
 800b04a:	88ca      	ldrh	r2, [r1, #6]
 800b04c:	2a01      	cmp	r2, #1
 800b04e:	d1b8      	bne.n	800afc2 <USBD_StdDevReq+0xfa>
    switch (pdev->dev_state )  
 800b050:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800b054:	2b02      	cmp	r3, #2
 800b056:	d003      	beq.n	800b060 <USBD_StdDevReq+0x198>
 800b058:	2b03      	cmp	r3, #3
 800b05a:	d1b2      	bne.n	800afc2 <USBD_StdDevReq+0xfa>
      USBD_CtlSendData (pdev, 
 800b05c:	1d01      	adds	r1, r0, #4
 800b05e:	e764      	b.n	800af2a <USBD_StdDevReq+0x62>
      pdev->dev_default_config = 0;
 800b060:	4601      	mov	r1, r0
 800b062:	2300      	movs	r3, #0
 800b064:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData (pdev, 
 800b068:	e75f      	b.n	800af2a <USBD_StdDevReq+0x62>
  switch (pdev->dev_state) 
 800b06a:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800b06e:	3b02      	subs	r3, #2
 800b070:	2b01      	cmp	r3, #1
 800b072:	d8a6      	bhi.n	800afc2 <USBD_StdDevReq+0xfa>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 800b074:	2301      	movs	r3, #1
 800b076:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup) 
 800b078:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 800b07c:	b10b      	cbz	r3, 800b082 <USBD_StdDevReq+0x1ba>
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 800b07e:	2303      	movs	r3, #3
 800b080:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, 
 800b082:	2202      	movs	r2, #2
 800b084:	f104 010c 	add.w	r1, r4, #12
 800b088:	e74f      	b.n	800af2a <USBD_StdDevReq+0x62>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b08a:	884b      	ldrh	r3, [r1, #2]
 800b08c:	2b01      	cmp	r3, #1
 800b08e:	d1ab      	bne.n	800afe8 <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 800b090:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 800b094:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 800b098:	4629      	mov	r1, r5
 800b09a:	689b      	ldr	r3, [r3, #8]
 800b09c:	4620      	mov	r0, r4
 800b09e:	4798      	blx	r3
 800b0a0:	e7b9      	b.n	800b016 <USBD_StdDevReq+0x14e>
  switch (pdev->dev_state)
 800b0a2:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800b0a6:	3b02      	subs	r3, #2
 800b0a8:	2b01      	cmp	r3, #1
 800b0aa:	d88a      	bhi.n	800afc2 <USBD_StdDevReq+0xfa>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 800b0ac:	884b      	ldrh	r3, [r1, #2]
 800b0ae:	2b01      	cmp	r3, #1
 800b0b0:	d19a      	bne.n	800afe8 <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	e7ec      	b.n	800b090 <USBD_StdDevReq+0x1c8>
 800b0b6:	bf00      	nop
 800b0b8:	2000108c 	.word	0x2000108c

0800b0bc <USBD_StdItfReq>:
{
 800b0bc:	b538      	push	{r3, r4, r5, lr}
  switch (pdev->dev_state) 
 800b0be:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800b0c2:	2b03      	cmp	r3, #3
{
 800b0c4:	4604      	mov	r4, r0
 800b0c6:	460d      	mov	r5, r1
  switch (pdev->dev_state) 
 800b0c8:	d10d      	bne.n	800b0e6 <USBD_StdItfReq+0x2a>
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 800b0ca:	790b      	ldrb	r3, [r1, #4]
 800b0cc:	2b01      	cmp	r3, #1
 800b0ce:	d80a      	bhi.n	800b0e6 <USBD_StdItfReq+0x2a>
      pdev->pClass->Setup (pdev, req); 
 800b0d0:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800b0d4:	689b      	ldr	r3, [r3, #8]
 800b0d6:	4798      	blx	r3
      if((req->wLength == 0)&& (ret == USBD_OK))
 800b0d8:	88eb      	ldrh	r3, [r5, #6]
 800b0da:	b913      	cbnz	r3, 800b0e2 <USBD_StdItfReq+0x26>
         USBD_CtlSendStatus(pdev);
 800b0dc:	4620      	mov	r0, r4
 800b0de:	f000 f8b6 	bl	800b24e <USBD_CtlSendStatus>
}
 800b0e2:	2000      	movs	r0, #0
 800b0e4:	bd38      	pop	{r3, r4, r5, pc}
     USBD_CtlError(pdev , req);
 800b0e6:	f7ff fee3 	bl	800aeb0 <USBD_CtlError.constprop.0>
    break;
 800b0ea:	e7fa      	b.n	800b0e2 <USBD_StdItfReq+0x26>

0800b0ec <USBD_StdEPReq>:
{
 800b0ec:	b538      	push	{r3, r4, r5, lr}
 800b0ee:	460d      	mov	r5, r1
  ep_addr  = LOBYTE(req->wIndex);   
 800b0f0:	888a      	ldrh	r2, [r1, #4]
  switch (req->bRequest) 
 800b0f2:	786b      	ldrb	r3, [r5, #1]
  ep_addr  = LOBYTE(req->wIndex);   
 800b0f4:	7909      	ldrb	r1, [r1, #4]
  switch (req->bRequest) 
 800b0f6:	2b01      	cmp	r3, #1
{
 800b0f8:	4604      	mov	r4, r0
  switch (req->bRequest) 
 800b0fa:	d03b      	beq.n	800b174 <USBD_StdEPReq+0x88>
 800b0fc:	2b03      	cmp	r3, #3
 800b0fe:	d01e      	beq.n	800b13e <USBD_StdEPReq+0x52>
 800b100:	bb33      	cbnz	r3, 800b150 <USBD_StdEPReq+0x64>
    switch (pdev->dev_state) 
 800b102:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800b106:	2b02      	cmp	r3, #2
 800b108:	d042      	beq.n	800b190 <USBD_StdEPReq+0xa4>
 800b10a:	2b03      	cmp	r3, #3
 800b10c:	d11d      	bne.n	800b14a <USBD_StdEPReq+0x5e>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800b10e:	f001 037f 	and.w	r3, r1, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 800b112:	f012 0f80 	tst.w	r2, #128	; 0x80
 800b116:	bf14      	ite	ne
 800b118:	3301      	addne	r3, #1
 800b11a:	3310      	addeq	r3, #16
 800b11c:	2204      	movs	r2, #4
 800b11e:	2510      	movs	r5, #16
 800b120:	fb15 2503 	smlabb	r5, r5, r3, r2
 800b124:	4405      	add	r5, r0
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 800b126:	f000 fa9f 	bl	800b668 <USBD_LL_IsStallEP>
 800b12a:	3800      	subs	r0, #0
 800b12c:	bf18      	it	ne
 800b12e:	2001      	movne	r0, #1
 800b130:	6028      	str	r0, [r5, #0]
      USBD_CtlSendData (pdev,
 800b132:	2202      	movs	r2, #2
 800b134:	4629      	mov	r1, r5
 800b136:	4620      	mov	r0, r4
 800b138:	f000 f85f 	bl	800b1fa <USBD_CtlSendData>
      break;
 800b13c:	e008      	b.n	800b150 <USBD_StdEPReq+0x64>
    switch (pdev->dev_state) 
 800b13e:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800b142:	2b02      	cmp	r3, #2
 800b144:	d024      	beq.n	800b190 <USBD_StdEPReq+0xa4>
 800b146:	2b03      	cmp	r3, #3
 800b148:	d004      	beq.n	800b154 <USBD_StdEPReq+0x68>
      USBD_CtlError(pdev , req);
 800b14a:	4620      	mov	r0, r4
 800b14c:	f7ff feb0 	bl	800aeb0 <USBD_CtlError.constprop.0>
}
 800b150:	2000      	movs	r0, #0
 800b152:	bd38      	pop	{r3, r4, r5, pc}
      if (req->wValue == USB_FEATURE_EP_HALT)
 800b154:	886b      	ldrh	r3, [r5, #2]
 800b156:	b91b      	cbnz	r3, 800b160 <USBD_StdEPReq+0x74>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800b158:	064b      	lsls	r3, r1, #25
 800b15a:	d001      	beq.n	800b160 <USBD_StdEPReq+0x74>
          USBD_LL_StallEP(pdev , ep_addr);
 800b15c:	f000 fa76 	bl	800b64c <USBD_LL_StallEP>
          pdev->pClass->Setup (pdev, req);
 800b160:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 800b164:	4629      	mov	r1, r5
 800b166:	689b      	ldr	r3, [r3, #8]
 800b168:	4620      	mov	r0, r4
 800b16a:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 800b16c:	4620      	mov	r0, r4
 800b16e:	f000 f86e 	bl	800b24e <USBD_CtlSendStatus>
 800b172:	e7ed      	b.n	800b150 <USBD_StdEPReq+0x64>
    switch (pdev->dev_state) 
 800b174:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800b178:	2b02      	cmp	r3, #2
 800b17a:	d009      	beq.n	800b190 <USBD_StdEPReq+0xa4>
 800b17c:	2b03      	cmp	r3, #3
 800b17e:	d1e4      	bne.n	800b14a <USBD_StdEPReq+0x5e>
      if (req->wValue == USB_FEATURE_EP_HALT)
 800b180:	886b      	ldrh	r3, [r5, #2]
 800b182:	2b00      	cmp	r3, #0
 800b184:	d1e4      	bne.n	800b150 <USBD_StdEPReq+0x64>
        if ((ep_addr & 0x7F) != 0x00) 
 800b186:	064a      	lsls	r2, r1, #25
 800b188:	d0f0      	beq.n	800b16c <USBD_StdEPReq+0x80>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 800b18a:	f000 fa66 	bl	800b65a <USBD_LL_ClearStallEP>
 800b18e:	e7e7      	b.n	800b160 <USBD_StdEPReq+0x74>
      if ((ep_addr & 0x7F) != 0x00) 
 800b190:	064b      	lsls	r3, r1, #25
 800b192:	d0dd      	beq.n	800b150 <USBD_StdEPReq+0x64>
        USBD_LL_StallEP(pdev , ep_addr);
 800b194:	f000 fa5a 	bl	800b64c <USBD_LL_StallEP>
 800b198:	e7da      	b.n	800b150 <USBD_StdEPReq+0x64>

0800b19a <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 800b19a:	780b      	ldrb	r3, [r1, #0]
 800b19c:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800b19e:	784b      	ldrb	r3, [r1, #1]
 800b1a0:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800b1a2:	78ca      	ldrb	r2, [r1, #3]
 800b1a4:	788b      	ldrb	r3, [r1, #2]
 800b1a6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800b1aa:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800b1ac:	794a      	ldrb	r2, [r1, #5]
 800b1ae:	790b      	ldrb	r3, [r1, #4]
 800b1b0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800b1b4:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800b1b6:	79ca      	ldrb	r2, [r1, #7]
 800b1b8:	798b      	ldrb	r3, [r1, #6]
 800b1ba:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800b1be:	80c3      	strh	r3, [r0, #6]
}
 800b1c0:	4770      	bx	lr

0800b1c2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b1c2:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0;
  
  if (desc != NULL) 
 800b1c4:	b188      	cbz	r0, 800b1ea <USBD_GetString+0x28>
 800b1c6:	2400      	movs	r4, #0
 800b1c8:	3801      	subs	r0, #1
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != '\0') 
 800b1ca:	4623      	mov	r3, r4
 800b1cc:	3401      	adds	r4, #1
 800b1ce:	5d05      	ldrb	r5, [r0, r4]
 800b1d0:	2d00      	cmp	r5, #0
 800b1d2:	d1fa      	bne.n	800b1ca <USBD_GetString+0x8>
    *len =  USBD_GetLen(desc) * 2 + 2;    
 800b1d4:	b2db      	uxtb	r3, r3
 800b1d6:	3301      	adds	r3, #1
 800b1d8:	005b      	lsls	r3, r3, #1
 800b1da:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *len;
 800b1dc:	700b      	strb	r3, [r1, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 800b1de:	2303      	movs	r3, #3
 800b1e0:	704b      	strb	r3, [r1, #1]
 800b1e2:	2302      	movs	r3, #2
    while (*desc != '\0') 
 800b1e4:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 800b1e8:	b904      	cbnz	r4, 800b1ec <USBD_GetString+0x2a>
}
 800b1ea:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 800b1ec:	1c5a      	adds	r2, r3, #1
 800b1ee:	b2d2      	uxtb	r2, r2
 800b1f0:	54cc      	strb	r4, [r1, r3]
      unicode[idx++] =  0x00;
 800b1f2:	3302      	adds	r3, #2
 800b1f4:	548d      	strb	r5, [r1, r2]
 800b1f6:	b2db      	uxtb	r3, r3
 800b1f8:	e7f4      	b.n	800b1e4 <USBD_GetString+0x22>

0800b1fa <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 800b1fa:	b510      	push	{r4, lr}
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 800b1fc:	2402      	movs	r4, #2
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 800b1fe:	4613      	mov	r3, r2
  pdev->ep_in[0].rem_length   = len;
 800b200:	e9c0 2206 	strd	r2, r2, [r0, #24]
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 800b204:	f8c0 41f4 	str.w	r4, [r0, #500]	; 0x1f4
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 800b208:	460a      	mov	r2, r1
 800b20a:	2100      	movs	r1, #0
 800b20c:	f000 fa46 	bl	800b69c <USBD_LL_Transmit>
  
  return USBD_OK;
}
 800b210:	2000      	movs	r0, #0
 800b212:	bd10      	pop	{r4, pc}

0800b214 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 800b214:	b508      	push	{r3, lr}
 800b216:	4613      	mov	r3, r2
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 800b218:	460a      	mov	r2, r1
 800b21a:	2100      	movs	r1, #0
 800b21c:	f000 fa3e 	bl	800b69c <USBD_LL_Transmit>
  
  return USBD_OK;
}
 800b220:	2000      	movs	r0, #0
 800b222:	bd08      	pop	{r3, pc}

0800b224 <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 800b224:	b510      	push	{r4, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 800b226:	2403      	movs	r4, #3
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length   = len;
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 800b228:	4613      	mov	r3, r2
  pdev->ep_out[0].rem_length   = len;
 800b22a:	e9c0 2242 	strd	r2, r2, [r0, #264]	; 0x108
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 800b22e:	f8c0 41f4 	str.w	r4, [r0, #500]	; 0x1f4
  USBD_LL_PrepareReceive (pdev,
 800b232:	460a      	mov	r2, r1
 800b234:	2100      	movs	r1, #0
 800b236:	f000 fa38 	bl	800b6aa <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
}
 800b23a:	2000      	movs	r0, #0
 800b23c:	bd10      	pop	{r4, pc}

0800b23e <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 800b23e:	b508      	push	{r3, lr}
 800b240:	4613      	mov	r3, r2

  USBD_LL_PrepareReceive (pdev,
 800b242:	460a      	mov	r2, r1
 800b244:	2100      	movs	r1, #0
 800b246:	f000 fa30 	bl	800b6aa <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 800b24a:	2000      	movs	r0, #0
 800b24c:	bd08      	pop	{r3, pc}

0800b24e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 800b24e:	b508      	push	{r3, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b250:	2304      	movs	r3, #4
 800b252:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 800b256:	2300      	movs	r3, #0
 800b258:	461a      	mov	r2, r3
 800b25a:	4619      	mov	r1, r3
 800b25c:	f000 fa1e 	bl	800b69c <USBD_LL_Transmit>
  
  return USBD_OK;
}
 800b260:	2000      	movs	r0, #0
 800b262:	bd08      	pop	{r3, pc}

0800b264 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 800b264:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 800b266:	2305      	movs	r3, #5
 800b268:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 800b26c:	2300      	movs	r3, #0
 800b26e:	461a      	mov	r2, r3
 800b270:	4619      	mov	r1, r3
 800b272:	f000 fa1a 	bl	800b6aa <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 800b276:	2000      	movs	r0, #0
 800b278:	bd08      	pop	{r3, pc}

0800b27a <USBD_CDC_DataIn>:
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 800b27a:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  if(pdev->pClassData != NULL)
 800b27e:	b11b      	cbz	r3, 800b288 <USBD_CDC_DataIn+0xe>
  {
    
    hcdc->TxState = 0;
 800b280:	2000      	movs	r0, #0
 800b282:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214

    return USBD_OK;
 800b286:	4770      	bx	lr
  }
  else
  {
    return USBD_FAIL;
 800b288:	2002      	movs	r0, #2
  }
}
 800b28a:	4770      	bx	lr

0800b28c <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 800b28c:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
{ 
 800b290:	b510      	push	{r4, lr}
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 800b292:	b16b      	cbz	r3, 800b2b0 <USBD_CDC_EP0_RxReady+0x24>
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 800b294:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 800b298:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 800b29c:	28ff      	cmp	r0, #255	; 0xff
 800b29e:	d007      	beq.n	800b2b0 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b2a0:	689b      	ldr	r3, [r3, #8]
 800b2a2:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 800b2a6:	4621      	mov	r1, r4
 800b2a8:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFF; 
 800b2aa:	23ff      	movs	r3, #255	; 0xff
 800b2ac:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
      
  }
  return USBD_OK;
}
 800b2b0:	2000      	movs	r0, #0
 800b2b2:	bd10      	pop	{r4, pc}

0800b2b4 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgFSDesc);
 800b2b4:	2343      	movs	r3, #67	; 0x43
 800b2b6:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 800b2b8:	4800      	ldr	r0, [pc, #0]	; (800b2bc <USBD_CDC_GetFSCfgDesc+0x8>)
 800b2ba:	4770      	bx	lr
 800b2bc:	20000a00 	.word	0x20000a00

0800b2c0 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgHSDesc);
 800b2c0:	2343      	movs	r3, #67	; 0x43
 800b2c2:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 800b2c4:	4800      	ldr	r0, [pc, #0]	; (800b2c8 <USBD_CDC_GetHSCfgDesc+0x8>)
 800b2c6:	4770      	bx	lr
 800b2c8:	20000a44 	.word	0x20000a44

0800b2cc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 800b2cc:	2343      	movs	r3, #67	; 0x43
 800b2ce:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 800b2d0:	4800      	ldr	r0, [pc, #0]	; (800b2d4 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 800b2d2:	4770      	bx	lr
 800b2d4:	20000a94 	.word	0x20000a94

0800b2d8 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 800b2d8:	230a      	movs	r3, #10
 800b2da:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 800b2dc:	4800      	ldr	r0, [pc, #0]	; (800b2e0 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 800b2de:	4770      	bx	lr
 800b2e0:	20000a88 	.word	0x20000a88

0800b2e4 <USBD_CDC_DataOut>:
{      
 800b2e4:	b538      	push	{r3, r4, r5, lr}
 800b2e6:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 800b2e8:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800b2ec:	f000 f9e4 	bl	800b6b8 <USBD_LL_GetRxDataSize>
  if(pdev->pClassData != NULL)
 800b2f0:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800b2f4:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  if(pdev->pClassData != NULL)
 800b2f8:	b14b      	cbz	r3, 800b30e <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b2fa:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 800b2fe:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 800b302:	68db      	ldr	r3, [r3, #12]
 800b304:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 800b308:	4798      	blx	r3
    return USBD_OK;
 800b30a:	2000      	movs	r0, #0
}
 800b30c:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 800b30e:	2002      	movs	r0, #2
 800b310:	e7fc      	b.n	800b30c <USBD_CDC_DataOut+0x28>

0800b312 <USBD_CDC_Setup>:
{
 800b312:	b573      	push	{r0, r1, r4, r5, r6, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b314:	780e      	ldrb	r6, [r1, #0]
 800b316:	f006 0360 	and.w	r3, r6, #96	; 0x60
 800b31a:	2b20      	cmp	r3, #32
{
 800b31c:	4604      	mov	r4, r0
 800b31e:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b320:	d111      	bne.n	800b346 <USBD_CDC_Setup+0x34>
    if (req->wLength)
 800b322:	88ca      	ldrh	r2, [r1, #6]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b324:	784b      	ldrb	r3, [r1, #1]
    if (req->wLength)
 800b326:	b1c2      	cbz	r2, 800b35a <USBD_CDC_Setup+0x48>
      if (req->bmRequest & 0x80)
 800b328:	0636      	lsls	r6, r6, #24
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 800b32a:	f8d0 1218 	ldr.w	r1, [r0, #536]	; 0x218
      if (req->bmRequest & 0x80)
 800b32e:	d50d      	bpl.n	800b34c <USBD_CDC_Setup+0x3a>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b330:	f8d0 021c 	ldr.w	r0, [r0, #540]	; 0x21c
 800b334:	9101      	str	r1, [sp, #4]
 800b336:	6886      	ldr	r6, [r0, #8]
 800b338:	4618      	mov	r0, r3
 800b33a:	47b0      	blx	r6
          USBD_CtlSendData (pdev, 
 800b33c:	88ea      	ldrh	r2, [r5, #6]
 800b33e:	9901      	ldr	r1, [sp, #4]
 800b340:	4620      	mov	r0, r4
 800b342:	f7ff ff5a 	bl	800b1fa <USBD_CtlSendData>
}
 800b346:	2000      	movs	r0, #0
 800b348:	b002      	add	sp, #8
 800b34a:	bd70      	pop	{r4, r5, r6, pc}
        hcdc->CmdOpCode = req->bRequest;
 800b34c:	f881 3200 	strb.w	r3, [r1, #512]	; 0x200
        hcdc->CmdLength = req->wLength;
 800b350:	f881 2201 	strb.w	r2, [r1, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, 
 800b354:	f7ff ff66 	bl	800b224 <USBD_CtlPrepareRx>
 800b358:	e7f5      	b.n	800b346 <USBD_CDC_Setup+0x34>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b35a:	f8d0 121c 	ldr.w	r1, [r0, #540]	; 0x21c
 800b35e:	4618      	mov	r0, r3
 800b360:	688c      	ldr	r4, [r1, #8]
 800b362:	4611      	mov	r1, r2
 800b364:	47a0      	blx	r4
 800b366:	e7ee      	b.n	800b346 <USBD_CDC_Setup+0x34>

0800b368 <USBD_CDC_DeInit>:
{
 800b368:	b510      	push	{r4, lr}
  USBD_LL_CloseEP(pdev,
 800b36a:	2181      	movs	r1, #129	; 0x81
{
 800b36c:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev,
 800b36e:	f000 f966 	bl	800b63e <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 800b372:	2101      	movs	r1, #1
 800b374:	4620      	mov	r0, r4
 800b376:	f000 f962 	bl	800b63e <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 800b37a:	2182      	movs	r1, #130	; 0x82
 800b37c:	4620      	mov	r0, r4
 800b37e:	f000 f95e 	bl	800b63e <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 800b382:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 800b386:	b153      	cbz	r3, 800b39e <USBD_CDC_DeInit+0x36>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b388:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 800b38c:	685b      	ldr	r3, [r3, #4]
 800b38e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800b390:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 800b394:	f000 f99a 	bl	800b6cc <USBD_static_free>
    pdev->pClassData = NULL;
 800b398:	2300      	movs	r3, #0
 800b39a:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
}
 800b39e:	2000      	movs	r0, #0
 800b3a0:	bd10      	pop	{r4, pc}

0800b3a2 <USBD_CDC_Init>:
{
 800b3a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800b3a4:	7c03      	ldrb	r3, [r0, #16]
{
 800b3a6:	4604      	mov	r4, r0
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800b3a8:	bb7b      	cbnz	r3, 800b40a <USBD_CDC_Init+0x68>
    USBD_LL_OpenEP(pdev,
 800b3aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b3ae:	2202      	movs	r2, #2
 800b3b0:	2181      	movs	r1, #129	; 0x81
 800b3b2:	f000 f93a 	bl	800b62a <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 800b3b6:	f44f 7300 	mov.w	r3, #512	; 0x200
    USBD_LL_OpenEP(pdev,
 800b3ba:	2202      	movs	r2, #2
 800b3bc:	2101      	movs	r1, #1
 800b3be:	4620      	mov	r0, r4
 800b3c0:	f000 f933 	bl	800b62a <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev,
 800b3c4:	2308      	movs	r3, #8
 800b3c6:	2203      	movs	r2, #3
 800b3c8:	2182      	movs	r1, #130	; 0x82
 800b3ca:	4620      	mov	r0, r4
 800b3cc:	f000 f92d 	bl	800b62a <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 800b3d0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800b3d4:	f000 f976 	bl	800b6c4 <USBD_static_malloc>
 800b3d8:	4605      	mov	r5, r0
 800b3da:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
  if(pdev->pClassData == NULL)
 800b3de:	b320      	cbz	r0, 800b42a <USBD_CDC_Init+0x88>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800b3e0:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
    hcdc->TxState =0;
 800b3e4:	2700      	movs	r7, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	4798      	blx	r3
    hcdc->TxState =0;
 800b3ea:	f8c5 7214 	str.w	r7, [r5, #532]	; 0x214
    hcdc->RxState =0;
 800b3ee:	f8c5 7218 	str.w	r7, [r5, #536]	; 0x218
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800b3f2:	7c26      	ldrb	r6, [r4, #16]
 800b3f4:	b986      	cbnz	r6, 800b418 <USBD_CDC_Init+0x76>
      USBD_LL_PrepareReceive(pdev,
 800b3f6:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 800b3fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b3fe:	2101      	movs	r1, #1
 800b400:	4620      	mov	r0, r4
 800b402:	f000 f952 	bl	800b6aa <USBD_LL_PrepareReceive>
}
 800b406:	4630      	mov	r0, r6
 800b408:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    USBD_LL_OpenEP(pdev,
 800b40a:	2340      	movs	r3, #64	; 0x40
 800b40c:	2202      	movs	r2, #2
 800b40e:	2181      	movs	r1, #129	; 0x81
 800b410:	f000 f90b 	bl	800b62a <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 800b414:	2340      	movs	r3, #64	; 0x40
 800b416:	e7d0      	b.n	800b3ba <USBD_CDC_Init+0x18>
      USBD_LL_PrepareReceive(pdev,
 800b418:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 800b41c:	2340      	movs	r3, #64	; 0x40
 800b41e:	2101      	movs	r1, #1
 800b420:	4620      	mov	r0, r4
 800b422:	f000 f942 	bl	800b6aa <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 800b426:	463e      	mov	r6, r7
 800b428:	e7ed      	b.n	800b406 <USBD_CDC_Init+0x64>
    ret = 1; 
 800b42a:	2601      	movs	r6, #1
 800b42c:	e7eb      	b.n	800b406 <USBD_CDC_Init+0x64>

0800b42e <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;
  
  if(fops != NULL)
 800b42e:	b119      	cbz	r1, 800b438 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData= fops;
 800b430:	f8c0 121c 	str.w	r1, [r0, #540]	; 0x21c
    ret = USBD_OK;    
 800b434:	2000      	movs	r0, #0
 800b436:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 800b438:	2002      	movs	r0, #2
  }
  
  return ret;
}
 800b43a:	4770      	bx	lr

0800b43c <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 800b43c:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;  
  
  return USBD_OK;  
}
 800b440:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 800b442:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;  
 800b446:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 800b44a:	4770      	bx	lr

0800b44c <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
  
  hcdc->RxBuffer = pbuff;
 800b44c:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  return USBD_OK;
}
 800b450:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 800b452:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 800b456:	4770      	bx	lr

0800b458 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{      
 800b458:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 800b45a:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
  
  if(pdev->pClassData != NULL)
 800b45e:	b175      	cbz	r5, 800b47e <USBD_CDC_TransmitPacket+0x26>
  {
    if(hcdc->TxState == 0)
 800b460:	f8d5 4214 	ldr.w	r4, [r5, #532]	; 0x214
 800b464:	b96c      	cbnz	r4, 800b482 <USBD_CDC_TransmitPacket+0x2a>
    {
      
      /* Transmit next packet */
      USBD_LL_Transmit(pdev,
 800b466:	f8b5 3210 	ldrh.w	r3, [r5, #528]	; 0x210
 800b46a:	f8d5 2208 	ldr.w	r2, [r5, #520]	; 0x208
 800b46e:	2181      	movs	r1, #129	; 0x81
 800b470:	f000 f914 	bl	800b69c <USBD_LL_Transmit>
                       CDC_IN_EP,
                       hcdc->TxBuffer,
                       hcdc->TxLength);
      
      /* Tx Transfer in progress */
      hcdc->TxState = 1;
 800b474:	2301      	movs	r3, #1
 800b476:	f8c5 3214 	str.w	r3, [r5, #532]	; 0x214
      return USBD_OK;
 800b47a:	4620      	mov	r0, r4
  }
  else
  {
    return USBD_FAIL;
  }
}
 800b47c:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 800b47e:	2002      	movs	r0, #2
 800b480:	e7fc      	b.n	800b47c <USBD_CDC_TransmitPacket+0x24>
      return USBD_BUSY;
 800b482:	2001      	movs	r0, #1
 800b484:	e7fa      	b.n	800b47c <USBD_CDC_TransmitPacket+0x24>

0800b486 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 800b486:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
{      
 800b48a:	b510      	push	{r4, lr}
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800b48c:	b182      	cbz	r2, 800b4b0 <USBD_CDC_ReceivePacket+0x2a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800b48e:	7c04      	ldrb	r4, [r0, #16]
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b490:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800b494:	b934      	cbnz	r4, 800b4a4 <USBD_CDC_ReceivePacket+0x1e>
      USBD_LL_PrepareReceive(pdev,
 800b496:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b49a:	2101      	movs	r1, #1
 800b49c:	f000 f905 	bl	800b6aa <USBD_LL_PrepareReceive>
  }
  else
  {
    return USBD_FAIL;
  }
}
 800b4a0:	4620      	mov	r0, r4
 800b4a2:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 800b4a4:	2340      	movs	r3, #64	; 0x40
 800b4a6:	2101      	movs	r1, #1
 800b4a8:	f000 f8ff 	bl	800b6aa <USBD_LL_PrepareReceive>
    return USBD_OK;
 800b4ac:	2400      	movs	r4, #0
 800b4ae:	e7f7      	b.n	800b4a0 <USBD_CDC_ReceivePacket+0x1a>
    return USBD_FAIL;
 800b4b0:	2402      	movs	r4, #2
 800b4b2:	e7f5      	b.n	800b4a0 <USBD_CDC_ReceivePacket+0x1a>

0800b4b4 <HAL_PCD_MspInit>:
  * @brief  Initializes the PCD MSP.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef *hpcd)
{
 800b4b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIOA clock for USB DataLines */
  __GPIOA_CLK_ENABLE();
 800b4b8:	4c23      	ldr	r4, [pc, #140]	; (800b548 <HAL_PCD_MspInit+0x94>)
 800b4ba:	6963      	ldr	r3, [r4, #20]
 800b4bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b4c0:	6163      	str	r3, [r4, #20]
  
  /* Enable the GPIOB clock for USB external Pull-Up */
  __GPIOB_CLK_ENABLE();
 800b4c2:	6963      	ldr	r3, [r4, #20]
{
 800b4c4:	b086      	sub	sp, #24
  __GPIOB_CLK_ENABLE();
 800b4c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b4ca:	6163      	str	r3, [r4, #20]

  /* Create a USB Disconnect signal for 1ms */
  GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800b4cc:	f44f 56c0 	mov.w	r6, #6144	; 0x1800
 800b4d0:	2311      	movs	r3, #17
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800b4d2:	2500      	movs	r5, #0
 800b4d4:	f04f 0803 	mov.w	r8, #3
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800b4d8:	270e      	movs	r7, #14
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 800b4da:	a901      	add	r1, sp, #4
 800b4dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800b4e0:	e9cd 6301 	strd	r6, r3, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800b4e4:	e9cd 5803 	strd	r5, r8, [sp, #12]
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800b4e8:	9705      	str	r7, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 800b4ea:	f7fd ff29 	bl	8009340 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOA,(GPIO_PIN_11 | GPIO_PIN_12),0);
 800b4ee:	462a      	mov	r2, r5
 800b4f0:	4631      	mov	r1, r6
 800b4f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b4f6:	f7fd ffed 	bl	80094d4 <HAL_GPIO_WritePin>
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBD_LL_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);
 800b4fa:	2001      	movs	r0, #1
 800b4fc:	f7fd feac 	bl	8009258 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA,(GPIO_PIN_11 | GPIO_PIN_12),1);
 800b500:	2201      	movs	r2, #1
 800b502:	4631      	mov	r1, r6
 800b504:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b508:	f7fd ffe4 	bl	80094d4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b50c:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 800b50e:	a901      	add	r1, sp, #4
 800b510:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b514:	e9cd 3502 	strd	r3, r5, [sp, #8]
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800b518:	e9cd 8704 	strd	r8, r7, [sp, #16]
  GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
 800b51c:	9601      	str	r6, [sp, #4]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 800b51e:	f7fd ff0f 	bl	8009340 <HAL_GPIO_Init>
  __USB_CLK_ENABLE();
 800b522:	69e3      	ldr	r3, [r4, #28]
 800b524:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b528:	61e3      	str	r3, [r4, #28]
  __SYSCFG_CLK_ENABLE();
 800b52a:	69a3      	ldr	r3, [r4, #24]
 800b52c:	f043 0301 	orr.w	r3, r3, #1
 800b530:	61a3      	str	r3, [r4, #24]
  HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 5, 0);
 800b532:	462a      	mov	r2, r5
 800b534:	2105      	movs	r1, #5
 800b536:	2014      	movs	r0, #20
 800b538:	f7fd feae 	bl	8009298 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn); 
 800b53c:	2014      	movs	r0, #20
 800b53e:	f7fd fedf 	bl	8009300 <HAL_NVIC_EnableIRQ>
}
 800b542:	b006      	add	sp, #24
 800b544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b548:	40021000 	.word	0x40021000

0800b54c <HAL_PCD_SetupStageCallback>:
  USBD_LL_SetupStage(hpcd->pData, (uint8_t *)hpcd->Setup);
 800b54c:	f500 71a2 	add.w	r1, r0, #324	; 0x144
 800b550:	f8d0 0174 	ldr.w	r0, [r0, #372]	; 0x174
 800b554:	f7ff bbdb 	b.w	800ad0e <USBD_LL_SetupStage>

0800b558 <HAL_PCD_DataOutStageCallback>:
  USBD_LL_DataOutStage(hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b558:	231c      	movs	r3, #28
 800b55a:	fb03 0301 	mla	r3, r3, r1, r0
 800b55e:	f8d0 0174 	ldr.w	r0, [r0, #372]	; 0x174
 800b562:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800b566:	f7ff bbff 	b.w	800ad68 <USBD_LL_DataOutStage>

0800b56a <HAL_PCD_DataInStageCallback>:
  USBD_LL_DataInStage(hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b56a:	231c      	movs	r3, #28
 800b56c:	fb03 0301 	mla	r3, r3, r1, r0
 800b570:	f8d0 0174 	ldr.w	r0, [r0, #372]	; 0x174
 800b574:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b576:	f7ff bc27 	b.w	800adc8 <USBD_LL_DataInStage>

0800b57a <HAL_PCD_SOFCallback>:
  USBD_LL_SOF(hpcd->pData);
 800b57a:	f8d0 0174 	ldr.w	r0, [r0, #372]	; 0x174
 800b57e:	f7ff bc8b 	b.w	800ae98 <USBD_LL_SOF>

0800b582 <HAL_PCD_ResetCallback>:
{   
 800b582:	b510      	push	{r4, lr}
 800b584:	4604      	mov	r4, r0
  USBD_LL_SetSpeed(hpcd->pData, USBD_SPEED_FULL);
 800b586:	2101      	movs	r1, #1
 800b588:	f8d0 0174 	ldr.w	r0, [r0, #372]	; 0x174
 800b58c:	f7ff fc81 	bl	800ae92 <USBD_LL_SetSpeed>
  USBD_LL_Reset(hpcd->pData);
 800b590:	f8d4 0174 	ldr.w	r0, [r4, #372]	; 0x174
}
 800b594:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset(hpcd->pData);
 800b598:	f7ff bc5c 	b.w	800ae54 <USBD_LL_Reset>

0800b59c <HAL_PCD_SuspendCallback>:
}
 800b59c:	4770      	bx	lr

0800b59e <HAL_PCD_ResumeCallback>:
 800b59e:	4770      	bx	lr

0800b5a0 <USBD_LL_Init>:
{    
 800b5a0:	b538      	push	{r3, r4, r5, lr}
  hpcd.Init.dev_endpoints = 8;
 800b5a2:	4a1c      	ldr	r2, [pc, #112]	; (800b614 <USBD_LL_Init+0x74>)
{    
 800b5a4:	4604      	mov	r4, r0
  hpcd.Instance = USB;
 800b5a6:	481c      	ldr	r0, [pc, #112]	; (800b618 <USBD_LL_Init+0x78>)
  pdev->pData = &hpcd;
 800b5a8:	f8c4 0220 	str.w	r0, [r4, #544]	; 0x220
  hpcd.Init.dev_endpoints = 8;
 800b5ac:	2308      	movs	r3, #8
  hpcd.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b5ae:	2500      	movs	r5, #0
  hpcd.Init.dev_endpoints = 8;
 800b5b0:	e9c0 2300 	strd	r2, r3, [r0]
  hpcd.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b5b4:	2302      	movs	r3, #2
 800b5b6:	e9c0 5303 	strd	r5, r3, [r0, #12]
  hpcd.Init.speed = PCD_SPEED_FULL;
 800b5ba:	6083      	str	r3, [r0, #8]
  hpcd.pData = pdev;
 800b5bc:	f8c0 4174 	str.w	r4, [r0, #372]	; 0x174
  HAL_PCD_Init(pdev->pData);
 800b5c0:	f7fd ff91 	bl	80094e6 <HAL_PCD_Init>
  HAL_PCDEx_PMAConfig(pdev->pData , 0x00 , PCD_SNG_BUF, 0x40);
 800b5c4:	462a      	mov	r2, r5
 800b5c6:	4629      	mov	r1, r5
 800b5c8:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 800b5cc:	2340      	movs	r3, #64	; 0x40
 800b5ce:	f7fe fe27 	bl	800a220 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig(pdev->pData , 0x80 , PCD_SNG_BUF, 0x80);
 800b5d2:	2380      	movs	r3, #128	; 0x80
 800b5d4:	462a      	mov	r2, r5
 800b5d6:	4619      	mov	r1, r3
 800b5d8:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 800b5dc:	f7fe fe20 	bl	800a220 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig(pdev->pData , CDC_IN_EP , PCD_SNG_BUF, 0xC0);  
 800b5e0:	462a      	mov	r2, r5
 800b5e2:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 800b5e6:	23c0      	movs	r3, #192	; 0xc0
 800b5e8:	2181      	movs	r1, #129	; 0x81
 800b5ea:	f7fe fe19 	bl	800a220 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig(pdev->pData , CDC_OUT_EP , PCD_SNG_BUF, 0x110);
 800b5ee:	462a      	mov	r2, r5
 800b5f0:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 800b5f4:	f44f 7388 	mov.w	r3, #272	; 0x110
 800b5f8:	2101      	movs	r1, #1
 800b5fa:	f7fe fe11 	bl	800a220 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig(pdev->pData , CDC_CMD_EP , PCD_SNG_BUF, 0x100); 
 800b5fe:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 800b602:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b606:	462a      	mov	r2, r5
 800b608:	2182      	movs	r1, #130	; 0x82
 800b60a:	f7fe fe09 	bl	800a220 <HAL_PCDEx_PMAConfig>
}
 800b60e:	4628      	mov	r0, r5
 800b610:	bd38      	pop	{r3, r4, r5, pc}
 800b612:	bf00      	nop
 800b614:	40005c00 	.word	0x40005c00
 800b618:	20001090 	.word	0x20001090

0800b61c <USBD_LL_Start>:
{
 800b61c:	b508      	push	{r3, lr}
  HAL_PCD_Start(pdev->pData);
 800b61e:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800b622:	f7fd ffa9 	bl	8009578 <HAL_PCD_Start>
}
 800b626:	2000      	movs	r0, #0
 800b628:	bd08      	pop	{r3, pc}

0800b62a <USBD_LL_OpenEP>:
{
 800b62a:	b510      	push	{r4, lr}
 800b62c:	4614      	mov	r4, r2
  HAL_PCD_EP_Open(pdev->pData,
 800b62e:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
{
 800b632:	461a      	mov	r2, r3
  HAL_PCD_EP_Open(pdev->pData,
 800b634:	4623      	mov	r3, r4
 800b636:	f7fd ffbb 	bl	80095b0 <HAL_PCD_EP_Open>
}
 800b63a:	2000      	movs	r0, #0
 800b63c:	bd10      	pop	{r4, pc}

0800b63e <USBD_LL_CloseEP>:
{
 800b63e:	b508      	push	{r3, lr}
  HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b640:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800b644:	f7fe f926 	bl	8009894 <HAL_PCD_EP_Close>
}
 800b648:	2000      	movs	r0, #0
 800b64a:	bd08      	pop	{r3, pc}

0800b64c <USBD_LL_StallEP>:
{
 800b64c:	b508      	push	{r3, lr}
  HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b64e:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800b652:	f7fe fd37 	bl	800a0c4 <HAL_PCD_EP_SetStall>
}
 800b656:	2000      	movs	r0, #0
 800b658:	bd08      	pop	{r3, pc}

0800b65a <USBD_LL_ClearStallEP>:
{
 800b65a:	b508      	push	{r3, lr}
  HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b65c:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800b660:	f7fe fd80 	bl	800a164 <HAL_PCD_EP_ClrStall>
}
 800b664:	2000      	movs	r0, #0
 800b666:	bd08      	pop	{r3, pc}

0800b668 <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 800b668:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b66c:	f8d0 3220 	ldr.w	r3, [r0, #544]	; 0x220
  if((ep_addr & 0x80) == 0x80)
 800b670:	f04f 021c 	mov.w	r2, #28
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b674:	bf1b      	ittet	ne
 800b676:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 800b67a:	fb02 3101 	mlane	r1, r2, r1, r3
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b67e:	fb02 3101 	mlaeq	r1, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b682:	f891 002a 	ldrbne.w	r0, [r1, #42]	; 0x2a
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b686:	bf08      	it	eq
 800b688:	f891 00b6 	ldrbeq.w	r0, [r1, #182]	; 0xb6
}
 800b68c:	4770      	bx	lr

0800b68e <USBD_LL_SetUSBAddress>:
{
 800b68e:	b508      	push	{r3, lr}
  HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b690:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800b694:	f7fd ff76 	bl	8009584 <HAL_PCD_SetAddress>
}
 800b698:	2000      	movs	r0, #0
 800b69a:	bd08      	pop	{r3, pc}

0800b69c <USBD_LL_Transmit>:
{
 800b69c:	b508      	push	{r3, lr}
  HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b69e:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800b6a2:	f7fe fa3f 	bl	8009b24 <HAL_PCD_EP_Transmit>
}
 800b6a6:	2000      	movs	r0, #0
 800b6a8:	bd08      	pop	{r3, pc}

0800b6aa <USBD_LL_PrepareReceive>:
{
 800b6aa:	b508      	push	{r3, lr}
  HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b6ac:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800b6b0:	f7fe f9cc 	bl	8009a4c <HAL_PCD_EP_Receive>
}
 800b6b4:	2000      	movs	r0, #0
 800b6b6:	bd08      	pop	{r3, pc}

0800b6b8 <USBD_LL_GetRxDataSize>:
{
 800b6b8:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount(pdev->pData, ep_addr);
 800b6ba:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800b6be:	f7fe fa29 	bl	8009b14 <HAL_PCD_EP_GetRxCount>
}
 800b6c2:	bd08      	pop	{r3, pc}

0800b6c4 <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[MAX_STATIC_ALLOC_SIZE];
  return mem;
}
 800b6c4:	4800      	ldr	r0, [pc, #0]	; (800b6c8 <USBD_static_malloc+0x4>)
 800b6c6:	4770      	bx	lr
 800b6c8:	20001208 	.word	0x20001208

0800b6cc <USBD_static_free>:
 800b6cc:	4770      	bx	lr
	...

0800b6d0 <USBD_VCP_DeviceDescriptor>:
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(hUSBDDeviceDesc);
 800b6d0:	2312      	movs	r3, #18
  return (uint8_t*)hUSBDDeviceDesc;
}
 800b6d2:	4801      	ldr	r0, [pc, #4]	; (800b6d8 <USBD_VCP_DeviceDescriptor+0x8>)
  *length = sizeof(hUSBDDeviceDesc);
 800b6d4:	800b      	strh	r3, [r1, #0]
}
 800b6d6:	4770      	bx	lr
 800b6d8:	0801c09d 	.word	0x0801c09d

0800b6dc <USBD_VCP_LangIDStrDescriptor>:
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);  
 800b6dc:	2304      	movs	r3, #4
  return (uint8_t*)USBD_LangIDDesc;
}
 800b6de:	4801      	ldr	r0, [pc, #4]	; (800b6e4 <USBD_VCP_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);  
 800b6e0:	800b      	strh	r3, [r1, #0]
}
 800b6e2:	4770      	bx	lr
 800b6e4:	0801c099 	.word	0x0801c099

0800b6e8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	b570      	push	{r4, r5, r6, lr}
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 800b6ec:	1c4d      	adds	r5, r1, #1
 800b6ee:	461e      	mov	r6, r3
      pbuf[ 2* idx] = (value >> 28) + '0';
 800b6f0:	0f04      	lsrs	r4, r0, #28
    if( ((value >> 28)) < 0xA )
 800b6f2:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
      pbuf[ 2* idx] = (value >> 28) + '0';
 800b6f6:	bf34      	ite	cc
 800b6f8:	3430      	addcc	r4, #48	; 0x30
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 800b6fa:	3437      	addcs	r4, #55	; 0x37
 800b6fc:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[ 2* idx + 1] = 0;
 800b700:	f805 6013 	strb.w	r6, [r5, r3, lsl #1]
  for( idx = 0 ; idx < len ; idx ++)
 800b704:	3301      	adds	r3, #1
 800b706:	b2dc      	uxtb	r4, r3
 800b708:	42a2      	cmp	r2, r4
    value = value << 4;
 800b70a:	ea4f 1000 	mov.w	r0, r0, lsl #4
  for( idx = 0 ; idx < len ; idx ++)
 800b70e:	d8ef      	bhi.n	800b6f0 <IntToUnicode+0x8>
  }
}
 800b710:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b714 <USBD_VCP_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 800b714:	231a      	movs	r3, #26
{
 800b716:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 800b718:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t*)DEVICE_ID1;
 800b71a:	4b0a      	ldr	r3, [pc, #40]	; (800b744 <USBD_VCP_SerialStrDescriptor+0x30>)
 800b71c:	f8d3 07ac 	ldr.w	r0, [r3, #1964]	; 0x7ac
  deviceserial0 += deviceserial2;
 800b720:	f8d3 27b4 	ldr.w	r2, [r3, #1972]	; 0x7b4
  if (deviceserial0 != 0)
 800b724:	1880      	adds	r0, r0, r2
 800b726:	d00a      	beq.n	800b73e <USBD_VCP_SerialStrDescriptor+0x2a>
  deviceserial1 = *(uint32_t*)DEVICE_ID2;
 800b728:	f8d3 47b0 	ldr.w	r4, [r3, #1968]	; 0x7b0
    IntToUnicode (deviceserial0, &USBD_StringSerial[2] ,8);
 800b72c:	4906      	ldr	r1, [pc, #24]	; (800b748 <USBD_VCP_SerialStrDescriptor+0x34>)
 800b72e:	2208      	movs	r2, #8
 800b730:	f7ff ffda 	bl	800b6e8 <IntToUnicode>
    IntToUnicode (deviceserial1, &USBD_StringSerial[18] ,4);
 800b734:	2204      	movs	r2, #4
 800b736:	3110      	adds	r1, #16
 800b738:	4620      	mov	r0, r4
 800b73a:	f7ff ffd5 	bl	800b6e8 <IntToUnicode>
}
 800b73e:	4803      	ldr	r0, [pc, #12]	; (800b74c <USBD_VCP_SerialStrDescriptor+0x38>)
 800b740:	bd10      	pop	{r4, pc}
 800b742:	bf00      	nop
 800b744:	1ffff000 	.word	0x1ffff000
 800b748:	20000ad9 	.word	0x20000ad9
 800b74c:	20000ad7 	.word	0x20000ad7

0800b750 <USBD_VCP_ProductStrDescriptor>:
{
 800b750:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);    
 800b752:	4c04      	ldr	r4, [pc, #16]	; (800b764 <USBD_VCP_ProductStrDescriptor+0x14>)
 800b754:	4804      	ldr	r0, [pc, #16]	; (800b768 <USBD_VCP_ProductStrDescriptor+0x18>)
{
 800b756:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);    
 800b758:	4621      	mov	r1, r4
 800b75a:	f7ff fd32 	bl	800b1c2 <USBD_GetString>
}
 800b75e:	4620      	mov	r0, r4
 800b760:	bd10      	pop	{r4, pc}
 800b762:	bf00      	nop
 800b764:	20001438 	.word	0x20001438
 800b768:	0801c04c 	.word	0x0801c04c

0800b76c <USBD_VCP_ManufacturerStrDescriptor>:
{
 800b76c:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b76e:	4c04      	ldr	r4, [pc, #16]	; (800b780 <USBD_VCP_ManufacturerStrDescriptor+0x14>)
 800b770:	4804      	ldr	r0, [pc, #16]	; (800b784 <USBD_VCP_ManufacturerStrDescriptor+0x18>)
{
 800b772:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b774:	4621      	mov	r1, r4
 800b776:	f7ff fd24 	bl	800b1c2 <USBD_GetString>
}
 800b77a:	4620      	mov	r0, r4
 800b77c:	bd10      	pop	{r4, pc}
 800b77e:	bf00      	nop
 800b780:	20001438 	.word	0x20001438
 800b784:	0801c06d 	.word	0x0801c06d

0800b788 <USBD_VCP_ConfigStrDescriptor>:
{
 800b788:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length); 
 800b78a:	4c04      	ldr	r4, [pc, #16]	; (800b79c <USBD_VCP_ConfigStrDescriptor+0x14>)
 800b78c:	4804      	ldr	r0, [pc, #16]	; (800b7a0 <USBD_VCP_ConfigStrDescriptor+0x18>)
{
 800b78e:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length); 
 800b790:	4621      	mov	r1, r4
 800b792:	f7ff fd16 	bl	800b1c2 <USBD_GetString>
}
 800b796:	4620      	mov	r0, r4
 800b798:	bd10      	pop	{r4, pc}
 800b79a:	bf00      	nop
 800b79c:	20001438 	.word	0x20001438
 800b7a0:	0801c080 	.word	0x0801c080

0800b7a4 <USBD_VCP_InterfaceStrDescriptor>:
{
 800b7a4:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 800b7a6:	4c04      	ldr	r4, [pc, #16]	; (800b7b8 <USBD_VCP_InterfaceStrDescriptor+0x14>)
 800b7a8:	4804      	ldr	r0, [pc, #16]	; (800b7bc <USBD_VCP_InterfaceStrDescriptor+0x18>)
{
 800b7aa:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 800b7ac:	4621      	mov	r1, r4
 800b7ae:	f7ff fd08 	bl	800b1c2 <USBD_GetString>
}
 800b7b2:	4620      	mov	r0, r4
 800b7b4:	bd10      	pop	{r4, pc}
 800b7b6:	bf00      	nop
 800b7b8:	20001438 	.word	0x20001438
 800b7bc:	0801c08b 	.word	0x0801c08b

0800b7c0 <CDC_Itf_DeInit>:
  */
static int8_t CDC_Itf_DeInit(void)
{

  return (USBD_OK);
}
 800b7c0:	2000      	movs	r0, #0
 800b7c2:	4770      	bx	lr

0800b7c4 <CDC_Itf_Control>:
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the opeartion: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Itf_Control (uint8_t cmd, uint8_t* pbuf, uint16_t length)
{ 
  switch (cmd)
 800b7c4:	2820      	cmp	r0, #32
 800b7c6:	d003      	beq.n	800b7d0 <CDC_Itf_Control+0xc>
 800b7c8:	2821      	cmp	r0, #33	; 0x21
 800b7ca:	d00b      	beq.n	800b7e4 <CDC_Itf_Control+0x20>
  default:
    break;
  }
  
  return (USBD_OK);
}
 800b7cc:	2000      	movs	r0, #0
 800b7ce:	4770      	bx	lr
    LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 800b7d0:	4b0d      	ldr	r3, [pc, #52]	; (800b808 <CDC_Itf_Control+0x44>)
 800b7d2:	680a      	ldr	r2, [r1, #0]
 800b7d4:	601a      	str	r2, [r3, #0]
    LineCoding.format     = pbuf[4];
 800b7d6:	790a      	ldrb	r2, [r1, #4]
 800b7d8:	711a      	strb	r2, [r3, #4]
    LineCoding.paritytype = pbuf[5];
 800b7da:	794a      	ldrb	r2, [r1, #5]
 800b7dc:	715a      	strb	r2, [r3, #5]
    LineCoding.datatype   = pbuf[6];
 800b7de:	798a      	ldrb	r2, [r1, #6]
 800b7e0:	719a      	strb	r2, [r3, #6]
    break;
 800b7e2:	e7f3      	b.n	800b7cc <CDC_Itf_Control+0x8>
    pbuf[0] = (uint8_t)(LineCoding.bitrate);
 800b7e4:	4b08      	ldr	r3, [pc, #32]	; (800b808 <CDC_Itf_Control+0x44>)
 800b7e6:	681a      	ldr	r2, [r3, #0]
 800b7e8:	700a      	strb	r2, [r1, #0]
    pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 800b7ea:	681a      	ldr	r2, [r3, #0]
 800b7ec:	0a12      	lsrs	r2, r2, #8
 800b7ee:	704a      	strb	r2, [r1, #1]
    pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 800b7f0:	885a      	ldrh	r2, [r3, #2]
 800b7f2:	708a      	strb	r2, [r1, #2]
    pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 800b7f4:	78da      	ldrb	r2, [r3, #3]
 800b7f6:	70ca      	strb	r2, [r1, #3]
    pbuf[4] = LineCoding.format;
 800b7f8:	791a      	ldrb	r2, [r3, #4]
 800b7fa:	710a      	strb	r2, [r1, #4]
    pbuf[5] = LineCoding.paritytype;
 800b7fc:	795a      	ldrb	r2, [r3, #5]
 800b7fe:	714a      	strb	r2, [r1, #5]
    pbuf[6] = LineCoding.datatype;     
 800b800:	799b      	ldrb	r3, [r3, #6]
 800b802:	718b      	strb	r3, [r1, #6]
    break;
 800b804:	e7e2      	b.n	800b7cc <CDC_Itf_Control+0x8>
 800b806:	bf00      	nop
 800b808:	20000b10 	.word	0x20000b10

0800b80c <CDC_Itf_Receive>:
  * @param  Buf: Buffer of data to be transmitted
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the opeartion: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Itf_Receive(uint8_t* Buf, uint32_t *Len)
{
 800b80c:	b508      	push	{r3, lr}
  /* Write data into Terminal Rx buffer */
  TerminalInputBufferWrite(INDEX_USB, (char *)Buf, *Len);
 800b80e:	680a      	ldr	r2, [r1, #0]
 800b810:	4601      	mov	r1, r0
 800b812:	2000      	movs	r0, #0
 800b814:	f7fc fd4e 	bl	80082b4 <TerminalInputBufferWrite>
  USBD_CDC_ReceivePacket(&hUSBDDevice);  /* Reset for next packet */
 800b818:	4802      	ldr	r0, [pc, #8]	; (800b824 <CDC_Itf_Receive+0x18>)
 800b81a:	f7ff fe34 	bl	800b486 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
}
 800b81e:	2000      	movs	r0, #0
 800b820:	bd08      	pop	{r3, pc}
 800b822:	bf00      	nop
 800b824:	20000e50 	.word	0x20000e50

0800b828 <CDC_Itf_Init>:
{
 800b828:	b508      	push	{r3, lr}
  USBD_CDC_SetRxBuffer(&hUSBDDevice, UserRxBuffer);
 800b82a:	4903      	ldr	r1, [pc, #12]	; (800b838 <CDC_Itf_Init+0x10>)
 800b82c:	4803      	ldr	r0, [pc, #12]	; (800b83c <CDC_Itf_Init+0x14>)
 800b82e:	f7ff fe0d 	bl	800b44c <USBD_CDC_SetRxBuffer>
}
 800b832:	2000      	movs	r0, #0
 800b834:	bd08      	pop	{r3, pc}
 800b836:	bf00      	nop
 800b838:	20001538 	.word	0x20001538
 800b83c:	20000e50 	.word	0x20000e50

0800b840 <SPIx_Init>:
  * @brief SPIx Bus initialization
  * @param None
  * @retval None
  */
static void SPIx_Init(void)
{
 800b840:	b510      	push	{r4, lr}
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 800b842:	4c1e      	ldr	r4, [pc, #120]	; (800b8bc <SPIx_Init+0x7c>)
{
 800b844:	b086      	sub	sp, #24
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 800b846:	4620      	mov	r0, r4
 800b848:	f7ff fa2b 	bl	800aca2 <HAL_SPI_GetState>
 800b84c:	2800      	cmp	r0, #0
 800b84e:	d133      	bne.n	800b8b8 <SPIx_Init+0x78>
  {
    /* SPI Config */
    SpiHandle.Instance = DISCOVERY_SPIx;
 800b850:	4b1b      	ldr	r3, [pc, #108]	; (800b8c0 <SPIx_Init+0x80>)
 800b852:	6023      	str	r3, [r4, #0]
      to verify these constraints:
      ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
      l3gd20 SPI interface max baudrate is 10MHz for write/read
      PCLK2 frequency is set to 90 MHz 
  */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800b854:	2318      	movs	r3, #24
 800b856:	61e3      	str	r3, [r4, #28]
    SpiHandle.Init.Direction = SPI_DIRECTION_2LINES; 
    SpiHandle.Init.CLKPhase = SPI_PHASE_1EDGE;
    SpiHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
    SpiHandle.Init.CRCPolynomial = 7;
 800b858:	2307      	movs	r3, #7
 800b85a:	62e3      	str	r3, [r4, #44]	; 0x2c
    SpiHandle.Init.DataSize = SPI_DATASIZE_8BIT;
 800b85c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800b860:	60e3      	str	r3, [r4, #12]
    SpiHandle.Init.FirstBit = SPI_FIRSTBIT_MSB;
    SpiHandle.Init.NSS = SPI_NSS_SOFT;
 800b862:	f44f 7300 	mov.w	r3, #512	; 0x200
    SpiHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
 800b866:	e9c4 0004 	strd	r0, r0, [r4, #16]
    SpiHandle.Init.NSS = SPI_NSS_SOFT;
 800b86a:	61a3      	str	r3, [r4, #24]
    SpiHandle.Init.TIMode = SPI_TIMODE_DISABLED;
    SpiHandle.Init.Mode = SPI_MODE_MASTER;
 800b86c:	f44f 7382 	mov.w	r3, #260	; 0x104
 800b870:	6063      	str	r3, [r4, #4]
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI1 clock  */
  DISCOVERY_SPIx_CLK_ENABLE();
 800b872:	4b14      	ldr	r3, [pc, #80]	; (800b8c4 <SPIx_Init+0x84>)
    SpiHandle.Init.Direction = SPI_DIRECTION_2LINES; 
 800b874:	60a0      	str	r0, [r4, #8]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 800b876:	62a0      	str	r0, [r4, #40]	; 0x28
    SpiHandle.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800b878:	6220      	str	r0, [r4, #32]
    SpiHandle.Init.TIMode = SPI_TIMODE_DISABLED;
 800b87a:	6260      	str	r0, [r4, #36]	; 0x24
  DISCOVERY_SPIx_CLK_ENABLE();
 800b87c:	699a      	ldr	r2, [r3, #24]
 800b87e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b882:	619a      	str	r2, [r3, #24]

  /* enable SPI1 gpio clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 800b884:	695a      	ldr	r2, [r3, #20]
 800b886:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800b88a:	615a      	str	r2, [r3, #20]

  /* configure SPI1 SCK, MOSI and MISO */
  GPIO_InitStructure.Pin = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 800b88c:	f04f 0ce0 	mov.w	ip, #224	; 0xe0
 800b890:	2302      	movs	r3, #2
 800b892:	e9cd c301 	strd	ip, r3, [sp, #4]
  GPIO_InitStructure.Pull  = GPIO_NOPULL; /* or GPIO_PULLDOWN */
 800b896:	9003      	str	r0, [sp, #12]
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 800b898:	f04f 0e03 	mov.w	lr, #3
 800b89c:	2305      	movs	r3, #5
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 800b89e:	a901      	add	r1, sp, #4
 800b8a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 800b8a4:	e9cd e304 	strd	lr, r3, [sp, #16]
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 800b8a8:	f7fd fd4a 	bl	8009340 <HAL_GPIO_Init>
    HAL_SPI_Init(&SpiHandle);
 800b8ac:	4620      	mov	r0, r4
}
 800b8ae:	b006      	add	sp, #24
 800b8b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_SPI_Init(&SpiHandle);
 800b8b4:	f7ff b855 	b.w	800a962 <HAL_SPI_Init>
}
 800b8b8:	b006      	add	sp, #24
 800b8ba:	bd10      	pop	{r4, pc}
 800b8bc:	20001d70 	.word	0x20001d70
 800b8c0:	40013000 	.word	0x40013000
 800b8c4:	40021000 	.word	0x40021000

0800b8c8 <SPIx_WriteRead>:
{
 800b8c8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t receivedbyte = 0;
 800b8ca:	2300      	movs	r3, #0
 800b8cc:	f88d 3017 	strb.w	r3, [sp, #23]
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 800b8d0:	4b0b      	ldr	r3, [pc, #44]	; (800b900 <SPIx_WriteRead+0x38>)
{
 800b8d2:	f88d 000f 	strb.w	r0, [sp, #15]
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	9300      	str	r3, [sp, #0]
 800b8da:	480a      	ldr	r0, [pc, #40]	; (800b904 <SPIx_WriteRead+0x3c>)
 800b8dc:	2301      	movs	r3, #1
 800b8de:	f10d 0217 	add.w	r2, sp, #23
 800b8e2:	f10d 010f 	add.w	r1, sp, #15
 800b8e6:	f7ff f8a4 	bl	800aa32 <HAL_SPI_TransmitReceive>
 800b8ea:	b120      	cbz	r0, 800b8f6 <SPIx_WriteRead+0x2e>
  HAL_SPI_DeInit(&SpiHandle);
 800b8ec:	4805      	ldr	r0, [pc, #20]	; (800b904 <SPIx_WriteRead+0x3c>)
 800b8ee:	f7ff f88b 	bl	800aa08 <HAL_SPI_DeInit>
  SPIx_Init();
 800b8f2:	f7ff ffa5 	bl	800b840 <SPIx_Init>
}
 800b8f6:	f89d 0017 	ldrb.w	r0, [sp, #23]
 800b8fa:	b007      	add	sp, #28
 800b8fc:	f85d fb04 	ldr.w	pc, [sp], #4
 800b900:	20000b50 	.word	0x20000b50
 800b904:	20001d70 	.word	0x20001d70

0800b908 <I2Cx_Init>:
{
 800b908:	b530      	push	{r4, r5, lr}
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 800b90a:	4c18      	ldr	r4, [pc, #96]	; (800b96c <I2Cx_Init+0x64>)
{
 800b90c:	b087      	sub	sp, #28
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 800b90e:	4620      	mov	r0, r4
 800b910:	f7fe ff72 	bl	800a7f8 <HAL_I2C_GetState>
 800b914:	bb38      	cbnz	r0, 800b966 <I2Cx_Init+0x5e>
    I2cHandle.Instance = DISCOVERY_I2Cx;
 800b916:	4b16      	ldr	r3, [pc, #88]	; (800b970 <I2Cx_Init+0x68>)
 800b918:	6023      	str	r3, [r4, #0]
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800b91a:	2132      	movs	r1, #50	; 0x32
 800b91c:	2301      	movs	r3, #1
 800b91e:	e9c4 1302 	strd	r1, r3, [r4, #8]
    I2cHandle.Init.OwnAddress2 = 0;
 800b922:	e9c4 0004 	strd	r0, r0, [r4, #16]
    I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;	
 800b926:	e9c4 0007 	strd	r0, r0, [r4, #28]
  DISCOVERY_I2Cx_GPIO_CLK_ENABLE();
 800b92a:	4d12      	ldr	r5, [pc, #72]	; (800b974 <I2Cx_Init+0x6c>)
 800b92c:	696b      	ldr	r3, [r5, #20]
 800b92e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b932:	616b      	str	r3, [r5, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 800b934:	20c0      	movs	r0, #192	; 0xc0
 800b936:	2302      	movs	r3, #2
 800b938:	e9cd 0301 	strd	r0, r3, [sp, #4]
  GPIO_InitStructure.Pull = GPIO_PULLDOWN;
 800b93c:	9303      	str	r3, [sp, #12]
  GPIO_InitStructure.Alternate = DISCOVERY_I2Cx_AF;
 800b93e:	2304      	movs	r3, #4
 800b940:	f04f 0c03 	mov.w	ip, #3
  HAL_GPIO_Init(DISCOVERY_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 800b944:	eb0d 0103 	add.w	r1, sp, r3
 800b948:	480b      	ldr	r0, [pc, #44]	; (800b978 <I2Cx_Init+0x70>)
  GPIO_InitStructure.Alternate = DISCOVERY_I2Cx_AF;
 800b94a:	e9cd c304 	strd	ip, r3, [sp, #16]
  HAL_GPIO_Init(DISCOVERY_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 800b94e:	f7fd fcf7 	bl	8009340 <HAL_GPIO_Init>
  DISCOVERY_I2Cx_CLK_ENABLE();
 800b952:	69eb      	ldr	r3, [r5, #28]
    HAL_I2C_Init(&I2cHandle);
 800b954:	4620      	mov	r0, r4
  DISCOVERY_I2Cx_CLK_ENABLE();
 800b956:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b95a:	61eb      	str	r3, [r5, #28]
}
 800b95c:	b007      	add	sp, #28
 800b95e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    HAL_I2C_Init(&I2cHandle);
 800b962:	f7fe bde0 	b.w	800a526 <HAL_I2C_Init>
}
 800b966:	b007      	add	sp, #28
 800b968:	bd30      	pop	{r4, r5, pc}
 800b96a:	bf00      	nop
 800b96c:	20001d38 	.word	0x20001d38
 800b970:	40005400 	.word	0x40005400
 800b974:	40021000 	.word	0x40021000
 800b978:	48000400 	.word	0x48000400

0800b97c <BSP_LED_Init>:
{
 800b97c:	b570      	push	{r4, r5, r6, lr}
  LEDx_GPIO_CLK_ENABLE(Led);
 800b97e:	4604      	mov	r4, r0
{
 800b980:	b086      	sub	sp, #24
  LEDx_GPIO_CLK_ENABLE(Led);
 800b982:	b928      	cbnz	r0, 800b990 <BSP_LED_Init+0x14>
 800b984:	4a15      	ldr	r2, [pc, #84]	; (800b9dc <BSP_LED_Init+0x60>)
 800b986:	6953      	ldr	r3, [r2, #20]
 800b988:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b98c:	6153      	str	r3, [r2, #20]
 800b98e:	e00d      	b.n	800b9ac <BSP_LED_Init+0x30>
 800b990:	2801      	cmp	r0, #1
 800b992:	d0f7      	beq.n	800b984 <BSP_LED_Init+0x8>
 800b994:	2802      	cmp	r0, #2
 800b996:	d0f5      	beq.n	800b984 <BSP_LED_Init+0x8>
 800b998:	2803      	cmp	r0, #3
 800b99a:	d0f3      	beq.n	800b984 <BSP_LED_Init+0x8>
 800b99c:	2804      	cmp	r0, #4
 800b99e:	d0f1      	beq.n	800b984 <BSP_LED_Init+0x8>
 800b9a0:	2805      	cmp	r0, #5
 800b9a2:	d0ef      	beq.n	800b984 <BSP_LED_Init+0x8>
 800b9a4:	2806      	cmp	r0, #6
 800b9a6:	d0ed      	beq.n	800b984 <BSP_LED_Init+0x8>
 800b9a8:	2807      	cmp	r0, #7
 800b9aa:	d0eb      	beq.n	800b984 <BSP_LED_Init+0x8>
  GPIO_InitStruct.Pin = LED_PIN[Led];
 800b9ac:	4b0c      	ldr	r3, [pc, #48]	; (800b9e0 <BSP_LED_Init+0x64>)
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 800b9ae:	4d0d      	ldr	r5, [pc, #52]	; (800b9e4 <BSP_LED_Init+0x68>)
  GPIO_InitStruct.Pin = LED_PIN[Led];
 800b9b0:	f833 6014 	ldrh.w	r6, [r3, r4, lsl #1]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 800b9b4:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
  GPIO_InitStruct.Pin = LED_PIN[Led];
 800b9b8:	9601      	str	r6, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b9ba:	2301      	movs	r3, #1
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b9bc:	e9cd 3302 	strd	r3, r3, [sp, #8]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 800b9c0:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800b9c2:	2303      	movs	r3, #3
 800b9c4:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 800b9c6:	f7fd fcbb 	bl	8009340 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 800b9ca:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 800b9ce:	2200      	movs	r2, #0
 800b9d0:	4631      	mov	r1, r6
 800b9d2:	f7fd fd7f 	bl	80094d4 <HAL_GPIO_WritePin>
}
 800b9d6:	b006      	add	sp, #24
 800b9d8:	bd70      	pop	{r4, r5, r6, pc}
 800b9da:	bf00      	nop
 800b9dc:	40021000 	.word	0x40021000
 800b9e0:	0801c0b0 	.word	0x0801c0b0
 800b9e4:	20000b30 	.word	0x20000b30

0800b9e8 <BSP_LED_On>:
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET); 
 800b9e8:	4b04      	ldr	r3, [pc, #16]	; (800b9fc <BSP_LED_On+0x14>)
 800b9ea:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 800b9ee:	4b04      	ldr	r3, [pc, #16]	; (800ba00 <BSP_LED_On+0x18>)
 800b9f0:	2201      	movs	r2, #1
 800b9f2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800b9f6:	f7fd bd6d 	b.w	80094d4 <HAL_GPIO_WritePin>
 800b9fa:	bf00      	nop
 800b9fc:	0801c0b0 	.word	0x0801c0b0
 800ba00:	20000b30 	.word	0x20000b30

0800ba04 <BSP_LED_Off>:
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET); 
 800ba04:	4b04      	ldr	r3, [pc, #16]	; (800ba18 <BSP_LED_Off+0x14>)
 800ba06:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 800ba0a:	4b04      	ldr	r3, [pc, #16]	; (800ba1c <BSP_LED_Off+0x18>)
 800ba0c:	2200      	movs	r2, #0
 800ba0e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800ba12:	f7fd bd5f 	b.w	80094d4 <HAL_GPIO_WritePin>
 800ba16:	bf00      	nop
 800ba18:	0801c0b0 	.word	0x0801c0b0
 800ba1c:	20000b30 	.word	0x20000b30

0800ba20 <BSP_LED_Toggle>:
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 800ba20:	4b03      	ldr	r3, [pc, #12]	; (800ba30 <BSP_LED_Toggle+0x10>)
 800ba22:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 800ba26:	4b03      	ldr	r3, [pc, #12]	; (800ba34 <BSP_LED_Toggle+0x14>)
 800ba28:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800ba2c:	f7fd bd57 	b.w	80094de <HAL_GPIO_TogglePin>
 800ba30:	0801c0b0 	.word	0x0801c0b0
 800ba34:	20000b30 	.word	0x20000b30

0800ba38 <BSP_PB_Init>:
{
 800ba38:	b510      	push	{r4, lr}
 800ba3a:	4b19      	ldr	r3, [pc, #100]	; (800baa0 <BSP_PB_Init+0x68>)
 800ba3c:	b086      	sub	sp, #24
  BUTTONx_GPIO_CLK_ENABLE(Button);
 800ba3e:	b918      	cbnz	r0, 800ba48 <BSP_PB_Init+0x10>
 800ba40:	695a      	ldr	r2, [r3, #20]
 800ba42:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800ba46:	615a      	str	r2, [r3, #20]
  __SYSCFG_CLK_ENABLE();
 800ba48:	699a      	ldr	r2, [r3, #24]
 800ba4a:	f042 0201 	orr.w	r2, r2, #1
 800ba4e:	619a      	str	r2, [r3, #24]
  if (ButtonMode == BUTTON_MODE_GPIO)
 800ba50:	b971      	cbnz	r1, 800ba70 <BSP_PB_Init+0x38>
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 800ba52:	2301      	movs	r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ba54:	e9cd 3101 	strd	r3, r1, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800ba58:	2202      	movs	r2, #2
 800ba5a:	2303      	movs	r3, #3
 800ba5c:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800ba60:	4b10      	ldr	r3, [pc, #64]	; (800baa4 <BSP_PB_Init+0x6c>)
 800ba62:	a901      	add	r1, sp, #4
 800ba64:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800ba68:	f7fd fc6a 	bl	8009340 <HAL_GPIO_Init>
}
 800ba6c:	b006      	add	sp, #24
 800ba6e:	bd10      	pop	{r4, pc}
  if (ButtonMode == BUTTON_MODE_EXTI)
 800ba70:	2901      	cmp	r1, #1
 800ba72:	d1fb      	bne.n	800ba6c <BSP_PB_Init+0x34>
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800ba74:	2400      	movs	r4, #0
 800ba76:	2303      	movs	r3, #3
 800ba78:	e9cd 4303 	strd	r4, r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING; 
 800ba7c:	4b0a      	ldr	r3, [pc, #40]	; (800baa8 <BSP_PB_Init+0x70>)
 800ba7e:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800ba80:	4b08      	ldr	r3, [pc, #32]	; (800baa4 <BSP_PB_Init+0x6c>)
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 800ba82:	9101      	str	r1, [sp, #4]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800ba84:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800ba88:	a901      	add	r1, sp, #4
 800ba8a:	f7fd fc59 	bl	8009340 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 800ba8e:	4622      	mov	r2, r4
 800ba90:	210f      	movs	r1, #15
 800ba92:	2006      	movs	r0, #6
 800ba94:	f7fd fc00 	bl	8009298 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 800ba98:	2006      	movs	r0, #6
 800ba9a:	f7fd fc31 	bl	8009300 <HAL_NVIC_EnableIRQ>
}
 800ba9e:	e7e5      	b.n	800ba6c <BSP_PB_Init+0x34>
 800baa0:	40021000 	.word	0x40021000
 800baa4:	20000b28 	.word	0x20000b28
 800baa8:	10110000 	.word	0x10110000

0800baac <BSP_PB_GetState>:
{
 800baac:	b508      	push	{r3, lr}
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 800baae:	4b03      	ldr	r3, [pc, #12]	; (800babc <BSP_PB_GetState+0x10>)
 800bab0:	2101      	movs	r1, #1
 800bab2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800bab6:	f7fd fd07 	bl	80094c8 <HAL_GPIO_ReadPin>
}
 800baba:	bd08      	pop	{r3, pc}
 800babc:	20000b28 	.word	0x20000b28

0800bac0 <GYRO_IO_Init>:
  * @brief  Configures the GYROSCOPE SPI interface.
  * @param  None
  * @retval None
  */
void GYRO_IO_Init(void)
{
 800bac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------------*/
  /* Enable CS GPIO clock and  Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
 800bac4:	4c14      	ldr	r4, [pc, #80]	; (800bb18 <GYRO_IO_Init+0x58>)
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 800bac6:	4815      	ldr	r0, [pc, #84]	; (800bb1c <GYRO_IO_Init+0x5c>)
  GYRO_CS_GPIO_CLK_ENABLE();  
 800bac8:	6963      	ldr	r3, [r4, #20]
{
 800baca:	b086      	sub	sp, #24
  GYRO_CS_GPIO_CLK_ENABLE();  
 800bacc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bad0:	6163      	str	r3, [r4, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 800bad2:	2500      	movs	r5, #0
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 800bad4:	2708      	movs	r7, #8
 800bad6:	f04f 0801 	mov.w	r8, #1
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 800bada:	2603      	movs	r6, #3
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 800badc:	a901      	add	r1, sp, #4
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 800bade:	e9cd 7801 	strd	r7, r8, [sp, #4]
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 800bae2:	e9cd 5603 	strd	r5, r6, [sp, #12]
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 800bae6:	f7fd fc2b 	bl	8009340 <HAL_GPIO_Init>

  /* Deselect : Chip Select high */
  GYRO_CS_HIGH();
 800baea:	4642      	mov	r2, r8
 800baec:	4639      	mov	r1, r7
 800baee:	480b      	ldr	r0, [pc, #44]	; (800bb1c <GYRO_IO_Init+0x5c>)
 800baf0:	f7fd fcf0 	bl	80094d4 <HAL_GPIO_WritePin>

  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT_GPIO_CLK_ENABLE();
 800baf4:	6963      	ldr	r3, [r4, #20]
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  GPIO_InitStructure.Pull= GPIO_NOPULL;
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 800baf6:	4809      	ldr	r0, [pc, #36]	; (800bb1c <GYRO_IO_Init+0x5c>)
  GYRO_INT_GPIO_CLK_ENABLE();
 800baf8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bafc:	6163      	str	r3, [r4, #20]
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 800bafe:	a901      	add	r1, sp, #4
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
 800bb00:	2306      	movs	r3, #6
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 800bb02:	e9cd 3501 	strd	r3, r5, [sp, #4]
  GPIO_InitStructure.Pull= GPIO_NOPULL;
 800bb06:	e9cd 5603 	strd	r5, r6, [sp, #12]
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 800bb0a:	f7fd fc19 	bl	8009340 <HAL_GPIO_Init>
  
  SPIx_Init();
 800bb0e:	f7ff fe97 	bl	800b840 <SPIx_Init>
}
 800bb12:	b006      	add	sp, #24
 800bb14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb18:	40021000 	.word	0x40021000
 800bb1c:	48001000 	.word	0x48001000

0800bb20 <GYRO_IO_Write>:
{
  /* Configure the MS bit: 
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 800bb20:	2a01      	cmp	r2, #1
{
 800bb22:	b570      	push	{r4, r5, r6, lr}
 800bb24:	460e      	mov	r6, r1
 800bb26:	4605      	mov	r5, r0
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 800bb28:	bf88      	it	hi
 800bb2a:	f041 0640 	orrhi.w	r6, r1, #64	; 0x40
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 800bb2e:	480c      	ldr	r0, [pc, #48]	; (800bb60 <GYRO_IO_Write+0x40>)
{
 800bb30:	4614      	mov	r4, r2
  GYRO_CS_LOW();
 800bb32:	2108      	movs	r1, #8
 800bb34:	2200      	movs	r2, #0
 800bb36:	f7fd fccd 	bl	80094d4 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 800bb3a:	4630      	mov	r0, r6
 800bb3c:	f7ff fec4 	bl	800b8c8 <SPIx_WriteRead>
  
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 800bb40:	442c      	add	r4, r5
 800bb42:	42a5      	cmp	r5, r4
 800bb44:	d106      	bne.n	800bb54 <GYRO_IO_Write+0x34>
    pBuffer++;
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
}
 800bb46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  GYRO_CS_HIGH();
 800bb4a:	4805      	ldr	r0, [pc, #20]	; (800bb60 <GYRO_IO_Write+0x40>)
 800bb4c:	2201      	movs	r2, #1
 800bb4e:	2108      	movs	r1, #8
 800bb50:	f7fd bcc0 	b.w	80094d4 <HAL_GPIO_WritePin>
    SPIx_WriteRead(*pBuffer);
 800bb54:	f815 0b01 	ldrb.w	r0, [r5], #1
 800bb58:	f7ff feb6 	bl	800b8c8 <SPIx_WriteRead>
    pBuffer++;
 800bb5c:	e7f1      	b.n	800bb42 <GYRO_IO_Write+0x22>
 800bb5e:	bf00      	nop
 800bb60:	48001000 	.word	0x48001000

0800bb64 <GYRO_IO_Read>:
  * @param  NumByteToRead : number of bytes to read from the GYROSCOPE.
  * @retval None
  */
void GYRO_IO_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
  if(NumByteToRead > 0x01)
 800bb64:	2a01      	cmp	r2, #1
{  
 800bb66:	b570      	push	{r4, r5, r6, lr}
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 800bb68:	bf8c      	ite	hi
 800bb6a:	f041 04c0 	orrhi.w	r4, r1, #192	; 0xc0
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 800bb6e:	f041 0480 	orrls.w	r4, r1, #128	; 0x80
{  
 800bb72:	4606      	mov	r6, r0
 800bb74:	4615      	mov	r5, r2
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 800bb76:	480c      	ldr	r0, [pc, #48]	; (800bba8 <GYRO_IO_Read+0x44>)
 800bb78:	2200      	movs	r2, #0
 800bb7a:	2108      	movs	r1, #8
 800bb7c:	f7fd fcaa 	bl	80094d4 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 800bb80:	4620      	mov	r0, r4
 800bb82:	f7ff fea1 	bl	800b8c8 <SPIx_WriteRead>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 800bb86:	4435      	add	r5, r6
 800bb88:	42ae      	cmp	r6, r5
 800bb8a:	d106      	bne.n	800bb9a <GYRO_IO_Read+0x36>
    pBuffer++;
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
}  
 800bb8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  GYRO_CS_HIGH();
 800bb90:	4805      	ldr	r0, [pc, #20]	; (800bba8 <GYRO_IO_Read+0x44>)
 800bb92:	2201      	movs	r2, #1
 800bb94:	2108      	movs	r1, #8
 800bb96:	f7fd bc9d 	b.w	80094d4 <HAL_GPIO_WritePin>
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 800bb9a:	2000      	movs	r0, #0
 800bb9c:	f7ff fe94 	bl	800b8c8 <SPIx_WriteRead>
 800bba0:	f806 0b01 	strb.w	r0, [r6], #1
    pBuffer++;
 800bba4:	e7f0      	b.n	800bb88 <GYRO_IO_Read+0x24>
 800bba6:	bf00      	nop
 800bba8:	48001000 	.word	0x48001000

0800bbac <COMPASSACCELERO_IO_Init>:
void COMPASSACCELERO_IO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable DRDY clock */
  ACCELERO_DRDY_GPIO_CLK_ENABLE();
 800bbac:	4b16      	ldr	r3, [pc, #88]	; (800bc08 <COMPASSACCELERO_IO_Init+0x5c>)
 800bbae:	695a      	ldr	r2, [r3, #20]
{
 800bbb0:	b570      	push	{r4, r5, r6, lr}
  ACCELERO_DRDY_GPIO_CLK_ENABLE();
 800bbb2:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800bbb6:	615a      	str	r2, [r3, #20]
  
  /* Enable INT1 & INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 800bbb8:	695a      	ldr	r2, [r3, #20]
  /* Mems DRDY pin configuration */
  GPIO_InitStructure.Pin = ACCELERO_DRDY_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  HAL_GPIO_Init(ACCELERO_DRDY_GPIO_PORT, &GPIO_InitStructure);
 800bbba:	4d14      	ldr	r5, [pc, #80]	; (800bc0c <COMPASSACCELERO_IO_Init+0x60>)
  ACCELERO_INT_GPIO_CLK_ENABLE();
 800bbbc:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
{
 800bbc0:	b086      	sub	sp, #24
  ACCELERO_INT_GPIO_CLK_ENABLE();
 800bbc2:	615a      	str	r2, [r3, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 800bbc4:	2304      	movs	r3, #4
 800bbc6:	2400      	movs	r4, #0
  HAL_GPIO_Init(ACCELERO_DRDY_GPIO_PORT, &GPIO_InitStructure);
 800bbc8:	eb0d 0103 	add.w	r1, sp, r3
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 800bbcc:	2603      	movs	r6, #3
  HAL_GPIO_Init(ACCELERO_DRDY_GPIO_PORT, &GPIO_InitStructure);
 800bbce:	4628      	mov	r0, r5
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 800bbd0:	e9cd 3401 	strd	r3, r4, [sp, #4]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800bbd4:	9403      	str	r4, [sp, #12]
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 800bbd6:	9604      	str	r6, [sp, #16]
  HAL_GPIO_Init(ACCELERO_DRDY_GPIO_PORT, &GPIO_InitStructure);
 800bbd8:	f7fd fbb2 	bl	8009340 <HAL_GPIO_Init>
  
  /* Enable and set Button EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(ACCELERO_DRDY_EXTI_IRQn, 0x00, 0x00);
 800bbdc:	4622      	mov	r2, r4
 800bbde:	4621      	mov	r1, r4
 800bbe0:	2008      	movs	r0, #8
 800bbe2:	f7fd fb59 	bl	8009298 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ACCELERO_DRDY_EXTI_IRQn);
 800bbe6:	2008      	movs	r0, #8
 800bbe8:	f7fd fb8a 	bl	8009300 <HAL_NVIC_EnableIRQ>
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
 800bbec:	2330      	movs	r3, #48	; 0x30
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 800bbee:	a901      	add	r1, sp, #4
 800bbf0:	4628      	mov	r0, r5
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 800bbf2:	e9cd 3401 	strd	r3, r4, [sp, #4]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800bbf6:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 800bbfa:	f7fd fba1 	bl	8009340 <HAL_GPIO_Init>
  
  I2Cx_Init();
 800bbfe:	f7ff fe83 	bl	800b908 <I2Cx_Init>
}
 800bc02:	b006      	add	sp, #24
 800bc04:	bd70      	pop	{r4, r5, r6, pc}
 800bc06:	bf00      	nop
 800bc08:	40021000 	.word	0x40021000
 800bc0c:	48001000 	.word	0x48001000

0800bc10 <COMPASSACCELERO_IO_ITConfig>:
void COMPASSACCELERO_IO_ITConfig(void)
{
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable INT1 & INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 800bc10:	4a0e      	ldr	r2, [pc, #56]	; (800bc4c <COMPASSACCELERO_IO_ITConfig+0x3c>)
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 800bc12:	480f      	ldr	r0, [pc, #60]	; (800bc50 <COMPASSACCELERO_IO_ITConfig+0x40>)
  ACCELERO_INT_GPIO_CLK_ENABLE();
 800bc14:	6953      	ldr	r3, [r2, #20]
{
 800bc16:	b510      	push	{r4, lr}
  ACCELERO_INT_GPIO_CLK_ENABLE();
 800bc18:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bc1c:	6153      	str	r3, [r2, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 800bc1e:	4b0d      	ldr	r3, [pc, #52]	; (800bc54 <COMPASSACCELERO_IO_ITConfig+0x44>)
{
 800bc20:	b086      	sub	sp, #24
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 800bc22:	2230      	movs	r2, #48	; 0x30
 800bc24:	e9cd 2301 	strd	r2, r3, [sp, #4]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800bc28:	2400      	movs	r4, #0
 800bc2a:	2303      	movs	r3, #3
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 800bc2c:	a901      	add	r1, sp, #4
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800bc2e:	e9cd 4303 	strd	r4, r3, [sp, #12]
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 800bc32:	f7fd fb85 	bl	8009340 <HAL_GPIO_Init>
  
  /* Enable and set Button EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(ACCELERO_INT1_EXTI_IRQn, 0x00, 0x00);
 800bc36:	4622      	mov	r2, r4
 800bc38:	4621      	mov	r1, r4
 800bc3a:	200a      	movs	r0, #10
 800bc3c:	f7fd fb2c 	bl	8009298 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ACCELERO_INT1_EXTI_IRQn);
 800bc40:	200a      	movs	r0, #10
 800bc42:	f7fd fb5d 	bl	8009300 <HAL_NVIC_EnableIRQ>
  
}
 800bc46:	b006      	add	sp, #24
 800bc48:	bd10      	pop	{r4, pc}
 800bc4a:	bf00      	nop
 800bc4c:	40021000 	.word	0x40021000
 800bc50:	48001000 	.word	0x48001000
 800bc54:	10110000 	.word	0x10110000

0800bc58 <COMPASSACCELERO_IO_Write>:
  * @param  RegisterAddr specifies the COMPASS / ACCELEROMETER register to be written.
  * @param  Value : Data to be written
  * @retval   None
 */
void COMPASSACCELERO_IO_Write(uint16_t DeviceAddr, uint8_t RegisterAddr, uint8_t Value)
{
 800bc58:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 800bc5a:	4b0c      	ldr	r3, [pc, #48]	; (800bc8c <COMPASSACCELERO_IO_Write+0x34>)
 800bc5c:	f88d 2017 	strb.w	r2, [sp, #23]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	9302      	str	r3, [sp, #8]
 800bc64:	f10d 0217 	add.w	r2, sp, #23
 800bc68:	2301      	movs	r3, #1
 800bc6a:	9200      	str	r2, [sp, #0]
 800bc6c:	9301      	str	r3, [sp, #4]
 800bc6e:	460a      	mov	r2, r1
 800bc70:	4601      	mov	r1, r0
 800bc72:	4807      	ldr	r0, [pc, #28]	; (800bc90 <COMPASSACCELERO_IO_Write+0x38>)
 800bc74:	f7fe fcb7 	bl	800a5e6 <HAL_I2C_Mem_Write>
  if(status != HAL_OK)
 800bc78:	b120      	cbz	r0, 800bc84 <COMPASSACCELERO_IO_Write+0x2c>
  HAL_I2C_DeInit(&I2cHandle);
 800bc7a:	4805      	ldr	r0, [pc, #20]	; (800bc90 <COMPASSACCELERO_IO_Write+0x38>)
 800bc7c:	f7fe fc9c 	bl	800a5b8 <HAL_I2C_DeInit>
  I2Cx_Init();
 800bc80:	f7ff fe42 	bl	800b908 <I2Cx_Init>
  /* call I2Cx Read data bus function */
  I2Cx_WriteData(DeviceAddr, RegisterAddr, Value);
}
 800bc84:	b007      	add	sp, #28
 800bc86:	f85d fb04 	ldr.w	pc, [sp], #4
 800bc8a:	bf00      	nop
 800bc8c:	20000b2c 	.word	0x20000b2c
 800bc90:	20001d38 	.word	0x20001d38

0800bc94 <COMPASSACCELERO_IO_Read>:
  * @param  DeviceAddr : specifies the slave address to be programmed(ACC_I2C_ADDRESS or MAG_I2C_ADDRESS).
  * @param  RegisterAddr : specifies the COMPASS / ACCELEROMETER internal address register to read from
  * @retval ACCELEROMETER register value
  */ 
uint8_t COMPASSACCELERO_IO_Read(uint16_t DeviceAddr, uint8_t RegisterAddr)
{
 800bc94:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t value = 0;
 800bc96:	2300      	movs	r3, #0
 800bc98:	f88d 3017 	strb.w	r3, [sp, #23]
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 800bc9c:	4b0b      	ldr	r3, [pc, #44]	; (800bccc <COMPASSACCELERO_IO_Read+0x38>)
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	9302      	str	r3, [sp, #8]
{
 800bca2:	460a      	mov	r2, r1
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 800bca4:	2301      	movs	r3, #1
 800bca6:	f10d 0117 	add.w	r1, sp, #23
 800bcaa:	9100      	str	r1, [sp, #0]
 800bcac:	9301      	str	r3, [sp, #4]
 800bcae:	4601      	mov	r1, r0
 800bcb0:	4807      	ldr	r0, [pc, #28]	; (800bcd0 <COMPASSACCELERO_IO_Read+0x3c>)
 800bcb2:	f7fe fd1a 	bl	800a6ea <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 800bcb6:	b120      	cbz	r0, 800bcc2 <COMPASSACCELERO_IO_Read+0x2e>
  HAL_I2C_DeInit(&I2cHandle);
 800bcb8:	4805      	ldr	r0, [pc, #20]	; (800bcd0 <COMPASSACCELERO_IO_Read+0x3c>)
 800bcba:	f7fe fc7d 	bl	800a5b8 <HAL_I2C_DeInit>
  I2Cx_Init();
 800bcbe:	f7ff fe23 	bl	800b908 <I2Cx_Init>
  /* call I2Cx Read data bus function */   
  return I2Cx_ReadData(DeviceAddr, RegisterAddr);
}
 800bcc2:	f89d 0017 	ldrb.w	r0, [sp, #23]
 800bcc6:	b007      	add	sp, #28
 800bcc8:	f85d fb04 	ldr.w	pc, [sp], #4
 800bccc:	20000b2c 	.word	0x20000b2c
 800bcd0:	20001d38 	.word	0x20001d38

0800bcd4 <BSP_ACCELERO_Init>:
/**
  * @brief  Set accelerometer Initialization.
  * @retval ACCELERO_OK if no problem during initialization
  */
uint8_t BSP_ACCELERO_Init(void)
{
 800bcd4:	b538      	push	{r3, r4, r5, lr}
  uint8_t ret = ACCELERO_ERROR;
  uint16_t ctrl = 0x0000;
  ACCELERO_InitTypeDef         Accelero_InitStructure;
  ACCELERO_FilterConfigTypeDef Accelero_FilterStructure = {0,0,0,0};

  if(Lsm303dlhcDrv.ReadID() == I_AM_LMS303DLHC)
 800bcd6:	4c0c      	ldr	r4, [pc, #48]	; (800bd08 <BSP_ACCELERO_Init+0x34>)
 800bcd8:	68a3      	ldr	r3, [r4, #8]
 800bcda:	4798      	blx	r3
 800bcdc:	2833      	cmp	r0, #51	; 0x33
 800bcde:	d10b      	bne.n	800bcf8 <BSP_ACCELERO_Init+0x24>
    ret = ACCELERO_OK;
  }
  else if(Lsm303agrDrv.ReadID() == I_AM_LSM303AGR)
  {
    /* Initialize the accelerometer driver structure */
    AccelerometerDrv = &Lsm303agrDrv;
 800bce0:	4d0a      	ldr	r5, [pc, #40]	; (800bd0c <BSP_ACCELERO_Init+0x38>)

    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
              Accelero_InitStructure.AccFull_Scale    | Accelero_InitStructure.High_Resolution) << 8);

    /* Configure the accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 800bce2:	6823      	ldr	r3, [r4, #0]
    AccelerometerDrv = &Lsm303agrDrv;
 800bce4:	602c      	str	r4, [r5, #0]
    AccelerometerDrv->Init(ctrl);
 800bce6:	f640 0047 	movw	r0, #2119	; 0x847
 800bcea:	4798      	blx	r3
                      Accelero_FilterStructure.HighPassFilter_CutOff_Frequency |\
                      Accelero_FilterStructure.HighPassFilter_AOI1             |\
                      Accelero_FilterStructure.HighPassFilter_AOI2);

    /* Configure the accelerometer LPF main parameters */
    AccelerometerDrv->FilterConfig(ctrl);
 800bcec:	682b      	ldr	r3, [r5, #0]
 800bcee:	2090      	movs	r0, #144	; 0x90
 800bcf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcf2:	4798      	blx	r3

    ret = ACCELERO_OK;
 800bcf4:	2000      	movs	r0, #0
  }

  return ret;
}
 800bcf6:	bd38      	pop	{r3, r4, r5, pc}
  else if(Lsm303agrDrv.ReadID() == I_AM_LSM303AGR)
 800bcf8:	4c05      	ldr	r4, [pc, #20]	; (800bd10 <BSP_ACCELERO_Init+0x3c>)
 800bcfa:	68a3      	ldr	r3, [r4, #8]
 800bcfc:	4798      	blx	r3
 800bcfe:	2833      	cmp	r0, #51	; 0x33
 800bd00:	d0ee      	beq.n	800bce0 <BSP_ACCELERO_Init+0xc>
  uint8_t ret = ACCELERO_ERROR;
 800bd02:	2001      	movs	r0, #1
 800bd04:	e7f7      	b.n	800bcf6 <BSP_ACCELERO_Init+0x22>
 800bd06:	bf00      	nop
 800bd08:	20000b54 	.word	0x20000b54
 800bd0c:	20001dd0 	.word	0x20001dd0
 800bd10:	20000bf0 	.word	0x20000bf0

0800bd14 <BSP_ACCELERO_GetXYZ>:
  *                 pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
* @retval None
*/
void BSP_ACCELERO_GetXYZ(int16_t *pDataXYZ)
{
  if(AccelerometerDrv->GetXYZ!= NULL)
 800bd14:	4b02      	ldr	r3, [pc, #8]	; (800bd20 <BSP_ACCELERO_GetXYZ+0xc>)
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd1a:	b103      	cbz	r3, 800bd1e <BSP_ACCELERO_GetXYZ+0xa>
  {
    AccelerometerDrv->GetXYZ(pDataXYZ);
 800bd1c:	4718      	bx	r3
  }
}
 800bd1e:	4770      	bx	lr
 800bd20:	20001dd0 	.word	0x20001dd0

0800bd24 <BSP_GYRO_Init>:
/**
  * @brief  Set gyroscope Initialization.
  * @retval GYRO_OK if no problem during initialization
  */
uint8_t BSP_GYRO_Init(void)
{
 800bd24:	b538      	push	{r3, r4, r5, lr}
  uint8_t ret = GYRO_ERROR;
  uint16_t ctrl = 0x0000;
  GYRO_InitTypeDef         Gyro_InitStructure;
  GYRO_FilterConfigTypeDef Gyro_FilterStructure = {0,0};

  if((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 800bd26:	4c16      	ldr	r4, [pc, #88]	; (800bd80 <BSP_GYRO_Init+0x5c>)
 800bd28:	68a3      	ldr	r3, [r4, #8]
 800bd2a:	4798      	blx	r3
 800bd2c:	28d4      	cmp	r0, #212	; 0xd4
 800bd2e:	d10f      	bne.n	800bd50 <BSP_GYRO_Init+0x2c>
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &L3gd20Drv;
 800bd30:	4d14      	ldr	r5, [pc, #80]	; (800bd84 <BSP_GYRO_Init+0x60>)

    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
                         Gyro_InitStructure.Full_Scale) << 8);

    /* Initialize the gyroscope */
    GyroscopeDrv->Init(ctrl);
 800bd32:	6823      	ldr	r3, [r4, #0]
    GyroscopeDrv = &L3gd20Drv;
 800bd34:	602c      	str	r4, [r5, #0]
    GyroscopeDrv->Init(ctrl);
 800bd36:	f241 003f 	movw	r0, #4159	; 0x103f
 800bd3a:	4798      	blx	r3

    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
                       Gyro_FilterStructure.HighPassFilter_CutOff_Frequency));

    /* Configure the gyroscope main parameters */
    GyroscopeDrv->FilterConfig(ctrl) ;
 800bd3c:	682b      	ldr	r3, [r5, #0]
 800bd3e:	2000      	movs	r0, #0
 800bd40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd42:	4798      	blx	r3

    GyroscopeDrv->FilterCmd(L3GD20_HIGHPASSFILTER_ENABLE);
 800bd44:	682b      	ldr	r3, [r5, #0]
                       Gyro_FilterStructure.HighPassFilter_CutOff_Frequency));

    /* Configure the gyroscope main parameters */
    GyroscopeDrv->FilterConfig(ctrl);

    GyroscopeDrv->FilterCmd(I3G4250D_HIGHPASSFILTER_ENABLE);
 800bd46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd48:	2010      	movs	r0, #16
 800bd4a:	4798      	blx	r3

    ret = GYRO_OK;
 800bd4c:	2000      	movs	r0, #0
  }

  return ret;
}
 800bd4e:	bd38      	pop	{r3, r4, r5, pc}
  if((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 800bd50:	68a3      	ldr	r3, [r4, #8]
 800bd52:	4798      	blx	r3
 800bd54:	28d5      	cmp	r0, #213	; 0xd5
 800bd56:	d0eb      	beq.n	800bd30 <BSP_GYRO_Init+0xc>
  else if (I3g4250Drv.ReadID() == I_AM_I3G4250D)
 800bd58:	4d0b      	ldr	r5, [pc, #44]	; (800bd88 <BSP_GYRO_Init+0x64>)
 800bd5a:	68ab      	ldr	r3, [r5, #8]
 800bd5c:	4798      	blx	r3
 800bd5e:	28d3      	cmp	r0, #211	; 0xd3
 800bd60:	d10b      	bne.n	800bd7a <BSP_GYRO_Init+0x56>
    GyroscopeDrv = &I3g4250Drv;
 800bd62:	4c08      	ldr	r4, [pc, #32]	; (800bd84 <BSP_GYRO_Init+0x60>)
    GyroscopeDrv->Init(ctrl);
 800bd64:	682b      	ldr	r3, [r5, #0]
    GyroscopeDrv = &I3g4250Drv;
 800bd66:	6025      	str	r5, [r4, #0]
    GyroscopeDrv->Init(ctrl);
 800bd68:	f241 003f 	movw	r0, #4159	; 0x103f
 800bd6c:	4798      	blx	r3
    GyroscopeDrv->FilterConfig(ctrl);
 800bd6e:	6823      	ldr	r3, [r4, #0]
 800bd70:	2000      	movs	r0, #0
 800bd72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd74:	4798      	blx	r3
    GyroscopeDrv->FilterCmd(I3G4250D_HIGHPASSFILTER_ENABLE);
 800bd76:	6823      	ldr	r3, [r4, #0]
 800bd78:	e7e5      	b.n	800bd46 <BSP_GYRO_Init+0x22>
  uint8_t ret = GYRO_ERROR;
 800bd7a:	2001      	movs	r0, #1
 800bd7c:	e7e7      	b.n	800bd4e <BSP_GYRO_Init+0x2a>
 800bd7e:	bf00      	nop
 800bd80:	20000b88 	.word	0x20000b88
 800bd84:	20001dd4 	.word	0x20001dd4
 800bd88:	20000bbc 	.word	0x20000bbc

0800bd8c <BSP_GYRO_GetXYZ>:
  * @param pfData pointer on floating array
  * @retval None
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
  if(GyroscopeDrv->GetXYZ!= NULL)
 800bd8c:	4b02      	ldr	r3, [pc, #8]	; (800bd98 <BSP_GYRO_GetXYZ+0xc>)
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd92:	b103      	cbz	r3, 800bd96 <BSP_GYRO_GetXYZ+0xa>
  {
	GyroscopeDrv->GetXYZ(pfData);
 800bd94:	4718      	bx	r3
  }
}
 800bd96:	4770      	bx	lr
 800bd98:	20001dd4 	.word	0x20001dd4

0800bd9c <LSM303DLHC_AccDeInit>:
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccDeInit(void)
{  
}
 800bd9c:	4770      	bx	lr

0800bd9e <LSM303DLHC_AccInit>:
{  
 800bd9e:	b510      	push	{r4, lr}
 800bda0:	4604      	mov	r4, r0
  COMPASSACCELERO_IO_Init();
 800bda2:	f7ff ff03 	bl	800bbac <COMPASSACCELERO_IO_Init>
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG1_A, ctrl);
 800bda6:	b2e2      	uxtb	r2, r4
 800bda8:	2120      	movs	r1, #32
 800bdaa:	2032      	movs	r0, #50	; 0x32
 800bdac:	f7ff ff54 	bl	800bc58 <COMPASSACCELERO_IO_Write>
}
 800bdb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A, ctrl);
 800bdb4:	2200      	movs	r2, #0
 800bdb6:	2123      	movs	r1, #35	; 0x23
 800bdb8:	2032      	movs	r0, #50	; 0x32
 800bdba:	f7ff bf4d 	b.w	800bc58 <COMPASSACCELERO_IO_Write>

0800bdbe <LSM303DLHC_AccReadID>:
  * @brief  Read LSM303DLHC ID.
  * @param  None
  * @retval ID 
  */
uint8_t LSM303DLHC_AccReadID(void)
{  
 800bdbe:	b508      	push	{r3, lr}
  uint8_t ctrl = 0x00;
  
  /* Low level init */
  COMPASSACCELERO_IO_Init();
 800bdc0:	f7ff fef4 	bl	800bbac <COMPASSACCELERO_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_WHO_AM_I_ADDR);
  
  return ctrl;
}
 800bdc4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_WHO_AM_I_ADDR);
 800bdc8:	210f      	movs	r1, #15
 800bdca:	2032      	movs	r0, #50	; 0x32
 800bdcc:	f7ff bf62 	b.w	800bc94 <COMPASSACCELERO_IO_Read>

0800bdd0 <LSM303DLHC_AccRebootCmd>:
  * @brief  Reboot memory content of LSM303DLHC
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccRebootCmd(void)
{
 800bdd0:	b508      	push	{r3, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 800bdd2:	2124      	movs	r1, #36	; 0x24
 800bdd4:	2032      	movs	r0, #50	; 0x32
 800bdd6:	f7ff ff5d 	bl	800bc94 <COMPASSACCELERO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LSM303DLHC_BOOT_REBOOTMEMORY;
 800bdda:	f060 007f 	orn	r0, r0, #127	; 0x7f
  
  /* Write value to ACC MEMS CTRL_REG5 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A, tmpreg);
 800bdde:	b2c2      	uxtb	r2, r0
}
 800bde0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A, tmpreg);
 800bde4:	2124      	movs	r1, #36	; 0x24
 800bde6:	2032      	movs	r0, #50	; 0x32
 800bde8:	f7ff bf36 	b.w	800bc58 <COMPASSACCELERO_IO_Write>

0800bdec <LSM303DLHC_AccFilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LSM303DLHC_AccFilterConfig(uint8_t FilterStruct) 
{
 800bdec:	b510      	push	{r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 800bdee:	2121      	movs	r1, #33	; 0x21
{
 800bdf0:	4604      	mov	r4, r0
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 800bdf2:	2032      	movs	r0, #50	; 0x32
 800bdf4:	f7ff ff4e 	bl	800bc94 <COMPASSACCELERO_IO_Read>
  
  tmpreg &= 0x0C;
 800bdf8:	f000 000c 	and.w	r0, r0, #12
  tmpreg |= FilterStruct;
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 800bdfc:	ea40 0204 	orr.w	r2, r0, r4
 800be00:	2121      	movs	r1, #33	; 0x21
}
 800be02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 800be06:	2032      	movs	r0, #50	; 0x32
 800be08:	f7ff bf26 	b.w	800bc58 <COMPASSACCELERO_IO_Write>

0800be0c <LSM303DLHC_AccFilterCmd>:
  *         @arg: LSM303DLHC_HIGHPASSFILTER_DISABLE 
  *         @arg: LSM303DLHC_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterCmd(uint8_t HighPassFilterState)
{
 800be0c:	b510      	push	{r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 800be0e:	2121      	movs	r1, #33	; 0x21
{
 800be10:	4604      	mov	r4, r0
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 800be12:	2032      	movs	r0, #50	; 0x32
 800be14:	f7ff ff3e 	bl	800bc94 <COMPASSACCELERO_IO_Read>
  
  tmpreg &= 0xF7;
 800be18:	f000 00f7 	and.w	r0, r0, #247	; 0xf7
  
  tmpreg |= HighPassFilterState;
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 800be1c:	ea40 0204 	orr.w	r2, r0, r4
 800be20:	2121      	movs	r1, #33	; 0x21
}
 800be22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 800be26:	2032      	movs	r0, #50	; 0x32
 800be28:	f7ff bf16 	b.w	800bc58 <COMPASSACCELERO_IO_Write>

0800be2c <LSM303DLHC_AccReadXYZ>:
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  * @retval None
  */
void LSM303DLHC_AccReadXYZ(int16_t* pData)
{
 800be2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  int8_t buffer[6];
  uint8_t i = 0;
  uint8_t sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
  
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A);
 800be30:	2123      	movs	r1, #35	; 0x23
{
 800be32:	4605      	mov	r5, r0
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A);
 800be34:	2032      	movs	r0, #50	; 0x32
 800be36:	f7ff ff2d 	bl	800bc94 <COMPASSACCELERO_IO_Read>
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 800be3a:	2124      	movs	r1, #36	; 0x24
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A);
 800be3c:	4606      	mov	r6, r0
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 800be3e:	2032      	movs	r0, #50	; 0x32
 800be40:	f7ff ff28 	bl	800bc94 <COMPASSACCELERO_IO_Read>
  
  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_L_A); 
 800be44:	2128      	movs	r1, #40	; 0x28
 800be46:	2032      	movs	r0, #50	; 0x32
 800be48:	f7ff ff24 	bl	800bc94 <COMPASSACCELERO_IO_Read>
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
 800be4c:	2129      	movs	r1, #41	; 0x29
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_L_A); 
 800be4e:	b247      	sxtb	r7, r0
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
 800be50:	2032      	movs	r0, #50	; 0x32
 800be52:	f7ff ff1f 	bl	800bc94 <COMPASSACCELERO_IO_Read>
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_A);
 800be56:	212a      	movs	r1, #42	; 0x2a
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
 800be58:	fa4f f980 	sxtb.w	r9, r0
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_A);
 800be5c:	2032      	movs	r0, #50	; 0x32
 800be5e:	f7ff ff19 	bl	800bc94 <COMPASSACCELERO_IO_Read>
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_H_A);
 800be62:	212b      	movs	r1, #43	; 0x2b
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_A);
 800be64:	b244      	sxtb	r4, r0
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_H_A);
 800be66:	2032      	movs	r0, #50	; 0x32
 800be68:	f7ff ff14 	bl	800bc94 <COMPASSACCELERO_IO_Read>
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_L_A);
 800be6c:	212c      	movs	r1, #44	; 0x2c
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_H_A);
 800be6e:	fa4f fa80 	sxtb.w	sl, r0
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_L_A);
 800be72:	2032      	movs	r0, #50	; 0x32
 800be74:	f7ff ff0e 	bl	800bc94 <COMPASSACCELERO_IO_Read>
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_H_A);
 800be78:	212d      	movs	r1, #45	; 0x2d
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_L_A);
 800be7a:	fa4f f880 	sxtb.w	r8, r0
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_H_A);
 800be7e:	2032      	movs	r0, #50	; 0x32
 800be80:	f7ff ff08 	bl	800bc94 <COMPASSACCELERO_IO_Read>
  
  /* Check in the control register4 the data alignment*/
  if(!(ctrlx[0] & LSM303DLHC_BLE_MSB)) 
 800be84:	0672      	lsls	r2, r6, #25
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_H_A);
 800be86:	b243      	sxtb	r3, r0
  if(!(ctrlx[0] & LSM303DLHC_BLE_MSB)) 
 800be88:	d51a      	bpl.n	800bec0 <LSM303DLHC_AccReadXYZ+0x94>
  }
  else /* Big Endian Mode */
  {
    for(i=0; i<3; i++)
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1]);
 800be8a:	eb09 2707 	add.w	r7, r9, r7, lsl #8
 800be8e:	eb0a 2404 	add.w	r4, sl, r4, lsl #8
 800be92:	b23f      	sxth	r7, r7
 800be94:	b224      	sxth	r4, r4
 800be96:	eb03 2308 	add.w	r3, r3, r8, lsl #8
 800be9a:	f006 0030 	and.w	r0, r6, #48	; 0x30
    }
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL4 */
  switch(ctrlx[0] & LSM303DLHC_FULLSCALE_16G)
 800be9e:	2820      	cmp	r0, #32
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 800bea0:	b21a      	sxth	r2, r3
  switch(ctrlx[0] & LSM303DLHC_FULLSCALE_16G)
 800bea2:	d016      	beq.n	800bed2 <LSM303DLHC_AccReadXYZ+0xa6>
 800bea4:	2830      	cmp	r0, #48	; 0x30
 800bea6:	d016      	beq.n	800bed6 <LSM303DLHC_AccReadXYZ+0xaa>
 800bea8:	2810      	cmp	r0, #16
 800beaa:	bf14      	ite	ne
 800beac:	2301      	movne	r3, #1
 800beae:	2302      	moveq	r3, #2
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
  {
    pData[i]=(pnRawData[i] * sensitivity);
 800beb0:	435f      	muls	r7, r3
 800beb2:	435c      	muls	r4, r3
 800beb4:	4353      	muls	r3, r2
 800beb6:	802f      	strh	r7, [r5, #0]
 800beb8:	806c      	strh	r4, [r5, #2]
 800beba:	80ab      	strh	r3, [r5, #4]
  }
}
 800bebc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 800bec0:	eb07 2709 	add.w	r7, r7, r9, lsl #8
 800bec4:	eb04 240a 	add.w	r4, r4, sl, lsl #8
 800bec8:	b23f      	sxth	r7, r7
 800beca:	b224      	sxth	r4, r4
 800becc:	eb08 2303 	add.w	r3, r8, r3, lsl #8
 800bed0:	e7e3      	b.n	800be9a <LSM303DLHC_AccReadXYZ+0x6e>
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_8G;
 800bed2:	2304      	movs	r3, #4
 800bed4:	e7ec      	b.n	800beb0 <LSM303DLHC_AccReadXYZ+0x84>
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_16G;
 800bed6:	230c      	movs	r3, #12
 800bed8:	e7ea      	b.n	800beb0 <LSM303DLHC_AccReadXYZ+0x84>

0800beda <LSM303DLHC_AccFilterClickCmd>:
  *         @arg: LSM303DLHC_HPF_CLICK_DISABLE 
  *         @arg: LSM303DLHC_HPF_CLICK_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterClickCmd(uint8_t HighPassFilterClickState)
{
 800beda:	b510      	push	{r4, lr}
  uint8_t tmpreg = 0x00;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 800bedc:	2121      	movs	r1, #33	; 0x21
{
 800bede:	4604      	mov	r4, r0
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 800bee0:	2032      	movs	r0, #50	; 0x32
 800bee2:	f7ff fed7 	bl	800bc94 <COMPASSACCELERO_IO_Read>
  
  tmpreg &= ~(LSM303DLHC_HPF_CLICK_ENABLE);
 800bee6:	f000 00fb 	and.w	r0, r0, #251	; 0xfb
  
  tmpreg |= HighPassFilterClickState;
  
  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 800beea:	ea40 0204 	orr.w	r2, r0, r4
 800beee:	2121      	movs	r1, #33	; 0x21
}
 800bef0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 800bef4:	2032      	movs	r0, #50	; 0x32
 800bef6:	f7ff beaf 	b.w	800bc58 <COMPASSACCELERO_IO_Write>

0800befa <LSM303DLHC_AccIT1Enable>:
  *         @arg   LSM303DLHC_IT1_WTM
  *         @arg   LSM303DLHC_IT1_OVERRUN
  * @retval None
  */
void LSM303DLHC_AccIT1Enable(uint8_t LSM303DLHC_IT)
{
 800befa:	b510      	push	{r4, lr}
  uint8_t tmpval = 0x00;
  
  /* Read CTRL_REG3 register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A);
 800befc:	2122      	movs	r1, #34	; 0x22
{
 800befe:	4604      	mov	r4, r0
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A);
 800bf00:	2032      	movs	r0, #50	; 0x32
 800bf02:	f7ff fec7 	bl	800bc94 <COMPASSACCELERO_IO_Read>
  
  /* Enable IT1 */
  tmpval |= LSM303DLHC_IT;
 800bf06:	4320      	orrs	r0, r4
  
  /* Write value to MEMS CTRL_REG3 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A, tmpval);
 800bf08:	b2c2      	uxtb	r2, r0
}
 800bf0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A, tmpval);
 800bf0e:	2122      	movs	r1, #34	; 0x22
 800bf10:	2032      	movs	r0, #50	; 0x32
 800bf12:	f7ff bea1 	b.w	800bc58 <COMPASSACCELERO_IO_Write>

0800bf16 <LSM303DLHC_AccClickITEnable>:
  * @brief  Click interrupt enable
  * @param  ITClick: the selected interrupt to enable
  * @retval None
  */
void LSM303DLHC_AccClickITEnable(uint8_t ITClick)
{  
 800bf16:	b510      	push	{r4, lr}
  uint8_t tmpval = 0x00;
  
  /* Read CLICK_CFR register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A);
 800bf18:	2138      	movs	r1, #56	; 0x38
{  
 800bf1a:	4604      	mov	r4, r0
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A);
 800bf1c:	2032      	movs	r0, #50	; 0x32
 800bf1e:	f7ff feb9 	bl	800bc94 <COMPASSACCELERO_IO_Read>
  
  /* Enable the selected interrupt */
  tmpval |= ITClick;
 800bf22:	4320      	orrs	r0, r4
  
  /* Write value to MEMS CLICK CFG register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A, tmpval);
 800bf24:	b2c2      	uxtb	r2, r0
 800bf26:	2138      	movs	r1, #56	; 0x38
 800bf28:	2032      	movs	r0, #50	; 0x32
 800bf2a:	f7ff fe95 	bl	800bc58 <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Threshold on Z axis */
  tmpval = 0x0A;
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_THS_A, tmpval);
 800bf2e:	220a      	movs	r2, #10
 800bf30:	213a      	movs	r1, #58	; 0x3a
 800bf32:	2032      	movs	r0, #50	; 0x32
 800bf34:	f7ff fe90 	bl	800bc58 <COMPASSACCELERO_IO_Write>
  
  /* Configure Time Limit */
  tmpval = 0x05;
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LIMIT_A, tmpval);
 800bf38:	2205      	movs	r2, #5
 800bf3a:	213b      	movs	r1, #59	; 0x3b
 800bf3c:	2032      	movs	r0, #50	; 0x32
 800bf3e:	f7ff fe8b 	bl	800bc58 <COMPASSACCELERO_IO_Write>
  
  /* Configure Latency */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LATENCY_A, tmpval);
 800bf42:	2205      	movs	r2, #5
 800bf44:	213c      	movs	r1, #60	; 0x3c
 800bf46:	2032      	movs	r0, #50	; 0x32
 800bf48:	f7ff fe86 	bl	800bc58 <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Window */
  tmpval = 0x32;
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_WINDOW_A, tmpval);
 800bf4c:	2232      	movs	r2, #50	; 0x32
}
 800bf4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_WINDOW_A, tmpval);
 800bf52:	213d      	movs	r1, #61	; 0x3d
 800bf54:	4610      	mov	r0, r2
 800bf56:	f7ff be7f 	b.w	800bc58 <COMPASSACCELERO_IO_Write>

0800bf5a <LSM303DLHC_AccZClickITConfig>:
  * @brief  Click on Z axis interrupt config
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccZClickITConfig(void)
{  
 800bf5a:	b508      	push	{r3, lr}
  /* Configure low level IT config */
  COMPASSACCELERO_IO_ITConfig();
 800bf5c:	f7ff fe58 	bl	800bc10 <COMPASSACCELERO_IO_ITConfig>
  
  /* Select click IT as INT1 interrupt */
  LSM303DLHC_AccIT1Enable(LSM303DLHC_IT1_CLICK);
 800bf60:	2080      	movs	r0, #128	; 0x80
 800bf62:	f7ff ffca 	bl	800befa <LSM303DLHC_AccIT1Enable>
  
  /* Enable High pass filter for click IT */
  LSM303DLHC_AccFilterClickCmd(LSM303DLHC_HPF_CLICK_ENABLE);
 800bf66:	2004      	movs	r0, #4
 800bf68:	f7ff ffb7 	bl	800beda <LSM303DLHC_AccFilterClickCmd>
  
  /* Enable simple click IT on Z axis, */
  LSM303DLHC_AccClickITEnable(LSM303DLHC_Z_SINGLE_CLICK);
}
 800bf6c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  LSM303DLHC_AccClickITEnable(LSM303DLHC_Z_SINGLE_CLICK);
 800bf70:	2010      	movs	r0, #16
 800bf72:	f7ff bfd0 	b.w	800bf16 <LSM303DLHC_AccClickITEnable>

0800bf76 <L3GD20_DeInit>:
  * @param  None
  * @retval None
  */
void L3GD20_DeInit(void)
{
}
 800bf76:	4770      	bx	lr

0800bf78 <L3GD20_Init>:
{  
 800bf78:	b513      	push	{r0, r1, r4, lr}
  uint8_t ctrl = 0x00;
 800bf7a:	2300      	movs	r3, #0
{  
 800bf7c:	4604      	mov	r4, r0
  uint8_t ctrl = 0x00;
 800bf7e:	f88d 3007 	strb.w	r3, [sp, #7]
  GYRO_IO_Init();
 800bf82:	f7ff fd9d 	bl	800bac0 <GYRO_IO_Init>
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 800bf86:	f10d 0007 	add.w	r0, sp, #7
 800bf8a:	2201      	movs	r2, #1
 800bf8c:	2120      	movs	r1, #32
  ctrl = (uint8_t) InitStruct;
 800bf8e:	f88d 4007 	strb.w	r4, [sp, #7]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 800bf92:	f7ff fdc5 	bl	800bb20 <GYRO_IO_Write>
  ctrl = (uint8_t) (InitStruct >> 8);
 800bf96:	0a24      	lsrs	r4, r4, #8
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 800bf98:	2201      	movs	r2, #1
 800bf9a:	2123      	movs	r1, #35	; 0x23
 800bf9c:	f10d 0007 	add.w	r0, sp, #7
  ctrl = (uint8_t) (InitStruct >> 8);
 800bfa0:	f88d 4007 	strb.w	r4, [sp, #7]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 800bfa4:	f7ff fdbc 	bl	800bb20 <GYRO_IO_Write>
}
 800bfa8:	b002      	add	sp, #8
 800bfaa:	bd10      	pop	{r4, pc}

0800bfac <L3GD20_LowPower>:
  * @brief Set L3GD20 in low-power mode
  * @param 
  * @retval  None
  */
void L3GD20_LowPower(uint16_t InitStruct)
{  
 800bfac:	b507      	push	{r0, r1, r2, lr}
  uint8_t ctrl = 0x00;

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 800bfae:	2201      	movs	r2, #1
  ctrl = (uint8_t) InitStruct;
 800bfb0:	f88d 0007 	strb.w	r0, [sp, #7]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 800bfb4:	2120      	movs	r1, #32
 800bfb6:	f10d 0007 	add.w	r0, sp, #7
 800bfba:	f7ff fdb1 	bl	800bb20 <GYRO_IO_Write>
}
 800bfbe:	b003      	add	sp, #12
 800bfc0:	f85d fb04 	ldr.w	pc, [sp], #4

0800bfc4 <L3GD20_ReadID>:
{
 800bfc4:	b507      	push	{r0, r1, r2, lr}
  GYRO_IO_Init();
 800bfc6:	f7ff fd7b 	bl	800bac0 <GYRO_IO_Init>
  GYRO_IO_Read(&tmp, L3GD20_WHO_AM_I_ADDR, 1);
 800bfca:	f10d 0007 	add.w	r0, sp, #7
 800bfce:	2201      	movs	r2, #1
 800bfd0:	210f      	movs	r1, #15
 800bfd2:	f7ff fdc7 	bl	800bb64 <GYRO_IO_Read>
}
 800bfd6:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800bfda:	b003      	add	sp, #12
 800bfdc:	f85d fb04 	ldr.w	pc, [sp], #4

0800bfe0 <L3GD20_RebootCmd>:
{
 800bfe0:	b507      	push	{r0, r1, r2, lr}
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800bfe2:	2201      	movs	r2, #1
 800bfe4:	f10d 0007 	add.w	r0, sp, #7
 800bfe8:	2124      	movs	r1, #36	; 0x24
 800bfea:	f7ff fdbb 	bl	800bb64 <GYRO_IO_Read>
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 800bfee:	f89d 3007 	ldrb.w	r3, [sp, #7]
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800bff2:	2201      	movs	r2, #1
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 800bff4:	f063 037f 	orn	r3, r3, #127	; 0x7f
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800bff8:	2124      	movs	r1, #36	; 0x24
 800bffa:	f10d 0007 	add.w	r0, sp, #7
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 800bffe:	f88d 3007 	strb.w	r3, [sp, #7]
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800c002:	f7ff fd8d 	bl	800bb20 <GYRO_IO_Write>
}
 800c006:	b003      	add	sp, #12
 800c008:	f85d fb04 	ldr.w	pc, [sp], #4

0800c00c <L3GD20_INT1InterruptConfig>:
  * @brief  Set L3GD20 Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
 800c00c:	b513      	push	{r0, r1, r4, lr}
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 800c00e:	2300      	movs	r3, #0
{
 800c010:	4604      	mov	r4, r0
  
  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 800c012:	2201      	movs	r2, #1
 800c014:	f10d 0006 	add.w	r0, sp, #6
 800c018:	2130      	movs	r1, #48	; 0x30
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 800c01a:	f88d 3006 	strb.w	r3, [sp, #6]
 800c01e:	f88d 3007 	strb.w	r3, [sp, #7]
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 800c022:	f7ff fd9f 	bl	800bb64 <GYRO_IO_Read>
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 800c026:	f10d 0007 	add.w	r0, sp, #7
 800c02a:	2201      	movs	r2, #1
 800c02c:	2122      	movs	r1, #34	; 0x22
 800c02e:	f7ff fd99 	bl	800bb64 <GYRO_IO_Read>
  
  ctrl_cfr &= 0x80;
 800c032:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c036:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c03a:	f88d 3006 	strb.w	r3, [sp, #6]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
  
  ctrl3 &= 0xDF;
 800c03e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c042:	f023 0320 	bic.w	r3, r3, #32
  ctrl3 |= ((uint8_t) Int1Config);   
 800c046:	ea43 0004 	orr.w	r0, r3, r4
 800c04a:	f88d 0007 	strb.w	r0, [sp, #7]
  
  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 800c04e:	2201      	movs	r2, #1
 800c050:	f10d 0006 	add.w	r0, sp, #6
 800c054:	2130      	movs	r1, #48	; 0x30
 800c056:	f7ff fd63 	bl	800bb20 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 800c05a:	2201      	movs	r2, #1
 800c05c:	2122      	movs	r1, #34	; 0x22
 800c05e:	f10d 0007 	add.w	r0, sp, #7
 800c062:	f7ff fd5d 	bl	800bb20 <GYRO_IO_Write>
}
 800c066:	b002      	add	sp, #8
 800c068:	bd10      	pop	{r4, pc}

0800c06a <L3GD20_EnableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_EnableIT(uint8_t IntSel)
{  
 800c06a:	b513      	push	{r0, r1, r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 800c06c:	2201      	movs	r2, #1
{  
 800c06e:	4604      	mov	r4, r0
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 800c070:	2122      	movs	r1, #34	; 0x22
 800c072:	f10d 0007 	add.w	r0, sp, #7
 800c076:	f7ff fd75 	bl	800bb64 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 800c07a:	b96c      	cbnz	r4, 800c098 <L3GD20_EnableIT+0x2e>
  {
    tmpreg &= 0x7F;	
 800c07c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    tmpreg |= L3GD20_INT1INTERRUPT_ENABLE;
 800c080:	f063 037f 	orn	r3, r3, #127	; 0x7f
  }
  else if(IntSel == L3GD20_INT2)
  {
    tmpreg &= 0xF7;
    tmpreg |= L3GD20_INT2INTERRUPT_ENABLE;
 800c084:	f88d 3007 	strb.w	r3, [sp, #7]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 800c088:	2201      	movs	r2, #1
 800c08a:	2122      	movs	r1, #34	; 0x22
 800c08c:	f10d 0007 	add.w	r0, sp, #7
 800c090:	f7ff fd46 	bl	800bb20 <GYRO_IO_Write>
}
 800c094:	b002      	add	sp, #8
 800c096:	bd10      	pop	{r4, pc}
  else if(IntSel == L3GD20_INT2)
 800c098:	2c01      	cmp	r4, #1
 800c09a:	d1f5      	bne.n	800c088 <L3GD20_EnableIT+0x1e>
    tmpreg &= 0xF7;
 800c09c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c0a0:	f023 0308 	bic.w	r3, r3, #8
    tmpreg |= L3GD20_INT2INTERRUPT_ENABLE;
 800c0a4:	f043 0308 	orr.w	r3, r3, #8
 800c0a8:	e7ec      	b.n	800c084 <L3GD20_EnableIT+0x1a>

0800c0aa <L3GD20_DisableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_DisableIT(uint8_t IntSel)
{  
 800c0aa:	b513      	push	{r0, r1, r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 800c0ac:	2201      	movs	r2, #1
{  
 800c0ae:	4604      	mov	r4, r0
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 800c0b0:	2122      	movs	r1, #34	; 0x22
 800c0b2:	f10d 0007 	add.w	r0, sp, #7
 800c0b6:	f7ff fd55 	bl	800bb64 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 800c0ba:	b96c      	cbnz	r4, 800c0d8 <L3GD20_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;	
 800c0bc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c0c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    tmpreg |= L3GD20_INT1INTERRUPT_DISABLE;
  }
  else if(IntSel == L3GD20_INT2)
  {
    tmpreg &= 0xF7;
 800c0c4:	f88d 3007 	strb.w	r3, [sp, #7]
    tmpreg |= L3GD20_INT2INTERRUPT_DISABLE;
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 800c0c8:	2201      	movs	r2, #1
 800c0ca:	2122      	movs	r1, #34	; 0x22
 800c0cc:	f10d 0007 	add.w	r0, sp, #7
 800c0d0:	f7ff fd26 	bl	800bb20 <GYRO_IO_Write>
}
 800c0d4:	b002      	add	sp, #8
 800c0d6:	bd10      	pop	{r4, pc}
  else if(IntSel == L3GD20_INT2)
 800c0d8:	2c01      	cmp	r4, #1
 800c0da:	d1f5      	bne.n	800c0c8 <L3GD20_DisableIT+0x1e>
    tmpreg &= 0xF7;
 800c0dc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c0e0:	f023 0308 	bic.w	r3, r3, #8
 800c0e4:	e7ee      	b.n	800c0c4 <L3GD20_DisableIT+0x1a>

0800c0e6 <L3GD20_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.        
  * @retval None
  */
void L3GD20_FilterConfig(uint8_t FilterStruct) 
{
 800c0e6:	b513      	push	{r0, r1, r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 800c0e8:	2201      	movs	r2, #1
{
 800c0ea:	4604      	mov	r4, r0
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 800c0ec:	2121      	movs	r1, #33	; 0x21
 800c0ee:	f10d 0007 	add.w	r0, sp, #7
 800c0f2:	f7ff fd37 	bl	800bb64 <GYRO_IO_Read>
  
  tmpreg &= 0xC0;
 800c0f6:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800c0fa:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
  
  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 800c0fe:	4304      	orrs	r4, r0
  
  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 800c100:	2201      	movs	r2, #1
 800c102:	2121      	movs	r1, #33	; 0x21
 800c104:	f10d 0007 	add.w	r0, sp, #7
  tmpreg |= FilterStruct;
 800c108:	f88d 4007 	strb.w	r4, [sp, #7]
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 800c10c:	f7ff fd08 	bl	800bb20 <GYRO_IO_Write>
}
 800c110:	b002      	add	sp, #8
 800c112:	bd10      	pop	{r4, pc}

0800c114 <L3GD20_FilterCmd>:
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE 
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE          
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
{
 800c114:	b513      	push	{r0, r1, r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800c116:	2201      	movs	r2, #1
{
 800c118:	4604      	mov	r4, r0
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800c11a:	2124      	movs	r1, #36	; 0x24
 800c11c:	f10d 0007 	add.w	r0, sp, #7
 800c120:	f7ff fd20 	bl	800bb64 <GYRO_IO_Read>
  
  tmpreg &= 0xEF;
 800c124:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800c128:	f020 0010 	bic.w	r0, r0, #16
  
  tmpreg |= HighPassFilterState;
 800c12c:	4304      	orrs	r4, r0
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800c12e:	2201      	movs	r2, #1
 800c130:	2124      	movs	r1, #36	; 0x24
 800c132:	f10d 0007 	add.w	r0, sp, #7
  tmpreg |= HighPassFilterState;
 800c136:	f88d 4007 	strb.w	r4, [sp, #7]
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800c13a:	f7ff fcf1 	bl	800bb20 <GYRO_IO_Write>
}
 800c13e:	b002      	add	sp, #8
 800c140:	bd10      	pop	{r4, pc}
	...

0800c144 <L3GD20_ReadXYZAngRate>:
* @brief  Calculate the L3GD20 angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float *pfData)
{
 800c144:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c146:	b087      	sub	sp, #28
  uint8_t tmpbuffer[6] ={0};
 800c148:	2300      	movs	r3, #0
  int16_t RawData[3] = {0};
  uint8_t tmpreg = 0;
  float sensitivity = 0;
  int i =0;
  
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 800c14a:	2201      	movs	r2, #1
 800c14c:	2123      	movs	r1, #35	; 0x23
{
 800c14e:	4604      	mov	r4, r0
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 800c150:	f10d 0007 	add.w	r0, sp, #7
  uint8_t tmpbuffer[6] ={0};
 800c154:	9302      	str	r3, [sp, #8]
 800c156:	f8ad 300c 	strh.w	r3, [sp, #12]
  uint8_t tmpreg = 0;
 800c15a:	f88d 3007 	strb.w	r3, [sp, #7]
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 800c15e:	f7ff fd01 	bl	800bb64 <GYRO_IO_Read>
  
  GYRO_IO_Read(tmpbuffer,L3GD20_OUT_X_L_ADDR,6);
 800c162:	2206      	movs	r2, #6
 800c164:	2128      	movs	r1, #40	; 0x28
 800c166:	a802      	add	r0, sp, #8
 800c168:	f7ff fcfc 	bl	800bb64 <GYRO_IO_Read>
  
  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & L3GD20_BLE_MSB))
 800c16c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c170:	f89d 6008 	ldrb.w	r6, [sp, #8]
 800c174:	f89d 7009 	ldrb.w	r7, [sp, #9]
 800c178:	f89d 000a 	ldrb.w	r0, [sp, #10]
 800c17c:	f89d 500b 	ldrb.w	r5, [sp, #11]
 800c180:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800c184:	f89d 100d 	ldrb.w	r1, [sp, #13]
 800c188:	f013 0f40 	tst.w	r3, #64	; 0x40
 800c18c:	d039      	beq.n	800c202 <L3GD20_ReadXYZAngRate+0xbe>
  }
  else
  {
    for(i=0; i<3; i++)
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
 800c18e:	eb07 2606 	add.w	r6, r7, r6, lsl #8
 800c192:	eb05 2000 	add.w	r0, r5, r0, lsl #8
 800c196:	f8ad 6010 	strh.w	r6, [sp, #16]
 800c19a:	f8ad 0012 	strh.w	r0, [sp, #18]
 800c19e:	eb01 2202 	add.w	r2, r1, r2, lsl #8
 800c1a2:	f003 0330 	and.w	r3, r3, #48	; 0x30
    }
  }
  
  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 800c1a6:	2b10      	cmp	r3, #16
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 800c1a8:	f8ad 2014 	strh.w	r2, [sp, #20]
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 800c1ac:	d034      	beq.n	800c218 <L3GD20_ReadXYZAngRate+0xd4>
 800c1ae:	2b20      	cmp	r3, #32
 800c1b0:	d035      	beq.n	800c21e <L3GD20_ReadXYZAngRate+0xda>
 800c1b2:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800c224 <L3GD20_ReadXYZAngRate+0xe0>
 800c1b6:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800c228 <L3GD20_ReadXYZAngRate+0xe4>
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	bf08      	it	eq
 800c1be:	eef0 7a47 	vmoveq.f32	s15, s14
    break;
  }
  /* Divide by sensitivity */
  for(i=0; i<3; i++)
  {
    pfData[i]=(float)(RawData[i] * sensitivity);
 800c1c2:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 800c1c6:	ee07 3a10 	vmov	s14, r3
 800c1ca:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c1ce:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 800c1d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c1d6:	ed84 7a00 	vstr	s14, [r4]
 800c1da:	ee07 3a10 	vmov	s14, r3
 800c1de:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c1e2:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 800c1e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c1ea:	ed84 7a01 	vstr	s14, [r4, #4]
 800c1ee:	ee07 3a10 	vmov	s14, r3
 800c1f2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c1f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c1fa:	edc4 7a02 	vstr	s15, [r4, #8]
  }
}
 800c1fe:	b007      	add	sp, #28
 800c200:	bdf0      	pop	{r4, r5, r6, r7, pc}
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 800c202:	eb06 2607 	add.w	r6, r6, r7, lsl #8
 800c206:	eb00 2005 	add.w	r0, r0, r5, lsl #8
 800c20a:	f8ad 6010 	strh.w	r6, [sp, #16]
 800c20e:	f8ad 0012 	strh.w	r0, [sp, #18]
 800c212:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 800c216:	e7c4      	b.n	800c1a2 <L3GD20_ReadXYZAngRate+0x5e>
    sensitivity=L3GD20_SENSITIVITY_500DPS;
 800c218:	eddf 7a04 	vldr	s15, [pc, #16]	; 800c22c <L3GD20_ReadXYZAngRate+0xe8>
 800c21c:	e7d1      	b.n	800c1c2 <L3GD20_ReadXYZAngRate+0x7e>
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
 800c21e:	eddf 7a04 	vldr	s15, [pc, #16]	; 800c230 <L3GD20_ReadXYZAngRate+0xec>
 800c222:	e7ce      	b.n	800c1c2 <L3GD20_ReadXYZAngRate+0x7e>
 800c224:	00000000 	.word	0x00000000
 800c228:	410c0000 	.word	0x410c0000
 800c22c:	418c0000 	.word	0x418c0000
 800c230:	428c0000 	.word	0x428c0000

0800c234 <I3G4250D_DeInit>:
  * @param  None
  * @retval None
  */
void I3G4250D_DeInit(void)
{
}
 800c234:	4770      	bx	lr

0800c236 <I3G4250D_Init>:
{
 800c236:	b513      	push	{r0, r1, r4, lr}
  uint8_t ctrl = 0x00;
 800c238:	2300      	movs	r3, #0
{
 800c23a:	4604      	mov	r4, r0
  uint8_t ctrl = 0x00;
 800c23c:	f88d 3007 	strb.w	r3, [sp, #7]
  GYRO_IO_Init();
 800c240:	f7ff fc3e 	bl	800bac0 <GYRO_IO_Init>
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG1_ADDR, 1);
 800c244:	f10d 0007 	add.w	r0, sp, #7
 800c248:	2201      	movs	r2, #1
 800c24a:	2120      	movs	r1, #32
  ctrl = (uint8_t) InitStruct;
 800c24c:	f88d 4007 	strb.w	r4, [sp, #7]
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG1_ADDR, 1);
 800c250:	f7ff fc66 	bl	800bb20 <GYRO_IO_Write>
  ctrl = (uint8_t)(InitStruct >> 8);
 800c254:	0a24      	lsrs	r4, r4, #8
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG4_ADDR, 1);
 800c256:	2201      	movs	r2, #1
 800c258:	2123      	movs	r1, #35	; 0x23
 800c25a:	f10d 0007 	add.w	r0, sp, #7
  ctrl = (uint8_t)(InitStruct >> 8);
 800c25e:	f88d 4007 	strb.w	r4, [sp, #7]
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG4_ADDR, 1);
 800c262:	f7ff fc5d 	bl	800bb20 <GYRO_IO_Write>
}
 800c266:	b002      	add	sp, #8
 800c268:	bd10      	pop	{r4, pc}

0800c26a <I3G4250D_LowPower>:
  * @param  I3G4250D_InitStruct: pointer to a I3G4250D_InitTypeDef structure
  *         that contains the configuration setting for the I3G4250D.
  * @retval None
  */
void I3G4250D_LowPower(uint16_t InitStruct)
{
 800c26a:	b507      	push	{r0, r1, r2, lr}
  uint8_t ctrl = 0x00;

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG1_ADDR, 1);
 800c26c:	2201      	movs	r2, #1
  ctrl = (uint8_t) InitStruct;
 800c26e:	f88d 0007 	strb.w	r0, [sp, #7]
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG1_ADDR, 1);
 800c272:	2120      	movs	r1, #32
 800c274:	f10d 0007 	add.w	r0, sp, #7
 800c278:	f7ff fc52 	bl	800bb20 <GYRO_IO_Write>
}
 800c27c:	b003      	add	sp, #12
 800c27e:	f85d fb04 	ldr.w	pc, [sp], #4

0800c282 <I3G4250D_ReadID>:
{
 800c282:	b507      	push	{r0, r1, r2, lr}
  GYRO_IO_Init();
 800c284:	f7ff fc1c 	bl	800bac0 <GYRO_IO_Init>
  GYRO_IO_Read(&tmp, I3G4250D_WHO_AM_I_ADDR, 1);
 800c288:	f10d 0007 	add.w	r0, sp, #7
 800c28c:	2201      	movs	r2, #1
 800c28e:	210f      	movs	r1, #15
 800c290:	f7ff fc68 	bl	800bb64 <GYRO_IO_Read>
}
 800c294:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800c298:	b003      	add	sp, #12
 800c29a:	f85d fb04 	ldr.w	pc, [sp], #4

0800c29e <I3G4250D_RebootCmd>:
{
 800c29e:	b507      	push	{r0, r1, r2, lr}
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 800c2a0:	2201      	movs	r2, #1
 800c2a2:	f10d 0007 	add.w	r0, sp, #7
 800c2a6:	2124      	movs	r1, #36	; 0x24
 800c2a8:	f7ff fc5c 	bl	800bb64 <GYRO_IO_Read>
  tmpreg |= I3G4250D_BOOT_REBOOTMEMORY;
 800c2ac:	f89d 3007 	ldrb.w	r3, [sp, #7]
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 800c2b0:	2201      	movs	r2, #1
  tmpreg |= I3G4250D_BOOT_REBOOTMEMORY;
 800c2b2:	f063 037f 	orn	r3, r3, #127	; 0x7f
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 800c2b6:	2124      	movs	r1, #36	; 0x24
 800c2b8:	f10d 0007 	add.w	r0, sp, #7
  tmpreg |= I3G4250D_BOOT_REBOOTMEMORY;
 800c2bc:	f88d 3007 	strb.w	r3, [sp, #7]
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 800c2c0:	f7ff fc2e 	bl	800bb20 <GYRO_IO_Write>
}
 800c2c4:	b003      	add	sp, #12
 800c2c6:	f85d fb04 	ldr.w	pc, [sp], #4

0800c2ca <I3G4250D_INT1InterruptConfig>:
  * @brief  Set I3G4250D Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the I3G4250D Interrupt.
  * @retval None
  */
void I3G4250D_INT1InterruptConfig(uint16_t Int1Config)
{
 800c2ca:	b513      	push	{r0, r1, r4, lr}
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 800c2cc:	2300      	movs	r3, #0
{
 800c2ce:	4604      	mov	r4, r0

  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, I3G4250D_INT1_CFG_ADDR, 1);
 800c2d0:	2201      	movs	r2, #1
 800c2d2:	f10d 0006 	add.w	r0, sp, #6
 800c2d6:	2130      	movs	r1, #48	; 0x30
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 800c2d8:	f88d 3006 	strb.w	r3, [sp, #6]
 800c2dc:	f88d 3007 	strb.w	r3, [sp, #7]
  GYRO_IO_Read(&ctrl_cfr, I3G4250D_INT1_CFG_ADDR, 1);
 800c2e0:	f7ff fc40 	bl	800bb64 <GYRO_IO_Read>

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, I3G4250D_CTRL_REG3_ADDR, 1);
 800c2e4:	f10d 0007 	add.w	r0, sp, #7
 800c2e8:	2201      	movs	r2, #1
 800c2ea:	2122      	movs	r1, #34	; 0x22
 800c2ec:	f7ff fc3a 	bl	800bb64 <GYRO_IO_Read>

  ctrl_cfr &= 0x80;
 800c2f0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c2f4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c2f8:	f88d 3006 	strb.w	r3, [sp, #6]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);

  ctrl3 &= 0xDF;
 800c2fc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c300:	f023 0320 	bic.w	r3, r3, #32
  ctrl3 |= ((uint8_t) Int1Config);
 800c304:	ea43 0004 	orr.w	r0, r3, r4
 800c308:	f88d 0007 	strb.w	r0, [sp, #7]

  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, I3G4250D_INT1_CFG_ADDR, 1);
 800c30c:	2201      	movs	r2, #1
 800c30e:	f10d 0006 	add.w	r0, sp, #6
 800c312:	2130      	movs	r1, #48	; 0x30
 800c314:	f7ff fc04 	bl	800bb20 <GYRO_IO_Write>

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, I3G4250D_CTRL_REG3_ADDR, 1);
 800c318:	2201      	movs	r2, #1
 800c31a:	2122      	movs	r1, #34	; 0x22
 800c31c:	f10d 0007 	add.w	r0, sp, #7
 800c320:	f7ff fbfe 	bl	800bb20 <GYRO_IO_Write>
}
 800c324:	b002      	add	sp, #8
 800c326:	bd10      	pop	{r4, pc}

0800c328 <I3G4250D_EnableIT>:
  *        @arg I3G4250D_INT1
  *        @arg I3G4250D_INT2
  * @retval None
  */
void I3G4250D_EnableIT(uint8_t IntSel)
{
 800c328:	b513      	push	{r0, r1, r4, lr}
  uint8_t tmpreg;

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 800c32a:	2201      	movs	r2, #1
{
 800c32c:	4604      	mov	r4, r0
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 800c32e:	2122      	movs	r1, #34	; 0x22
 800c330:	f10d 0007 	add.w	r0, sp, #7
 800c334:	f7ff fc16 	bl	800bb64 <GYRO_IO_Read>

  if (IntSel == I3G4250D_INT1)
 800c338:	b96c      	cbnz	r4, 800c356 <I3G4250D_EnableIT+0x2e>
  {
    tmpreg &= 0x7F;
 800c33a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    tmpreg |= I3G4250D_INT1INTERRUPT_ENABLE;
 800c33e:	f063 037f 	orn	r3, r3, #127	; 0x7f
  }
  else if (IntSel == I3G4250D_INT2)
  {
    tmpreg &= 0xF7;
    tmpreg |= I3G4250D_INT2INTERRUPT_ENABLE;
 800c342:	f88d 3007 	strb.w	r3, [sp, #7]
  }

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 800c346:	2201      	movs	r2, #1
 800c348:	2122      	movs	r1, #34	; 0x22
 800c34a:	f10d 0007 	add.w	r0, sp, #7
 800c34e:	f7ff fbe7 	bl	800bb20 <GYRO_IO_Write>
}
 800c352:	b002      	add	sp, #8
 800c354:	bd10      	pop	{r4, pc}
  else if (IntSel == I3G4250D_INT2)
 800c356:	2c01      	cmp	r4, #1
 800c358:	d1f5      	bne.n	800c346 <I3G4250D_EnableIT+0x1e>
    tmpreg &= 0xF7;
 800c35a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c35e:	f023 0308 	bic.w	r3, r3, #8
    tmpreg |= I3G4250D_INT2INTERRUPT_ENABLE;
 800c362:	f043 0308 	orr.w	r3, r3, #8
 800c366:	e7ec      	b.n	800c342 <I3G4250D_EnableIT+0x1a>

0800c368 <I3G4250D_DisableIT>:
  *        @arg I3G4250D_INT1
  *        @arg I3G4250D_INT2
  * @retval None
  */
void I3G4250D_DisableIT(uint8_t IntSel)
{
 800c368:	b513      	push	{r0, r1, r4, lr}
  uint8_t tmpreg;

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 800c36a:	2201      	movs	r2, #1
{
 800c36c:	4604      	mov	r4, r0
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 800c36e:	2122      	movs	r1, #34	; 0x22
 800c370:	f10d 0007 	add.w	r0, sp, #7
 800c374:	f7ff fbf6 	bl	800bb64 <GYRO_IO_Read>

  if (IntSel == I3G4250D_INT1)
 800c378:	b96c      	cbnz	r4, 800c396 <I3G4250D_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;
 800c37a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c37e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    tmpreg |= I3G4250D_INT1INTERRUPT_DISABLE;
  }
  else if (IntSel == I3G4250D_INT2)
  {
    tmpreg &= 0xF7;
 800c382:	f88d 3007 	strb.w	r3, [sp, #7]
    tmpreg |= I3G4250D_INT2INTERRUPT_DISABLE;
  }

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 800c386:	2201      	movs	r2, #1
 800c388:	2122      	movs	r1, #34	; 0x22
 800c38a:	f10d 0007 	add.w	r0, sp, #7
 800c38e:	f7ff fbc7 	bl	800bb20 <GYRO_IO_Write>
}
 800c392:	b002      	add	sp, #8
 800c394:	bd10      	pop	{r4, pc}
  else if (IntSel == I3G4250D_INT2)
 800c396:	2c01      	cmp	r4, #1
 800c398:	d1f5      	bne.n	800c386 <I3G4250D_DisableIT+0x1e>
    tmpreg &= 0xF7;
 800c39a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c39e:	f023 0308 	bic.w	r3, r3, #8
 800c3a2:	e7ee      	b.n	800c382 <I3G4250D_DisableIT+0x1a>

0800c3a4 <I3G4250D_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.
  * @retval None
  */
void I3G4250D_FilterConfig(uint8_t FilterStruct)
{
 800c3a4:	b513      	push	{r0, r1, r4, lr}
  uint8_t tmpreg;

  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG2_ADDR, 1);
 800c3a6:	2201      	movs	r2, #1
{
 800c3a8:	4604      	mov	r4, r0
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG2_ADDR, 1);
 800c3aa:	2121      	movs	r1, #33	; 0x21
 800c3ac:	f10d 0007 	add.w	r0, sp, #7
 800c3b0:	f7ff fbd8 	bl	800bb64 <GYRO_IO_Read>

  tmpreg &= 0xC0;
 800c3b4:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800c3b8:	f020 003f 	bic.w	r0, r0, #63	; 0x3f

  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 800c3bc:	4304      	orrs	r4, r0

  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG2_ADDR, 1);
 800c3be:	2201      	movs	r2, #1
 800c3c0:	2121      	movs	r1, #33	; 0x21
 800c3c2:	f10d 0007 	add.w	r0, sp, #7
  tmpreg |= FilterStruct;
 800c3c6:	f88d 4007 	strb.w	r4, [sp, #7]
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG2_ADDR, 1);
 800c3ca:	f7ff fba9 	bl	800bb20 <GYRO_IO_Write>
}
 800c3ce:	b002      	add	sp, #8
 800c3d0:	bd10      	pop	{r4, pc}

0800c3d2 <I3G4250D_FilterCmd>:
  *         @arg: I3G4250D_HIGHPASSFILTER_DISABLE
  *         @arg: I3G4250D_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void I3G4250D_FilterCmd(uint8_t HighPassFilterState)
{
 800c3d2:	b513      	push	{r0, r1, r4, lr}
  uint8_t tmpreg;

  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 800c3d4:	2201      	movs	r2, #1
{
 800c3d6:	4604      	mov	r4, r0
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 800c3d8:	2124      	movs	r1, #36	; 0x24
 800c3da:	f10d 0007 	add.w	r0, sp, #7
 800c3de:	f7ff fbc1 	bl	800bb64 <GYRO_IO_Read>

  tmpreg &= 0xEF;
 800c3e2:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800c3e6:	f020 0010 	bic.w	r0, r0, #16

  tmpreg |= HighPassFilterState;
 800c3ea:	4304      	orrs	r4, r0

  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 800c3ec:	2201      	movs	r2, #1
 800c3ee:	2124      	movs	r1, #36	; 0x24
 800c3f0:	f10d 0007 	add.w	r0, sp, #7
  tmpreg |= HighPassFilterState;
 800c3f4:	f88d 4007 	strb.w	r4, [sp, #7]
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 800c3f8:	f7ff fb92 	bl	800bb20 <GYRO_IO_Write>
}
 800c3fc:	b002      	add	sp, #8
 800c3fe:	bd10      	pop	{r4, pc}

0800c400 <I3G4250D_ReadXYZAngRate>:
* @brief  Calculate the I3G4250D angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void I3G4250D_ReadXYZAngRate(float *pfData)
{
 800c400:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c402:	b087      	sub	sp, #28
  uint8_t tmpbuffer[6] = {0};
 800c404:	2300      	movs	r3, #0
  int16_t RawData[3] = {0};
  uint8_t tmpreg = 0;
  float sensitivity = 0;
  int i = 0;

  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG4_ADDR, 1);
 800c406:	2201      	movs	r2, #1
 800c408:	2123      	movs	r1, #35	; 0x23
{
 800c40a:	4604      	mov	r4, r0
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG4_ADDR, 1);
 800c40c:	f10d 0007 	add.w	r0, sp, #7
  uint8_t tmpbuffer[6] = {0};
 800c410:	9302      	str	r3, [sp, #8]
 800c412:	f8ad 300c 	strh.w	r3, [sp, #12]
  uint8_t tmpreg = 0;
 800c416:	f88d 3007 	strb.w	r3, [sp, #7]
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG4_ADDR, 1);
 800c41a:	f7ff fba3 	bl	800bb64 <GYRO_IO_Read>

  GYRO_IO_Read(tmpbuffer, I3G4250D_OUT_X_L_ADDR, 6);
 800c41e:	2206      	movs	r2, #6
 800c420:	2128      	movs	r1, #40	; 0x28
 800c422:	a802      	add	r0, sp, #8
 800c424:	f7ff fb9e 	bl	800bb64 <GYRO_IO_Read>

  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if (!(tmpreg & I3G4250D_BLE_MSB))
 800c428:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c42c:	f89d 6008 	ldrb.w	r6, [sp, #8]
 800c430:	f89d 7009 	ldrb.w	r7, [sp, #9]
 800c434:	f89d 000a 	ldrb.w	r0, [sp, #10]
 800c438:	f89d 500b 	ldrb.w	r5, [sp, #11]
 800c43c:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800c440:	f89d 100d 	ldrb.w	r1, [sp, #13]
 800c444:	f013 0f40 	tst.w	r3, #64	; 0x40
 800c448:	d039      	beq.n	800c4be <I3G4250D_ReadXYZAngRate+0xbe>
  }
  else
  {
    for (i = 0; i < 3; i++)
    {
      RawData[i] = (int16_t)(((uint16_t)tmpbuffer[2 * i] << 8) + tmpbuffer[2 * i + 1]);
 800c44a:	eb07 2606 	add.w	r6, r7, r6, lsl #8
 800c44e:	eb05 2000 	add.w	r0, r5, r0, lsl #8
 800c452:	f8ad 6010 	strh.w	r6, [sp, #16]
 800c456:	f8ad 0012 	strh.w	r0, [sp, #18]
 800c45a:	eb01 2202 	add.w	r2, r1, r2, lsl #8
 800c45e:	f003 0330 	and.w	r3, r3, #48	; 0x30
    }
  }

  /* Switch the sensitivity value set in the CRTL4 */
  switch (tmpreg & I3G4250D_FULLSCALE_SELECTION)
 800c462:	2b10      	cmp	r3, #16
      RawData[i] = (int16_t)(((uint16_t)tmpbuffer[2 * i + 1] << 8) + tmpbuffer[2 * i]);
 800c464:	f8ad 2014 	strh.w	r2, [sp, #20]
  switch (tmpreg & I3G4250D_FULLSCALE_SELECTION)
 800c468:	d034      	beq.n	800c4d4 <I3G4250D_ReadXYZAngRate+0xd4>
 800c46a:	2b20      	cmp	r3, #32
 800c46c:	d035      	beq.n	800c4da <I3G4250D_ReadXYZAngRate+0xda>
 800c46e:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800c4e0 <I3G4250D_ReadXYZAngRate+0xe0>
 800c472:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800c4e4 <I3G4250D_ReadXYZAngRate+0xe4>
 800c476:	2b00      	cmp	r3, #0
 800c478:	bf08      	it	eq
 800c47a:	eef0 7a47 	vmoveq.f32	s15, s14
      break;
  }
  /* Multiplied by sensitivity */
  for (i = 0; i < 3; i++)
  {
    pfData[i] = (float)(RawData[i] * sensitivity);
 800c47e:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 800c482:	ee07 3a10 	vmov	s14, r3
 800c486:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c48a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 800c48e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c492:	ed84 7a00 	vstr	s14, [r4]
 800c496:	ee07 3a10 	vmov	s14, r3
 800c49a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c49e:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 800c4a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c4a6:	ed84 7a01 	vstr	s14, [r4, #4]
 800c4aa:	ee07 3a10 	vmov	s14, r3
 800c4ae:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c4b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c4b6:	edc4 7a02 	vstr	s15, [r4, #8]
  }
}
 800c4ba:	b007      	add	sp, #28
 800c4bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      RawData[i] = (int16_t)(((uint16_t)tmpbuffer[2 * i + 1] << 8) + tmpbuffer[2 * i]);
 800c4be:	eb06 2607 	add.w	r6, r6, r7, lsl #8
 800c4c2:	eb00 2005 	add.w	r0, r0, r5, lsl #8
 800c4c6:	f8ad 6010 	strh.w	r6, [sp, #16]
 800c4ca:	f8ad 0012 	strh.w	r0, [sp, #18]
 800c4ce:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 800c4d2:	e7c4      	b.n	800c45e <I3G4250D_ReadXYZAngRate+0x5e>
      sensitivity = I3G4250D_SENSITIVITY_500DPS;
 800c4d4:	eddf 7a04 	vldr	s15, [pc, #16]	; 800c4e8 <I3G4250D_ReadXYZAngRate+0xe8>
 800c4d8:	e7d1      	b.n	800c47e <I3G4250D_ReadXYZAngRate+0x7e>
      sensitivity = I3G4250D_SENSITIVITY_2000DPS;
 800c4da:	eddf 7a04 	vldr	s15, [pc, #16]	; 800c4ec <I3G4250D_ReadXYZAngRate+0xec>
 800c4de:	e7ce      	b.n	800c47e <I3G4250D_ReadXYZAngRate+0x7e>
 800c4e0:	00000000 	.word	0x00000000
 800c4e4:	410c0000 	.word	0x410c0000
 800c4e8:	418c0000 	.word	0x418c0000
 800c4ec:	428c0000 	.word	0x428c0000

0800c4f0 <LSM303AGR_AccDeInit>:
  * @param  None
  * @retval None
  */
void LSM303AGR_AccDeInit(void)
{  
}
 800c4f0:	4770      	bx	lr

0800c4f2 <LSM303AGR_AccInit>:
{  
 800c4f2:	b510      	push	{r4, lr}
 800c4f4:	4604      	mov	r4, r0
  COMPASSACCELERO_IO_Init();
 800c4f6:	f7ff fb59 	bl	800bbac <COMPASSACCELERO_IO_Init>
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG1_A, ctrl);
 800c4fa:	b2e2      	uxtb	r2, r4
 800c4fc:	2120      	movs	r1, #32
 800c4fe:	2032      	movs	r0, #50	; 0x32
 800c500:	f7ff fbaa 	bl	800bc58 <COMPASSACCELERO_IO_Write>
}
 800c504:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG4_A, ctrl);
 800c508:	2200      	movs	r2, #0
 800c50a:	2123      	movs	r1, #35	; 0x23
 800c50c:	2032      	movs	r0, #50	; 0x32
 800c50e:	f7ff bba3 	b.w	800bc58 <COMPASSACCELERO_IO_Write>

0800c512 <LSM303AGR_AccReadID>:
  * @brief  Read LSM303AGR ID.
  * @param  None
  * @retval ID 
  */
uint8_t LSM303AGR_AccReadID(void)
{  
 800c512:	b508      	push	{r3, lr}
  uint8_t ctrl = 0x00;
  
  /* Low level init */
  COMPASSACCELERO_IO_Init();
 800c514:	f7ff fb4a 	bl	800bbac <COMPASSACCELERO_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_WHO_AM_I_ADDR);
  
  return ctrl;
}
 800c518:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_WHO_AM_I_ADDR);
 800c51c:	210f      	movs	r1, #15
 800c51e:	2032      	movs	r0, #50	; 0x32
 800c520:	f7ff bbb8 	b.w	800bc94 <COMPASSACCELERO_IO_Read>

0800c524 <LSM303AGR_AccRebootCmd>:
  * @brief  Reboot memory content of LSM303AGR
  * @param  None
  * @retval None
  */
void LSM303AGR_AccRebootCmd(void)
{
 800c524:	b508      	push	{r3, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A);
 800c526:	2124      	movs	r1, #36	; 0x24
 800c528:	2032      	movs	r0, #50	; 0x32
 800c52a:	f7ff fbb3 	bl	800bc94 <COMPASSACCELERO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LSM303AGR_BOOT_REBOOTMEMORY;
 800c52e:	f060 007f 	orn	r0, r0, #127	; 0x7f
  
  /* Write value to ACC MEMS CTRL_REG5 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A, tmpreg);
 800c532:	b2c2      	uxtb	r2, r0
}
 800c534:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A, tmpreg);
 800c538:	2124      	movs	r1, #36	; 0x24
 800c53a:	2032      	movs	r0, #50	; 0x32
 800c53c:	f7ff bb8c 	b.w	800bc58 <COMPASSACCELERO_IO_Write>

0800c540 <LSM303AGR_AccFilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LSM303AGR_AccFilterConfig(uint8_t FilterStruct) 
{
 800c540:	b510      	push	{r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 800c542:	2121      	movs	r1, #33	; 0x21
{
 800c544:	4604      	mov	r4, r0
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 800c546:	2032      	movs	r0, #50	; 0x32
 800c548:	f7ff fba4 	bl	800bc94 <COMPASSACCELERO_IO_Read>
  
  tmpreg &= 0x0C;
 800c54c:	f000 000c 	and.w	r0, r0, #12
  tmpreg |= FilterStruct;
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 800c550:	ea40 0204 	orr.w	r2, r0, r4
 800c554:	2121      	movs	r1, #33	; 0x21
}
 800c556:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 800c55a:	2032      	movs	r0, #50	; 0x32
 800c55c:	f7ff bb7c 	b.w	800bc58 <COMPASSACCELERO_IO_Write>

0800c560 <LSM303AGR_AccFilterCmd>:
  *         @arg: LSM303AGR_HIGHPASSFILTER_DISABLE 
  *         @arg: LSM303AGR_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void LSM303AGR_AccFilterCmd(uint8_t HighPassFilterState)
{
 800c560:	b510      	push	{r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 800c562:	2121      	movs	r1, #33	; 0x21
{
 800c564:	4604      	mov	r4, r0
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 800c566:	2032      	movs	r0, #50	; 0x32
 800c568:	f7ff fb94 	bl	800bc94 <COMPASSACCELERO_IO_Read>
  
  tmpreg &= 0xF7;
 800c56c:	f000 00f7 	and.w	r0, r0, #247	; 0xf7
  
  tmpreg |= HighPassFilterState;
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 800c570:	ea40 0204 	orr.w	r2, r0, r4
 800c574:	2121      	movs	r1, #33	; 0x21
}
 800c576:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 800c57a:	2032      	movs	r0, #50	; 0x32
 800c57c:	f7ff bb6c 	b.w	800bc58 <COMPASSACCELERO_IO_Write>

0800c580 <LSM303AGR_AccReadXYZ>:
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  * @retval None
  */
void LSM303AGR_AccReadXYZ(int16_t* pData)
{
 800c580:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  int8_t buffer[6];
  uint8_t i = 0;
  uint8_t sensitivity = LSM303AGR_ACC_SENSITIVITY_2G;
  
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG4_A);
 800c584:	2123      	movs	r1, #35	; 0x23
{
 800c586:	4605      	mov	r5, r0
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG4_A);
 800c588:	2032      	movs	r0, #50	; 0x32
 800c58a:	f7ff fb83 	bl	800bc94 <COMPASSACCELERO_IO_Read>
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A);
 800c58e:	2124      	movs	r1, #36	; 0x24
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG4_A);
 800c590:	4606      	mov	r6, r0
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A);
 800c592:	2032      	movs	r0, #50	; 0x32
 800c594:	f7ff fb7e 	bl	800bc94 <COMPASSACCELERO_IO_Read>
  
  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_X_L_A); 
 800c598:	2128      	movs	r1, #40	; 0x28
 800c59a:	2032      	movs	r0, #50	; 0x32
 800c59c:	f7ff fb7a 	bl	800bc94 <COMPASSACCELERO_IO_Read>
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_X_H_A);
 800c5a0:	2129      	movs	r1, #41	; 0x29
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_X_L_A); 
 800c5a2:	b247      	sxtb	r7, r0
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_X_H_A);
 800c5a4:	2032      	movs	r0, #50	; 0x32
 800c5a6:	f7ff fb75 	bl	800bc94 <COMPASSACCELERO_IO_Read>
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Y_L_A);
 800c5aa:	212a      	movs	r1, #42	; 0x2a
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_X_H_A);
 800c5ac:	fa4f f980 	sxtb.w	r9, r0
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Y_L_A);
 800c5b0:	2032      	movs	r0, #50	; 0x32
 800c5b2:	f7ff fb6f 	bl	800bc94 <COMPASSACCELERO_IO_Read>
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Y_H_A);
 800c5b6:	212b      	movs	r1, #43	; 0x2b
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Y_L_A);
 800c5b8:	b244      	sxtb	r4, r0
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Y_H_A);
 800c5ba:	2032      	movs	r0, #50	; 0x32
 800c5bc:	f7ff fb6a 	bl	800bc94 <COMPASSACCELERO_IO_Read>
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Z_L_A);
 800c5c0:	212c      	movs	r1, #44	; 0x2c
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Y_H_A);
 800c5c2:	fa4f fa80 	sxtb.w	sl, r0
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Z_L_A);
 800c5c6:	2032      	movs	r0, #50	; 0x32
 800c5c8:	f7ff fb64 	bl	800bc94 <COMPASSACCELERO_IO_Read>
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Z_H_A);
 800c5cc:	212d      	movs	r1, #45	; 0x2d
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Z_L_A);
 800c5ce:	fa4f f880 	sxtb.w	r8, r0
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Z_H_A);
 800c5d2:	2032      	movs	r0, #50	; 0x32
 800c5d4:	f7ff fb5e 	bl	800bc94 <COMPASSACCELERO_IO_Read>
  
  /* Check in the control register4 the data alignment*/
  if(!(ctrlx[0] & LSM303AGR_BLE_MSB)) 
 800c5d8:	0672      	lsls	r2, r6, #25
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Z_H_A);
 800c5da:	b243      	sxtb	r3, r0
  if(!(ctrlx[0] & LSM303AGR_BLE_MSB)) 
 800c5dc:	d51a      	bpl.n	800c614 <LSM303AGR_AccReadXYZ+0x94>
  }
  else /* Big Endian Mode */
  {
    for(i=0; i<3; i++)
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1]);
 800c5de:	eb09 2707 	add.w	r7, r9, r7, lsl #8
 800c5e2:	eb0a 2404 	add.w	r4, sl, r4, lsl #8
 800c5e6:	b23f      	sxth	r7, r7
 800c5e8:	b224      	sxth	r4, r4
 800c5ea:	eb03 2308 	add.w	r3, r3, r8, lsl #8
 800c5ee:	f006 0030 	and.w	r0, r6, #48	; 0x30
    }
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL4 */
  switch(ctrlx[0] & LSM303AGR_FULLSCALE_16G)
 800c5f2:	2820      	cmp	r0, #32
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 800c5f4:	b21a      	sxth	r2, r3
  switch(ctrlx[0] & LSM303AGR_FULLSCALE_16G)
 800c5f6:	d016      	beq.n	800c626 <LSM303AGR_AccReadXYZ+0xa6>
 800c5f8:	2830      	cmp	r0, #48	; 0x30
 800c5fa:	d016      	beq.n	800c62a <LSM303AGR_AccReadXYZ+0xaa>
 800c5fc:	2810      	cmp	r0, #16
 800c5fe:	bf14      	ite	ne
 800c600:	2301      	movne	r3, #1
 800c602:	2302      	moveq	r3, #2
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
  {
    pData[i]=(pnRawData[i] * sensitivity);
 800c604:	435f      	muls	r7, r3
 800c606:	435c      	muls	r4, r3
 800c608:	4353      	muls	r3, r2
 800c60a:	802f      	strh	r7, [r5, #0]
 800c60c:	806c      	strh	r4, [r5, #2]
 800c60e:	80ab      	strh	r3, [r5, #4]
  }
}
 800c610:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 800c614:	eb07 2709 	add.w	r7, r7, r9, lsl #8
 800c618:	eb04 240a 	add.w	r4, r4, sl, lsl #8
 800c61c:	b23f      	sxth	r7, r7
 800c61e:	b224      	sxth	r4, r4
 800c620:	eb08 2303 	add.w	r3, r8, r3, lsl #8
 800c624:	e7e3      	b.n	800c5ee <LSM303AGR_AccReadXYZ+0x6e>
    sensitivity = LSM303AGR_ACC_SENSITIVITY_8G;
 800c626:	2304      	movs	r3, #4
 800c628:	e7ec      	b.n	800c604 <LSM303AGR_AccReadXYZ+0x84>
    sensitivity = LSM303AGR_ACC_SENSITIVITY_16G;
 800c62a:	230c      	movs	r3, #12
 800c62c:	e7ea      	b.n	800c604 <LSM303AGR_AccReadXYZ+0x84>

0800c62e <LSM303AGR_AccFilterClickCmd>:
  *         @arg: LSM303AGR_HPF_CLICK_DISABLE 
  *         @arg: LSM303AGR_HPF_CLICK_ENABLE
  * @retval None
  */
void LSM303AGR_AccFilterClickCmd(uint8_t HighPassFilterClickState)
{
 800c62e:	b510      	push	{r4, lr}
  uint8_t tmpreg = 0x00;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 800c630:	2121      	movs	r1, #33	; 0x21
{
 800c632:	4604      	mov	r4, r0
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 800c634:	2032      	movs	r0, #50	; 0x32
 800c636:	f7ff fb2d 	bl	800bc94 <COMPASSACCELERO_IO_Read>
  
  tmpreg &= ~(LSM303AGR_HPF_CLICK_ENABLE);
 800c63a:	f000 00fb 	and.w	r0, r0, #251	; 0xfb
  
  tmpreg |= HighPassFilterClickState;
  
  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 800c63e:	ea40 0204 	orr.w	r2, r0, r4
 800c642:	2121      	movs	r1, #33	; 0x21
}
 800c644:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 800c648:	2032      	movs	r0, #50	; 0x32
 800c64a:	f7ff bb05 	b.w	800bc58 <COMPASSACCELERO_IO_Write>

0800c64e <LSM303AGR_AccIT1Enable>:
  *         @arg   LSM303AGR_IT1_WTM
  *         @arg   LSM303AGR_IT1_OVERRUN
  * @retval None
  */
void LSM303AGR_AccIT1Enable(uint8_t LSM303AGR_IT)
{
 800c64e:	b510      	push	{r4, lr}
  uint8_t tmpval = 0x00;
  
  /* Read CTRL_REG3 register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG3_A);
 800c650:	2122      	movs	r1, #34	; 0x22
{
 800c652:	4604      	mov	r4, r0
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG3_A);
 800c654:	2032      	movs	r0, #50	; 0x32
 800c656:	f7ff fb1d 	bl	800bc94 <COMPASSACCELERO_IO_Read>
  
  /* Enable IT1 */
  tmpval |= LSM303AGR_IT;
 800c65a:	4320      	orrs	r0, r4
  
  /* Write value to MEMS CTRL_REG3 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG3_A, tmpval);
 800c65c:	b2c2      	uxtb	r2, r0
}
 800c65e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG3_A, tmpval);
 800c662:	2122      	movs	r1, #34	; 0x22
 800c664:	2032      	movs	r0, #50	; 0x32
 800c666:	f7ff baf7 	b.w	800bc58 <COMPASSACCELERO_IO_Write>

0800c66a <LSM303AGR_AccClickITEnable>:
  * @brief  Click interrupt enable
  * @param  ITClick: the selected interrupt to enable
  * @retval None
  */
void LSM303AGR_AccClickITEnable(uint8_t ITClick)
{  
 800c66a:	b510      	push	{r4, lr}
  uint8_t tmpval = 0x00;
  
  /* Read CLICK_CFR register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CLICK_CFG_A);
 800c66c:	2138      	movs	r1, #56	; 0x38
{  
 800c66e:	4604      	mov	r4, r0
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CLICK_CFG_A);
 800c670:	2032      	movs	r0, #50	; 0x32
 800c672:	f7ff fb0f 	bl	800bc94 <COMPASSACCELERO_IO_Read>
  
  /* Enable the selected interrupt */
  tmpval |= ITClick;
 800c676:	4320      	orrs	r0, r4
  
  /* Write value to MEMS CLICK CFG register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CLICK_CFG_A, tmpval);
 800c678:	b2c2      	uxtb	r2, r0
 800c67a:	2138      	movs	r1, #56	; 0x38
 800c67c:	2032      	movs	r0, #50	; 0x32
 800c67e:	f7ff faeb 	bl	800bc58 <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Threshold on Z axis */
  tmpval = 0x0A;
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CLICK_THS_A, tmpval);
 800c682:	220a      	movs	r2, #10
 800c684:	213a      	movs	r1, #58	; 0x3a
 800c686:	2032      	movs	r0, #50	; 0x32
 800c688:	f7ff fae6 	bl	800bc58 <COMPASSACCELERO_IO_Write>
  
  /* Configure Time Limit */
  tmpval = 0x05;
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_LIMIT_A, tmpval);
 800c68c:	2205      	movs	r2, #5
 800c68e:	213b      	movs	r1, #59	; 0x3b
 800c690:	2032      	movs	r0, #50	; 0x32
 800c692:	f7ff fae1 	bl	800bc58 <COMPASSACCELERO_IO_Write>
  
  /* Configure Latency */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_LATENCY_A, tmpval);
 800c696:	2205      	movs	r2, #5
 800c698:	213c      	movs	r1, #60	; 0x3c
 800c69a:	2032      	movs	r0, #50	; 0x32
 800c69c:	f7ff fadc 	bl	800bc58 <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Window */
  tmpval = 0x32;
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_WINDOW_A, tmpval);
 800c6a0:	2232      	movs	r2, #50	; 0x32
}
 800c6a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_WINDOW_A, tmpval);
 800c6a6:	213d      	movs	r1, #61	; 0x3d
 800c6a8:	4610      	mov	r0, r2
 800c6aa:	f7ff bad5 	b.w	800bc58 <COMPASSACCELERO_IO_Write>

0800c6ae <LSM303AGR_AccZClickITConfig>:
  * @brief  Click on Z axis interrupt config
  * @param  None
  * @retval None
  */
void LSM303AGR_AccZClickITConfig(void)
{  
 800c6ae:	b508      	push	{r3, lr}
  /* Configure low level IT config */
  COMPASSACCELERO_IO_ITConfig();
 800c6b0:	f7ff faae 	bl	800bc10 <COMPASSACCELERO_IO_ITConfig>
  
  /* Select click IT as INT1 interrupt */
  LSM303AGR_AccIT1Enable(LSM303AGR_IT1_CLICK);
 800c6b4:	2080      	movs	r0, #128	; 0x80
 800c6b6:	f7ff ffca 	bl	800c64e <LSM303AGR_AccIT1Enable>
  
  /* Enable High pass filter for click IT */
  LSM303AGR_AccFilterClickCmd(LSM303AGR_HPF_CLICK_ENABLE);
 800c6ba:	2004      	movs	r0, #4
 800c6bc:	f7ff ffb7 	bl	800c62e <LSM303AGR_AccFilterClickCmd>
  
  /* Enable simple click IT on Z axis, */
  LSM303AGR_AccClickITEnable(LSM303AGR_Z_SINGLE_CLICK);
}
 800c6c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  LSM303AGR_AccClickITEnable(LSM303AGR_Z_SINGLE_CLICK);
 800c6c4:	2010      	movs	r0, #16
 800c6c6:	f7ff bfd0 	b.w	800c66a <LSM303AGR_AccClickITEnable>
	...

0800c6cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800c6cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 800c704 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800c6d0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800c6d2:	e003      	b.n	800c6dc <LoopCopyDataInit>

0800c6d4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800c6d4:	4b0c      	ldr	r3, [pc, #48]	; (800c708 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800c6d6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800c6d8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800c6da:	3104      	adds	r1, #4

0800c6dc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800c6dc:	480b      	ldr	r0, [pc, #44]	; (800c70c <LoopForever+0xa>)
	ldr	r3, =_edata
 800c6de:	4b0c      	ldr	r3, [pc, #48]	; (800c710 <LoopForever+0xe>)
	adds	r2, r0, r1
 800c6e0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800c6e2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800c6e4:	d3f6      	bcc.n	800c6d4 <CopyDataInit>
	ldr	r2, =_sbss
 800c6e6:	4a0b      	ldr	r2, [pc, #44]	; (800c714 <LoopForever+0x12>)
	b	LoopFillZerobss
 800c6e8:	e002      	b.n	800c6f0 <LoopFillZerobss>

0800c6ea <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800c6ea:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800c6ec:	f842 3b04 	str.w	r3, [r2], #4

0800c6f0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800c6f0:	4b09      	ldr	r3, [pc, #36]	; (800c718 <LoopForever+0x16>)
	cmp	r2, r3
 800c6f2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800c6f4:	d3f9      	bcc.n	800c6ea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800c6f6:	f7fc f8bd 	bl	8008874 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800c6fa:	f7f3 fe19 	bl	8000330 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800c6fe:	f7fb f9a9 	bl	8007a54 <main>

0800c702 <LoopForever>:

LoopForever:
    b LoopForever
 800c702:	e7fe      	b.n	800c702 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800c704:	20008000 	.word	0x20008000
	ldr	r3, =_sidata
 800c708:	0801c1f8 	.word	0x0801c1f8
	ldr	r0, =_sdata
 800c70c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800c710:	20000c24 	.word	0x20000c24
	ldr	r2, =_sbss
 800c714:	20000c24 	.word	0x20000c24
	ldr	r3, = _ebss
 800c718:	20001dd8 	.word	0x20001dd8

0800c71c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800c71c:	e7fe      	b.n	800c71c <ADC1_2_IRQHandler>
	...

0800c720 <register_fini>:
 800c720:	4b02      	ldr	r3, [pc, #8]	; (800c72c <register_fini+0xc>)
 800c722:	b113      	cbz	r3, 800c72a <register_fini+0xa>
 800c724:	4802      	ldr	r0, [pc, #8]	; (800c730 <register_fini+0x10>)
 800c726:	f7f3 bde1 	b.w	80002ec <atexit>
 800c72a:	4770      	bx	lr
 800c72c:	00000000 	.word	0x00000000
 800c730:	08000305 	.word	0x08000305

0800c734 <_init>:
 800c734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c736:	bf00      	nop
 800c738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c73a:	bc08      	pop	{r3}
 800c73c:	469e      	mov	lr, r3
 800c73e:	4770      	bx	lr

0800c740 <_fini>:
 800c740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c742:	bf00      	nop
 800c744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c746:	bc08      	pop	{r3}
 800c748:	469e      	mov	lr, r3
 800c74a:	4770      	bx	lr
